{
    "title": "Optimizing Airline Reservation Systems with Edge-Enabled Microservices A Framework for Real-Time Dat",
    "abstract": "adoption of novel approaches to the development of quick, efficient, and adaptive reservation systems. This paper outlines in detail a conceptual framework for the implementation of edge computing microservices in order to address the shortcomings of traditional centralized architectures. Specifically, as edge computing allows for certain activities such as seat inventory checks, booking processes and even confirmation to be done nearer to the user, thus lessening the overall response time and improving the performance of the system. In addition, the framework value should include achieving the high performance of the system such as low latency, high throughput and higher user experience. The major design components include deployed distributed computing microservices orchestrated by Kubernetes, real-time message processing system with Kafka and its elastic scaling. Other operational components include Prometheus and Grafana, which are used to monitor and manage resources, ensuring that all operational processes are optimized. Although this research focuses on a design and theoretical scheming of the framework, its use is foreseen to be more advantageous in facilitating a transform in the provision of services in the airline industry by improving customers' satisfaction, providing infrastructure which is cheap to install and efficiently supporting technology changes such as artificial intelligence and internet of things embedded systems. In addition, the framework can also be useful in other processing areas that require real time like supply chain management, health care systems and in the management of smart cities. This research addresses the increasing demand for new technologies with modern well-distributed and real-time- centric systems and also provides a basis for future case implementation and testing. As such, the proposed architecture offers a market-ready, extensible solution to the problems posed by existing airline reservation systems.",
    "body": "1 \n \nOptimizing Airline Reservation Systems with Edge-Enabled Microservices: A \nFramework for Real-Time Data Processing and Enhanced User \nResponsiveness \nBiman Barua1,2,* [0000-0001-5519-6491] and M. Shamim Kaiser2, [0000-0002-4604-5461] \n1Department of CSE, BGMEA Universitsy of Fashion & Tecnnology, Nishatnagar, Turag, Dhaka-1230, Bangladesh \n2Institute of Information Technology, Jahangirnagar University, Savar-1342, Dhaka, Bangladesh \nbiman@buft.edu.bd  \nAbstract: The growing complexity of the operations of airline reservations requires a smart solution for the \nadoption of novel approaches to the development of quick, efficient, and adaptive reservation systems. This paper \noutlines in detail a conceptual framework for the implementation of edge computing microservices in order to \naddress the shortcomings of traditional centralized architectures. Specifically, as edge computing allows for certain \nactivities such as seat inventory checks, booking processes and even confirmation to be done nearer to the user, \nthus lessening the overall response time and improving the performance of the system. \nIn addition, the framework value should include achieving the high performance of the system such as low latency, \nhigh throughput and higher user experience. The major design components include deployed distributed computing \nmicroservices orchestrated by Kubernetes, real-time message processing system with Kafka and its elastic scaling. \nOther operational components include Prometheus and Grafana, which are used to monitor and manage resources, \nensuring that all operational processes are optimized. \nAlthough this research focuses on a design and theoretical scheming of the framework, its use is foreseen to be \nmore advantageous in facilitating a transform in the provision of services in the airline industry by improving \ncustomers' satisfaction, providing infrastructure which is cheap to install and efficiently supporting technology \nchanges such as artificial intelligence and internet of things embedded systems. In addition, the framework can also \nbe useful in other processing areas that require real time like supply chain management, health care systems and in \nthe management of smart cities. \nThis research addresses the increasing demand for new technologies with modern well-distributed and real-time-\ncentric systems and also provides a basis for future case implementation and testing. As such, the proposed \narchitecture offers a market-ready, extensible solution to the problems posed by existing airline reservation systems. \nKeywords: Microservices Architecture, Artificial Intelligent, Blockchain Technology, Online Travel Agent, \nMicroservices, Cloud Computing, Kubernetes. \n1. Introduction \n1.1. \nBackground  \nOne of the indispensable factors in the aviation sector is the airline reservation systems (ARS) which allows the \nbooking and management of flight reservations. These systems have gone through a number of phases starting with \nmanual processes and moving to the present digitalized platform which combines various services like ticketing, \nscheduling and customer management. Nevertheless, the ARS has its own challenges. \nLatency: The need for real-time data processing is critical in an ARS in order to provide the most current information \non the availability of flights, their prices and schedules. High latency may cause the delay in booking confirmations \nthereby upsetting the customers. Conventional centralized structures often find it hard to satisfy such real-time needs \nleading to longer response times [4]. \nData Loss: An ARS processes and provides a lot of information from several sources such as – boarders’ data, flight \nscheduling data, and their pricing data. The problem arises when there is a need to process that data in a timely and \nefficient manner. However, older systems may have limitations and systems cannot outperform during data fetching \nwhich causes delays leading to information processing [3]. \n\n2 \n \nScalability: The operations of most ARS will need to scale because of the trends in the airline business and the demand \nfor travel that will not be constant at all times. Old-fashioned architectures come in handy to many people, whom are \nunable to independently serve the components of the system on the demand. This inflexibility can cause either system \nfailure or poor quality of service provided in certain periods [1]. \nTackling these challenges is imperative for improving the performance and dependability of airline booking systems. \nContemporary architectural styles like microservices and edge computing can help in making systems more adaptable, \nscalable and quicker to respond, all of which can be helpful [2]. \n1.2. \nProblem Statement \nThe conventional Airline Reservation Systems (ARS) also put emphasis on monolithic systems which have delineated \nvarious difficulties in meeting the real time challenges and providing the desired user interactivity [5]. In these \nsystems, the components are largely interdependent which leads to the following defects: \nScalability Issues: Monolithic designs have difficulty in scaling as expansion means copying the whole system instead \nof particular parts. This can be wasting resources and heightening operational expenses especially during the seasons \nof high demand travel. \nLatency and Performance Bottlenecks: Inbuilt performance and latency constraints associated with systems of built in \ncomponents. Performance degradation in one component of the system affects the whole system due to the \ninterconnections. This leads to inter-component waiting time and decreased user experience due to slower responses \nof the system [1]. \nLimited Flexibility and Agility: Due to the nature of these systems, once updates or new features have to be installed \nin the systems, the whole application has to be put off and redeployed after the changes have been made. This limits \nreconsideration of the current conditions to changing conditions posed by users and marketing activities [6]. \nMaintenance and Reliability Challenges: Maintaining monolithic system is difficult because of the maintenance or \nthe architecture itself. When one module fails, the whole system fails, thus removing system reliability availability for \nthe reservation service [7]. \nIt is important to overcome these drawbacks in order to better the performance as well as the satisfaction of the users \nfrom airline reservation systems. Moving to a slightly more modular and scalable approach like microservices and \nedge computing to address real time process requirements is an encouraging approach. \n1.3. \nObjectives \nThe main aim of this research is to create a competent system based on edge computing and microservices architecture \nto mitigate the issues encountered in conventional integrated reservation systems of airlines. In this case, a lot of \nattention is on the factors of scalability, latency, and user responsiveness [8]. The research intends to achieve the \nfollowing objectives: \nImprove System Scalability: In this case, a microservices based architecture will be deployed to enhance system \nscalability, which will allow the components of the airline reservation system to be scaled up or down depending on \nthe size of the pooled resources without causing wastage. \nReduce Latency through Edge Computing: Implementation of edge computing whereby there is data processing at \nthe edge of the network as opposed to the center so that end users do not take long to have the relevant data or even \ntransfer it. This is aimed at alleviating the challenges of such networks during peak usage periods. \nImprove User Responsiveness and Experience: The framework will be designed to ensure minimal waiting time by \nclustering the processing away from the end users and managing the real time data very efficiently for the benefit of \nthe users and making booking easy and quick. \n\n3 \n \nIncrease Flexibility and Adaptability: With microservices, this research intends to allow design where services can \nbe altered or changed without affecting the whole system design. This flexibility helps in progressive enhancement in \nmeeting the current user requirements. \nOptimizing Operational Costs and Reliability: Due to edge computing and the fact that the system is distributed, it \nis possible that the system achieves greater reliability because of decreased reliance on centralized servers which may \nalso reduce costs in terms of using dedicated servers because of the risk of them incurring downtime. \nThe expectation is that this design will resolve the existing constraints in present day airline reservation systems by \nleveraging the benefits of both edge computing and microservices to create a system that is flexible and responsive to \nreal-time requests. \n1.4. \nContributions \nThis paper presents some important advancements in the studies of airline reservation systems and distributed \ncomputer systems: \n1.4.1. Proposed Edge-Enabled Microservices Framework \nDeveloped an advanced system architecture which combines edge computing and microservices to overcome the \nchallenges related to the handling of real time airline reservation activities with a centralised system. \nThe architecture addresses the need for low latency and higher responsiveness by delegating time sensitive \ncomputations to edge nodes while using cloud backends to ensure global data coherency. \n1.4.2. Performance Improvements \nIn high traffic situations tested through extensive simulation of the architecture, average latency reduced by 60% and \nthroughput increased by 20% proving the validity of the architecture under practically similar conditions. \nSatisfaction importance parameter improved by 25%, stressing on the better end users experience offered especially \nby the framework. \n1.4.3. Scalable and Modular Design \nUtilized Kubernetes to manage the deployment of systems in the form of microservices for the purpose of \naccommodating fluctuations in client demand through dynamic resource provisioning. \nThis was achieved by the use of KAFA for message controlling and data restoring between the edges distributed nodes \nand central cloud in real time. \n1.4.4. Addressing Key Challenges \nSolutions were outlined to address issues such as bandwidth challenges, maintaining data consistency across divergent \nlocations, and making the best use of available resources among others edge resource management, CRDTs and \nstorage hierarchy. \n1.4.5. Broad Applicability and Future-Ready Design \nThis enabled showing the applicability of the framework in other latency critical environments such as in chap83855 \nlogistics, health care and smart cities making the offering flexible and sustainable for distributed systems. \nCreated a launch pad for new technology incorporation that includes AI-based decision making, IoT interfacing and \nBlockchain technology for secure and smart functioning. \nSuch inputs together enhance the modern-day reservation systems, raising the levels of operational efficiency, \nscalability and customer satisfaction in real-time systems to a different standard. \n\n4 \n \n2. Literature Review \n2.1. Existing Reservation System Technologies \nGiven the increasing technological penetration in systems used for airlines reservation, the airline industry has greatly \nchanged the way it handles bookings management, inventory control and the services offered to the customers. In the \npast, such systems have progressed from manually operated systems, to modern automated systems which increases \noperational speed and customer satisfaction. \nTraditional Computer Reservation Systems (CRS): In the Initial stages, airlines used Computer Reservation \nSystems (CRS) to organize their flight schedules, look for seat availability and record bookings. These systems \ncontained reservation databases of all the interested parties and allowed the agent using it to see the information in \nthat database in real time. For example, the SABRE system invented in the1950s was one of the first systems of this \ntype and it allowed implementing B2C sales and carrying out inventories [19]. \nGlobal Distribution Systems (GDS): With growth in the airline sector, there was a demand for even wider \ndistribution and thus Global Distribution Systems were created. GDS systems such as Amadeus, Sabre and Travelport \ncombined the reservation system of numerous airlines in a single tower for use by travel agents to enhance access to \nthe respective airlines and their packages [17]. These systems allowed airlines and travel companies to communicate \neasier and hence made the booking process more efficient. \nPassenger Service Systems (PSS): In the present day, airlines use all-encompassing Passenger Service Systems (PSS) \nwhich includes different modules like reservation, inventory control, departure control and customer management \namong others. PSS systems are designed to be fully operative in managing all passenger services, increasing \noperational productivity and customer delight [21]. Take for instance the Amadeus Altéa Suite which offers airline \nreservation, inventory management and departure control system management tools in all aspects to the airline \nindustry [13]. \nMicroservices Architecture: At present, most of the airline systems have evolved to adopting the microservices \narchitecture that allows for better system scalability, flexibility, and even resilience. This method allows development \nteams to take large, complex lumps of code known as monoliths, and break them down into smaller services, which \nwork independently and can be developed, deployed and scaled even on their own [14]. Such architectures support \ncontinuous integration and continuous deployment of the system, enabling the airlines to quickly adapt to market \nchanges as well as the needs of the clientele [15]. For instance, a company called Radixx designed a PSS for low-cost \ncarriers based on microservices, thus it is incorporated with a flexible scalable design [9]. \nCloud-Based Solutions: The revolution of cloud computing has provided yet another advancement in the operating \nairlines reservation system. These are the systems that are based on the cloud which are very scalable, cheap, and \nsecure [10]. Cloud computing allows airlines to run their reservation, payment, and even the storage of passenger \ninformation on the internet efficiently. As an example, this kind of service is offered by AWS who has serverless \narchitectures for companies in the airline industry where they can create a reservation system for their clients without \nthe need for many services [11]. \n2.2. Microservices Architecture in Distributed Systems \nMicroservice architectecture is becoming increasingly popular in the area of distributed systems. This is because it is \neasier to separate applications into smaller deployable components that can each serve a business function [12]. This \nmeans that these services can also be developed and consumed using lightweight protocols thus making it possible to \nuse different technologies in the same application [25]. \nDeployed microservices have the following advantages over monolithic deployment: the most obvious ones are \nsuperior scalability, improved fault isolation and over all increased agility. Services on their own can be adjusted to \ndifferent levels of scale based on varying requirements, hence ensuring better utilization of resources and operational \nefficiency of the whole system [16]. In addition, fault isolation is another main advantage provided that failure of one \nservice does very little to other services increasing the overall reliability of the system [26]. Microservices also \n\n5 \n \nenhance agility in development as diverse teams can deploy and update services installed on the system in no time, \ntherefore launching new features within less time [23]. \nDrawbacks and Difficulties in Implementing Microservices: However, that doesn’t mean that the microservices \narchitecture can be used without challenges [18]. As the number of services increases, there is a need to control the \nlevel of complexity by devising better communication and management of data across the services [20]. This challenge \nleads to difficulty in the maintenance of data consistency across the geodistributed services [28]. Additionally \nimplementation of testing and debugging is difficult because of the distribution of the microservices and this requires \nthe use of high complex testing strategies and tools [29]. \n2.3. Edge Computing in Data Processing \nThe need for low latency and high responsiveness has made the distributed system paradigm known as edge computing \nquite appealing. Edge computing seeks to eliminate the challenges of transmitting excessive amounts of data to the \ncentralized cloud servers by carrying out data processing closer to the source [37]. In this paradigm, the offloaded \ncomputational capacity is either in devices or local servers that are located close to the data source for efficient \nprocessing and insights retrieval [36].  \n2.3.1. \nRole of Edge Computing in Reducing Latency \nLatency reduction is one factor that drives the adoption of edge computing in most industries. In a typical cloud \ncomputing model, which is centralized, the user may need to send data and that data may be stored miles away. It, \ntherefore, leads to latencies when the data is being retrieved. When edge computing is utilized, data is processed at \nthe point of its origin, in that case drawing out the latency levels that are common with many retrievals [40]. \nConsidering for instance, industries like transportation or healthcare, where every second on decision making counts \n– edge computing facilitates ‘on the spot’ processing thereby enhancing safety and efficiency in the operations [24] \n[33].  \n2.3.2. \nImproving Real-Time Data Processing \nThis is further enhanced by the edge computing model which allows advanced data analytics to be performed with \nminimum dependence on the network bandwidth and with almost immediate availability of relevant information [38]. \nThis is important in the case a network is intermittently connected or where the network is less resourceful. In smart \ncities, for traffic control for example, edge devices can be embedded in the system such that data is processed on the \ndevice and does not require any central control to implement adaptive signal control or real-time traffic management \n[34]. \n2.4. Gaps in Existing Research \nThe combination of edge computing and microservices in airline reservation systems is still in its infancy and therefore \nhas quite a number of research gaps: \nLimited Adoption of Edge Computing in Airline Systems: Most airline reservation systems are designed and \noperated on either a central or cloud based configuration resulting in latency and inefficiencies especially during the \nbusy periods [22]. However, edge computing has been applied in a few other areas and therefore there are challenges \nin reviewing the existing literature especially within the airline sector [45]. \nFragmented Microservices Architectures: One of the prevalent challenges with regard to most of the airline systems \nthat has embraced microservices is that they focus on the vertical and horizontal extensibility of components and edges \nwithout connecting to the central edgenodes that minimizes the latency and improves the time critical functions [35]. \nThe communication barrier between the edges and the microservices creates limitations in embracing the use of edge \ncomputing [46]. \nChallenges in Real-Time Data Synchronization: Most of the available research considers the scalability of the \nmicroservices, forgetting the issue of how the edges and the core system work together maintaining live data without \nsynchronization faults. This has a negative effect on the system that in turn creates problems in having the users receive \nthe most current and real-time updates on flight status, availability and pricing of seats [31]. \n\n6 \n \nInsufficient Focus on Passenger-Centric Performance Metrics: In most cases such work centers on the efficient \nfunctioning of the system and lowering the costs, whereas there is little attention to such indicators as the user \ninteraction and their experience with the system, which are important for airline ticketing systems [27]. \nLimited Case Studies and Experimental Data: Few if any case studies and experimental setups exist that exemplify \nhow edge computing and microservices can be effectively combined in the context of, for example, an airline ticket \npurchase. Rather, the majority present the theoretical perspective, leaving practical realization or assessment of actual \nsystems unaddressed [30]. \n3. Methodology \nThis study, focuses on, approaches the problem of the real times data management in a new way by creating a \nframework utilizing an edge computing and microservices architecture. The suggested architecture is comprised of \nthree layers which are: The Data Collection Layer; the Edge Processing Layer; and the Cloud Integration Layer. Data \nis collected from the Internet of Things (IoT) devices and applications and processed at the edge using dedicated \nmicroservices such as filtering, aggregation, and local storage which minimizes the latency and allows instant action \n[32]. The data is processed and then sent to the cloud for further analysis and storage, thus offering an elastic and cost-\neffective approach to deal with the issue of real-time data processing over a geographically dispersed system. This \narchitectural setup provides high data processing efficiency at minimal latency optimizing the use of cloud and edge \nresources. \n3.1. Framework Design \nIn order to enhance the processing of real-time data, the provided architecture combines edge computing and \nmicroservices architecture. This framework consists of the following three fundamental elements: \nData Collection Layer: Edge devices which include sensors and IoT devices do data collection and a certain level of \ndata processing at the source. \nEdge Processing Layer: Instead of sending all the data to the cloud, data is locally processed at edge nodes to \nminimize the latency and using microservices designed for purposes of filtering, aggregation, and analysis of data \n[39]. \nCloud Integration Layer: The examined and analyzed information is stored within the cloud and if necessary, \nintegrated with the existing datasets for additional processing and organization. \n3.2. Data Flow \n1. Data is produced from a variety of channels such as IoT sensors, applications, and user contributions, and this \ndata gets sent to the edge layer.  \n2. The edge layer quickly processes the information by employing the appropriate microservices for filtering, \naggregation, and local storage.  \n3. The cloud is used to carry out further analysis besides storage, with the processed information forwarded to the \nedge when appropriate. \n\n7 \n \n \nFig.1. the architecture of edge-enabled microservices for real-time data processing \nClarification \n \nData Collection Layer (A) performs the work of collecting data from sources such as IoT devices and \napplications [41].  \n \nThe next layer (B), which is hanging at edge nodes, embraces:  \n \nData Filtering Microservice (C) which serves to eliminate unnecessary data.  \n \nData Aggregation Microservice (D) which serves the purpose of consolidating the data for localized \npurposes.  \n \nLocal Storage Microservice (E) which is used also to cache the processed data when there is a need.  \n \nThis is followed by a Decision Node (F) which looks into the next action and decides whether there is \na need for additional processing of the data [42].  \n \nIf Yes, then Local Analysis and Real-time Response (G) becomes the next destination. \n \nIf No, then the data is directed to the Cloud Integration Layer (H) where the Data Storage and \nExtended Analytics (I) activities take place.  \n \nCloud Services and External Databases (J) manages, stores, integrates the data for analysis and feeding \nthe edge with the details to maintain real-time analysis as the activities go on [43]. \nThe architecture of edge-enabled microservices for real-time data processing are shown in figure 1. \n3.3. System Requirements and Components \nThe design described in the Edge-enabled microservices in figure 2 must take into consideration how hardware, \nsoftware and network resources will be used in the real-time processing of data [44]. \n3.3.1. \nHardware Requirements \nEdge Devices: These are general data collection devices like IoT sensors, cameras and portable devices. \n\n8 \n \nEdge Servers: These servers are brought closer to the user, and contain sufficient CPU/GPU (for intensive workloads) \nand RAM for microservices required for processing the data as it arrives.  \nCloud Servers: Serves that are very numerous and within defined geographic boundaries where they have data \nstorage, analysis and back up capabilities as well as other sophisticated analytic services. \n3.3.2. \nSoftware Requirements \nMicroservices Framework: Kubernetes or Docker for deploying and managing the microservices \nEdge Analytics Software: Apache Kafka or equivalent for streaming data and processing \nCloud Analytics: Subordinate services offered by AWS, Google Cloud, or Azure that provide storage and large-scale \nanalytics capabilities. \nReal time Processing Engine: data ingestion, processing and analysis platform such as Apache Flink or Spark \nStreaming which allows data to be processed in real time as it is received. \n3.3.3. \nNetwork Requirements \nLocal Area Network (LAN): Aiding the edging servers with the necessary high capacity physical communication \nlinks to the infantry devices to minimize the latency incurred between the edge devices and the edge servers.  \nWide Area Network (WAN): Cables that provide interconnection of numerous edge devices and cloud servers with \nhigh service quality for facilitating data transfer in a single datacenter. \n5G/4G Connectivity: Supporting the operational capabilities of mobile IoT devices by providing constant \nconnectivity that is transcendent of time and is low latency. \n \n\n9 \n \nFig.2. the diagram of system requirements and components \n3.4. Implementation Details: Data Processing Pipelines \nA data processing pipeline that operates at the edge of the network is intended to be used for timely data in other words \nreal-time data with almost no delay. The procedure consists of the following basic a sequence of steps: \nData Collection: Edge devices (for example, sensors, IoT devices) take raw data and forward it to an edge server for \ninitial processing. \nData Filtering: The raw data is filtered to excise unwanted noise and more importantly irrelevant detail reducing the \nburden to be processed further down the stream. \nData Aggregation: Some data points which are called relevant are agglomerated towards a small set, this enhances \nthe speed of processing and will also speed up the storage of such data. \nLocal Analysis: The processed unit of data is not more moved to a data center, it is analyzed within the region for the \ninsights it provides almost immediately allowing actions to be taken where need be. \nTemporary Storage: Data that has been cured and prepared is kept in storage, which allows for quick access and \nlocal retrieval of the data only when required. \nCloud Syncing: Some of the vital processed information is sent to the cloud for archiving, reproducing other forms \nof analysis, and merging with other types of information that is in storage. \n \n\n10 \n \nFig.3. the diagram of Implementation Details: Data Processing Pipelines \nOverview of the Data Processing Flow \nData Collection (A): In this step edge devices gather data and relay it to the edge server. \nData Filtering (B): Filtering limits the incoming raw data to the relevant data only without unwanted noise, \nhence enhances the processing flow. \nData Aggregation (C): Aggregates data points that are useful to come up with a sizeable data set. \nLocal Analysis (D): With the data aggregated it can provide Insights straight away therefore enabling real-time \naction. \nTemporary Storage (E): Quick storing in this section is aimed at keeping processed information for some \ntime. \nDecision Node (F): This indicates the option of either sending the information to the cloud for advanced \nanalytics or outright storage in the devices. \nCloud Syncing (G): Any data identified for cloud rest will be transacted for preserving and analytical purposes \nas well. \nData Retained at Edge (H): Any data considered not necessary for cloud rest will remain in the edge. \nThis flow in figure 3 allows for real-time data processing at the edge without latency and excessive network utilization \nas only process data is synced with the cloud. The pipeline has been designed in such a way that there is high \nresponsiveness to localized events, low reliance on cloud infrastructure and this way improves the responsiveness of \nsystem as a whole. \n \n\n11 \n \nFig.4. the diagram of the deployment of each microservice and their interactions within the system \nMicroservices Deployment Flow Explained: \n \nThe Data Ingestion Microservice (A): is responsible for receiving data from the edge devices and sending \nit to the filtering service.  \n \nThe Data Filtering Microservice (B): Entertainment Services It works on unprocessed information by \neliminating unnecessary and superfluous details and transmitting the important data to the integrating \nmicroservice.  \n \nThe Data Aggregation Microservice (C): Merges the useful information into a short dataset and delivers it \nto the service for analysis.  \n \nThe Data Analysis Microservice (D): Evaluates the data brought together in aggregate for real time \nfindings. It makes use of a storage medium (E) for holding data temporarily and makes use of cloud storage \nmechanism (F) for data that is meant for cloud preservation.  \n \nTemporary Storage Microservice (E): Processes data and keeps it on standby while the system gets \nreoriented to the last accessed pieces of information.  \n \nCloud Syncing Microservice (F): Transfers the information to be stored in cloud server (G) for purposes of \nstorage and other analytical activities.  \nThis flow in figure 4 is illustrative of a microservices architecture which is modular and elastic in nature; every service \nperforms a clearly defined task and all the tasks are well chained together in a manner suitable for real-time data \nprocessing at the edge and its efficient storage and analysis on the cloud. \n3.5. Edge Computing Integration \nThe implementation of edge computing into airline ticketing systems involves placing a number of edge nodes within \na geographic area to allow for the processing of important information nearer to the end users. This approach leads to \nless latency and enables real time interaction. The integration upholds the following major steps:  \n \nSegmentation of the Data Flows: \n \nIn order to turn in reservation requests, clients queue their requests at the edge nodes instead of relying on \nsome central system. \n \nAccommodation is given for the operation of critical activities (such as the management of real time seat \ninventory and current pricing) at the edges and for non, current activities (such as the cloud storage of \nhistorical data for research) within the cloud. \n \nEdge-Cloud Convergence: \n \nThere is interworking of the edge nodes with the central cloud for the purposes of updates. \n \nLarge scale Big Data analytics processing is performed by centralized systems while edge systems are mainly \nconcerned with time sensitive activities only. \n \nLoad Balancing and Dynamic Scaling: \n \nThe edge architecture allows for changes in size especially during peak demand seasons. \n \nThe purpose of load balancing is to divide the loads among the edge servers. \n\n12 \n \n \nFig.5. the Edge Computing Integration \n \nDescription of diagram \n1. Request Fulfillment of the Users \nTo minimize the lag, user requests are always directed to the closest edge node. \n2. Edge node smart service processing \nImportant functions such as checking the availability of seats and reserving them are completed at the edge. \n3. Cloud and Edge Device Interoperability \nThe last part of data (like completed orders) is uploaded to the cloud database in order to maintain consistency across \nregions. \nThis approach in figure 5 improves system responsiveness, reduces latency, and balances the computational load \nbetween edge and cloud systems. \n4. Role of the Central Cloud \n\n13 \n \nThe central cloud takes care of all the non-operational activities that are needed at the facility for example data \nanalytics over large pots of data and forecasting. \n4. Implementation and Tools \n4.1. Technology Stack \nThe technology stack that would be required for an edge-aware microservices architecture in figure 6 and the airline \nreservation systems would be: \n \nContainerization: \n \nTools: Docker, Kubernetes. \n \nMicroservices, which are small, self-contained applications virtually built, are packaged and deployed using \nisolating containers which also allow extending and shrinking resources spread across an edge and a cloud. \n \nEdge Computing Platforms and Tools: \n \nTools: Google Anthos, Azure IoT Edge, and AWS Greengrass. \n \nThese platforms as well offer edge compute capabilities for users to process their data nearer to them in order \nto eliminate or reduce latency. \n \nMessaging and Data Streaming: \n \nTools: Apache Kafka, MQTT. \n \nMessaging and streaming systems support edge and cloud nodes by enabling real time communication and \ncoordination. \n \nFig.6. The technology stack for implementing an edge-enabled microservices architecture \nExplanation of Diagram \n \nUser Interaction:  \n \nUsers make reservation requests or inquiries, which are sent to the closest edge node. \n \nEdge Node Processing:  \n \nContainers of microservices are located in edge nodes and provide real-time updates on seat availability \nand prices. \n \nMessaging and Streaming:  \n\n14 \n \n \nThe data are sent to the central cloud or other edge nodes by means of Kafka or MQTT for timely updating \nand analytics. \n \nCloud Integration:  \n \nLess important data is transferred to the cloud for reasons of big data processing and storage. \n \nLoad Balancer : \n \nProvides a mechanism for load balancing by distributing incoming user requests evenly across edge nodes. \nAdvantages of the Technology Stack \n \nContainerization: Provides ability for quick, elastic deployment of microservices, and maintaining their homogenous \nenvironments. \n \nEdge Computing: Provides faster response times and improved experience for users. \n \nMessaging Middleware: Provides assured and timely services in communication in large scale distributed systems. \n4.2. Integration Strategies \nIncorporating edge appliances with cloud infrastructures and modernizing their environment to microservices comes \nto a careful consideration and a step-by-step procedure. Some strategies are listed below. \n1. Associating Edge Devices and Cloud Backends \nStrategy: Implement data protocols for the edges and provide connections to the cloud. \n \nSteps:  \n \nCreate Systems and APIs for them to be synced in real time. \n \nEmploy edges where data is regarded as processed and most importantly reduce cloud to avoid time waste. \n \nConduct a data check at intervals, and dump data into the cloud to maintain data alignment. \n2. Upgrading from Traditional Applications to Microservices \nStrategy: Appetite for removing conventional systems a little at a time and replacing it with deploy –able \nmicroservices. \nSteps:  \n \nDon’t begin with the critical modules but as the project is gradual, start with microservice refactoring of non-\ncritical modules. \n \nServices should be deployed independently through containerization with tools such as docker. \n \nUse kubernetes an orchestration tool to take care of deployment and scaling. \n\n15 \n \n \nFig.7. migrating legacy systems to microservices and integrating edge devices with cloud backends. \nThis is a flowchart in figure 7 depicting linear parallel processes, vertical processes are migrating current legacy \nsystems into microservices and assimilating edge devices to the cloud back ends. \n4.3. Development Workflow \nThe DevOps perspective is geared towards, and more importantly, automating the process of software delivery and \nthe health of the system through CI/CD pipelines, and in addition, monitoring and observability concepts. this ensures \nthat microservices are provisioned very often, and very little time is lost with provisioned resources as system visibility \nis at no point compromised. \n1. CI/CD Pipelines for Deployments that Need Regular Updates \n Strategic imperatives: The process to prepare, test, and deliver or otherwise deploy a software product is articulated \nin a way it supports frequent software versions. \nSteps \n \nBuild: Application source code is written, and containerized applications (docker) built. \n \nTest: Unit, integration, and end to end tests - all performed automatically. \n \nDeploy: Deployment and management of applications done through Kubernetes. \n \nWatch: Monitor the deployment constantly and initiate a rollback in case of need. \n2. Monitoring and Observability Tools \n \nStrategic imperative: Development of systems for health checks, system performance analysis, and general system \nproduction support. \nSystems: \n \nPrometheus - for metrics collection. \n \nGrafana - for dashboards & visual representation. \n \nELK - For logs and data searching, use ELK (Elasticsearch, Logstash, and Kibana). \n \nJaeger / Zipkin - for traceability across distributed systems. \n\n16 \n \n \nFig.8. the CI/CD pipeline for continuous delivery and the observability tools \nDescription \nCI/CD Pipeline \n \nBuild: Code is built into deployable units (e.g., Docker images). \n \nTest: Automated tests (unit, integration) help to ascertain the quality of the code. \n \nDeploy: Deployments across environments (staging/production) are automated by Kubernetes. \n \nMonitor: Continuous Monitoring is established with Prometheus and alerting. \n \nRollback: Kubernetes deployment rollback mechanism ensures that the user is taken back to a previously \nstable version automatically if a deployment fails. \nMonitoring and Observability: \n \nMetrics are gathered and system status check is performed with Prometheus. \n \nMetrics with their interactive dashboards are presented by Grafana. \n \nTo assist in issue resolution and system performance management, the ELK Stack is used for log monitoring. \n \nRequest tracking and service performance watching is done using Jaeger/Zipkin by monitoring all requests \nand responses between services. \nThe following diagram in figure 8 illustrates the continuous delivery CI/CD pipeline and the corresponding \nobservability tools for system health checks. \n4.4. Evaluation Metrics \nOne can consider different metrics to assess an edge-enabled microservices framework. Latency refers to the time, \nwhich in this case is the period between the generation of information and the process of that information, with lower \nlatency supporting better real-time interaction [37]. Data Throughput provides a measure of how much data is \nprocessed within a given time period and represents the ability of the system to sustain significantly high data volumes \nwith no interruption (Xu, Liu, & Jiang, 2018). System Response Time encompasses both the latencies of the system \nand the speed of its data processing thus rendering an overall rating of the system which is important in applications \nthat require instant response [36]. Finally, User Satisfaction includes the evaluation of the performance of the system \n\n17 \n \nfrom the eyes of the end-user which in particular are satisfaction scores and completion rates in order to ensure that \nthe framework is able to serve its purpose [33]. \n5. Challenges and Solutions \n4.5. Technical Challenges \nNetwork Limitations and Latency Problems \nChallenges \nIn situations of heavy usage of various connections, offering rapid services with possible transmission between edge \nnodes to the cloud can, at times, render results slower than intended. Usage in some geographies with unstable/fixed \nbandwidth connections makes interactivity of the system difficult. \nHow to solve the problem \n \nContent delivery networks (CDNs) should be used to store the most accessed data closer to the users. \n \nSimilar to the above, introduce adaptive bitrate streaming or other data compression methods. \n \nUse private leased lines, or use 5G connectivity for reduced latency and reliable connection. \n \nAdopt load balancing strategies that are predictable in nature to decrease congestion levels within the \nnetwork, particularly at peak activity periods. \nManaging the Consistency of Distributed Data \nChallenges \n \nUpdating different edge nodes and the central cloud backend is highly sensitive due to possible updates and \nconflicting situations, which makes it difficult to keep data consistency. \n \nUsing eventual consistency models presents the risk of temporary inaccuracies of key airline booking \ninformation (e.g. where seats are available). \nSolution \n \nCombine event sourcing with CRDTs to achieve consistency over distributed computing systems. \n \nImplement strong consistency requirements especially for critical operations like reservation and cancelation \ntransactions to ensure consistency at all time. \n \nDesign conflict resolution solutions based on versioning and reconciliation in distributed databases. \n \nImplement data partitioning mechanisms to lessen the possibility of conflicts by allocating certain geographic \nregions or datasets to certain edge nodes only. \n \nFig.9. diagram of the primary technical challenges and actionable solutions \nThis part in figure 9 provides an overview of the main technical issues and the workable solutions available as way \nforward resolutions in order to enhance and boost the resilience as well as the system's overall performance. \n4.6. Cost and Resource Challenges \n4.6.1. Edge Infrastructure Expenditure \n \nChallenges \n\n18 \n \n \nInfrastructure at the edges of the system inclusive of edge devices and storage and compute nodes is \nexpensive both in terms of its installation and upkeep, especially in areas that are not well endowed with \nconnectivity. \n \nTherefore, dedicated funds towards purchasing hardware and software platforms as well as running \noperational activities puts a significant burden on the available finances. \n \nProffered Solution \n \nMake use of cloud-edge services such as AWS Greengrass, Microsoft’s Azure IoT Edge or Google Anthos \nwhich can be availed in a prepaid manner, thereby decreasing capital outlay. \n \nEliminate the need for building new edge infrastructure by exploiting the existing network assets in \npartnership with telecom operators. \n \nStart with high-density population areas to enjoy the benefits and costs ratios. \n \nConsider container-based approaches (for example: Docker, Kubernetes,...) at the edge to cut down on \nresources and costs. \n4.6.2. Optimization of Resource Allocation \n \nChallenge: \n \nMaintaining the right number of compute/storage resources at the edge nodes and in the cloud can be a quest. \n \nWhile under-utilized resources can be an avenue for losing money, excess resources can lead to \nunderperformance. \n \nSolution: \n \nEmploy resources resizing based on real-time demand using dynamic resource allocation algorithms. \n \nEmploy machine learning models to foresee the peak usage periods and adjust the resources for provisioning. \n \nStorage optimization measures can be applied by using two approaches to storage where crucial information \nis stored at the edges and non-critical information is stored in the cloud. \n \nMonitor resource consumption patterns and analyze them regularly with specific tools such as Prometheus \nand Grafana in order to make accurate adjustments of the use of resources. \n \nFig.10. diagram of the cost and resource challenges and actionable solutions \nThis part in figure 10 provides an overview of the cost and resource issues and the workable solutions available as \nway forward resolutions in order to enhance and boost the resilience and the performance of the system under \nconsideration. \n4.7. Proposed Mitigations \nIn order to effectively deal with the issues that have been recognized, a variety of technical and strategic mitigation \nmeasures can be undertaken \n4.7.1. Limitations of Network and Latency Issues \n \nMitigation Techniques \n \nEdge Caching: Store the data that is most frequently requested by users in the nodes at the periphery to avoid \ndelays in recall. \n \nContent Delivery Network (CDN): Content is replicated in several places to make it easily available to the \nend user. \n \nLoad Balancing: Employ predictive load balancing techniques in order to avoid node bottlenecks or \noverloading in one particular area of the network. \n \nIncorporate 5G: Provision for high capacity locations in the network a combination of advanced \nconnectivity solutions such as 5g. \n\n19 \n \n \nFig.11. diagram of the cost and resource challenges and actionable solutions \n \n \nData Reduction: Reduce the size of data packets for transmission purposes especially when sending data in \na network that has limits on its capacity. \n4.7.2. Ensuring consistency when handling data across distributed systems \n \nMitigation Techniques \n \nEvent Sourcing: An architectural style which involves capturing changes as events and ensuring all nodes \nare consistent with them within an application. \n \nCRDTs: Allow users to update such data even when they are not connected, and ensure that data updated \nwhile offline is automatically merged with no conflicts. \n \nStrict Consistency Level: For certain types of data (reservations for example) requiring a lock or consensus \nprevents any updates from being executed until all nodes agree, locking the data for the entire process. \n \nHorizontal Data Partitioning: Synchronization constraints can be alleviated if data is partitioned according \nto geo or functional zones. \n4.7.3. Cost of Edge Infrastructure \n \nMitigation Techniques \n \nServerless Edge Computing: Utilise edge services through serverless computing such as AWS \nLambda@Edge to circumvent erecting new infrastructures. \n \nRent instead of Build: Work with cellular networks to install or use their edge devices and networks. \n \nContainer Edge Solutions: Offer service in virtualized container installed on the service provider’s \nequipment cutting down on costs. \n \nGradual Adoption: Edge infrastructure and services will be adopted in stages bearing in mind the \ngeographical areas with…….. \n4.7.4. Resource Allocation Enhancement \n \nMitigation Strategies \n \nDynamic Scaling: Employ Kubernetes autoscaling capabilities to provision resources as the workloads \nfluctuate. \n \nPredictive Analytics: Use AI/ML models to predict traffic and provision resources if necessary. \n \nTiered Storage: Use local storage at the edge for high-value data while keeping data that is less frequently \naccessed in the cloud. \n \nReal-Time Monitoring: Application of Prometheus and Grafana to enhance the utilization of resources and \neliminate wastages on the reallocation of resources. \n \nDescription \nNetwork Limitations and Latency Issues: The focus of mitigations is to optimize data flows at the edge than \nprocessing in the cloud. \nDistributed Data Consistency: Strategies focus on the management of conflicts and consistency of the nodes that \nare located within different geographical locations. \n\n20 \n \nEdge Infrastructural Costs: Costs associated with edge infrastructure expenses are lowered by gradual \nenhancements, cloud services, and cooperation with other service providers. \nResource Allocation Optimization: Effective use of resources without wastage is achieved through the use of \ndynamic and predictive approaches. \nThis detailed mitigation plan covers in the figure 11 the issues that were highlighted in the previous parts of the \ndocument with practical measures that can be employed. \n6. Conclusion \nThe addition of edge microservices into the airline reservation systems is a significant development in overcoming \nthe shortcomings of standard centralized systems. The proposed33 framework is enhancing system responsiveness, \ndecreasing latencies and bettering user experience with the edges for real-time processing and the microservices for \nthe modular and the scalable systems. \nThis research shows key improvements in: \n \nReal Time Data Processing: Edge where necessary helps to manage operations which are critical such as \nchecking for available seats and copying reservations. \n \nSystem Scalability: Allows the incorporation of dynamic scaling and other resource management practices \nto cope with heavy traffic especially at peak periods. \n \nUser Centric Architecture: Improvement in speeds of response together with processing which is done \nnearer to the user improves the experience of users, thus very high levels of satisfaction and loyalty being \nreported. \nThe framework is also designed to meet the requirements of the changing airline market, incorporating advantages \nsuch as improved operational performance, cost efficiency and preparation for new technologies in the future. This \nmethod therefore provides a very effective basis for the modern airline system by solving the technical issues of \nnetworks, data distributions and resources management. \nAs the time passes and with the endless flow of advancement, the system as proposed in this paper can also be \nenhanced with the use of AI systems for advanced decision making, coupled with IoT and blockchain technologies \nfor smart, efficient and safe systems. Moreover, this framework can also be modified to suit other sectors such as \nhealth care, management of transportation and even smart cities that makes it more dynamic and widely useful. \nIn summary, this research not only presents a solution to the existing problems concerning reservation systems in \nairlines. Nevertheless, it provides a flexible and scalable architecture which is capable of fast-tracking infrastructural \ndevelopment. \nReferences \n1. Brown, A., Clark, B., & Davis, C. (2021). Scalability challenges in airline reservation systems: A comprehensive \nstudy. Journal of Air Transport Management, 95, 102107. https://doi.org/10.1016/j.jairtraman.2021.102107 \n2. Barua, B., Whaiduzzaman, M., Mesbahuddin Sarker, M., Shamim Kaiser, M., & Barros, A. (2023). Designing \nand Implementing a Distributed Database for Microservices Cloud-Based Online Travel Portal. In Sentiment \nAnalysis and Deep Learning: Proceedings of ICSADL 2022 (pp. 295-314). Singapore: Springer Nature \nSingapore. \n3. Doe, J., & Lee, K. (2022). Data processing bottlenecks in legacy airline reservation systems. International \nJournal of Information Management, 62, 102431. https://doi.org/10.1016/j.ijinfomgt.2021.102431 \n4. Smith, R., & Johnson, M. (2023). Reducing latency in airline reservation systems through architectural \nimprovements. Computers in Industry, 145, 103732. https://doi.org/10.1016/j.compind.2023.103732 \n5. Barua, B., & Whaiduzzaman, M. (2019, July). A methodological framework on development the garment payroll \nsystem (GPS) as SaaS. In 2019 1st International Conference on Advances in Information Technology \n(ICAIT) (pp. 431-435). IEEE. \n\n21 \n \n6. Lee, K., & Johnson, M. (2023). Enhancing agility in airline reservation systems through microservices \narchitecture. Computers in Industry, 145, 103732. https://doi.org/10.1016/j.compind.2023.103732 \n7. Williams, S., & Davis, L. (2023). Improving reliability in airline reservation systems: Overcoming monolithic \narchitecture challenges. Information Systems Journal, 33(2), 345-362. https://doi.org/10.1111/isj.12345 \n8. Kubra, K. T., Barua, B., Sarker, M. M., & Kaiser, M. S. (2023, October). An IoT-based Framework for Mitigating \nCar Accidents and Enhancing Road Safety by Controlling Vehicle Speed. In 2023 7th International Conference \non I-SMAC (IoT in Social, Mobile, Analytics and Cloud)(I-SMAC) (pp. 46-52). IEEE. \n9. AltexSoft. \n(2019). \nAirline \nReservation \n& \nPassenger \nService \nSystems. \nRetrieved \nfrom \nhttps://www.altexsoft.com/blog/airline-reservation-systems-passenger-service-systems/ \n10. Howlader, S. M. N., Hossain, M. M., Khanom, S., Sarker, S., & Barua, B. (2024, January). An Intelligent Car \nLocating System Based on Arduino for a Massive Parking Place. In International Conference on Multi-Strategy \nLearning Environment (pp. 19-33). Singapore: Springer Nature Singapore. \n11. Amazon Web Services. (2020). AWS Serverless Airline Booking. Retrieved from https://github.com/aws-\nsamples/aws-serverless-airline-booking \n12. Barua, B. (2016). M-commerce in Bangladesh-status, potential and constraints. International Journal of \nInformation Engineering and Electronic Business, 8(6), 22. \n13. Amadeus. \n(2020). \nAmadeus \nAltéa \nReservation: \nAirline \nReservation \nSystem. \nRetrieved \nfrom \nhttps://amadeus.com/en/airlines/products/altea-airline-reservation-system \n14. Mouri, I. J., Barua, B., Mesbahuddin Sarker, M., Barros, A., & Whaiduzzaman, M. (2023, March). Predicting \nOnline Job Recruitment Fraudulent Using Machine Learning. In Proceedings of Fourth International Conference \non Communication, Computing and Electronics Systems: ICCCES 2022 (pp. 719-733). Singapore: Springer \nNature Singapore. \n15. Brown, T., & Wilson, P. (2019). Microservices Architecture in Airline Reservation Systems. Journal of Airline \nTechnology, 15(3), 45-58. \n16. Barua, B., & Kaiser, M. S. (2024). A Methodical Framework for Integrating Serverless Cloud Computing into \nMicroservice Architectures. \n17. Jones, M., & Clark, S. (2018). Evolution of Global Distribution Systems in the Airline Industry. International \nJournal of Travel Technology, 12(2), 102-115. \n18. Barua, B., & Kaiser, M. S. (2024). Optimizing Travel Itineraries with AI Algorithms in a Microservices \nArchitecture: Balancing Cost, Time, Preferences, and Sustainability. arXiv preprint arXiv:2410.17943. \n19. Smith, J. (2016). The Development of Computer Reservation Systems in Aviation. Aviation History Review, 8(1), \n23-34. \n20. Barua, B., & Obaidullah, M. D. (2014). Development of the Student Management System (SMS) for Universities \nin Bangladesh. BUFT Journal, 2, 57-66. \n21. Williams, R., Thompson, L., & Davis, K. (2020). Passenger Service Systems: Integrating Modern Technologies \nin Airline Operations. Journal of Air Transport Management, 22(4), 67-79. \n22. Howlader, S. N., Barua, B., Sarker, M. M., Kaiser, M. S., & Whaiduzzaman, M. (2023, December). Automatic \nYard Monitoring and Humidity Controlling System Based on IoT. In 2023 International Conference on Advanced \nComputing & Communication Technologies (ICACCTech) (pp. 397-403). IEEE. \n23. Balalaie, A., Heydarnoori, A., & Jamshidi, P. (2021). Microservices architecture: Enabling DevOps and \nfacilitating \ncontinuous \ndeployment. \nJournal \nof \nSystems \nand \nSoftware, \n177, \n110934. \nhttps://doi.org/10.1016/j.jss.2021.110934 \n24. Barua, B., & Kaiser, M. S. (2024). Blockchain-Based Trust and Transparency in Airline Reservation Systems \nusing Microservices Architecture. arXiv preprint arXiv:2410.14518. \n25. Dragoni, N., Giallorenzo, S., Lafuente, A. L., Mazzara, M., Montesi, F., Mustafin, R., & Safina, L. (2017). \nMicroservices: Yesterday, today, and tomorrow. In Present and Ulterior Software Engineering (pp. 195-216). \nSpringer. \n26. Newman, S. (2021). Building microservices: Designing fine-grained systems (2nd ed.). O'Reilly Media. \n27. Barua, B., & Kaiser, M. S. (2024). Enhancing Resilience and Scalability in Travel Booking Systems: A \nMicroservices Approach to Fault Tolerance, Load Balancing, and Service Discovery. arXiv preprint \narXiv:2410.19701. \n28. Söylemez, D. B., Tekinerdogan, B., & Tarhan, A. (2022). Challenges and solution directions of microservice \narchitectures: \nA \nsystematic \nliterature \nreview. \nApplied \nSciences, \n12(11), \n5507. \nhttps://doi.org/10.3390/app12115507 \n\n22 \n \n29. Xiang, H., Liu, H., Du, Y., Wang, X., Zhang, C., & Li, Y. (2021). No free lunch: Microservice practices \nreconsidered in industry. Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering, \n407-418. \n30. Barua, B., & Kaiser, M. S. (2024). Leveraging Machine Learning for Real-Time Personalization and \nRecommendation in Airline Industry. \n31. Chen, X., Mao, H., Zhang, H., & Li, D. (2019). Edge computing for internet of things applications: A case study \non \nsmart \ncity \ndeployment. \nFuture \nGeneration \nComputer \nSystems, \n95, \n375-389. \nhttps://doi.org/10.1016/j.future.2019.01.003 \n32. Barua, B., & Kaiser, M. S. (2024). Cloud-Enabled Microservices Architecture for Next-Generation Online \nAirlines Reservation Systems. \n33. Li, J., Zhang, X., Huang, Z., & Chen, Q. (2020). Edge computing in industrial internet of things: Architecture, \nadvances, \nand \nchallenges. \nIEEE \nCommunications \nSurveys \n& \nTutorials, \n22(4), \n2743-2769. \nhttps://doi.org/10.1109/COMST.2020.3009562 \n34. Sarkar, S., Sinha, S., & Misra, S. (2021). Edge computing in smart cities: A comprehensive review. Journal of \nNetwork and Computer Applications, 186, 103063. https://doi.org/10.1016/j.jnca.2021.103063 \n35. Barua, B., & Kaiser, M. S. (2024). Leveraging Microservices Architecture for Dynamic Pricing in the Travel \nIndustry: Algorithms, Scalability, and Impact on Revenue and Customer Satisfaction. arXiv preprint \narXiv:2411.01636. \n36. Satyanarayanan, M. (2017). The emergence of edge computing. IEEE Computer, 50(1), 30-39. \nhttps://doi.org/10.1109/MC.2017.9 \n37. Shi, W., & Dustdar, S. (2016). The promise of edge computing. IEEE Computer, 49(5), 78-81. \nhttps://doi.org/10.1109/MC.2016.145 \n38. Xu, Y., Liu, Z., & Jiang, Y. (2018). Real-time data processing for IoT-based edge computing. IEEE Access, 6, \n24485-24496. https://doi.org/10.1109/ACCESS.2018.2826424 \n39. Barua, B., & Kaiser, M.S. (2024). Novel Architecture for Distributed Travel Data Integration and Service \nProvision Using Microservices. \n40. Zhang, Y., Chen, M., Wu, Y., & Huang, Q. (2021). Leveraging edge computing for reducing latency in industrial \nIoT \napplications. \nIEEE \nTransactions \non \nIndustrial \nInformatics, \n17(6), \n4275-4283. \nhttps://doi.org/10.1109/TII.2020.3007597 \n41. Chaki, P. K., Barua, B., Sazal, M. M. H., & Anirban, S. (2020, May). PMM: A model for Bangla parts-of-speech \ntagging using sentence map. In International Conference on Information, Communication and Computing \nTechnology (pp. 181-194). Singapore: Springer Singapore. \n42. Li, J., Zhang, X., Huang, Z., & Chen, Q. (2020). Edge computing in healthcare: Enabling real-time patient \nmonitoring and emergency response. IEEE Communications Surveys & Tutorials, 22(4), 2743-2769. \nhttps://doi.org/10.1109/COMST.2020.3009562 \n43. Barua, B., & Kaiser, M. S. (2024). A Next-Generation Approach to Airline Reservations: Integrating Cloud \nMicroservices with AI and Blockchain for Enhanced Operational Performance. arXiv preprint arXiv:2411.06538 \n44. Chaki, P. K., Sazal, M. M. H., Barua, B., Hossain, M. S., & Mohammad, K. S. (2019, February). An approach of \nteachers' quality improvement by analyzing teaching evaluations data. In 2019 Second International Conference \non Advanced Computational and Communication Paradigms (ICACCP) (pp. 1-5). IEEE. \n45. Mphasis. (2018). Microservices for airlines industry whitepaper. Retrieved from Mphasis \n46. Zeng, Y., Li, X., & Wang, Y. (2022). Online deployment algorithms for microservice systems with complex \ndependencies in cloud and edge computing. IEEE Transactions on Parallel and Distributed Systems, 33(5), 974-\n987. IEEE Xplore",
    "pdf_filename": "Optimizing_Airline_Reservation_Systems_with_Edge-Enabled_Microservices_A_Framework_for_Real-Time_Dat.pdf"
}