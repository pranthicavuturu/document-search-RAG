{
    "title": "Pattern-Based Constraint Satisfaction and Logic Puzzles",
    "context": "",
    "body": "Pattern-Based Constraint Satisfaction \nand Logic Puzzles \n \nDenis Berthier \nInstitut Mines Télécom \n \n \nThis is the full text of the book published in print form by Lulu \nPublishers (Nov. 2012, ISBN 978-1-291-20339-4). \nDue to technical reasons, this cover page is different. \n\n \n \n \n  \n\nPattern-Based Constraint Satisfaction \nand Logic Puzzles \n \n \n \n \n\n \n \n \n  \n\n \nDenis Berthier \n \n \n \n \n \n \nPattern-Based Constraint Satisfaction \nand Logic Puzzles \n \n \n \n \n\n \n \n \n  \n \n \nBooks by Denis Berthier: \nLe Savoir et l’Ordinateur, Editions L’Harmattan, Paris, November 2002. \nMéditations sur le Réel et le Virtuel, Editions L’Harmattan, Paris, May 2004. \nThe Hidden Logic of Sudoku (First Edition), Lulu.com, May 2007. \nThe Hidden Logic of Sudoku (Second Edition), Lulu.com, November 2007. \nConstraint Resolution Theories, Lulu.com, November 2011. \n \n \n \n \n \n \nKeywords: Constraint Satisfaction, Artificial Intelligence, Constructive Logic, Logic Puzzles, Sudoku, \nFutoshiki, Kakuro, Numbrix®, Hidato®. \n \n \nThis work is subject to copyright. All rights are reserved. This work may not be translated or copied in \nwhole or in part without the prior written permission of the copyright owner, except for brief excerpts in \nconnection with reviews or scholarly analysis. Use in connection with any form of information storage or \nretrieval, electronic adaptation, computer software, or by similar or dissimilar methods now known or \nhereafter developed, is forbidden. \n \n \n \n9 8 7 6 5 4 3 2 1 \n \n \nDépôt légal: Novembre 2012 \n \n \n© 2012 Denis Berthier \nAll rights reserved \n \nISBN: 978-1-291-20339-4 \n \n\n \nTable of Contents \nForeword ...............................................................................................................  9 \n1. Introduction ......................................................................................................  17 \n1.1 The general Constraint Satisfaction Problem (CSP) ..................................  17 \n1.2 Paradigms of resolution ..............................................................................  20 \n1.3 Parameters and instances of a CSP; minimal instances; classification ......  24 \n1.4 The basic and the more complex resolution theories of a CSP ..................  26 \n1.5 The roles of Logic, AI, Sudoku and other examples ..................................  28 \n1.6 Notations ....................................................................................................  33 \nPART ONE: LOGICAL FOUNDATIONS .......................................................  35 \n2. The role of modelling, illustrated with Sudoku .............................................  37 \n2.1 Symmetries, analogies and supersymmetries .............................................  37 \n2.2 Introducing the four 2D spaces: rc, rn, cn and bn ......................................  42 \n2.3 CSP variables associated with the rc, rn, cn and bn spaces .......................  48 \n2.4 Introducing the 3D nrc-space .....................................................................  49 \n3. The logical formalisation of a CSP .................................................................  51 \n3.1 A quick introduction to Multi-Sorted First Order Logic (MS-FOL) .........  51 \n3.2 The formalisation of a CSP in MS-FOL: T(CSP) ......................................  58 \n3.3 Remarks on the existence and uniqueness of a solution ............................  63 \n3.4 Operationalizing the axioms of a CSP Theory ...........................................  64 \n3.5 Example: Sudoku Theory, T(Sudoku) or ST .............................................  65 \n3.6 Formalising the Sudoku symmetries ..........................................................  70 \n3.7 Formal relationship between Sudoku and Latin Squares ...........................  73 \n4. CSP Resolution Theories .................................................................................  75 \n4.1 CSP Theory vs CSP Resolution Theories; resolution rules .......................  76 \n4.2 The logical nature of CSP Resolution Theories .........................................  77 \n4.3 The Basic Resolution Theory of a CSP: BRT(CSP)  .................................  86 \n4.4 Formalising the general concept of a Resolution Theory of a CSP ...........  88 \n4.5 The confluence property of resolution theories ..........................................  89 \n4.6 Example: the Basic Sudoku Resolution Theory (BSRT) ...........................  91 \n4.7 Sudoku symmetries and the three fundamental meta-theorems .................  94 \n\n6 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nPART TWO: GENERAL CHAIN RULES .......................................................  99 \n5. Bivalue chains, whips and braids .................................................................... 101 \n5.1 Bivalue chains ............................................................................................ 102 \n5.2 z-chains, t-whips and zt-whips (or whips) .................................................. 103 \n5.3 Braids .......................................................................................................... 108 \n5.4 Whip and braid resolution theories; the W and B ratings .......................... 109 \n5.5 Confluence of the Bn resolution theories; resolution strategies ................. 112 \n5.6 The “T&E vs braids” theorem .................................................................... 115 \n5.7 The objective properties of chains and braids ............................................ 119 \n5.8 About loops in bivalue-chains, in whips and in braids ............................... 124 \n5.9 Forcing whips, a bad idea? ......................................................................... 126 \n5.10 Exceptional examples ............................................................................... 127 \n5.11 Whips in N-Queens and Latin Square; definition of SudoQueens  .......... 144 \n6. Unbiased statistics and whip classification results ........................................ 153 \n6.1 Classical top-down and bottom-up generators ........................................... 155 \n6.2 A controlled-bias generator ........................................................................ 156 \n6.3 The real distribution of clues and the number of minimal puzzles ............ 161 \n6.4 The W-rating distribution as a function of the generator ........................... 163 \n6.5 Stability of the classification results  .......................................................... 164 \n6.6 The W rating is a good approximation of the B rating ............................... 165 \n7. g-labels, g-candidates, g-whips and g-braids ................................................. 167 \n7.1 g-labels, g-links, g-candidates and whips[1] .............................................. 167 \n7.2 g-bivalue chains, g-whips and g-braids ...................................................... 171 \n7.3 g-whip and g-braid resolution theories; the gW and gB ratings ................. 175 \n7.4 Comparison of the ratings based on whips, braids, g-whips and g-braids . 176 \n7.5 The confluence property of the gBn resolution theories ............................. 178 \n7.6 The “gT&E vs g-braids” theorem .............................................................. 182 \n7.7 Exceptional examples ................................................................................. 184 \n7.8 g-labels and g-whips in N-Queens and in SudoQueens ............................. 197 \nPART THREE: BEYOND G-WHIPS AND G-BRAIDS ................................. 201 \n8. Subset Rules in a general CSP ........................................................................ 203 \n8.1 Transversality, Sp-labels and Sp-links ......................................................... 204 \n8.2 Pairs ............................................................................................................ 206 \n8.3 Triplets ........................................................................................................ 209 \n8.4 Quads .......................................................................................................... 211 \n8.5 Relations between Naked, Hidden and Super Hidden Subsets in Sudoku . 218 \n8.6 Subset resolution theories in a general CSP; confluence ........................... 220 \n8.7 Whip subsumption results for Subset rules ................................................ 222 \n\nTable of Contents \n7 \n8.8 Subsumption and non-subsumption examples from Sudoku ..................... 224 \n8.9 Subsets in N-Queens .................................................................................. 234 \n9. Reversible-Sp-chains, Sp-whips and Sp-braids ............................................... 237 \n9.1 Sp-links; Sp-subsets modulo other Subsets; Sp-regular sequences .............. 238 \n9.2 Reversible-Sp-chains .................................................................................. 241 \n9.3 Sp-whips and Sp-braids ............................................................................... 246 \n9.4 The confluence property of the SpBn resolution theories ........................... 253 \n9.5 The “T&E(Sp) vs Sp-braids” theorem, 1≤p≤∞ ........................................... 257 \n9.6 The scope of Sp-braids (in Sudoku) ............................................................ 259 \n9.7 Examples .................................................................................................... 261 \n10. g-Subsets, Reversible-gSp-chains, gSp-whips and gSp-braids ..................... 265 \n10.1 g-Subsets .................................................................................................. 266 \n10.2 Reversible-gSp-chains, gSp-whips and gSp-braids .................................... 275 \n10.3 A detailed example ................................................................................... 284 \n11. Wp-whips, Bp-braids and the T&E(2) instances .......................................... 289 \n11.1 Wp-labels and Bp-labels; Wp-whips and Bp-braids ................................... 289 \n11.2 The confluence property of the BpBn resolution theories ......................... 301 \n11.3 The “T&E(Bp) vs Bp-braids” and “T&E(2) vs B-braids” theorems ......... 306 \n11.4 The scope of Bp-braids in Sudoku… ........................................................ 310 \n11.5 Existence and classification of instances beyond T&E(2) ....................... 316 \n12. Patterns of proof and associated classifications .......................................... 325 \n12.1 Bi-whips, bi-braids, confluence and bi-T&E ........................................... 326 \n12.2 W*p-whips and B*p-braids ....................................................................... 333 \n12.3 Patterns of proof and associated classifications ....................................... 339 \n12.4 d-whips, d-braids, W*d-whips and B*d-braids ......................................... 352 \nPART FOUR: MATTERS OF MODELLING ................................................. 355 \n13. Application-specific rules (the sk-loop in Sudoku) ..................................... 357 \n13.1. The EasterMonster family of puzzles and the sk-loop ............................ 358 \n13.2. How to define a resolution rule from a set of examples .......................... 360 \n13.3. First interpretation of an sk-loop: crosses and belts of crosses ............... 361 \n13.4. Second interpretation of an sk-loop: x2y2-chains ................................... 366 \n13.5. Should the above definitions be generalised further? ............................. 368 \n13.6. Measuring the impact of an application-specific rule ............................. 371 \n13.7. Can an (apparently) application-specific rule be made general? ............ 372 \n14. Transitive constraints and Futoshiki ........................................................... 373 \n14.1 Introducing Futoshiki and modelling it as a CSP ..................................... 373 \n14.2 Ascending chains and whips .................................................................... 376 \n\n8 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n14.3 Hills, valleys and S-whips ........................................................................ 381 \n14.4 A detailed example using the hill rule, the valley rule and Subsets ......... 383 \n14.5 g-labels, g-whips and g-braids in Futoshiki ............................................. 389 \n14.6 Modelling transitive constraints ............................................................... 396 \n14.7 Hints for further studies on Futoshiki ....................................................... 397 \n15. Non-binary arithmetic constraints and Kakuro ......................................... 399 \n15.1 Introducing Kakuro .................................................................................. 400 \n15.2 Modelling Kakuro as a CSP ..................................................................... 407 \n15.3 Elementary Kakuro resolution rules and theories .................................... 413 \n15.4 Bivalue-chains, whips and braids in Kakuro ............................................ 417 \n15.5 Theory of g-labels in Kakuro ................................................................... 421 \n15.6 Application-specific rules in Kakuro: surface sums ................................. 426 \n16. Topological and geometric constraints: map colouring and path finding 437 \n16.1 Map colouring and the four-colour problem ............................................ 437 \n16.2 Path finding: Numbrix® and Hidato® ........................................................ 441 \n \n17. Final remarks ................................................................................................. 459 \n17.1 About our approach to the finite CSP ...................................................... 459 \n17.2 About minimal instances and uniqueness ................................................ 465 \n17.3 About ratings, simplicity, patterns of proof ............................................. 468 \n17.4 About CSP-Rules ..................................................................................... 472 \n18. References ....................................................................................................... 477 \nBooks and articles ............................................................................................ 477 \nWebsites ........................................................................................................... 479\n\n \nForeword \nMotivations for the approach of the present book \nSince the 1970s, when it was identified as a class of problems with its own \nspecificities, Constraint Satisfaction has quickly evolved into a major area of \nArtificial Intelligence (AI). Two broad families of very efficient algorithms (with \nmany freely available implementations) have become widely used for solving its \ninstances: general purpose structured search of the “problem space” (e.g. depth-first, \nbreadth-first) and more specialised “constraint propagation” (that must generally be \ncombined with search according to various recipes).  \nOne may therefore wonder why they would use the computationally much harder \ntechniques inherent in the approach introduced in the present book. It should be \nclear from the start that there is no reason at all if speed is the first or only criterion, \nas may legitimately be the case in such a typical Constraint Satisfaction Problem \n(CSP) as scene labelling.  \nBut, instead of just wanting a final result obtained by any available and/or \nefficient method, one can easily imagine additional requirements of various types \nand one may thus be interested in how the solution was reached, i.e. by the \nresolution path. Whatever meaning is associated with the quoted words below, there \nare several inter-related families of requirements one can consider: \n– the solution must be built by “constructive” methods, with no “guessing”;  \n– the solution must be obtained by “pure logic”; \n– the solution must be “pattern-based”, “rule-based”; \n– the solution must be “understandable”, “explainable”; \n– the solution must be the “simplest” one.  \nVague as they may be, such requirements are quite natural for logic puzzles and \nin many other conceivable situations, e.g. when one wants to ask explanations about \nthe solution or parts of it.  \nStarting from the above vague requirements, Part I of this book will elaborate a \nformal interpretation of the first three, leading to a very general, pattern-based \nresolution paradigm belonging to the classical “progressive domain restriction” \nfamily and resting on the notions of a resolution rule and a resolution theory. \n\n10 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nThen, in relation with the last purpose of finding the “simplest” solution, it will \nintroduce ideas that, if read in an algorithmic perspective, should be considered as \ndefining a new kind of search, “simplest-first search” – indeed various versions of it \nbased on different notions of logical simplicity. However, instead of such an \nalgorithmic view (or at least before it), a pure logic one will systematically be \nadopted, because: \n– it will be consistent with the previous purposes, \n– it will convey clear non-ambiguous semantics (and it will therefore include a \nunique complete specification for possibly multiple types of implementation), \n– it will allow a deeper understanding of the general idea of “simplest-first \nsearch”, in particular of how there can be various underlying concrete notions of \nlogical simplicity and how these have to be defined by different kinds of resolution \nrules associated with different types of chain patterns. At this point, it may be useful \nto notice that the classical structured search algorithms are not compatible with pure \nlogic definitions (as will be explained in the text). \nSimplest-first search and the rating of instances \nIn this context, there will appear the question of rating and/or classifying the \ninstances of a (fixed size) CSP according to their “difficulty”. This is a much more \ndifficult topic than just solving them. The families of resolution rules introduced in \nthis book (by order of increasing complexity) will go by couples (corresponding to \ntwo kinds of chains with no OR-branching but with different linking properties, \nnamely T-whips and T-braids); for each couple, there will be two ratings, defined in \npure logic ways:  \n– one based on T-braids, allowing a smooth theoretical development and having \ngood abstract computational properties; we shall devote much time to prove the \nconfluence property of all the braid and T-braid resolution theories, because it \njustifies a “simplest-first” resolution strategy (and the associated “simplest-first \nsearch” algorithms that may implement it) and it allows to find the “simplest” \nresolution path and the corresponding rating by trying only one path; \n– one based on T-whips, providing in practice an easier to compute good \napproximation of the first when it is combined with the “simplest-first” strategy. \n(The quality of the approximation can be studied in detail and precisely quantified in \nthe Sudoku case, but  it will also appear in intuitive form in all our other examples.) \nWe shall explain in which restricted sense all these ratings are compatible. But \nwe shall also show that each of them corresponds to a different legitimate pure logic \nview of simplicity.  \nIn chapter 11, we shall analyse the scope of the previously defined resolution \nrules in terms of a search procedure with no guessing, Trial-and-Error (T&E), and of \n\nForeword \n11 \nthe depth of T&E necessary to solve an instance. There are universal ratings, \nrespectively the B and the BB ratings, for instances in T&E(1) and T&E(2) (i.e. \nrequiring no more than one or two levels of Trial-and-Error). Universality must be \nunderstood in the sense that they assign a finite rating to all of these instances, but \nnot in the sense that they could provide a unique notion of simplicity. For instances \nbeyond T&E(2), it is questionable whether a “pure logic” solution, with all the \ncomplex and boring steps that it would involve, would be of any interest; moreover, \nit appears that there may be many different incompatible notions of “simplest”; in \nchapter 12, we shall introduce the notion of a pattern of proof and, based on it, we \nshall re-assess our initial requirements. The main purpose is to provide hints about \nthe scope of practical validity of our approach. \nExamples from logic puzzles \nMainly because they can be described shortly and they are easy to understand \nwith no previous knowledge, all the examples dealt with in this book will be logic \npuzzles: Latin Squares, Sudoku, N-Queens…, with a special status granted to \nSudoku for reasons that will be explained in the Introduction. But they have been \nselected in such a way that they make us tackle very different types of constraints, \nso that this choice should not suggest a lack of generality in our approach: transitive \nconstraints in Futoshiki, non-binary arithmetic constraints in Kakuro, topological \nand geometric constraints in Map colouring or path finding (Numbrix® and Hidato®). \nIn several places, we shall even give results that are only valid for 9×9 Sudoku \n(e.g. the unbiased whip classification results of minimal instances in chapter 6 and \nthe analysis of extreme instances in chapter 11), for the purpose of illustrating with \nprecise quantitative data questions that cannot yet be tackled with such detail in \nother CSPs and that call for further studies, such as: \n– the difficulty (much beyond what one may imagine) of finding uncorrelated \nunbiased samples of minimal instances of a CSP, a pre-requisite for any statistical \nanalysis; the way we present it shows that it is likely to appear in many CSPs; the \nfinal chapters on various other CSPs show that this is indeed true for them; (a \nrelated well known problem is that of finding the hardest instances of a CSP); \n– the surprisingly high resolution power of short whips for instances in T&E(1); \n– the concrete application of various classification principles to the extreme \ninstances. \nThe “Hidden Logic of Sudoku” heritage [mainly for the readers of HLS] \nThe origins of the work reported in this book can be traced back to my choice of \nSudoku as a topic of practical classes for an introductory course in Artificial \nIntelligence (AI) and Rule-Based Systems in early 2006. As I was formalising for \n\n12 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nmyself the simplest classical techniques (Subset rules, xy-chains) before submitting \nthem as exercises to my students, I had two ideas that kept me interested in this \ngame longer than I had first expected: logical symmetries between three well-known \ntypes of Subset rules (Naked, Hidden and Super-Hidden, the last of which are \ncommonly known as “Fish”) and a simple non-reversible extension (xyt-chains) of \nthe well-known reversible xy-chains. As time passed, the short article I had planned \nto write grew to the size of a 430-page book: The Hidden Logic of Sudoku – HLS in \nthe sequel (first edition, HLS1, May 2007; second edition, HLS2, November 2007). \nThe present book inherits many of the ideas I first introduced in HLS but it \nextends them to any finite CSP. Based on the classical idea of candidate \nelimination, HLS provided a clear logical status for the notion of a candidate (which \ndoes not pertain to the original problem formulation) and it introduced the notions of \na resolution rule and a resolution theory. All the concepts were strictly formalised in \nPredicate Logic (FOL) – more precisely in Multi Sorted First Order Logic (MS-\nFOL) – which (surprisingly) was a new idea: previously, all the books and Web \nforums had always considered that Propositional Logic was enough. Indeed, HLS \nhad to make a further step, because intuitionistic (or, equivalently, constructive) \nlogic is necessary for the proper formalisation of the notion of a candidate. \nNotwithstanding the more general formulation, the “pattern-based” conceptual \nframework developed in this book is very close to that of HLS. From the start, the \nframework of HLS was intended as a formalisation of what had always been looked \nfor when it was said that a “pure logic solution” was wanted. The basic concepts \nappearing in the resolution rules introduced in HLS were grounded in the most \nelementary notions used to propose or solve a puzzle (numbers, rows, columns, \nblocks, …); the more elaborate ones (the various types of chain patterns) were \nprogressively introduced and strictly defined from the basic ones. Because the \nconcepts of a candidate and of a link between two candidates were enough to \nformulate most of the resolution rules, extending them to any CSP was almost \nstraightforward. The additional requirement that appeared in HLS in relation with \nthe idea of rating, that of finding the simplest resolution path, is also tackled here \naccording to the same general principles as in HLS. \nOn the practical puzzle solving side, HLS1 introduced new resolution rules, \nbased on natural generalisations of the famous xy-chains, such as xyt-, xyz- and \nzyzt- chains; contrary to those proposed in the current Sudoku literature, these were \nnot based on “Subsets” (or almost locked sets – “ALS”) and most of these chains \nwere not “reversible”; the systematic clarification and exploitation of all the \ngeneralised symmetries of the game and the combination of my first two initial ideas \nhad also led me to the “hidden” counterparts of the previous chains (hxy-, hxyt- \nhxyzt- chains). Later, I found further generalisations (nrczt- chains and lassoes), \npushing the idea of supersymmetry to its maximal extent and allowing to solve \n\nForeword \n13 \nalmost any puzzle with short chain patterns. Giving a more systematic presentation \nof these new “3D” chain rules was the main reason for the second edition (HLS2). \nStill later, I introduced (on Sudoku forums) other generalisations (that, in the \nsimplified terminology of the present book and in a formulation meaningful for any \nCSP, will appear as whips, braids, g-whips, Sp-whips, Wp-whips, …). These may \nhave justified a third edition of HLS, but I have just added a few pages to my HLS \nwebsite instead – concentrating my work on another type of generalisation. \nIt appeared to me that most of what I had done for Sudoku could be generalised \nto any finite CSP [Berthier 2008a, 2008b, 2009]. But, once more, as I found further \ngeneralisations and as the analysis of additional CSPs with different characteristics \nwas necessary to guarantee that my definitions were not too restrictive, the normal \nsize of journal articles did not fit the purposes of a clear and systematic exposition; \nthis is how this work grew into a new book, “Constraint Resolution Theories” (CRT, \nNovember 2011). \nAs for the resolution rules themselves, whereas HLS proceeded by successive \ngeneralisations of well-known elementary rules for Sudoku into more complex ones, \nin CRT and in the present book, we start (in Part II) from powerful rules meaningful \nin any CSP (whips, in chapter 5) equivalent (in the Sudoku case) to those that were \nonly reached at the end of HLS2 (nrczt- chains and lassoes). \nAs a result, in this book, patterns such as Subsets, with much less resolution \npower than whips of same size and with more complex definitions in the general \nCSP than in Sudoku, come after bivalue-chains, whips and braids, and also after \ntheir “grouped” versions, g-whips and g-braids. Moreover, Subsets are introduced \nhere with purposes very different from those in HLS:  \n1) providing them with a definition meaningful in any CSP (in particular, \nindependent of any underlying grid structure); \n2) showing that whips subsume most cases of Subsets in any CSP;  \n3) illustrating by Sudoku examples how, in rare cases, Subset rules can nevertheless \nsimplify the resolution paths obtained with whips;  \n4) defining in any CSP a “grouped” version of Subsets, g-Subsets; surprisingly, in \nthe Sudoku case, g-Subsets do not lead to new rules, but they give a new perspective \nof the well-known Franken and Mutant Fish; this could be useful for the purposes of \nclassifying these patterns (which has always been a very obscure topic); \n5) showing that, in any CSP, the basic principles according to which whips are built \ncan be generalised to allow the insertion of Subsets into them (obtaining Sp-whips), \nthus extending the resolution power of whips towards the exceptionally hard \ninstances. \n\n14 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nWhat is new with respect to “Constraint Resolution Theories” [mainly for the \nreaders of CRT] \nThis book can be considered as the second, revised and largely extended edition \nof Constraint Resolution Theories (CRT). Following a colleague’s advice, we \nchanged the title (which seemed too technical) so that it includes the “Constraint \nSatisfaction” key phrase referring to its global domain; “Pattern-Based” was then a \nnatural choice for qualifying our approach, while the explicit reference to “Logic \nPuzzles” became almost necessary with the addition of all the examples in part IV to \nthe already existing Sudoku content. Apart from this cosmetic change, there are \nthree different degrees of newness with respect to CRT, in increasing magnitude.  \nFirstly, this book corrects a few typos and errors that remained in CRT in spite of \ncareful re-readings; in several places, it also marginally improves or completes the \nwording and it adds a few remarks or comments; moreover: \n– z-chains are no longer included in the analysis of loops in sections 5.8.1 to \n5.8.3; instead, the obvious and simpler fact that z-whips subsume z-chains with a \nglobal loop is mentioned; \n– an unnecessary restriction in the definition of a g-label (section 7.1.1.1) has \nbeen eliminated, without modifying the notion of a g-link; this leaves unchanged the \ndefinitions of a g-candidate and of predicate “g-linked” (relating a g-candidate and a \ncandidate); as before, these two definitions refer to the full underlying g-label and \nlabel (this is why the restriction was unnecessary); nothing else had to be changed in \nchapter 7 or in any place where g-labels are dealt with; in particular, this does not \nchange the sets of g-labels of the various examples already tackled by CRT; \nhowever, the restriction made it impossible to apply the initial definition given in \nCRT to g-labels in Futoshiki (see chapter 14); \n– the “saturation” or “local maximality” condition in the definition of a g-label \nhas been broadened for an easier applicability to new examples; it has also been \nisolated by splitting the initial definition into two parts; as it was there only for \nefficiency purposes, but it had no impact on theoretical analyses, this entails no \nother changes; however, the efficiency purposes should not be underestimated: \nsection 15.5 shows how essential this condition is in practice in Kakuro; \n– section 11.4 of CRT (bi-whips, bi-braids, W*-whips and B*-braids) has been \nsignificantly reworded, corrected and extended, giving rise to a new chapter of its \nown (chapter 12); \n– a section (17.4) describing our general pattern-based CSP-Rules solver, used \nfor all the examples presented in this book, has been introduced. \n \nSecondly, this book adds a few new results, mainly to the W-whip and B-braid \npatterns and/or to the Sudoku CSP case study. The following list is not exhaustive: \n\nForeword \n15 \n– very instructive whip[2] examples are given in section 8.8.1; they are the key \nfor understanding why whips can be more powerful than Subsets of same size; \n– an example of a non-whip braid[3] in Sudoku is given in section 5.10.5; \n– a new graphico-symbolic representation of W-whips is introduced in section \n11.2.9, based on the analogy between whips and Subsets; \n– the most recent collections of extreme puzzles, harder than most of those \nalready considered in CRT, published in the meantime by various puzzle creators, \nare analysed and their B?B classifications are given in section 11.4; these new \nresults show that a few puzzles (we have found only three in these collections) \nrequire B7-braids and they provide very strong support to our old conjecture that all \nthe 9×9 Sudoku puzzles can be solved by T&E(2) and to our new one that they can \nall be solved by B7-braids; \n– occasionally, larger sized Sudoku grids are considered; this allows in \nparticular to show that the universal solvability by T&E(2) is not true for them. \n \nThirdly and most importantly, chapter 12 and part IV about modelling various \nlogic puzzles are almost completely new; in particular: \n– chapter 12, revolving around the notion of a pattern of proof, shows that our \ninitial simplicity and understandability requirements may be at variance for \ninstances beyond T&E(1) or gT&E(1); it discusses various options for their \ninterpretation, such as B*-braid solutions; it shows that a pure logic approach is still \npossible in theory, although the computational complexity may be much higher, \ndepending on which patterns of proof one is ready to accept; \n– chapter 13, via an illustrative example (the sk-loop in Sudoku), tackles general \nquestions about modelling resolution rules; these arise when one wants to formalise \nnew (possibly application-specific) techniques; although part of the material in it has \nbeen available for several years on the Sudoku part of our website in a rather \ntechnical form, subtle changes (making the presentation much simpler and slightly \nmore general) appear here for the first time; \n– chapter 14 on transitive constraints and the Futoshiki CSP concretely shows \nhow the general concepts and resolution rules defined in this book can be applied to \na CSP with significantly different types of constraints (inequalities) than the \nsymmetric ones considered in the LatinSquare, Sudoku and N-Queens examples; it \nalso shows that the few known, apparently application-specific, resolution rules of \nFutoshiki (ascending chains, hills and valleys) are special cases of these general \nrules; finally, it indicates how our controlled-bias approach to puzzle generation, at \nthe basis of any unbiased statistical results, can be adapted to it in a straightforward \nway; \n– chapter 15 on non-binary arithmetic constraints and the Kakuro CSP may be \nthe most important one among our non-Sudoku examples, as it shows that the binary \n\n16 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nconstraints restriction of our approach can be relaxed not only in theory but also in \npractice and that non-binary constraints can be efficiently managed in application-\nspecifc ways (better than by relying on the standard general replacement method);  \n– chapter 16 deals with some topological and geometric constraints associated \nwith map colouring and path finding (in Numbrix® and Hidato®); together with \nchapters 14 and 15, it confirms that our generalisations from Sudoku to the general \nCSP work concretely – a point in which CRT was partially lacking. \n\n \n1. Introduction \n1.1. The general Constraint Satisfaction Problem (CSP) \nMany real world problems, such as resource allocation, temporal reasoning, \nactivity scheduling, scene labelling…, naturally appear as Constraint Satisfaction \nProblems (CSP) [Guesguen et al. 1992, Tsang 1993]. Many theoretical problems \nand many logic games are also natural examples of CSPs: graph colouring, graph \nmatching, cryptarithmetic, N-Queens, Latin Squares, Sudoku and its innumerable \nvariants, Futoshiki, Kakuro and many other logic games (or logic puzzles).  \nIn the past decades, the study of such problems has evolved into a main sub-area \nof Artificial Intelligence (AI) with its own specialised techniques. Research has \nconcentrated on finding efficient algorithms, which was a necessity for dealing with \nlarge scale applications. As a result, one aspect of the problem has been almost \ncompletely overlooked: producing readable solutions. This aspect will be the main \ntopic of the present book. \n1.1.1. Statement of the Constraint Satisfaction Problem \nA CSP is defined by: \n– a set of variables X1, X2, … Xn, the “CSP variables”, each with values in a \ngiven domain Dom(X1), Dom(X2), …, Dom(Xn), \n– a set of constraints (i.e. of relations) these variables must satisfy.  \nThe problem consists of assigning a value from its domain to each of these \nvariables, such that these values satisfy all the constraints. Later (in Chapter 3), we \nshall show that a CSP can easily be re-written as a theory in First Order Logic. \nAs in many studies of CSPs, all the CSPs we shall consider in this book will be \nfinite, i.e. the number of variables, each of their domains and the number of \nconstraints will all be finite. When we write “CSP”, it should therefore always be \nread as “finite CSP”.  \nAlso, we shall consider only CSPs with binary constraints. One can always \ntackle unary constraints by an appropriate choice of the domains. And, for k > 2, a \nk-ary constraint between a subset of k variables (Xn1, .., Xnk) can always be replaced \nby k binary constraints between each of these Xni and an additional variable \n\n18 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nrepresenting the original k-ary constraint; although this new variable has a large \ndomain and this may be a very inefficient way of dealing with the given k-ary \nconstraint, this is a very standard approach (for details, see [Tsang 1993]). With the \nKakuro CSP, chapter 15 will show an example of how this can be done in practice, \nusing application specific techniques more efficient than the general method. \nMoreover, a binary CSP can always be represented as a (generally large) labelled \nundirected graph: a node (or vertex) of this graph, called a label, is a couple < CSP \nvariable, possible value for it > (or, in our approach, an equivalence class of such \ncouples); given two nodes in this graph, each binary constraint not satisfied by this \npair of labels (including the “strong” constraints induced by CSP variables, i.e. all \nthe contradictions between different values for the same CSP variable) gives rise to \nan arc (or edge) between them, labelled by the name of the constraint and \nrepresenting it. We shall call this graph the CSP graph. (Notice that this is different \nfrom what is usually called the constraint graph.) The CSP graph expresses all the \ndirect contradictions between any two labels (whereas the constraint graph usually \nconsidered in the CSP literature expresses their compatibilities). \n1.1.2. The Sudoku example \nAs explained in the foreword, Sudoku has been at the origin of our work on \nCSPs. In this book, we shall keep it as our main example for illustrating the \ntechniques we introduce, even though we shall also deal with other CSPs in order to \npalliate its specificities (for other detailed examples, see chapters 14 to 16). \nLet us start with the usual formulation of the problem (with its own, self-\nexplanatory vocabulary in italics): given a 9×9 grid, partially filled with numbers \nfrom 1 to 9 (the givens of the problem, also called the clues or the entries), complete \nit with numbers from 1 to 9 in such a way that in each of the nine rows, in each of \nthe nine columns and in each of the nine disjoint blocks of 3×3 contiguous cells, the \nfollowing property holds: \n– there is at most one occurrence of each of these numbers. \nAlthough this defining condition could be replaced by either of the following \ntwo, which are obviously equivalent to it, we shall stick to the first formulation, for \nreasons that will appear later: \n– there is at least one occurrence of each of these numbers, \n– there is exactly one occurrence of each of these numbers. \nFigure 1.1 shows the standard presentations of a problem grid (also called a \nSudoku puzzle) and of a solution grid (also called a complete Sudoku grid). \nSince rows, columns and blocks play similar roles in the defining constraints, \nthey will naturally appear to do so in many other places and a word that makes no \n\n1. Introduction      \n19 \ndifference between them is widely used in the Sudoku world: a unit is either a row \nor a column or a block. And one says that two cells share a unit, or that they see \neach other, if they are different and they are either in the same row or in the same \ncolumn or in the same block (where “or” is non exclusive). We shall also say that \nthese two cells are linked. It should be noticed that this (symmetric) relation between \ntwo different cells, whichever of the three equivalent names it is given, does not \ndepend on the content of these cells but only on their place in the grid; it is therefore \na straightforward and quasi physical notion. \n \n  \n      \n  \n  \n  1 2     6 7 3 8 9 4 5 1 2 \n  \n      3 5   \n  \n      9 1 2 7 3 5 4 8 6 \n  \n    6   \n  \n  7       8 4 5 6 1 2 9 7 3 \n7       \n  \n  3   \n      7 9 8 2 6 1 3 5 4 \n  \n    4   \n  8   \n      5 2 6 4 7 3 8 9 1 \n1       \n  \n  \n  \n  \n      1 3 4 5 8 9 2 6 7 \n  \n    1 2   \n  \n  \n      4 6 9 1 2 8 7 3 5 \n  8     \n  \n  \n  4       2 8 7 3 5 6 1 4 9 \n  5     \n  \n  6   \n      3 5 1 9 4 7 6 2 8 \nFigure 1.1. A puzzle (Royle17#3) and its solution \nAs appears from the definition, a Sudoku grid is a special case of a Latin Square. \nLatin Squares must satisfy the same constraints as Sudoku, except the condition on \nblocks. Following HLS1, the logical relationship between the two theories will be \nfully clarified in chapters 3 and 4. \nWhat we need now is to see how the above natural language formulation of the \nSudoku problem can be re-written as a CSP. In Chapter 2, the essential question of \nmodelling in general and its practical implications on how to deal with a CSP will \nbe raised and we shall see that the following formalisation is neither the only one \nnor the best one. But, for the time being, we only want to write the most \nstraightforward one. \nFor each row r and each column c, introduce a variable Xrc with domain the set \nof digits {1, 2, 3, 4, 5, 6, 7, 8, 9}. Then the general Sudoku problem can be \nexpressed as a CSP for these variables, with the following set of (binary) \nconstraints:  \nXrc ≠ Xr’c’ for all the pairs {rc, r’c’} such that the cells rc and r’c’ share a unit, \nand a particular puzzle will add to these binary constraints the set of unary \nconstraints fixing the values of the Xrc variables corresponding to the givens. \nNotice that the natural language phrase “complete the grid” in the original \nformulation has naturally been understood as “assign one and only one value to each \n\n20 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nof the cells” – which has then been translated into “assign a value to each of the Xrc \nvariables” in the CSP formulation.  \n1.2. Paradigms of resolution \nA CSP states the constraints a solution must satisfy, i.e. it says what is desired. \nBut it does not say anything about how a solution can be obtained; this is the job of \nresolution methods, the choice of which will depend on the various purposes one \nmay have in addition to merely finding a solution. A particular class of resolution \nmethods, based on resolution rules, will be the main topic of this book. \n1.2.1. Various purposes and methods \nIf one’s only goal is to get a solution by any available means, very efficient \ngeneral-purpose algorithms have been known for a long time [Kumar 1992, Tsang \n1993]; they guarantee that they will either find one solution or all the solutions \n(according to what is desired) or find a contradiction in the givens; they have lots of \nmore recent variants and refinements. Most of these algorithms involve the \ncombination of two very different techniques: some direct propagation of constraints \nbetween variables (in order to progressively reduce their sets of possible values) and \nsome kind of structured search with “backtracking” (depth-first, breadth-first, …, \npossibly with some forms of look-ahead); they consist of trying (recursively if \nnecessary) a value for a variable and propagating (based on the constraints) the \nconsequences of this tentative choice as restrictions on other variables; eventually, \neither a solution or a contradiction will be reached; the latter case allows to conclude \nthat this value (or this combination of values simultaneously tried in the recursive \ncase) is impossible and it restricts the possibilities for this (subset of) variables(s). \nBut, in some cases, such blind search is not possible for practical reasons (e.g. \none is not in a simulator but in real life) or not allowed (for a priori theoretical or \næsthetic reasons), or one wants to simulate human behaviour, or one wants to \n“understand” or to be able to “explain” each step of the resolution process (as is \ngenerally the case with logic puzzles), or one wants a “constructive” solution (with \nno “guessing”) or one wants a “pure logic” or a “pattern-based” or a “rule-based” or \nthe “simplest” solution, whatever meaning they associate with the quoted words.  \nContrary to the current CSP literature, this book will only deal with the latter \ncases and more attention will be paid to the resolution path than to the final solution \nitself. Indeed, it can also be considered as an informal reflection on how notions \nsuch as “no guessing”, “a constructive solution”, “a pure logic solution”, “a pattern-\nbased solution”, “an understandable proof of the solution”, “an explanation of the \nsolution” and “the simplest solution” can be defined (but we shall only be able to \nsay more on this topic in the retrospective “final remarks” chapter). It does not mean \n\n1. Introduction      \n21 \nthat efficiency questions are not relevant to our approach, but they are not our \nprimary goal, they are conditioned by such higher-level requirements. Without these \nadditional requirements, there is no reason to use techniques computationally much \nharder (probably exponentially much harder) than the general-purpose algorithms. \nIn such situations, it is convenient to introduce the notion of a candidate, i.e. of a \n“still possible” value for a variable. As this intuitive notion does not pertain to the \nCSP itself, it must first be given a clear definition and a logical status. When this is \ndone (in chapter 4), one can define the concepts of a resolution rule (a logical \nformula in the “condition ⇒ action” form, which says what to do in some factual, \nobservable situation described by the condition pattern), a resolution theory (a set of \nsuch rules), a resolution strategy (a particular way of using the rules in a resolution \ntheory). One can then study the relationship between the original CSP and several of \nits resolution theories. One can also introduce several properties a resolution theory \ncan have, such as confluence and completeness (contrary to general purpose \nalgorithms, a resolution theory cannot in general solve all the instances of a given \nCSP; evaluating its scope is thus a new topic in its own; one can also study its \nstatistical resolution power in specific CSP cases).  \nThis “rule-based” or “pattern-based” approach was first introduced in HLS1, in \nthe limited context of Sudoku. It is the purpose of this book to show that it is indeed \nvery general and chapters 14 to 16 will concretely show that it does apply to the \nvery different types of constraints appearing in Futoshiki, Kakuro and map \ncolouring, but let us first illustrate how these ideas work for Sudoku. \n1.2.2. Candidates and candidate elimination in Sudoku \nThe process of solving a Sudoku puzzle “by hand” is generally initialised by \ndefining the “candidates” for each cell. For later formalisation, one must be careful \nwith this notion: if one analyses the natural way of using it, it appears that, at any \nstage of the resolution process, a candidate for a cell is a number that has not yet \nbeen explicitly proven to be an impossible value for this cell.  \nUsually, candidates for a cell are displayed in the grid as smaller and/or clearer \ndigits in this cell (as in Figure 1.2). Similarly, at any stage, a decided value is a \nnumber that has been explicitly proven to be the only possible value for this cell; it \nis written in big fonts, like the givens. \nAt the start of the game, one possibility is to consider that any cell with no input \nvalue admits all the numbers from 1 to 9 as candidates – but more subtle \ninitialisations are possible (e.g. as shown in Figure 1.2) and a slightly different, \nmore symmetric, view of candidates can be introduced (see chapter 2).  \nThen, according to the formalisation introduced in HLS1, a resolution process \nthat corresponds to the vague requirement of a “pure logic” solution is a sequence of \n\n22 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nsteps consisting of repeatedly applying “resolution rules” of the general condition-\naction type: if some pattern – i.e. configuration of cells, possible cell-values, links, \ndecided values, candidates and non-candidates – defined by the condition part of the \nrule, is effectively present in the grid, then carry out the action(s) specified by the \naction part of the rule. Notice that any such pattern always has a purely “physical”, \ninvariant part (which may be called its “physical” or “structural” support), defined \nby conditions on possible cell-values and on links between them, and an additional \npart, related to the actual presence/absence of decided values and/or candidates in \nthese cells in the current situation. (Again, this will be generalised in chapter 2 with \nthe four “2D” views.) \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nr1 \n           3  \n 4   5   6  \n      8   9 \n            3 \n 4        6  \n 7        9 \n           3 \n 4   5   6  \n 7   8   9 \n            \n  \n 7   8   9 \n  \n 4              \n 7   8   9 \n \n 4              \n 7   8   9 \n  \n 4   5         \n           9 1 \n2 \nr1 \nr2 \n      2        \n 4        6  \n      8   9 \n1    2       \n 4        6  \n 7       9 \n1    2      \n 4        6  \n 7   8   9 \n      2        \n \n7   8   9 \n3 \n5 \n  \n 4              \n           9 \n \n           6  \n      8   9 \n  \n 4        6  \n      8   9 r2 \nr3 \n      2   3 \n  4   5          \n      8   9 \n1    2   3 \n 4              \n           9 \n1    2   3 \n 4   5         \n      8   9 \n6 \n1             \n 4            \n      8   9 \n1    2       \n 4              \n      8   9 \n \n 4   5         \n           9 7 \n           3 \n 4   5         \n      8   9 r3 \nr4 \n7 \n      2        \n 4        6  \n           9 \n      2        \n 4   5   6  \n      8   9 \n      2        \n      5         \n      8   9 \n1             \n      5   6  \n      8   9 \n1    2       \n           6  \n      8   9 \n3 \n      2        \n      5   6  \n           9 \n1             \n 4   5   6  \n           9 r4 \nr5 \n      2   3 \n      5   6  \n           9 \n      2   3 \n           6  \n           9 \n      2   3 \n      5   6  \n           9 \n4 \n1            \n      5   6  \n 7        9 \n1    2   3 \n           6  \n 7        9 \n8 \n      2        \n      5   6  \n           9 \n1             \n      5   6  \n 7        9 r5 \nr6 \n1 \n      2   3 \n 4        6  \n           9 \n      2   3 \n 4   5   6  \n      8   9 \n      2   3 \n      5         \n 7   8   9 \n  \n      5   6  \n 7   8   9 \n      2   3 \n           6  \n 7   8   9 \n      2        \n 4   5         \n 7        9 \n      2        \n      5   6  \n           9 \n  \n 4   5   6  \n 7        9 r6 \nr7 \n           3 \n 4        6  \n           9 \n           3 \n 4        6  \n 7        9 \n           3 \n 4        6  \n 7        9 \n1 \n2 \n           3 \n 4        6  \n 7   8   9 \n  \n      5         \n 7        9 \n           3 \n       5         \n      8   9 \n           3 \n      5         \n 7   8   9 r7 \nr8 \n      2   3 \n           6  \n           9 8 \n1    2   3 \n           6  \n 7        9 \n           3 \n      5         \n 7        9 \n  \n      5   6  \n 7        9 \n           3 \n           6  \n 7        9 \n1    2        \n       5         \n 7        9 4 \n1         3 \n       5         \n 7        9 r8 \nr9 \n      2   3 \n 4              \n           9 5 \n1    2   3 \n 4              \n 7        9 \n           3 \n               \n7   8   9 \n  \n 4              \n 7   8   9 \n           3 \n 4              \n 7   8   9 \n6 \n      2   3 \n  \n      8   9 \n1         3 \n  \n 7   8   9 r9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 1.2. Grid Royle17#3 of Figure 1.1, with the candidates remaining after the elementary \nconstraints for the givens have been propagated \nDepending on the type of their action part, such resolution rules can be classified \ninto two categories (assertion type and elimination type): \n– either they assert a decided value for a cell (e.g. the Single rule: if it is proven \nthat there is only one possibility left for it); there are very few such assertion rules; \n– or they eliminate some candidate(s) (which we call the target(s) of the \npattern); as appears from a quick browsing of the available literature, almost all the \n\n1. Introduction      \n23 \nclassical Sudoku resolution rules are of this type (and, apart from Singles, the few \nrules that seem to be of the assertion type can be reduced to elimination rules); they \nexpress elaborated forms of constraints propagation; their general form is: if such \npattern is present, then it is impossible for some number(s) to be in some cell(s) and \nthe target candidates must therefore be deleted; for the general CSP also, all the \nrules we shall meet in this book, apart from Singles, will be of the elimination type. \nThe interpretation of the above resolution rules, whatever their type, should be \nclear: none of them claims that there is a solution with such value asserted or such \ncandidate deleted. Rather, it must be interpreted as saying: “from the current \nsituation it can be asserted that any solution, if there is any, must satisfy the \nconclusion of this rule”. \nFrom both theoretical and practical points of view, it is also important to notice \nthat, as one proceeds with resolution, candidates form a monotone decreasing set \nand decided values form a monotone increasing set. Whereas the notion of a \ncandidate is the intuitive one for players, what is classical in logic is increasing \nmonotonicity (what is known / what has been proven can only increase with time); \nbut this is not a real problem, as it could easily be restored by considering non-\ncandidates instead (i.e. what has been erased instead of what is still present). \nFor some very difficult puzzles, it seems necessary to (recursively) make a \nhypothesis on the value of a cell, to analyse its consequences and to eliminate it if it \nleads to a contradiction; techniques of this kind do not fit a priori the above \ncondition-action form; they are proscribed by purists (for the main reason that they \noften make the game totally uninteresting) and they are assigned the infamous, \nthough undefined, name of Trial-and-Error. As shown in HLS and in the statistics of \nchapter 6, they are needed in only extremely rare cases if one admits the kinds of \nchain rules (whips) that will be introduced in chapter 5. \n1.2.3. Extension of this model of resolution to the general CSP \nIt appears that the above ideas can be generalised from Sudoku to any CSP. \nCandidate elimination corresponds to the now classical idea of domain restriction in \nCSPs. What has been called a candidate above is related to the notion of a label in \nthe CSP world, a name coming from the domain of scene labelling, which \nhistorically led to identifying the general Constraint Satisfaction Problem. However, \ncontrary to labels that can be given a very simple set theoretic definition based on \nthe data defining the CSP, the status of a candidate is not a priori clear from the \npoint of view of mathematical logic, because this notion does not pertain per se to \nthe CSP formulation, nor to its direct logic transcription.  \nIn chapter 4, we shall show that a formal definition of a candidate must rely on \nintuitionistic logic and we shall introduce more formally our general model of \n\n24 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nresolution. Then we shall define the notion of a resolution theory and we shall show \nthat, for each CSP, a Basic Resolution Theory can be defined. Even though this \nBasic Theory may not be very powerful, it will be the basis for defining more \nelaborate ones; it is therefore “basic” in the two meanings of the word. \n1.3. Parameters and instances of a CSP; minimal instances; classification \nGenerally, a CSP defines a whole family of problem instances.  \nTypically, there is an integer parameter that splits this family into subclasses. A \ngood example of such a parameter is the size of the grid in N-Queens, Latin \nSquares, Sudoku or Futoshiki; in Kakuro, it could be the number of white cells. In \nthe resource allocation problem, it could be some combination of the number of \nresources and the number of tasks competing for them. In graph colouring and graph \nmatching, it could be the size of the graph (e.g. the number of vertices or some \ncombination of the number of vertices and the number of edges). \n1.3.1. Minimal instances \nTypically also, once this main parameter has been fixed, there remains a whole \nfamily of instances of the CSP. In 9×9 Sudoku, an instance is defined by a set of \ngivens. In N-Queens, although the usual presentation of the problem starts from an \nempty grid and asks for all the solutions, we shall adopt for our purposes another \nview of this CSP; it consists of setting a few initial entries and asking for a solution \nor a “readable” proof that there is none. In “pure” Futoshiki, an instance is defined \nby a set of inequalities between adjacent cells; in Kakuro by a set of sum constraints \nin horizontal or vertical sectors. In graph colouring, the possibilities are still more \nopen: there may be lots of graphs of a given size and, once such a graph has been \nchosen, it may also be required to have predefined colours for some subsets of \nvertices (although this is a non-standard requirement in graph theory). The same \nremarks apply to graph matching, where one may want to have predefined \ncorrespondences between some vertices (and/or edges) of the two graphs. \nIn such cases, classifying all the instances of a CSP or doing statistics on the \ndifficulty of solving them meets problems of two kinds. Firstly, lots of instances will \nhave very easy solutions: if givens are progressively added to an instance, until only \nthe values of few variables remain non given, the problem becomes easier and easier \nto solve. Conversely, if there are so few instances that the problem has several \nsolutions, some of these may be much easier to find than others. These two types of \nsituations make statistics on all the instances somewhat irrelevant. This is the \nmotivation for the following definition (inherited from the Sudoku classics).  \n\n1. Introduction      \n25 \nDefinition: an instance of a CSP is called minimal if it has one and only one \nsolution and any instance obtained from it by eliminating any of its givens has more \nthan one solution. [This is a notion of local minimality.] \nFor the above-mentioned reasons, all our statistical analyses of a CSP (and only \nthe statistical ones!) will be restricted to the set of its minimal instances. \n1.3.2. Rating and the complexity distribution of instances \nClassically, the complexity of a CSP is studied with respect to its main size \nparameter and one relies on a worst case (or more rarely on a mean case) analysis. It \noften reaches conclusions such as “this CSP is NP-complete” – as is the case for \nSudoku(n) or LatinSquare(n), considered as depending on grid size n.  \nThe questions about complexity that we shall tackle in this book are of a very \ndifferent kind; they will not be based on the main size parameter. Instead, they will \nbe about the statistical complexity distribution of instances of a fixed size CSP. \nThis supposes that we define a measure of complexity for instances of a CSP. \nWe shall therefore introduce several ratings (starting in chapter 5) that are \nmeaningful for the general CSP. And we shall be able to give detailed results (in \nchapter 6) for the standard (i.e. 9×9) Sudoku case. In trying to do so, the problem \narises of creating unbiased samples of minimal instances and it appears to be very \nmuch harder than one may expect. We shall be able to show this in full detail only \nfor the particular Sudoku case, but our approach is sufficiently general to suggest \nthat the same kind of problem is very likely to arise in any CSP; moreover, the final \nchapters on different logic puzzles will show that they do face the same problem. \nIndeed, we shall define measures of complexity associated with various families \nof resolution rules. For each of them, the complexity of a CSP instance will be \ndefined as the complexity of the hardest rule in this family necessary to solve it, \nwhich is also the complexity of the hardest step of the “simplest” resolution path \nusing only rules from this family. Sudoku examples show that a given set of rules \ncan solve puzzles whose full resolution paths vary largely in intuitive complexity \n(whatever intuitive notion of complexity one adopts for the paths), but the hardest \nstep rating is statistically meaningful; moreover, there is currently no idea about \nhow to formally define the complexity of a full path, i.e. of how to combine in a \nconsistent way the complexities of a sequence of individual steps.  \nThe main advantage of considering ratings of the hardest step type is that, for \neach family of rules, an associated rank can be defined in a very simple, pure logic \nway. This naturally leads to an interpretation of our initial “simplest solution” \nrequirement and to the notion of a “simplest-first strategy”. \n\n26 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n1.4. The basic and the more complex resolution theories of a CSP \nFollowing the definition of the CSP graph in section 1.1.1, we say that two \ncandidates are linked by a direct contradiction, or simply linked, if there is a \nconstraint making them incompatible (including the obvious “strong” constraints, \nusually not explicitly stated as such, that different values for a CSP variable are \nincompatible). \n1.4.1. Universal elementary resolution rules and their limitations \nEvery CSP has a Basic Resolution Theory: BRT(CSP). The simplest elimination \nrule (obviously valid for any CSP) is the direct translation of the initial problem \nformulation into operational rules for managing candidates. We call it the \n“elementary constraints propagation rule” (ECP): \n– ECP: if a value is asserted for a CSP variable (as is the case for the givens), \nthen remove any candidate that is linked to this value by a direct contradiction. \nThe simplest assertion rule (also obviously valid) is called Single (S):  \n– S: if a CSP variable has only one candidate left, then assert it as the only \npossible value of this variable. \nThere is also an obvious Contradiction Detection rule (CD):  \n– CD: if a CSP variable has no decided value and no candidate left, then \nconclude that the problem has no solution. \nTogether, the “elementary rules” ECP, S and CD constitute the Basic Resolution \nTheory of the CSP, BRT(CSP). \nIn Sudoku, novice players may think that these three elementary rules express \nthe whole problem and that applying them repeatedly is therefore enough to solve \nany puzzle. If such were the case, one would probably never have heard of Sudoku, \nbecause it would amount to mere paper scratching and it would soon become boring. \nAnyway, as they get stuck in situations in which they cannot apply any of these \nrules, they soon discover that, except for the easiest puzzles, this is very far from \nbeing sufficient. The puzzle in Figure 1.1 is a very simple illustration of how one \ngets stuck if one only knows and uses the elementary rules: the resulting situation is \nshown in Figure 1.2, in which none of these rules can be applied. For this puzzle, \nmodelling considerations related to symmetry (chapter 2) lead to “Hidden Single” \nrules allowing to solve it, but even this is generally very far from being enough. \n1.4.2. Derived constraints and more complex resolution theories \nAs we shall see later, there are lots of puzzles that require resolution rules of a \nmuch higher complexity than those in the Basic Resolution Theory in order to be \n\n1. Introduction      \n27 \nsolved. And this is why Sudoku has become so popular: all but the easiest puzzles \nneed a particular combination of neuron-titillating techniques and they may even \nsuggest the discovery of as yet unknown ones.  \nIn any CSP, the general reason for the limited resolution power of its Basic \nResolution Theory can be explained as follows. Given a set of constraints, there are \nusually many “derived” or “implied” constraints not immediately obvious from the \noriginal ones. Many resolution rules can be considered as a way of expliciting some \nof the derived unary constraints. As we shall see that very complex resolution rules \nare needed to solve some instances of a CSP, this will show not only that derived \nconstraints cannot be reduced to the elementary rules of the Basic Resolution \nTheory (which constitute the most straightforward operationalization of the axioms) \nbut also that they can be unimaginably more complex than the initial constraints. \nWith all our examples being minimal instances, secondary questions about \nmultiple or inexistent solutions can be discarded. From an epistemological point of \nview, the gap between the what (the initial constraints) and the how (the resolution \nrules necessary to solve an instance) is thus exhibited in all its purity, in a concrete \nway understandable by anyone. [In spite of my formal logic background and of my \nfamiliarity with all the well-known mathematical ideas more or less related to it \n(culminating in deterministic chaos), this gap has always been for me a subject of \nmuch wonder. It is undoubtedly one of the main reasons why I kept interested in the \nSudoku CSP for much longer than I expected when I first chose it as a topic for \npractical classes in AI.] \nAll the families of resolution rules defined in this book can be seen as different \nways of exploring this gap – and the consideration of derived binary constraints \nand/or larger Sudoku grids shows that the gap can be still much larger or deeper \nthan shown by the standard 9×9 case. \n1.4.3. Resolution rules and resolution strategies; the confluence property \nOne last point can now be clarified: the difference between a resolution theory (a \nset of resolution rules) and a resolution strategy. Everywhere in this book, a \nresolution strategy must be understood in the following extra-logical sense: \n– a set of resolution rules, i.e. a resolution theory, plus \n– a non-strict precedence ordering of these rules. Non-strict means that two \nrules can have the same precedence (for instance, in Sudoku, there is no reason to \ngive a rule higher precedence than a rule obtained from it by transposing rows and \ncolumns or by any of the generalised symmetries explained in chapter 2). \nAs a consequence of this definition, several resolution strategies can be based on \nthe same resolution theory with different partial orderings of its rules and they may \nlead to different resolution paths for a given instance. \n\n28 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nMoreover, with every resolution strategy one can associate several deterministic \nprocedures for solving instances of the CSP, as given by the following (sketchy) \npseudo-code. \n \nAs a preamble (each of the following choices will generate a different procedure): \n- list all the resolution rules in a way compatible with their precedence ordering (i.e. \namong the different possibilities of doing so, choose one);  \n- list all the labels in a predefined order or take them in random order. \n \nGiven an instance P, loop until a solution of P is found (or until all the solutions are \nfound or until it is proven that P has no solution): \n⎢   Do until a rule can effectively be applied: \n⎢   ⎢   Take the first rule not yet tried in the list \n⎢   ⎢   Do until its condition pattern is effectively active: \n⎢   ⎢   ⎢  Try to apply all the possible mappings of the condition pattern of this rule \n⎢   ⎢   ⎢  to subsets of labels, according to their order in the list of labels \n⎢   ⎢   End do \n⎢   End do \n⎢   Apply the rule to the selected matching pattern \nEnd loop \nIn this context, a natural question arises: given a resolution theory T, can \ndifferent resolution procedures built on T lead to an instance being finally solved by \nsome of them and unsolved by others? The answer lies in the confluence property of \na resolution theory, to be explained in chapter 5; this fundamental property implies \nthat the order in which the rules of T are applied is irrelevant as long as we are only \ninterested in solving instances (but it can still be relevant when we also consider the \nefficiency of the procedure): all the resolution paths will lead to the same final state. \nThis apparently abstract confluence property (first introduced in HLS1) has very \npractical consequences when it holds in a resolution theory T. It allows any \nopportunistic strategy, such as applying a rule as soon as a pattern instantiating it is \nfound (e.g. instead of waiting to have found all the potential instantiations of rules \nwith the same precedence before choosing which should be applied first). Most \nimportantly, it also allows to define a “simplest first” strategy that is guaranteed to \nproduce a correct rating of an instance with respect to T after following a single \nresolution path (with the easy to imagine computational consequences). \n1.5. The roles of logic, AI, Sudoku and other examples \nAs its organisation shows, this book about the general CSP has a large part \n(about a quarter) dedicated to illustrating the abstract concepts with a detailed case \nstudy of Sudoku; to a lesser extent, it also provides examples from various other \n\n1. Introduction      \n29 \nlogic puzzles. It can be considered as an exercise in either logic or AI or any of these \ngames. Let us clarify the roles we grant each of these topics. \n1.5.1. The role of logic \nThroughout this book, the main function of logic will be to provide a rigorous \nframework for the precise definitions of our basic concepts (such as a “candidate”, a \n“resolution rule” and a “resolution theory”). Apart from the formalisation of the \nCSP itself, the simplest and most striking example is the formalisation (in section \n4.3) of the CSP Basic Resolution Theory informally defined in section 1.4.1 and of \nall the forthcoming more complex resolution theories. Logic will also be used as a \ncompact notational tool for expressing some resolution rules in a non-ambiguous \nway. In the Sudoku example, it will also be a very useful tool for expliciting the \nprecise symmetry relationships between different “Subset rules” (in chapter 8).  \nFor better readability, the rules we introduce are always formulated first in plain \nEnglish and their validity is only established by elementary non-formal means. The \nnon-mathematically oriented reader should thus not be discouraged by the logical \nformalism. Moreover, all the types of chain rules we shall consider will always be \nrepresented in a very intuitive, almost graphical formalism. \nAs a fundamental and practical application of our strict logical foundations to the \nSudoku CSP, its natural symmetry properties can be transposed into three formal \nmeta-theorems allowing one to deduce systematically new rules from given ones \n(see chapter 2 and sections 3.6 and 4.7). In HLS, this allowed us to introduce chain \nrules of completely new types (e.g. “hidden chains”). It also allowed the statement \nof a clear logical relationship between Sudoku and Latin Squares. \nFinally, the other role assigned to logic is that of a mediator between the \nintuitive formulation of the resolution rules and their implementation in an AI \nprogram (e.g. our general purpose CSP-Rules solver). This is a methodological point \nfor AI (or software engineering in general): no program development should ever be \nstarted before precise definitions of its components are given (though not \nnecessarily in strict logical form) – a commonsense principle that is very often \nviolated, especially by those who consider it as obvious [this is the teacher \nspeaking!]. Notice however that the logical formalism is only one among other \npreliminaries to implementation (even in the form of rules of an inference engine) \nand that it does not dispense with the need for some design work (be it only for \nefficiency matters!). \n1.5.2. The role of AI \nThe role we assign to AI in this book is mainly that of providing a quick testbed \nfor the general ideas developed in the theoretical part. The main rules have been \n\n30 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nimplemented in our general CSP-Rules solver. This was initially designed for \nSudoku only (and accordingly named SudoRules), with input and output functions \ndedicated to Sudoku, but the hard core (CSP-Rules) can be applied to any CSP and \nall the examples of chapters 14 to 16 also rely on it. See section 17.4 for more about \nCSP-Rules and the specific CSPs that have already been interfaced to it. \nOne important facet of the rules introduced in this book is their resolution power. \nThis can only be tested on specific examples but the resolution of each instance by a \nhuman solver needs a significant amount of time and the number of instances that \ncan be tested “by hand” against any resolution method is very limited. On the \ncontrary, implementing our resolution rules in a solver allowed us to test about ten \nmillions of Sudoku puzzles (see chapter 6). This also gave us indications of the \nrelative efficiency of different rules. It is not mere chance that the writing of HLS, \nCRT and the present book occurred in parallel with successive versions of \n(SudoRules and) CSP-Rules. Abstract definitions of the relative complexities of \nrules were checked against our puzzle collections for their resolution times and for \ntheir memory requirements (in terms of the number of partial chains generated). \nThis book can also be considered as the basis for a long exercise in AI. Many \ncomputer science departments in universities have used Sudoku for various projects. \nAccording to our personal experience, it is a most welcome topic for student \nprojects in computer science or AI. This is also true of the other types of puzzles \nintroduced in chapters 14 to 16. Trying to implement some rules, even the “simple” \nSubset rules of chapter 8 and even in an application-specific way, shows how re-\nordering the conditions can drastically change the behaviour of a knowledge-based \nsystem: without care, Quads can easily lead to memory overflow problems. (We \ngive detailed formulations for Subset rules in Sudoku, also valid for games based on \nsimilar square grids, so that they can be used for such exercises without too long \npreliminaries.) Trying to implement Sp-whips or Wp-whips is a real challenge. \n1.5.3. The role of Sudoku \nBecause some parts of this book related to the general CSP may seem abstract to \nthe non-mathematician reader (e.g. chapters 3 and 4) or technical (e.g. chapters 9 to \n11), a detailed case study was needed to show progressively how the general \nconcepts work in practice. It is also necessary to show how the general theory can \neasily be adapted, in the most important initial modelling phase, for dealing more \nefficiently or more naturally with each specific case. Choosing Sudoku for these \npurposes was for us a natural consequence of the historical development of the \ntechniques described here, both the general approach and all the types of resolution \nrules. But there are many other reasons why it is an excellent example for the \ngeneral CSP. \n\n1. Introduction      \n31 \nA fast browsing of this book shows that examples from the Sudoku CSP appear \nin many chapters (generally at the end, in order not to overload the main text with \nlong resolution paths) and we keep our HLS constraint that all of them should \noriginate in a real minimal puzzle. But it should be clear for the readers of HLS that \nthe purpose here is very different: we have no goal of illustrating with a Sudoku \nexample each of the rules we introduce (for this, there is HLS).  \nEach example is chosen to satisfy a precise function with respect to the general \nConstraint Satisfaction Problem, such as providing a counter-example to some \nconjecture. As a result, most of our Sudoku examples will be exceptional cases, with \nvery long resolution paths – which (without this warning) could give a very bad idea \nof how difficult the resolution paths look for the vast majority of instances; the \nstatistics in chapter 6 will give a much better idea: most of the time, the chains used \nand the paths are short. \n1.5.3.1. Why Sudoku is a good example \nSudoku is known to be NP-complete [Gary & al. 1979]; more precisely, the CSP \nfamily Sudoku(n) on square grids of sizes n×n for all n is NP-complete. As we fix \nn = 9, this should not have any impact on our analyses. But the Sudoku case will \nexemplify very clearly (in chapter 6) that, for fixed n, the instances of an NP-\ncomplete problem often have a broad spectrum of complexity. It will also show that \nstandard analyses, only based on worst case (worst instances) or (more rarely) mean \ncase, can be very far from reflecting the realities of a CSP. \nFor fixed n = 9, Sudoku is much easier to study than other readily formalised \nproblems such as Chess or Go or any “real world” example. But it keeps enough \nstructure so that it is not obvious. \nSudoku is a particular case of Latin Squares. Latin Squares are more elegant \n(and somehow more “respectable”) from a mathematical point of view, because they \nenjoy a complete symmetry of all the types of variables: numbers, rows, columns. In \nSudoku, the constraint on blocks introduces some apparently mild complexity that \nmakes it more exciting for players. But this lack of full symmetry also makes it \nmuch more interesting from a theoretical point of view. In particular, it allows to \nintroduce the notion of a grouped label (g-label), not present in Latin Squares, and \nnew resolution rules based on it: g-whips and g-braids (see chapter 7). It is \nnoticeable that, with the proper definition of these patterns, they appear (in very \ndifferent guises) in many other CSPs. \nThere are millions of Sudoku players all around the world and many forums \nwhere the rules defined in HLS have been the topic of much debate. A huge amount \nof invaluable experience has been cumulated and is available – including generators \nof random (but biased) puzzles, collections of puzzles with very specific properties \n(fish patterns, symmetry properties, …) and other collections of extremely hard \n\n32 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \npuzzles. The lack of similar collections and of generators of minimal instances is a \nstrong limitation for the detailed analysis of other CSPs. \n1.5.3.2. Origin of our Sudoku examples \nMost of our Sudoku examples rely on the following sets of minimal puzzles: \n– the Sudogen0 collection consists of 1,000,000 puzzles randomly generated by \nus with the top-down suexg generator (http://magictour.free.fr/suexco.txt), with seed \n0 for the random numbers generator; puzzle number n is named Sudogen0#n; \n– the cb collection consists of 5,926,343 puzzles we produced with a new kind \nof generator, the controlled-bias generator (we first introduced it on the late Sudoku \nPlayer’s Forum; see also [Berthier 2009] and chapter 6 below); it is still biased, but \nmuch less than the previously existing ones and in a precisely known way, so that it \nallows to compute unbiased statistics; puzzle number n is named cb#n; \n– the Magictour collection of 1,465 puzzles considered to be the hardest (at the \ntime of its publishing); puzzle number n is named Magictour-top1465#n; \n– the gsf collection of 8,152 puzzles considered to contain the hardest puzzles (at \nthe time of its publishing); puzzle number n is named gsf-top8152 #n; \n– the recent eleven collection of 26,370 puzzles not solvable by T&E(S4); puzzle \nnumber n is named eleven#n; we occasionally refer to complementary collections so \nas to deal with all the known hardest puzzles (see chapter 11). \n1.5.4. The role of non Sudoku examples \nAlthough Sudoku is a very good CSP example, it has a few specificities, such as \n(the major one of) having only “strong” constraints (i.e. all its constraints are \ndefined by CSP variables). With other examples (e.g. N-Queens), we shall show that \nthese specificities have no negative impact on our general theory: the main \nresolution rules (for whips, g-whips, Subsets, Sp-whips, Wp-whips, braids, …) can \neffectively be applied to other CSPs; we shall also illustrate how different these \npatterns may look in these cases.  \nWe are aware that many more examples should be granted as much \nconsideration as Sudoku. We hope that the final chapters partially palliate this \nshortcoming by considering CSPs based on constraints of very different kinds \n(transitive in Futoshiki, non-binary arithmetic in Kakuro, topological and geometric \nin Map colouring, Numbrix® and Hidato®). We also hope that this book will \nmotivate more research for applications to other CSPs. \n1.5.5. Uniform presentation of all the examples \nIf we displayed the full resolution path of an instance, it would generally take \nseveral pages, most of which would describe obvious or uninteresting steps. We \n\n1. Introduction      \n33 \nshall skip most of these steps, by adopting the following conventions (the same as in \nHLS): \n– elementary constraint propagation rules (ECP) will never be displayed; \n– as the final rules that apply to any instance are always ECP and Singles (at \nleast when these rules are given higher priority than more complex ones – which is a \nnatural choice), they will be omitted from the end of the path. \nAll our examples respect the following uniform format. After an introductory \ntext explaining the purpose of the example, the resolution theory T applied to it \nand/or comments on some particular point, a row of two (sometimes three) grids is \ndisplayed: the original puzzle (sometimes an intermediate state) and its solution. \nThen comes the resolution path, a proof of the solution within theory T, where \n“proof” is meant in the strict sense of intuitionistic/constructive logic. \nEach line in the resolution path consists of the name of the rule applied, followed \nby: the description of how the rule is “instantiated” (i.e. how the condition part is \nsatisfied), the “==>” sign, the conclusion allowed by the “action” part. The \nconclusion is always either that a candidate can be eliminated (symbolically written \nas r4c8 ≠ 6 in Sudoku) or that a value must be asserted (symbolically written as \nr4c8 = 5). When the same rule instantiation justifies several conclusions, they are \nwritten on the same line, separated by commas: e.g. r4c8 ≠ 8, r5c8 ≠ 8. \nOccasionally, the detailed situation at some point in the resolution path (the \n“resolution state”) is displayed so that the presence of the pattern under discussion \ncan be directly checked, but, due to place constraints, this cannot be systematic.  \nAll the resolution paths given in this second edition were obtained with version \n1.2 of our general pattern-based CSP solver: CSP-Rules1 (with occasional hand \nediting for a shorter and/or cleaner appearance), using the CLIPS inference engine \n(release 6.30), on a MacPro® 2006 running at 2.66 GHz. It was easily supplemented \nwith inpout/output functions specific to Sudoku (making it correspond to version \n15d.1.12 of our SudoRules solver), Futoshiki, Kakuro, Map colouring, Numbrix® \nand Hidato®. \n1.6. Notations \nThroughout this book, we consider an arbitrary, but fixed, finite Constraint \nSatisfaction Problem. We call it CSP, generically. BRT(CSP) or simply BRT (when \nthere is no ambiguity) refers to its Basic Resolution Theory, RT to any of its \nresolution theories, Wn [respectively Bn, gWn, gBn, SpWn, SpBn, BpBn, …] to its nth \nwhip [respectively braid, g-whip, g-braid, Sp-whip, Sp-braid, Bp-braid, …] resolution \ntheory. The same letters, with no n subscript, are used for the associated ratings. \n                               \n1 See section 17.4 for more information about CSP-Rules. \n\n\n \nPart One \nLOGICAL FOUNDATIONS \n \n\n\n \n2. The role of modelling, illustrated with Sudoku \nBefore we start with the logical formalisation of a general CSP, the main \npurpose of this chapter is to show in detail, using the Sudoku example, how some \ninitial modelling choices and/or associated mental or graphical representations can \nradically change our view of a CSP. Together with consequences of several non-\nstandard modelling choices that will appear throughout this book, it will also \nillustrate the general epistemological principle that changing our representations of a \nproblem can drastically change its apparent complexity. Almost all of the material \nhere was first introduced in HLS1. \nIt may seem strange to start a part on the “logical foundations” with a chapter on \nmodelling that is almost only about Sudoku. But we mean to insist that, in CSP as in \nany other domain, modelling choices are the starting point of any good application \nof any general theory. And most of such choices can only be application specific. \nComplementary considerations on modelling a CSP will appear in section 5.11, \nwhen we introduce the N-Queens and the N-SudoQueens CSPs, after we have \ndefined our general logical framework and our first resolution rules. See also \nchapters 14 to 16 for other detailed examples (Futoshiki, Kakuro, Map colouring…). \n2.1. Symmetries, analogies and supersymmetries \n2.1.1. Symmetries \nThroughout this book, the word “symmetry” is used in the general abstract \nmathematical sense. A Sudoku symmetry, or symmetry for short, is a transformation \nthat, when applied to any valid Sudoku grid, produces a valid Sudoku grid. Any \ncombination of symmetries is a symmetry, there is a null symmetry (that does not \nchange anything) and every symmetry has a reverse; therefore symmetries form a \ngroup (in the usual mathematical sense). \nTwo grids (completed or not) that are related by some symmetry are said to be \nessentially equivalent. The reason is that when the first is solved, its solution and its \nresolution path can be transposed by the same symmetry to a solution and a \nresolution path for the second. These abstract notions become very concrete and \nintuitive as soon as a set of generators for the whole group of symmetries is given. \n\n38 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nBy definition, any symmetry is then composed of a finite sequence of these \ngenerating ones. The simplest set of generators one can consider is composed of two \ndifferent types of obvious symmetries (see e.g. [Russell 2005]): \n– permutations of the numbers: the numerical values of the numbers used to fill \nthe grid are totally irrelevant; they could indeed be replaced by arbitrary symbols; \nany permutation of the digits (which is just a relabeling of the entries) defines a \nsymmetry of the game; there are obviously 9! = 362,880 such symmetries. \n– “geometrical” symmetries of the grid: \n- permutations of individual rows 1, 2, 3; \n- permutations of individual rows 4, 5, 6; \n- permutations of individual rows 7, 8, 9; \n- permutations of triplets of rows (“floors”) 1-2-3, 4-5-6 and 7-8-9; \n- symmetry relative to the first diagonal (row-column symmetry). \nFrom these primary geometrical symmetries, others can be deduced: \n- permutations of individual columns 1, 2, 3; \n- permutations of individual columns 4, 5, 6; \n- permutations of individual columns 7, 8, 9; \n- permutations of triplets of columns (“towers”) 1-2-3, 4-5-6 and 7-8-9; \n- reflection (left-right symmetry); \n- up-down symmetry; \n- symmetry relative to the second diagonal; \n- ± 90° rotation, \n- and, more generally, any combination of symmetries in the generating set. \nAs of the writing of HLS1, the above-mentioned symmetries had been used \nmainly to count the number of essentially non-equivalent grids. Expressed in terms \nof elementary symmetries, two grids (completed or not) are essentially equivalent if \nthere is a sequence of elementary symmetries such that the second is obtained from \nthe first by application of this sequence. \nThus, it has been shown in [Russell 2005] that the number of non-essentially \nequivalent complete Sudoku grids is 5,472,730,538 – much less than the a priori \npossibly different 6,670,903,752,021,072,936,960 complete grids. But the number \nof essentially different minimal puzzles is still much greater, its exact value being \nstill unknown (however, see our estimate in chapter 6: 2.55x1025). The point is that \neach complete grid is, in the mean, the solution for 4.67×1015 minimal puzzles. \nLater we shall formulate axioms for Sudoku in a logical language and in a way \nthat exhibits all the previous symmetries. In turn, such symmetries in the axioms \nwill lead to symmetries in the logical formulation of our resolution rules. But all the \ntypes of symmetries will not be expressed in the same way in these axioms or rules. \n\n2. The role of modelling, illustrated with Sudoku      \n39 \nPrimary symmetries other than row-column will be totally transparent, in that \nthey will make use of variable names (for numbers, rows, columns…) but they will \nrefer to no specific values of these entities. \nAs for row-column symmetry, in elementary resolution rules, our formalisation \nwill stick to their classical formulation and it will be expressed by the presence of \ntwo similar axioms or rules, each of which can be obtained from the other by a \nsimple permutation of the words “row” and “column\". As a consequence of this \nsymmetry in the axioms, there will be a meta-symmetry in the theorems and the \nresolution rules, as expressed by the following intuitively obvious \nmeta-theorem 2.1 (informal): for any valid Sudoku resolution rule, the rule \ndeduced from it by permuting systematically the words “row” and “column” is \nvalid and it obviously has the same logical complexity as the original. We shall \nexpress this as: the set of valid Sudoku resolution rules is closed under row-\ncolumn symmetry. \nIn more evolved resolution rules, in particular in chain rules, we shall show that \na more powerful approach consists of building them only on primary predicates that \nalready take all the symmetries into account. \n2.1.2. The two canonical coordinate systems on a grid \nLet the nine rows be numbered 1, 2, …, 9 from top to bottom. Let the nine \ncolumns be numbered 1, 2, …, 9 from left to right. Let the nine blocks and the nine \nsquares inside any fixed block be numbered according to the same scheme, as \nfollows: \n1 2 3 \n4 5 6 \n7 8 9 \nAny cell, in “natural” row-column space, can be unambiguously located on the \ngrid via either of its two pairs of coordinates (row, column) or [block, square]. One \ncan therefore consider two coordinate systems on the grid. We call them the two \ncanonical coordinate systems and we write the coordinates of a cell in each of them \nas (r, c) or as [b, s], respectively. \nChange of coordinates F: (r, c) → [b, s] is defined by the following formulæ:  \nb = block (r, c) = 1 + 3×IP((r – 1)/3) + IP((c - 1)/3);  \ns = square(r, c) = 1 + 3×mod((r + 2), 3) + mod((c + 2), 3). \nConversely, change of coordinates [b, s] → (r, c) is defined by: \nr = row(b, s) = 1 + 3×IP((b - 1)/3) + IP((s - 1)/3);  \nc = column(b, s) = 1 + 3×mod((b + 2), 3) + mod((s + 2), 3), \nwhere “IP” stands for “integer part” and “mod” for “modulo”. \n\n40 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nNotice that transformation F: (r, c) → [b, s]: is involutive, i.e. F-1 = F or F•F = Id \n(the identity), where “F-1” denotes as usual the inverse of F and “•” denotes function \ncomposition. \n2.1.3. Coordinates and names \nCoordinates should not be confused with the various names that can be given to \nthe rows, columns, blocks, squares and cells for displaying purposes. Various \ndisplaying conventions can be used (e.g. the chess convention: A1, A2, … G8, G9), \nbut we shall systematically stick to the following one, which we have found the \nmost convenient and which is easier to generalise to any CSP: \n– rows are named: r1, r2, r3, r4, r5, r6, r7, r8, r9; \n– columns are named: c1, c2, c3, c4, c5, c6, c7, c8, c9; \n– cells in natural rc-space are named accordingly, in the obvious way: r1c1, \nr1c2, …, r9c9; \n– blocks are named: b1, b2, b3, b4, b5, b6, b7, b8, b9; \n– squares in a block are named: s1, s2, s3, s4, s5, s6, s7, s8, s9; \n– as a result, cells in rc-space can also be named: b1s1, b1s2, …, b9s9; \n– when needed, numbers are named n1, n2, n3, n4, n5, n6, n7, n8, n9; this will \nbe useful in the next sections when we consider “abstract spaces”: row-number, \ncolumn-number and block-number and we want to name cells in these spaces: r1n1, \nr1n2… in rn-space; c1n1, c1n2,… in cn-space; b1n1, b1n2,… in bn-space; the \nreason is that r11, r12… or c11, c12… would be rather obscure and confusing. \nNotice that the same lower case letters as for constants will be used for naming \nvariables, but with subscripts, e.g. r1, b3, …; these close conventions should not lead \nto any confusion between variables and constants. In any case, the risk of confusion \nis very limited: no variable symbol can appear in the description of any real fact on a \nreal grid and no constant symbol will ever appear in an axiom (except of course in \nthe axioms corresponding to the givens of the puzzle) or a resolution rule. \n2.1.4. Supersymmetries \nUp to now, symmetries relative to the entries (numbers) and “geometrical” \nsymmetries relative to the grid have been considered separately. One of the results \nof HLS1 was the elicitation of other symmetries (named supersymmetries) that mix \nnumbers, rows and columns. It showed how they translate into relationships \nbetween some of the constraints propagation rules, how they entail a new logical \nclassification of these rules, how this allows clearer definitions of the rules \nthemselves and how this leads to introduce new types of chains (“hidden” chains \nand “supersymmetric” chains) and associated rules. \n\n2. The role of modelling, illustrated with Sudoku      \n41 \nThe main reason for our interest in supersymmetry is the following: \nmeta-theorem 2.2 (informal): for any valid Sudoku resolution rule mentioning \nonly numbers, rows and columns (i.e. neither blocks nor squares nor any property \nreferring to such objects), any rule deduced from it by any systematic permutation \nof the words “number”, “row” and “column” is valid and it obviously has the \nsame logical complexity as the original. We shall express this as: the set of valid \nSudoku resolution rules is closed under supersymmetry. \nMeta-theorem 2.2 is not intuitively as obvious as meta-theorem 2.1. From a \nlogical point of view, it is nevertheless a straightforward consequence of the \nsubsequent logical formulation of the problem in Multi-Sorted First Order Logic \n(more on this in chapters 3 and 4). And, from a practical point of view, subtle \ncorrespondences between Subset rules become explicit (see chapter 8). If we \nconsider the LatinSquare CSP, the above theorem has a much simpler formulation: \nfor any valid LatinSquare resolution rule, any rule deduced from it by a \nsystematic permutation of the words “number”, “row” and “column” is valid. \n2.1.5. Analogies \nAnalogies should not be confused with symmetries. There are analogies between \nrows and blocks (or between columns and blocks) but there is no real symmetry. \nThis is related to the fact that the two canonical coordinate systems do not share \nthe same properties with respect to the rules of Sudoku. There is a symmetry \nbetween the coordinates in the first system (rows and columns) and, relying \nexplicitly on this symmetry, many axioms and rules exist by pairs; but there is no \nsymmetry between the coordinates in the second system (blocks and squares) so that \ntransposing rules from the first system to the second would be meaningless. \nThere is nevertheless a partial analogy between rows (or columns) and blocks, \ncaptured by the following informal \nmeta-theorem 2.3 (informal): for any valid Sudoku resolution rule mentioning \nonly numbers, rows and columns (i.e. neither blocks nor squares nor any property \nreferring to such objects), if this rule displays a systematic symmetry between rows \nand columns but it can be proved without using the axiom on columns, then the \nrule deduced from it by systematically replacing the word “row” by “block” and \nthe word “column” by “square” is valid and it obviously has the same logical \ncomplexity as the original one. We shall express this as: the set of valid Sudoku \nresolution rules is closed under analogy. \nWhat the phrases “systematic symmetry between rows and columns” and \n“proved without using the axiom on columns” mean will be defined precisely in \nchapter 3. \n\n42 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n2.2. Introducing the four 2D spaces: rc, rn, cn and bn \nTo better visualise the symmetries, supersymmetries and analogies defined in the \nprevious section, we introduce three 2D spaces and their graphical representations. \nThe latter can be grouped with the usual one to form an extended Sudoku board \n(Figure 2.3). These new representations were first introduced in HLS1. How to build \nand use them was explained in detail in HLS2; we do not repeat it here.  \nIn the Subset rules of chapter 8, they will be used to illustrate how apparently \ncomplex familiar rules (such as X-wing, Swordfish or Jellyfish) are no more than \nthe supersymmetric versions of obvious ones (Naked-Pairs, Naked-Triplets and \nNaked-Quads, respectively); all this was already in HLS1, where they have also \nbeen the basis for the notion of hidden chains and associated resolution rules.  \nIn this book, however, the main role of these new spaces and representations will \nbe to justify intuitively the introduction of additional CSP variables. \n2.2.1. Additional graphical representations of a puzzle \nIn addition to the standard “natural” row-column space (or rc-space), we \nconsider three new “abstract” spaces: row-number, column-number and block-\nnumber. In the sequel, these four spaces will also be called respectively rc-space, rn-\nspace, cn-space and bn-space and “cells” in these four spaces will be called rc-cells, \nrn-cells, cn-cells and bn-cells. As for their graphical representations, when they are \ndisplayed together, they are aligned so that rows in the first two coincide and \ncolumns in the first and the third coincide (cn space is thus displayed as nc). \nWhen it comes to candidates, the reason for considering rn-cell with coordinates \n(r, n) in rn-space is that it will contain all the possibilities (all the possible columns) \nfor the unique instance of number n that must occur in row r; similarly, the reason \nfor considering cn-cell with coordinates (c, n) in cn-space is that it will contain all \nthe possibilities (all the possible rows) for the unique instance of number n that must \noccur in column c; finally, the reason for considering bn-cell with coordinates (b, n) \nin bn-space is that it will contain all the possibilities (all the possible squares) for the \nunique instance of number n that must occur in block b. \nAt any point in the resolution process, all the data in the grid (values and \ncandidates) can be displayed in any of these four representations. We insist that each \nof them displays exactly the same logical information content – or, to say it more \nformally: they correspond to the same underlying set of ground atomic formulæ in \nthe (basically 3D) logical language that will be introduced later. They should be \nconsidered only as different visual supports for symmetry, supersymmetry and \nanalogy, in the sense that it is easier to detect some patterns in some representations \nthan in others, as illustrated by several chapters in this book and in HLS. \n\n2. The role of modelling, illustrated with Sudoku      \n43 \nThe correspondences are straightforward and are given by the equivalences: \n– Boolean symbol True is present in nrc-cell (n, r, c), (3D view, to be discussed \nin section 2.4), \n– number n is present in rc-cell (r, c), (standard view), \n– column c is present in rn-cell (r, n), \n– row r is in present in cn-cell (c, n), \n– square s is in present in bn-cell (b, n), where (r, c) = [b, s]. \nNotice that pseudo blocks (i.e. groups of 3×3 rn, cn or bn cells) have no meaning \nin the new rn, cn or bn representations (this is why we do not mark them with thick \nborders): only constraints valid for Latin Squares can be directly propagated in rn or \ncn spaces (as will be proved in chapter 3). Moreover, links in bn-space cannot use \nthe number coordinate.  \n \n  \ncolumn > \n  \n  \nnumber > \n< row  \n  \n  \n. \n  \n  \n  \n  \n1 2 \n  \n< row  \n8 9 \n  \n  \n  \n  \n  \n  \n0 \n  \n  \n \n  \n3 5 \n  \n  \n  \n  \n  \n  \n5 \n  \n6 \n  \n  \n  \n  \n  \n  \n \n6 \n  \n  \n  \n7 \n  \n  \n  \n  \n  \n  \n  \n4 8 \n  \n  \n7 \n  \n \n  \n  \n  \n3 \n  \n  \n  \n  \n  \n7 \n  \n  \n  \n1 \n  \n  \n  \n  \n \n4 \n  \n  \n8 \n  \n  \n  \n  \n  \n  \n4 \n  \n  \n  \n7 \n  \n1 \n  \n \n  \n  \n  \n  \n  \n  \n  \n1 \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \n1 2 \n  \n  \n  \n  \n  \n4 5 \n  \n  \n  \n  \n  \n  \n  \n  \n8 \n \n  \n  \n  \n  \n4 \n  \n  \n  \n  \n  \n8 \n  \n  \n  \n2 \n  \n  \n5 \n \n  \n  \n  \n6 \n  \n  \n  \n  \n  \n  \n  \n2 7 \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \ncolumn > \n  \n  \nnumber > \n< number  \n6 \n  \n \n7 \n  \n  \n  \n1 \n  \n  \n< block  \n \n \n \n \n \n \n \n \n \n  \n  \n \n  \n7 \n  \n  \n  \n1 \n  \n \n \n5 \n \n6 7 \n \n \n \n  \n  \n \n  \n2 \n  \n4 \n  \n  \n  \n2 3 9 \n \n \n \n8 \n \n \n  \n  \n \n5 \n  \n  \n  \n8 \n  \n  \n7 \n \n \n \n \n \n1 \n \n \n  \n9 \n \n  \n  \n2 \n  \n  \n  \n  \n \n \n \n4 \n \n \n \n \n \n  \n  \n \n3 \n  \n  \n9 \n  \n  \n  \n \n \n1 \n \n \n \n \n4 \n \n4 \n  \n \n  \n  \n  \n  \n3 \n  \n  \n \n \n \n \n8 \n \n \n5 \n \n  \n8 \n \n  \n  \n  \n5 \n  \n  \n  \n1 2 \n \n \n \n \n \n \n \n  \n  \n \n  \n  \n  \n  \n  \n  \n  \n \n \n \n5 \n \n7 \n \n \n \nFigure 2.1. Same puzzle Royle17#3 as in Figure 1.1, but viewed in the four different \nrepresentation spaces (rc, rn, cn, bn) \nGenerating these new grid representations by hand is easy as long as we consider \nonly values, as in Figure 2.1, but it is tedious when it comes to the candidates. \n\n44 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nNevertheless, with some practice, it is relatively simple to apply the above stated \nequivalences (see HLS). Moreover, programming a spreadsheet computing the three \nnew grids and their candidates automatically from the first is an easy exercise.  \nLet us illustrate these new representations with the example given in Figure 1.1 \n(puzzle Royle17#3). Starting from the standard form of the puzzle, we can first \ndisplay its entries in the standard grid and in the three new grids of Figure 2.1. After \napplying all the elementary constraints propagation rules in rc-space, we get the \nusual representation of the resolution state in rc-space (Figure 1.2).  \nNow, suppose we generate the full rn, cn and bn representations with candidates. \nFor our puzzle, there is nothing particularly appealing in the rn and bn \nrepresentations, so we skip them. But a surprise is awaiting us with its cn \nrepresentation (Figure 2.2). It makes it obvious that there is a cn-cell (c7n1) with \nonly one possibility left: the unique instance of number 1 that must appear \nsomewhere in column 7 is in fact confined to row 8 (i.e. cn-cell c7n1 has only one \nrow candidate: r8). \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nn1 \nr6 \n     r2 r3 \n  \n  \n     r2 r3 \n  \n     r8 r9 \nr7 \n          r3 \nr4 r5      \n  \n          r3 \nr4 r5      \n \n           \n  \n     r8       r1 \n  \nr4 r5      \n    r8 r9 n1 \nn2 \n     r2 r3 \n     r5      \n     r8 r9 \n     r2 r3 \nr4 r5 r6 \n  \n     r2 r3 \nr4 r5 r6 \n     r8 r9 \n     r2      \nr4      r6 \n  \nr7 \n          r3 \nr4 r5 r6 \n \n  \n          r6 \n     r8      \n  \nr4 r5 r6 \n         r9 \nr1 \nn2 \nn3 \nr1      r3 \n     r5      \nr7 r8 r9 \nr1      r3 \n     r5 r6 \nr7           \nr1      r3 \n    r5 r6 \nr7 r8 r9 \n  \n          r6 \n     r8 r9 \nr2 \n  \n     r5 r6 \nr7 r8 r9 \nr4 \n  \n \nr7      r9 \n          r3 \n  \nr7 r8 r9 n3 \nn4 \nr1 r2 r3 \n  \nr7      r9 \nr1 r2 r3 \nr4      r6 \nr7          \nr1 r2 r3 \nr4      r6 \nr7      r9 \nr5 \nr1      r3 \n  \n          r9 \nr1      r3 \n  \nr7      r9 \nr1 r2 r3 \n         r6 \n  \nr8 \n     r2 r3 \nr4      r6 \n  \nn4 \nn5 \nr1      r3 \n     r5      \n  \nr9 \nr1      r3 \nr4 r5 r6 \n  \n  \nr4      r6 \n     r8      \n  \nr4 r5 r6 \n     r8      \nr2 \nr1      r3 \n         r6 \nr7 r8      \n  \nr4 r5 r6 \nr7           \n         r3 \nr4 r5 r6 \nr7 r8      n5 \nn6 \nr1 r2      \n     r5      \nr7 r8      \nr1 r2      \nr4 r5 r6 \nr7          \nr1 r2      \nr4 r5 r6 \nr7 r8      \nr3 \n \nr4 r5 r6 \n     r8      \n  \nr4 r5 r6 \nr7 r8      \nr9 \n     r2      \nr4 r5 r6 \n  \n     r2      \nr4 r5 r6 \n  \nn6 \nn7 \nr4 \nr1 r2      \n  \nr7          \nr1 r2      \n  \nr7 r8 r9 \nr1 r2      \n          r6 \n     r8 r9 \nr1          \n     r5 r6 \n     r8 r9 \nr1           \n     r5 r6 \nr7 r8 r9 \n  \n         r6 \nr7 r8      \nr3 \n  \n     r5 r6 \nr7 r8 r9 n7 \nn8 \nr1 r2 r3 \n  \n  \nr8 \nr1 r2 r3 \nr4      r6 \n  \nr1 r2      \nr4      r6 \n          r9 \nr1      r3 \nr4      r6 \n          r9 \nr1      r3 \nr4      r6 \nr7      r9 \nr5 \n     r2      \n  \nr7      r9 \n     r2 r3 \n  \nr7      r9 n8 \nn9 \nr1 r2 r3 \n     r5      \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7          \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2      \nr4      r6 \n     r8 r9 \nr1      r3 \nr4 r5 r6 \n     r8 r9 \nr1      r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \n         r6 \nr7 r8      \n     r2      \nr4 r5 r6 \nr7      r9 \n     r2 r3 \nr4 r5 r6 \nr7 r8 r9 n9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 2.2. Same puzzle Royle17#3 as in Figure 1.2, but viewed in cn-space \n\n2. The role of modelling, illustrated with Sudoku      \n45 \nAs an example that the groups of 3×3 contiguous cn-cells have no meaning, we \ncan see that there are many of these pseudo-blocks in which the same candidate \n(row) appears two or more times. \nNow, it appears that, if we had considered more attentively the standard rc \nrepresentation with candidates (Figure 1.2 of the Introduction), we could have seen \nthat, in column c7, there is only one row (row r8) having number 1 among its \ncandidates. Therefore, the unique instance of number 1 that must be found \nsomewhere in column c7 has only one possibility left of finding its place in this \ncolumn and that is in row r8. But the difference is, this cannot be seen in rc-space by \nlooking only at one rc-cell (namely r8c7) since it still has five candidates: 1, 2, 5, 7 \nand 9. What the representation in cn-space provides is the possibility of detecting \nlocally this forced value by looking at a single cn-cell, while in “natural” rc-space \nwe must examine all the nine rc-cells of column c7. This is a very elementary \nexample of how rn, cn or bn spaces can be used in practice. \nThis is our first example of a “Hidden-Single” (HS) in a column. Notice that the \nphrase “hidden single in a column” suggests properly that, in column c7, cell r8c7 \nhas a single possible value but that this fact is hidden, i.e. is not visible by looking \nonly at the candidates for this cell in the usual rc-representation. Of course, one can \nalso find Hidden-Singles in rows or in blocks. Actually, this Royle17#3 puzzle can \nbe solved using only these types of Hidden-Singles (in addition, of course, to Naked \nSingles and the elementary constraints propagation rules). \nGraphically, in the standard rc representation, spotting a Hidden-Single-in-a-\nrow [respectively in-a-column, in-a-block] for some Number n supposes that one \nchecks that the other eight cells in this row [resp. this column, this block] do not \ncontain n among their candidates. In the new rn [resp. cn, bn] representation, all \nthat is needed is checking that one cell has a single possibility left. Thus, even in \nvery elementary cases, the new representations simplify the detection job. \nNow, a few comments about these new graphical representations are in order. \nShould one consider them as a practical basis for human solving? There will \nprobably never be any general agreement on this point. Our personal opinion is that, \ngiven the additional paperwork needed for building and maintaining the four \nrepresentations in parallel, they are not very useful for easy puzzles; but, one can \neasily imagine a computerised interface that maintains the coherency between the \nfour grids (any time a candidate is eliminated from one of them or a value is asserted \nin one of them, this information is transferred to the others). Moreover, there are \nmany difficult puzzles that become easier to solve if we use such representations \n(and rules based on them): see HLS, a significant part of which was based on \nsymmetries, supersymmetries and “hidden” structures.  \nAnyway, in the present book, they will mainly be considered as a step towards \nthe introduction of new CSP variables and as a representation system for them. \n\n46 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nr1 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 r1 \nr2 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 r2 \nr3 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 r3 \nr4 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 r4 \nr5 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 r5 \nr6 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 r6 \nr7 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 r7 \nr8 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 r8 \nr9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 r9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nn1 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 n1 \nn2 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 n2 \nn3 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 n3 \nn4 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 n4 \nn5 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 n5 \nn6 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 n6 \nn7 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 n7 \nn8 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 n8 \nn9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 \nr1 r2 r3 \nr4 r5 r6 \nr7 r8 r9 n9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 2.3. The Extended Sudoku Board, with the four rc, rn, cn and bn spaces; each cell in \nthis Extended Board represents a CSP variable of the extended list. \n\n2. The role of modelling, illustrated with Sudoku      \n47 \n \n \nn1 \nn2 \nn3 \nn4 \nn5 \nn6 \nn7 \nn8 \nn9 \n \nr1 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 r1 \nr2 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 r2 \nr3 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 r3 \nr4 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 r4 \nr5 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 r5 \nr6 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 r6 \nr7 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 r7 \nr8 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 r8 \nr9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 \nc1 c2 c3 \nc4 c5 c6 \nc7 c8 c9 r9 \n \nn1 \nn2 \nn3 \nn4 \nn5 \nn6 \nn7 \nn8 \nn9 \n \n \n \nn1 \nn2 \nn3 \nn4 \nn5 \nn6 \nn7 \nn8 \nn9 \n \nb1 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 b1 \nb2 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 b2 \nb3 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 b3 \nb4 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 b4 \nb5 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 b5 \nb6 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 b6 \nb7 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 b7 \nb8 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 b8 \nb9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 \ns1 s2 s3 \ns4 s5 s6 \ns7 s8 s9 b9 \n \nn1 \nn2 \nn3 \nn4 \nn5 \nn6 \nn7 \nn8 \nn9 \n \n \n\n48 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n2.2.2. Extended Sudoku Board \nAs several examples in HLS have shown, especially when we deal with chains, \nthe rn, cn and bn spaces allow to describe simple “hidden” patterns and rules that \nwould need much more complex descriptions in the standard rc-space. In order to \nfacilitate their use, the rn, cn and bn representations can be grouped with the \nstandard one into the Extended Sudoku Board of Figure 2.3. Notice that these \nrepresentations do not replace the standard one; they are added to it, so that the four \nrepresentations, when placed in the proper relative positions, form an extended \nboard. In order to avoid confusion between numbers, rows and columns, in this \nextended board we tend to use systematically their full names: n1, n2, …; r1, r2, …; \nc1, c2, … But, when an example uses only the rc-space, we may be lax on this. \n2.3. CSP variables associated with the rc, rn, cn and bn cells \nWhat is more important for the present book is that, corresponding to the full \nset of four 2D views, one can define an extended set of CSP variables (with \ncardinality 324 instead of 81): in addition to all the Xr°c° as before, one can now \nintroduce all the Xr°n°, Xc°n° and Xb°n° for n° in {n1, n2, n3, n4, n5, n6, n7, n8, \nn9}, r° in {r1, r2, r3, r4, r5, r6, r7, r8, r9}, c° in {c1, c2, c3, c4, c5, c6, c7, c8, c9} \nand b° in {b1, b2, b3, b4, b5, b6, b7, b8, b9}. And one has the following obvious \ninterpretation: \nThe Extended Sudoku Board represents the extended set of CSP variables for \nSudoku; and, at any stage in the resolution process, the content of each cell \nrepresents the set of still possible values (the candidates) for the corresponding \nCSP variable. \nThe original CSP can now be reformulated in a very different way: find a \nvalue for each of these 324 CSP variables such that, for each n°, r°, c°, b°, s° with \n(r°, c°) = [b°, s°], one has: Xr°c° = n° ⇔ Xr°n° = c° ⇔ Xc°n° = r° ⇔ Xb°n° = s°. \nFrom a logical point of view, there is nothing really new, only obvious \nrewritings of the initial natural language constraints with redundant CSP variables. \nOne may therefore wonder whether introducing such new variables and constraints \ncan be of any practical use. All this book will show that it is, but part of the answer \nis already given, at the most intuitive and elementary level, by our analysis of the \nHidden Single rule in the example of Figure 2.1: written with the new variables, this \nrule appears as a mere Naked Single rule. Thus, a very straightforward extension of \nthe original set of CSP variables is enough to suggest new resolution rules or to \nextend the scope of the existing ones. \nMoreover, this apparently innocuous method is indeed very powerful, even at \nthis basic level: only very few minimal Sudoku puzzles can be solved using \n\n2. The role of modelling, illustrated with Sudoku      \n49 \nElementary Constraints Propagation and Naked Singles; but 29% of the minimal \npuzzles (in unbiased statistics) can be solved if we add Hidden Singles (for detailed \nstatistics, see HLS or chapter 6 of this book for a better version). \n2.4. Introducing the 3D nrc-space \nCan one go further? Could the above 2D representations be a mere stage towards \na more abstract, more synthetic, 3D representation? Instead of considering the four \n2D spaces, one could consider a 3D space, with coordinates n, r, c. In the nrc-cell \nwith coordinates (n, r, c), one would put the Boolean True (or a 1, or a dot, or any \narbitrarily chosen sign) if n is present in rc-cell (r, c). The 2D spaces would then \nappear as the 2D projections of the 3D nrc-space. \nCorresponding to this 3D view, there would be a still larger set (of cardinality \n2×93 = 1458) of possible CSP variables: all the Xn°r°c° and Xn°b°s° for all the \nconstants n°, r°, c°, b°, s° as above. Each of these CSP variables would take Boolean \nvalues (True or False). The constraints would then have to be re-written in a \ndifferent, more complex way:  \nXn°r°c° ∧ Xn°’r°’c°’ = False, for all the pairs {n°r°c°, n°’r°’c°’} such that \n–  either n° = n°’ and the rc-cells r°c° and r°’c°’ share a unit; \n– or n° ≠ n°’ and r°c° = r°’c°’; \ntogether with similar constraints for the Xn°b°s°. Moreover, obvious relationships \ncould be written between these “3D” CSP variables and the “2D” CSP variables of \nthe previous section: Xn°r°c° = True ⇔ Xr°c° = n° ⇔ Xr°n° = c° ⇔ Xc°n° = r° ⇔ \nXb°n° = s° whenever (r°, c°) = [b°, s°]. \nHowever, considered as CSP variables, these “3D” variables would not bring \nanything new (with respect to the four sets of “2D” CSP variables), because all the \n“strong” CSP constraints they would allow to write can already be written in the \nfour sets of “2D” CSP variables. Actually, Sudoku has no “3D diagonal” \nconstraints. Rejecting the adoption of the “3D” variables as CSP variables is thus a \nform of Occam’s razor principle. \nNevertheless, the 3D view will not be completely forgotten: each of these non-\nCSP-variables will reappear later as a “label” (see section 3.2.1), i.e. as a name \nn°r°c° or (n°, r°, c°) for the set of four equivalent possibilities: {Xr°c° = n°, \nXr°n° = c°, Xc°n° = r°, Xb°n° = s°}. And the 3D nrc-space will reappear as a \nrepresentation of the set of these labels. \n \n \n \n\n\n \n3. The logical formalisation of a CSP \nAlthough this book may be used as a support for exercises in Logic or AI and it \nmust therefore adopt a clear and non ambiguous formalism, it is not intended to be \nan introductory textbook on these disciplines and it also aims at defining resolution \ntechniques readable with no pre-requisite. The non-mathematically oriented reader \nshould not be discouraged by the formalism introduced in this chapter: apart from \nthe proof (in chapter 4) of meta-theorems 2.1, 2.2 and 2.3 and some local remarks, it \nwill be used mainly as a general background for our resolution paradigm. On the \npractical side of things, starting with Part II, the resolution rules will always be \nformulated in plain English, so that it will be possible to skip the logical version, if \nit is ever written. Moreover, most of the resolution rules (and, in particular, the chain \nrules of the various types considered in this book) will also be displayed in very \nsimple, intuitive, quasi-graphical representations. As for the Sudoku example, the \nSudoku Grid Theory (SGT) and Sudoku Theory (ST) introduced in section 3.5 \nbelow can be considered as completely obvious from an intuitive point of view (so \nthat this chapter and the next can be skipped or kept for later reading). \n3.1. A quick introduction to Multi-Sorted First Order Logic (MS-FOL) \nIn order to have a logical formalism as concrete and intuitive as possible, we \nwant our formulæ to be simple and compact; we shall therefore use Multi-Sorted \nFirst Order Logic with equality (MS-FOL). A theory in formal logic always deals \nwith some limited topic and it does this in a well-defined language adapted to its \npurpose. The distinctive feature of MS-FOL consists of assuming that the topic of \ninterest has different types of objects, called sorts.  \nFrom a theoretical point of view, such logic is known to be formally equivalent \nto standard First Order Logic with equality (FOL): formulæ, theories and proofs in \nMS-FOL translate easily to and from formulæ, theories and proofs in FOL. But, for \npractical purposes, the natural expressive power of MS-FOL is much greater, i.e. \nthings are generally much easier to write. For a more extensive introduction to MS-\nFOL and an easy but technical proof of its equivalence with FOL, see e.g. [Meinke \net al. 1993]. \nIn most of the real world applications of logic and in computer science (where \nmodern languages are typed – and even object oriented), MS-FOL rather than FOL \n\n52 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nis the natural reference, whether or not any kind of variant or extension \n(intuitionistic, modal, temporal, dynamic and so on) is required. This is not to \nsuggest that the specific sorts needed for an application are in any way “natural”; \nthey can only be the result of a modelling process, as shown in the previous chapter. \nOur introduction to MS-FOL follows the standard lines of any introduction to \nlogic. It is here only for purposes of (almost) self-containment of this book. It also \nintroduces a few unusual but intuitive and useful abbreviations. \n3.1.1. The language of a theory in MS-FOL \nEvery theory in FOL or MS-FOL is defined by a specific language reflecting the \nconcepts and only the concepts pertaining to the underlying domain or “universe of \ndiscourse” (its “vocabulary”); but the syntax or “grammar” of all these specific \nlanguages is built according to universal principles. \n3.1.1.1. Specific sorts, constants and variables \nFirst is given a set Sort of sorts; these are merely abstract symbols (generally \nwritten as Greek letters or with a capital first letter), naming the various types of \nobjects of the application. Attached to each sort σ, there are two disjoint sets of \nsymbols: ct(σ) for naming constants of this sort and var(σ) for naming variables of \nthis sort. Moreover, the sets attached to two different sorts are disjoint (unless one \nsort is a sub-sort of the other). When a variable appears anywhere (e.g. after a \nquantifier), its sort does not have to be further specified: it is known from its name. \n3.1.1.2. Specific predicates and functions \nIn FOL, predicate symbols (also called relation symbols) are names used to \nexpress either properties of objects or relations between objects they relate. A \npredicate symbol has an “arity”: an integer number defining the number of \narguments it takes. In MS-FOL, it also has a “signature”: a sequence of sorts, the \nlength of its arity, specifying that each of the arguments of this predicate must be of \nthe sort corresponding to the place it occupies in it. \nOne generally considers theories with equality. In this case, for each sort σ, there \nis an equality predicate: \"=σ” (= with subscript σ) expressing equality between \nobjects of the same sort σ. \"=σ” has arity 2 and signature (σ, σ). We shall also use ≠σ \nto express non-equality: if x1 and x2 are variables of sort σ, then x1 ≠σ x2 is an \nabbreviation for ¬(x1 =σ x2). As sorts are known from the names of the variables, a \nloose notation with = instead of =σ is generally used. \nSimilarly, a function symbol is a name used to refer to a function. In MS-FOL, it \nhas a sort (the sort of the result), an arity and a signature (specifying respectively the \nnumber and the sequence of sorts of its arguments). \n\n3. The logical formalisation of a CSP      \n53 \n3.1.1.3. Terms and atomic formulæ \nFrom now on, we describe general principles (the “grammar” or syntax of MS-\nFOL) for building formulæ (the “sentences” of MS-FOL) from the above-defined \nspecific “vocabulary”. \nTerms of sort σ are defined recursively:  \n– if “a” is a symbol for a constant of sort σ, then it is a term of sort σ; \n– if “x” is a symbol for a variable of sort σ, then it is a term of sort σ; \n– if f is a symbol for a function of sort σ, arity n and signature (σ1, …, σn), and if \nt1, …, tn are terms of respective sorts σ1, …, σn, then f(t1, …, tn) is a term of sort σ. \nAn atomic formula is the standard means for expressing elementary relations \nbetween its arguments. Atomic formulæ are defined as follows:  \n– if R is a symbol for a predicate of arity n and signature (σ1, …, σn), and if t1, \n…, tn are terms of respective sorts σ1, …, σn, then R(t1, …, tn) is an atomic formula. \nAn atomic formula R(t1, …, tn) is said to be ground if for every i from 1 to n, ti \ncontains no variable symbol. Such a formula expresses a relation between constants. \n3.1.1.4. Logical connectives (or logical operators) \nThe language of MS-FOL has the standard logical connectives of FOL: \n– “∧”, “&” or “and” are used indifferently to express conjunction; \n– “∨“ or “or” are used indifferently to express disjunction; \n– “¬” or “not” are used indifferently to express negation; \n– “⇒” expresses logical implication; \n– “∀x” expresses universal quantification over objects of the sort of x; \n– “∃x” expresses existential quantification over objects of the sort of x. \nWe shall also make an extensive use of the following (not all very standard) \nabbreviations (especially for the formal expression of the chain rules in chapter 5 \nand of the Subset rules in chapter 8), where F is any formula: \n– “∃!xF(x)” expresses that “there exists one and only one x such that F(x)”; \n– “∀x≠x1,x2,…,xnF” expresses a single quantification over x; by definition, it \nwill mean: ∀x[x=x1 ∨ x=x2 ∨ … ∨ x=xn ∨ F]; \n–  “∀≠(x1,x2,…,xn)F” expresses n universal quantifications for n different \nobjects of the same sort; it should not be confused with the previous abbreviation; \nby definition, it will mean:  \n∀x1∀x2…∀xn[x2=x1 ∨ x3=x1 ∨ x3=x2 ∨ … ∨ xn=x1 ∨ xn=x2 ∨ … ∨ xn=xn-1 ∨ F];  \n– “∀x∈{x1,x2,…xn}F(x)” does not surreptitiously introduce set theory; it merely \nexpresses the conjunction of n non quantified formulæ: F(x1) ∧ F(x2) ∧ … ∧ F(xn); \n\n54 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n–  similarly, “∃x∈{x1,x2,…,xn}F(x)” merely expresses the disjunction of n non-\nquantified formulæ: F(x1) ∨ F(x2) ∨ … ∨ F(xn). \n3.1.1.4 Formulæ \nFormulæ of an MS-FOL theory are defined recursively: \n– if R(t1, …, tn) is an atomic formula, then it is a formula; \n– Boolean combinations of formulæ are formulæ: if F and G are formulæ, then \n¬F (also written “not F”), F ∧ G (also written “F & G” or “F and G”) , F ∨ G (also \nwritten “F or G”) and F ⇒ G are formulæ; \n– if F is a formula and x is a variable of any sort, then ∀xF and ∃xF are formulæ. \nA variable x appearing in a formula is called free if it is not in the scope of a ∀x \nor ∃x quantifier. A formula with no free variables is called closed (all its variables \nare quantified); otherwise, the formula is called open. An open formula may have \nquantifiers (when only some but not all of its variables are quantified). \n3.1.2. General logic axioms and inference rules \nNotice that, up to this point, no notion of truth has been introduced: a formula is \nonly a syntactic construct. Provability (rather than truth) will be defined via axioms \nand rules of inference. As we shall need classical logic to formulate the CSP \nproblem in the rest of this chapter and intuitionistic logic to define the CSP \nresolution theories in chapter 4, we shall introduce these axioms in a way that allows \na clear separation between classical and intuitionistic logic. \n3.1.2.1 Gentzen’s “natural logic” \nThere are two main formulations of logic. Hilbert’s is probably the most familiar \none (it is the one we adopted in HLS). Here, we shall prefer Gentzen’s “natural \nlogic” [Gentzen 1934], for three reasons: \n– it makes no formal distinction between an axiom (such as: A ∧ B ⇒ A) and a \nrule of inference (such as Modus Ponens: from A and A ⇒ B, infer B); \n– each logical connective is defined in itself by two complementary and very \nintuitive rules of elimination and introduction (whereas some of Hilbert’s axioms \nmix several connectives and they can have many equivalent formulations); \n– in many occasions, proofs can be made recursively by following the structure \nof a formula; a separate rule for each axiom makes this easier; in particular, our \nthree meta-theorems will be shown to be obvious. \n   premises \n    Gentzen’s formulation is a set of rules in the form:   ————  (name of the rule), \n \n \n \n \n \n \n   conclusion \n\n3. The logical formalisation of a CSP      \n55 \nΓ1 ⏐⎯  φ1,    Γ2 ⏐⎯  φ2 ,     Γ3 ⏐⎯  φ3, … \nmore precisely:   —————————————————    (name of the rule) \n       Δ ⏐⎯  ψ \n \nΓ ⏐⎯  φ is interpreted as: φ can be deduced from Γ;  \nthe whole rule is interpreted as: if  φi can be deduced from Γi, for i = 1, 2, 3, …, then \nψ can be deduced from Δ;  \nhere φi and ψ are formulæ, Γi and Δ are finite sets of formulæ (sets, not sequences – \nthe order of their elements is irrelevant). \n \nThis formalism is the same for classical and intuitionistic logic, but the intended \nmeaning of “can be deduced from” is stronger in intuitionistic logic: it means that \nthere is an effective, constructive proof (in particular, not only a proof by \ncontradiction). Whereas the classical interpretations are in terms of True and False \n(i.e. φ means that φ is True), the intuitionistic ones are in terms of Provable and \nContradictory (i.e. φ means that φ is provable; φ1 ∧ φ2 means that φ1 is provable and \nφ2 is provable; φ1 ∨ φ2 means that φ1 is provable or φ2 is provable). \n3.1.2.2 Propositional axioms common to intuitionistic and classical logic \nMost of the rules for the various connectives go by pairs (E for elimination, I for \nintroduction). We use the standard abbreviations such as: Γ, φ1, φ2 for Γ ∪ {φ1,  φ2}; \nwe also use the symbol ⊥ for the absurd, considered as a proposition always false. \n \n– Implication: \nΓ ⏐⎯  φ ⇒ ψ      Γ ⏐⎯  φ      \n \n \n    Γ,  φ ⏐⎯  ψ \n———————————  (⇒ E)  \n \n———————   (⇒ I) \n       Γ ⏐⎯  ψ  \n \n \n \n   Γ ⏐⎯  φ ⇒ ψ      \n \n(⇒ E) is the way Modus Ponens is expressed in Gentzen’s natural logic. \n \n– Conjunction (there are two elimination rules, one for each conjunct): \nΓ ⏐⎯  φ1 ∧ φ2         \n \n  \n \n   Γ ⏐⎯ φ1    Γ ⏐⎯  φ2 \n——————    (∧ E i) \n \n \n \n  —————————   (∧ I) \nΓ ⏐⎯  φi \n \n \n  \n \n        Γ ⏐⎯  φ1 ∧ φ2      \n \n– Disjunction (there are two introduction rules, one for each disjunct): \nΓ ⏐⎯  φ1 ∨ φ2   Γ, φ1 ⏐⎯  ψ    Γ, φ2 ⏐⎯  ψ      \n          Γ ⏐⎯  φi \n——————————————————   (∨ E)      ——————   (∨ I i) \nΓ ⏐⎯  ψ \n \n \n       Γ ⏐⎯  φ1 ∨ φ2      \n \n\n56 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– Negation: there is no rule for negation, ¬φ is considered as an abbreviation for \nφ ⇒ ⊥. Instead there is an elimination rule for the absurd: \n \n– Absurd: \nΓ ⏐⎯  ⊥  \n————    (⊥ E) \nΓ ⏐⎯  φ  \n \nThe meaning of rule (⊥ E) is that anything can be deduced from the absurd. \nContrary to the other connectives, there is (fortunately) no rule (⊥ I) for introducing \nthe absurd. \n3.1.2.3 Propositional axioms specific to classical logic: “the excluded middle” \nThese are four intuitionistically equivalent forms of the only law specific to \nclassical logic, the “law of the excluded middle”: \n– Excluded middle: ⏐⎯  A ∨¬A \n– Reductio ad absurdum (reduction to the absurd): ⏐⎯  ¬¬A ⇒ A \n– Contraposition: ⏐⎯  (¬B ⇒ ¬A) ⇒ (A ⇒ B) \n– Material implication: ⏐⎯  (A ⇒ B) ⇔ (¬A ∨B) \n3.1.2.4 Axioms on quantifiers \nThey can also be written as natural deductions: \n– Universal quantification: \n  Γ , φ[t/x] ⏐⎯  ψ       \n \n \n   \n    Γ ⏐⎯  φ \n———————    (∀ E)  \n \n \n——————   (∀ I) \n   Γ , ∀xφ ⏐⎯  ψ  \n \n \n \n   Γ ⏐⎯  ∀xφ      \n \n– Existential quantification: \n   Γ , φ ⏐⎯  ψ       \n \n \n   \n Γ ⏐⎯  φ[t/x] \n——————    (∃ E) \n \n \n \n——————   (∃ I) \n Γ , ∃xφ ⏐⎯  ψ  \n \n \n \n   Γ ⏐⎯  ∃xφ \n \nIn these rules, φ[t/x] is the formula obtained by replacing every free occurrence of \nvariable x in φ(x) by term t (where t does not  contain variables present in φ). Notice \nthat, in intuitionistic logic, contrary to classical logic, ∃x is not equivalent to ¬∀x¬. \nThis is usually interpreted by saying that proofs of existence by the absurd are not \nallowed; proofs of existence must be constructive; they must explicitly exhibit the \nobject whose existence is asserted. \n\n3. The logical formalisation of a CSP      \n57 \n3.1.3. Theory specific axioms, proofs and theorems in an MS-FOL theory \nIn any logic, an axiom is defined as a closed formula and a theory as a set of \naxioms including the general logic axioms. In Gentzen’s natural logic, an axiom \nappears as a rule with no premise and with empty set Γ. In short notation, it can be \nwritten, as: ⏐⎯ A (as we did in section 3.1.2.3). \nA proof is a sequence of expressions of the form Γ ⏐⎯ φ, each of which is either \nan axiom or the conclusion of a logic rule with premises equal to previous \nexpressions in the sequence. A theorem is the last expression of a proof, with empty \nset Γ.  \n3.1.4. Model theory, consistency and completeness theorems \nIn this section, we shall consider classical logic only. Models of intuitionistic \nlogic will be introduced in chapter 4. \nDefinition: an interpretation of a theory T is a set of disjoint sets (unless one sort \nis a subsort of another), one for each sort (more precisely, it is a functor i from Sort \nto Set, i.e. to the category of sets), together with: \n– for each sort σ, an application from ct(σ) into i(σ); \n– for each n-ary function symbol f with sort σ and signature (σ1,… σn), a \nfunction i(f): i(σ1) x….x i(σn) → i(σ); \n– for each n-ary predicate symbol R with signature (σ1,… σn), a subset i(R) of \ni(σ1) ×….× i(σn). \nAn interpretation i of a theory T can be extended to any formula of T in an \nobvious way, following the recursive definition of formulæ. If i is an interpretation \nof T and F is a formula, we introduce the symbol “|=” (read satisfies) and the \nexpression i |= F to mean that i satisfies F.  \nDefinition: a model of T is an interpretation i of T such that its extension \nsatisfies all the axioms of T.  \nThe most basic theorems of logic (proven in any logic textbook) are Gödel’s \nconsistency and completeness theorems. They establish the correspondence between \nsyntax and semantics, i.e. between formal proof and set theoretic interpretations: \n– Consistency theorem: a formula provable in T is valid in any model of T; \n– Completeness theorem: a formula valid in any model of T is provable in T. \n3.1.5. Non uniqueness of models of an MS-FOL theory \nIn FOL or MS-FOL, there is no general means of specifying that a theory has a \nunique model. For theories with an infinite model, it is even the contrary that is true: \n\n58 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ndue to the “compactness” theorem, there are always infinitely many models and \nthere are models of arbitrarily large infinite cardinality. \n3.2. The formalisation of a CSP in MS-FOL: T(CSP) \nThe CSP axioms can generally be classified into four general categories: CSP \nsort axioms (defining the domain of the variables, e.g. rows, columns, …), CSP \nbackground axioms (expliciting general structural properties of the problem, e.g. the \nstructure of the Sudoku grid), CSP constraints axioms (the core content of the CSP, \ne.g. the famous four Sudoku axioms), CSP instance axioms (relative to each \ninstance of the CSP, e.g. the entries of a puzzle). \n3.2.1. Sorts and predicates of the CSP \nThere are many ways a CSP could be expressed as a logical theory T(CSP). \nSome of them may be simpler than the one proposed here, but our universal \nformalisation is mainly intended to be a step towards the introduction of CSP \nresolution theories. \nOur approach will be based on the following two remarks. Firstly, as mentioned \nin the Introduction, any non-unary constraint (including the implicit “strong” \nconstraints between different values for the same variable) is supposed to be re-\nwritten as a set of binary constraints and we can thus suppose that our CSP is binary.  \nSecondly, the notion of a label will play a central role. Labels will be the basis \nfor a proper definition of candidates in chapter 4. Our non standard definition of a \nlabel (as an equivalence class of pre-labels) may seem a little convoluted, but it \nprovides for the possibility of having multiple representations of the same basic \nfacts without confusing the underlying CSP variables. As shown in chapter 2 with \nthe four “2D” spaces in Sudoku, multiple representations are very useful in practice. \nFrom a set theoretic point of view, a binary constraint c between two CSP \nvariables X1 and X2 (which may be the same one) is the subset of pairs in \nDom(X1)×Dom(X2) satisfying this constraint; equivalently, it is also a symmetric \nsubset of  \n[{X1}×Dom(X1) ⊕ {X2}×Dom(X2)] × [{X1}×Dom(X1) ⊕ {X2}×Dom(X2)]), which \nis itself a symmetric subset of P×P (where P is the set of pre-labels, defined below). \nThe complement of this set in P×P is a symmetric subset DC(c) of P×P; it is \nobviously equivalent to a set of pairwise c-links between pre-labels, if we say that \nthere is a c-link between two pre-labels p1 and p2 if and only if (p1, p2) ∈ DC(c), i.e. \nif they are contradictory with respect to constraint c. The following definitions make \nthis more formal. \n\n3. The logical formalisation of a CSP      \n59 \nDefinition: in a CSP, a pre-label is a <variable, value> pair, i.e. a pair <X°, x°>, \nwhere X° is a CSP variable and x° ∈ Dom(X°). The set P of pre-labels is thus the \ndisjoint union (the “direct sum”, the ⊕) of the domains of the variables. Informally, \nthis can also be viewed as the union of all the elements of all the domains, after each \nelement has been subscripted by the name of the variable.  \nDefinition: in a CSP, two pre-labels <X°, x°> and <X°’, x°’> are equivalent if \nequalities X° = x° and X°’ = x°’ are equivalent as a direct effect of the definitions. \nEquivalence is the result of a modelling decision. It entails that the two equivalent \npre-labels are related to any other pre-labels by exactly the same constraints. \nDefinition: a label is a name for an equivalence class of pre-labels (with respect \nto the above defined equivalence relation). If l° is a label and <X°, x°> is an element \nof this class, i.e. if <X°, x°> ∈ l°, we often use <X°, x°> to mean l°, by abuse of \nlanguage. It should be noted that, given a CSP variable X° and a value x° in its \ndomain, there is a unique label associated with the <X°, x°> pair. But, conversely, \ndue to our approach of introducing several redundant representations in the \nmodelling process, given a label, there will generally be several elements in its \nequivalence class.  \nGiven a label l° and a CSP variable X°, there are only two possibilities: either \nthere is one and only one value x° in Dom(X°) such that <X°, x°> ∈ l° (in which \ncase we say that <X°, x°> is a representative of l° and that l° is a label for X°) or \nthere is no such x° (in which case we say that l° is not a label for X°). \nDefinition: two different labels l1 and l2 are linked by constraint c if there are \nrepresentatives p1 = <X1, x1> of l1 and p2 = <X2, x2> of l2 such that (p1, p2) ∈ DC(c). \n“linked-by c” is a symmetric (but neither reflexive nor transitive) relation. This \ndefinition entails that (p1, p2) ∈ DC(c) for any representatives p1 of l1 and p2 of l2. \nBy abuse of language, we sometimes write that (l1, l2) ∈ DC(c). \nDefinition: two different labels l1 and l2 are linked by some constraint or simply \nlinked if (l1, l2) ∈ DC(c) for some c. “linked” is a symmetric (but neither reflexive \nnor transitive) relation. \nPre-labels are used as a technical tool for the definition of labels. From now on, \nwe shall meet mainly CSP variables, values and labels. \nWe can now define the logical language of T(CSP). Basically, it has the \nfollowing sorts, sort constants and sort variables: \n– for each CSP variable X, there is a sort X; for CSP variable X, for each \nelement in Dom(X), there is a constant symbol of sort X (considered as a name for \nthis possible value of X); variables of sort X are: x, x’, x1, x2, …; \n– a sort Label; for each element in the set of labels, there is a constant symbol of \nsort Label (the name of this label); variables of sort Label are: l, l’, l1, l2, … but also \n\n60 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n(because it will be convenient when we define chains) z, z’, z1, z2, … and r, r’, r1, r2, \n…; sometimes, we shall also use capital letters for labels; \n– a sort Constraint; for each constraint in the CSP, there is a constant symbol of \nsort Constraint (the name of this constraint); variables of sort Constraint are c, c’, c1, \nc2, …; [additionally, or alternatively when each constraint can be defined in a \nunique way by a label and a constraint type (as in the Sudoku or the N-Queens \ncases), one may have a sort Constraint-Type; modifying accordingly the general \ntheory and all the resolution rules defined later in this book is straightforward]; \n– a sort CSP-Variable; for each CSP variable X, there is a constant symbol X of \nsort CSP-Variable (CSP variables are considered to be their own name); variables of \nsort CSP-Variable are V, V’, V1, V2, …; CSP-Variable is considered as a sub-sort \nof Constraint; [one could also have CSP-Variable-Type, a sub-sort of Constraint-\nType]; \n– a sort Value; for each value in the (ordinary, set theoretic) union of the \ndomains of the CSP variables, there is a constant symbol; variables of sort Value are \nv, v’, v1, v2, … \nThe logical language of the CSP has only the following four predicates: \n– a unary predicate: value, with signature (Label); the intended meaning of \nvalue(l) is that, if <X, x> is any representative of l, then x is the value of variable X; \n– a ternary predicate: linked-by, with signature (Label, Label, Constraint); the \nintended meaning is that the first two arguments, labels l1 and l2, are linked by the \nconstraint given in the third argument, i.e. they are incompatible for this constraint; \n– a binary predicate: linked, with signature (Label, Label); the intended meaning \nis that the two arguments, labels l1 and l2, are linked by some of the constraints. \nFor technical reasons, it also has the following predicate: \n– a ternary predicate: label, with signature (Label, CSP-Variable, Value); the \nintended meaning of label(l, X, x) is that l is the label of the <variable, value> pair \n<X, x>. \nNotice that, contrary to the sorts Label, Constraint [and/or Constraint-Type] and \nCSP-Variable [and/or CSP-Variable-Type] that will play a major theoretical role in \nthe formulation of the resolution rules, sort Value and associated predicate “label” \nwill appear mainly for the technical purpose of specifying the correspondence \nbetween labels and <variable, value> pairs (see the “meaning of labels” axiom \nbelow) and for formulating the completeness of the solution (see the eponym axiom \nbelow). In applications, there may be simpler, perhaps implicit ways of specifying \nthis correspondence and of writing this axiom (see section 3.5). \nOptionally, the language of the CSP may include additional sorts useful for \nformulating certain types of rules or for interacting with the outer world in natural \n\n3. The logical formalisation of a CSP      \n61 \nterms; in some cases, the general sorts above may be defined from these additional \nsorts. For details about this, see the Sudoku example (section 3.5).  \nWhat is most important here is that: \n– the universal language necessary to formulate the general CSP theory is very \nrestricted; \n– with the mere addition of a single predicate “candidate” in the CSP resolution \ntheories (in chapter 4), this language will be enough to define very general and \npowerful resolution rules valid for any CSP. \n3.2.2. Implicit CSP sort axioms \nIn MS-FOL, sort axioms do not have to be written explicitly, as would be the \ncase in FOL, because they are considered as part of the definition of sorts. For each \nsort X, implicit sort axioms for a finite CSP would be of two kinds: exhaustiveness \nof domain constants (the domain of X has no other value than those corresponding \nto constants of this sort) and unique names assumption (two different constants for \nX name two different objects of sort X). Notice that, contrary to constants, there is \nno unique names assumption on variables: two variables (of same sort) can \ndesignate the same object (of this sort); when one wants to specify that they refer to \ndifferent objects, this must be stated explicitly. \n3.2.3. CSP background axioms \nUntil now, we have defined sorts, predicates and functions and we have given \ntheir intended meaning. But we have written nothing that would formally ensure that \nthey really have this meaning. The role of the following background axioms is to \nexpress the fixed structure of the problem and its translation into a graph of labels, \nindependently of any values; they deal with correspondences between original \n<variable, value> pairs and labels, and with the re-writing of the original constraints \ninto symmetric links between labels: \nmeaning of labels: for each CSP variable X°, for each x° in Dom(X°), if l° is the \n(unique) label of <X°, x°>, the axiom defined by the ground atomic formula: \nlabel(l°, X°, x°); \nre-writing of each constraint as a set of links: for each constraint c°, for each \npair of labels l°1 and l°2 such that (l°1, l°2) ∈ DC(c°), the axiom defined by the \nground atomic formula: linked-by(l°1, l°2, c°); \nsymmetry of links: ∀c ∀l1 ∀l2 {linked-by(l1, l2, c) ⇔ linked-by(l2, l1, c)}; (this is \nnormally useless, because it should be ensured by the modelling process); \nexhaustiveness of constraints: ∀l1∀l2 {linked(l1, l2) ⇔ ∃c linked-by(l1, l2, c)}. \n\n62 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nThis is the general, slightly artificial, formulation of background axioms for any \nCSP. In each particular CSP, the concrete expression of these axioms may be \nadapted to the specificities of the problem. They may even be partly implicit in the \ndefinition of the “technical sorts”. This will appear clearly in the Sudoku example. \n3.2.4. CSP constraints axioms \nIt is not enough to associate a link with each constraint; the fact that these links \nreally stand for constraints must also be written. We can now state what could be \ncalled the “core” CSP axioms (the background ones being only technicalities):  \nMeaning of links as constraints: ∀l1∀l2 {value(l1) ∧ linked(l1, l2) ⇒ ¬value(l2)}; \nCompleteness of solution: ∀V ∃!v ∃l  [label(l, V, v) ∧ value(l)]. \nWe have written the first axiom in an asymmetrical way that will make the \ntransition to CSP resolution theories more natural. As for the second axiom, it can \nbe read as: each CSP variable has one and only one value. Notice that this does not \nmean that the CSP has a unique solution; it only means that, in any solution, there is \none and only one value for each CSP variable. \n3.2.5. Logical theory of the CSP: T(CSP) \nFinally, define the Theory of the CSP, T(CSP), as the MS-FOL theory written in \nthe above defined language and consisting of (the implicit sort axioms,) the CSP \nbackground axioms and the CSP constraints axioms. \n3.2.6. CSP instance axioms \nA given corresponds to the assertion of a value for a label: value(l0). An instance \nP of the CSP is specified by a set of n givens l0\n1, …, l0\nn (where all the l0\ni are meta-\nsymbols for – i.e. they stand for – constant label symbols) and it thus corresponds to \nthe conjunction:  \nvalue(l0\n1) ∧ … ∧ value(l0\nn). We name it indifferently E(P) or EP (E for “entries”). \nFinally, we have the obvious theorem: there is a natural correspondence \nbetween a solution of the original CSP instance P and a model of its logical theory \nT(CSP) ∪ EP. \nConsequence: as a logical theory can only prove properties that are true in all its \nmodels, the CSP Theory for a given instance can only prove values that are common \nto all the solutions of this instance, if there is at least one (it can prove anything if \nthere is no solution, i.e. if the instance axioms are inconsistent). \n\n3. The logical formalisation of a CSP      \n63 \n3.3. Remarks on the existence and uniqueness of a solution \nNotice that, given any instance P, the axioms of T(CSP) together with EP a \npriori imply neither the existence nor the uniqueness of a solution for P. Concerning \nthe existence, this may seem to contradict the axiom of completeness, but this axiom \nonly puts a condition on a solution, it does not assert that there is a solution (i.e. that \nEP is consistent with T(CSP)). Indeed, any axiom that would assert the existence of \na solution for any P would be trivially inconsistent. Let us consider the Sudoku \nexample (see section 3.5 for the specific notations). \nIn this case, no set of a priori conditions on the entries of an instance P is known \nthat would ensure that P has a solution (at least one). Obviously, some trivial \nnecessary conditions for existence can be written (such as not having the same entry \ntwice in a row, a column or a block) but they are very far from being sufficient. \nAs for uniqueness, for any puzzle P and corresponding axiom EP, one may think \nthat it could be expressed by the following additional axiom: \n– ST-U: there is at most one solution: \n∀r∀c∀nrc∀n’rc [value(nrc, r, c) ∧ value(n’rc, r, c) ⇒ nrc = n’rc]. \nBut this is not true: such an axiom for uniqueness cannot imply that the solution \nis unique. It can only imply that, if the solution is not unique, then EP contradicts \nthis axiom; i.e. theory ST ∪ ST-U ∪{EP} is inconsistent. This is why we prefer to \nspeak of the assumption rather than the axiom of uniqueness. Whereas the Sudoku \naxioms are constraints the player must satisfy, the assumption of uniqueness puts a \nconstraint on the puzzle creator; a player may choose to believe it or not; if he does, \nit amounts to accepting an oracle. \nUniqueness of a solution is a very delicate question (see also section 3.1.5). As \nwas the case for existence, some trivial necessary conditions on the givens can be \nwritten for uniqueness (such as having entries for at least eight different numbers – \notherwise, given any solution, one could get a different one by merely permuting \ntwo of the remaining numbers) but, again, they are very far from being sufficient. \nUniqueness of the solution (i.e. of a model of the puzzle theory) can only be a \nconsequence of the givens. But is it possible to write a formula U(P) that would be \nequivalent to the uniqueness of the solution if the set of givens of P satisfies it? It is \nlikely that this problem is much more difficult than solving the puzzle. \nThere are famous examples of puzzles that have been proposed and asserted as \nhaving a unique solution and that have indeed several. Many of the resolution rules \nthat have been proposed to take uniqueness into account have been used \ninconsistently to conclude that some puzzle has a unique solution. Moreover, the \nuniqueness of a solution for a given puzzle can be asserted only if it has already \n\n64 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nbeen proven – which supposes that there exists some means for proving it. In our \napproach, unless explicitly stated otherwise, we shall never take the uniqueness of a \nsolution as granted and we therefore do not adopt this assumption for any CSP. \n3.4. Operationalizing the axioms of a CSP Theory \nFrom a logical point of view, the above-defined theory T(CSP) is necessary and \nsufficient to define the CSP: given any instance P (with axiom EP corresponding to \nits entries) and any complete solution G of P, the following are equivalent: \n– G is a solution (in the intuitive sense) of instance P of the CSP; \n– G is a model of T(CSP) ∪ {EP} (in the standard sense of mathematical logic \nintroduced in section 3.1); \n– G satisfies the axioms of T(CSP) ∪{EP}. \nT(CSP) is therefore theoretically perfect: for any instance of the CSP, its formal \nand intuitive meanings coincide. The only problem with it is practical: it does not \ngive any indication on how to build a solution. \nFrom an operational point of view, the “meaning of links as constraints” axioms \ncould be considered as a set of contradiction detection rules. For instance, they \ncould be re-written in the following operational form: if, at some point in the \nresolution process of an instance, we reach a situation in which two different values \nshould be assigned to the same variable, then we can conclude that this instance has \nno solution (the entries of this instance are contradictory with the axioms). This is, \nsomehow, an operational form of these axioms. But do these forms express all the \noperational consequences of the original formulæ? Actually, the developments in \nchapter 4 will show that they do not (and they are indeed very far from doing so). \nThe situation for the “completeness of a solution” axiom is still worse, since it does \nnot tell anything about how it can be used in practice. \nVague as this may remain, let us define the aim we shall pursue with CSP \nResolution Theories: we want to replace the above axioms by another set of axioms \nthat could easily be interpreted as (or transformed into) a set of operational rules for \nbuilding a solution. And, since most known resolution rules in the Sudoku case and \nin many logic puzzles are based on the notion of a candidate and on the progressive \nelimination of candidates, and since this idea corresponds to the common one of \ndomain restriction in the general CSP, we want to write rules explicitly designed for \nthis purpose. The problem is that, unless one admits recursive search (which is not a \nrule), no theory of this kind is known that would be equivalent to T(CSP). \nThis book can thus be considered as being about the operationalization of the \naxioms of a CSP Theory – or about its replacement by a set of axioms that can be \nused in a constructive way. \n\n3. The logical formalisation of a CSP      \n65 \n3.5. Example: Sudoku Theory, T(Sudoku) or ST \nThe rest of this chapter illustrates the abstract general theory with the Sudoku \ncase. T(Sudoku) is written ST for short. With the detailed Sudoku example, our goal \nis to illustrate simultaneously the above formalism and the ways of taking some \nliberty with it in order to simplify it in any specific case. For this purpose, we start \nwith the “natural” formalisation of Sudoku and we show how it can be made \ncompliant with the above general approach. For the most part, at the cost of some \nredundancy, the following sections are designed in such a way that they can be read \nindependently of the previous ones or before them, for readers who do not like the \nabstract technicalities of formal logic. \n3.5.1 Sudoku background axioms: Sudoku Grid Theory, SGT \nThe minimal underlying framework of Sudoku – the minimal support necessary \nfor the representation of any Sudoku puzzle and any intermediate state in the \nresolution process – is a 9×9 grid composed of nine disjoint square blocks of 3×3 \ncontiguous cells. Therefore, whichever formulation one chooses for the constraints \n(in rows, columns and blocks) defining the game, any theory of Sudoku must \ninclude an appropriate theory of such a grid. In the sequel, (our version of) this \ntheory will be called 9-Sudoku Grid Theory (or simply Sudoku Grid Theory or \nSGT); it will contain all the general and “static” or “structural” knowledge about \ngrids and only this knowledge, i.e. all the knowledge that does not depend on any \nparticular entries for a puzzle and that does not change throughout the resolution \nprocess. \n3.5.1.1. Sorts \nIn the limited world of SGT (and of ST in the next section), we shall consider \nthe following sorts: \n– Number: “Number” is the type of the objects intended to fill up the rc-cells of \na grid; when, outside of the formal ST world, we need to refer to other kinds of \nnumbers, we shall use their standard specific mathematical type: for instance, \nintegers from 0 to infinity are simply called integers; the subscripts appearing in \nvariables of any sort are integers, not Numbers; we have chosen to introduce the sort \nNumber, because Sudoku is generally expressed in terms of digits, but one could \nintroduce instead a sort Symbol, with nine arbitrary constant symbols; \n- constant symbols: n1, n2, n3, n4, n5, n6, n7, n8, n9; \n- variable symbols: n, n’, n’’, n0, n1, n2, …; \n– Row: \n- constant symbols: r1, r2, r3, r4, r5, r6, r7, r8, r9; \n- variable symbols: r, r’, r’’, r0, r1, r2, …; \n\n66 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– Column: \n- constant symbols: c1, c2, c3, c4, c5, c6, c7, c8, c9; \n- variable symbols: c, c’, c’’, c1, c2, …; \n– Block: \n- constant symbols: b1, b2, b3, b4, b5, b6, b7, b8, b9; \n- variable symbols: b, b’, b’’, b0, b1, b2, …; \n– Square: \n- constant symbols: s1, s2, s3, s4, s5, s6, s7, s8, s9; \n- variable symbols: s, s’, s’’, s0, s1, s2, …; \n– Label: we define Label as a sort with domain the 729 elements (n°, r°, c°) such \nthat n° is a Number constant, r° is a Row constant and c° is a Column constant; each \nlabel (n°, r°, c°) will be the label for four different <variable, value> pairs, one \nassociated with each of the four groups of CSP-Variables, namely: (n°, r°, c°) = \n{<Xr°c°, n°>, <Xr°n°, c°>, <Xc°n°, r°>, <Xb°n°, s°>}, where [b°, s°] = (r°, c°); \nlabels can be assimilated with cells in 3D space; we sometimes use a loose notation \nn°r°c° for (n°, r°, c°); \n- constant symbols: (n1, r1, c1), … (n9, r9, c9); sometimes also written in a \nloose notation: n1r1c1, … n9r9c9; \n- variable symbols: l, l’, …, r, r’,… , z, z’;  \n– Constraint-Type (and CSP-Variable-Type): \n- constant symbols: rc, rn, cn, bn; notice that we use only four symbols \ncorresponding to the four original types of constraints (a number in a cell, a row, a \ncolumn or a block), not to specific constraints (e.g. a given number in a given row); \n- variable symbols: lk, lk’, lk’’, lk0, lk1, lk2, … (“lk” instead of “c” in the \ngeneral theory, because symbol “c” is used for columns in Sudoku; we choose the \n“lk” symbol because constraint types are used to link candidates). \nAs the variable symbols explicitly carry their sort with the first letter(s) of their \nname, they can be used straightforwardly in quantifiers or in equality with no further \nspecification. For instance: \n– ∀r always means “for all rows r”,  \n– ∀c always means “for all columns c”, \n– ∃n always means “there exists a number n”, \n– = can only be used with objects of the same sort, so that writing r = c is not \nallowed; to be more formal, the = sign should also be subscripted according to the \ntype of objects it relates; for instance, to assert that two rows r1 and r2 are equal, we \nshould use a specific equality symbol =r and write r1 =r r2 (but we shall be lax on this \nnotation also, since no confusion can arise from it). \n\n3. The logical formalisation of a CSP      \n67 \nHere is a very simple example of how MS-FOL simplifies formulæ: one can \nwrite ∀rF instead of what could only be written in FOL with an additional “row” \npredicate, something like ∀r[row(r) ⇒ F]. In longer formulæ, this may lead to \ndrastic simplifications. \nRemark on Constraint versus Constraint-Type: while the four elements of \nConstraint-Type correspond to the four 2D-spaces, the elements of Constraint (if we \nused this sort instead of Constraint-Type) would be represented by the 324 2D-cells \nof these four 2D spaces. Given any label l = (n°, r°, c°) and any constraint type lk, \nthere is one and only one constraint of type lk “passing through l”.  \n3.5.1.2. Function and predicate symbols \nThe SGT language has the “label” predicate necessary to specify all the \ncorrespondences between each label n°r°c° and its four <Xr°c°, n°>, <Xr°n°, c°>, \n<Xc°n°, r°>, <Xb°n°, s°> representatives. It also has the following functions: block \nand square [both with signature (Row, Column) and with respective sorts Block and \nSquare], row and column [both with signature (Block, Square) and with respective \nsorts Row and Column], establishing the correspondences between the two \ncoordinate systems: (r, c) and [b, s]. See sections 2.3 and 2.4 for details.  \n3.5.1.3. Background axioms (Axioms of Sudoku Grid Theory: SGT) \nSGT has all the axioms asserting the equivalences stated in section 2.3.5, but \nthey are now written in the form specified by the general theory (meaning of labels), \ni.e. for each Number constant n°, for each Row constant r°, for each Column \nconstant c°, for each Block constant b° and for each Square constant s° such that \n[b°, s°] = (r°, c°), the following four ground atomic formulæ are axioms of SGT:  \nlabel(n°r°c°, r°c°, n°), label(n°r°c°, r°n°, c°), label(n°r°c°, c°n°, r°),  \nlabel(n°r°c°, b°n°, s°). \n3.5.1.4. Block-free Grid Theory, LatinSquare Grid Theory (LSGT) \nThe Sudoku Grid Theory defined above can be simplified according to the \nfollowing principles: \n– forget the sorts Block and Square, \n– forget all the functions and predicates referring to the above sorts. \nWhat is thus obtained is a theory of grids that does not mention blocks and that \nis appropriate for Latin Squares: LSGT. \nTheorem 3.1: There is a one-to-one correspondence between the models of \nSGT and the models of LSGT with added functions defining the proper \ncorrespondence between the two coordinate systems. \n\n68 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nProof: the proof involves some easy but tedious technicalities concerning the \ncorrespondence between theories in MS-FOL and in FOL (along the lines of \n[Meinke & al. 1993]). Given a model of SGT, just forget anything about blocks and \nsquares to get a model of LSGT. Conversely, given a model of LSGT, the key is that \nthe added functions can be used to define new predicates for blocks and squares and \nthat these predicates can, in turn, be used to introduce the new sorts Block and \nSquare. Details of the proof are left as an exercise for the motivated reader. \n3.5.2. Sudoku axioms, Sudoku Theory (ST) \nWith a proper choice of the sorts, Sudoku Theory (ST) can be axiomatised as a \nmere transliteration of the naive problem formulation. ST is an extension of Sudoku \nGrid Theory (SGT). \n3.5.2.1. The sorts, functions and predicates of Sudoku Theory \nST has the same sorts, functions and axioms as SGT. \nIn addition, in conformance with the general theory, ST also has a predicate \nvalue with signature (Number, Row, Column). We define an auxiliary predicate \nvalue’ with signature (Number, Block, Square) by the change-of-coordinates axiom: \nCC: ∀n∀b∀s {value’[n, b, s] ⇔ value(n, row(b, s), column(b, s))}. \n3.5.2.2. The axioms of Sudoku Theory \nThe only point in stating the ST axioms is that we must be careful if we want to \nguarantee the best possible proximity with the resolution theories to be defined later. \nFor instance, if we write that there must be one value for each cell (in fine an \ninescapable condition of the problem), this precludes all intermediate states from \nsatisfying this axiom; we therefore try to limit the number of such assertions: indeed \nit will appear in only one axiom (ST-C). All the other general conditions in the \nstatement of the problem can be expressed as “single occupancy” or “mutual \nexclusion” axioms – this is why, anticipating on the present formalisation, we \nadopted the first presentation of the game in the Introduction.  \nST is defined as the specialisation of SGT (i.e. it has all the axioms of SGT) with \nCC and the following additional five axioms.  \nThe first four axioms, “meaning of links as constraints axioms” are the quasi \ndirect transliteration of the English formulation of the problem, as given in the \nIntroduction: \n– ST-rc: in natural rc-space, every rc-cell has at most one number as its value \n(i.e. given any rc-cell, it can have at most one value): \n∀r∀c∀n1∀n2 {value(n1, r, c) ∧ n1 ≠ n2 ⇒ ¬value(n2, r, c)}; \n\n3. The logical formalisation of a CSP      \n69 \n \nnotice that the condition linked-by(l1, l2, rc) of the general theory is here written \nmore explicitly by giving the same values to the r and c components of both labels \nl1 = n1rc and l2 = n2rc and different values to their n components; the same remark \napplies to the next three axioms; \n \n– ST-rn: in abstract rn-space, every rn-cell has at most one column as its value \n(i.e. given a row, a given number can appear in it in at most one column): \n∀r∀n∀c1∀c2 {value(n, r, c1) ∧ c1 ≠ c2 ⇒ ¬value(n, r, c2)}; \n \n– ST-cn: in abstract cn-space, every cn-cell has at most one row as its value (i.e. \ngiven a column, a given number can appear in it in at most one row): \n∀c∀n∀r1∀r2 {value(n, r1, c) ∧ r1 ≠ r2 ⇒ ¬value(n, r2, c)}; \n \n– ST-bn: in abstract bn-space, every bn-cell has at most one square as its value \n(i.e. given a block, a given number can appear in it in at most one square): \n∀b∀n∀s1∀s2 {value’[n, b, s1] ∧ s1 ≠ s2 ⇒ ¬value’[n, b, s2]}; \nAs in the general theory, the last axiom of ST says that the grid is complete: \n– ST-C: the grid must be complete: \n∀r∀c∃n value(n, r, c). \nAt this point, it is important to notice that the first three of these axioms exhibit \nthe symmetries and supersymmetries reviewed in chapter 2 (and they are block-free \naccording to the definition in the next section), while the fourth exhibits analogy \nwith the second and the third (and it is not block-free). \nTo better explicit the link with the general theory, let us introduce the following \nauxiliary predicate, with arity 7 and signature (Number, Row, Column, Number, \nRow, Column, Constraint-Type): \nlinked-by(n1, r1, c1, n2, r2, c2, lk) is defined as a shorthand for: \n[lk = rc ∧ r1 = r2 ∧ c1 = c2 ∧ n1 ≠ n2] ∨ \n[lk = rn ∧ r1 = r2 ∧ n1 = n2 ∧ c1 ≠ c2] ∨ \n[lk = cn ∧ c1 = c2 ∧ n1 = n2 ∧ r1 ≠ r2] ∨ \n[lk = bn ∧ block(r1, c1) = block(r2, c2) ∧ n1 = n2 ∧ square(r1, c1) ≠ square(r2, c2)]. \nThen predicate “linked” of the general theory, with arity 6 and signature \n(Number, Row, Column, Number, Row, Column), is obviously equivalent to: \n[n1 ≠ n2 ∧ r1 = r2 ∧ c1 = c2] ∨ [n1 = n2 ∧ share-a-unit(r1, c1 , r2, c2)] \nwith auxiliary predicate share-a-unit(r1, c1, r2, c2) defined as: \n[r1 = r2 ∨ c1 = c2 ∨ block(r1, c1) = block(r2, c2)] ∧ [r1 ≠ r2 ∨ c1 ≠ c2]. \n\n70 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n3.5.2.3. The axioms of LatinSquare Theory: LST \nOne can define LatinSquare Theory (LST) as the Theory obtained from ST by \nforgetting any sort, function, predicate and axiom mentioning blocks and/or squares. \nIn formal logic, we should normally have started with LST and specialised it to ST, \nbut we are more interested in ST than in LST. \n3.5.3 Instance specific axioms (specifying the entries of a given puzzle) \nIn order to be potentially consistent with any set of entries, ST includes no \naxioms on specific values. With any specific puzzle P we can associate the axiom EP \ndefined as the finite conjunction of the set of all the ground atomic formulæ \nvalue(nk, ri, cj) such that there is an entry of P asserting that number nk must occupy \nrc-cell (ri, cj). Then, when added to the axioms of ST, axiom EP defines the theory of \nthe specific puzzle P. \n3.6. Formalising the Sudoku symmetries \nIn this section, we introduce the concept of a block-free formula and we define \nthree transformations on formulæ (in the language of ST) that will be used in \nchapter 4 to state and prove the formal versions of the intuitive meta-theorems 2.1, \n2.2 and 2.3. We also prove a theorem that may be interesting in its own respect: it \nstates that if a block-free formula (a formula that does not mention blocks or \nsquares) can be proved in ST, then it can be proved without axiom ST-bn. As a \nresult, a block-free formula is true for Sudoku (i.e. in ST) if and only if it is true for \nLatin Squares (i.e. in LST). \n3.6.1. Block-free predicates and formulæ \nThe notion of a block-free formula is the formalisation of the natural language \nphrase (“mentioning only numbers, rows and columns”) that we used in chapter 2 to \nexpress informally our Sudoku meta-theorems. Block-free formulæ play a major \nrole in all that is related to Sudoku, because they are the formulæ to which these \nmeta-theorems can be applied. \nDefinition: a function or predicate is called block-free if the sorts Block and \nSquare do not appear in its sort or signature. “=n”, “=r” and “=c” are block-free \npredicates, and so are “label” and “value”, whereas “=b\" and “=s” are not.  \nDefinition: a formula is called block-free if it is built only on block-free \nfunctions and predicates and it does not contain the bn constant (of Constraint-\nType). For instance, “value” is block-free but “value’ ” is not. \n\n3. The logical formalisation of a CSP      \n71 \n3.6.2. The Src, Srn and Scn transformations of a block-free formula \nIn order to deal properly with the different kinds of symmetries reviewed in \nchapter 2, we need the following definitions. For any block-free formula F, we \ndefine inductively the three block-free formulæ Src(F), Srn(F) and Scn(F). These \nformulæ have the same arity as F but they have different signatures. \nBefore giving the formal definitions, notice that they are just a pompous way of \nsaying what was said informally in chapter 2, so that they can be skipped as \ntechnicalities of secondary interest: \n– Src(F) is the formula obtained from F by permuting systematically the words \n“row” and “column”, \n– Srn(F) is the formula obtained from F by permuting systematically the words \n“row” and “number”, \n– Scn(F) is the formula obtained from F by permuting systematically the words \n“column” and “number”. \nAs is usual in logic, the formal definitions of Src(F), Srn(F) and Scn(F) are given \nrecursively, following the general construction of a formula: \n \n– block-free terms (notice that the sorts cannot be permuted in functions, but the \nsubscripts on the variables are permuted instead; this is technically important, \nespecially when we deal with transformations of formulæ with different numbers of \nvariables of different sorts): \n \n \n \n \n \n– block-free atomic formulæ (as in functions, the sorts cannot be permuted in \npredicate “value”, but the subscripts on the variables are permuted instead): \n \n \n \n \nF \nSrc(F) \nSrn(F) \nScn(F) \nf(ni, rj, ck) \nf(ni, rk, cj) \nf(nj, ri, ck) \nf(nk, rj, ci) \nF \nSrc(F) \nSrn(F) \nScn(F) \nni =n nj \nni =n nj \nri =r rj \nci =c cj \nri =r rj \nci =c cj \nni =n nj \nri =r rj \nci =c cj \nri =r rj \nci =c cj \nni =n nj \nlk = rc \nlk = rc \nlk = cn \nlk = rn \nlk = rn \nlk = cn \nlk = rn \nlk = rc \nlk = cn \nlk = rn \nlk = rc \nlk = cn \nvalue(ni, rj, ck) \nvalue(ni, rk, cj) \nvalue(nj, ri, ck) \nvalue(nk, rj, ci) \n\n72 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– logical connectives: each of the logical connectives merely commutes with \neach of Src, Srn, Scn; \n \n– quantifiers: they partly commute, with quantified variables exchanged: \n \n \n \nNotice that the three transformations are involutive, i.e. for any block-free \nformula F, one has Src•Src(F) = F, Srn•Srn(F) = F and Scn•Scn(F) = F. \n3.6.3. Srcbs transformation of a block-free formula \nFor a block-free formula F, its Srcbs transform is also defined recursively by: \n– block-free terms (notice again that the sorts cannot be permuted in the \nfunctions, but the subscripts on the variables are permuted instead; this is technically \nimportant, especially when we deal with transformations of formulæ with different \nnumbers of variables of different sorts): \n \n \n \n \n \n \n– block-free atomic formulæ: \n \n \nF \nSrcbs(F) \nni =n nj \nni =n nj \nri =r rj \nbi =b bj \nci =c cj \nsi =s sj \nlk = rc \nlk = rc \nlk = rn \nlk = bn \nlk = cn \n⊥ \nvalue(ni, rj, ck) \nvalue’[ni, bj, sk] \n \n \n– logical connectives: all of them merely commute with Srcbs; \n \n– quantifiers: they partly commute, (r, c) variables being changed to [b, s]: \nF \nSrc(F) \nSrn(F) \nScn(F) \n∀niF, ∃niF \n∀niSrc(F), ∃niSrc(F) \n∀riSrn(F), ∃riSrn(F) \n∀ciScn(F), ∃ciScn(F) \n∀riF, ∃riF \n∀ciSrc(F), ∃ciSrc(F) \n∀niSrn(F), ∃niSrn(F) \n∀riScn(F), ∃riScn(F) \n∀ciF, ∃ciF \n∀riSrc(F), ∃riSrc(F) \n∀ciSrn(F), ∃ciSrn(F) \n∀niScn(F), ∃niScn(F) \nF \nSrcbs(F) \nf(ni, rj, ck) \nf(ni, bj, sk) \n\n3. The logical formalisation of a CSP      \n73 \n \nF \nSrcbs(F) \n∀niF, ∃niF \n∀niSrcbs(F), ∃niSrcbs(F) \n∀riF, ∃riF \n∀biSrcbs(F), ∃biSrcbs(F) \n∀ciF, ∃ciF \n∀siSrcbs(F), ∃siSrcbs(F) \n \n3.6.4. Formal symmetries between the ST axioms \nUsing the above definitions, figure 3.1 shows all the symmetry, supersymmetry \nand analogy relationships between the four main axioms of ST. \n \n \n  \nFigure 3.1. The symmetry relationships between the ST axioms \n3.7. Formal relationship between Sudoku and Latin Squares \n3.7.1. Block-free transform of a formula \nWith any formula G (not necessarily block-free) one can associate a well-defined \nblock-free formula BF(G), called its block-free transform. It is defined recursively: \n– if G is a block-free atomic formulæ, then BF(G) is F; \n– if G is a non block-free atomic formulæ, then BF(G) is ⊥; \n– logical connectives ¬, ∧, ∨, and ⇒ merely commute with BF; \nSrc \nST-rc \nSrn \nST-rn \nScn \nST-cn \nSrc \nScn \nSrn \nST-bn \nSTrcbs \n\n74 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– if G is ∀xG1, then BF(G) is ∀xBF(G1) if x is a block-free variable and it is \nmerely G1 if x is a non block-free variable; \n– if G is ∃xG1, then BF(F) is ∃xBF(G1) if x is a block-free variable and it is \nmerely G1 if x is a non block-free variable. \nRemarks: \n– the last two conditions are justified by the fact that non block-free variables \nare eliminated together with the non block-free atomic formulæ containing them; \n– for any formula G (and not only the atomic ones), if G is block-free, then \nBF(G) is merely G. \n3.7.2. Formal relationship between Sudoku and Latin Squares \nTheorem 3.2: a block-free formula that is valid in ST has a block-free proof. \nAs an obvious corollary, we have: \nTheorem 3.3: a block-free formula is valid for Sudoku (i.e. is a theorem of ST) \nif and only if it is valid for Latin Squares (i.e. it is a theorem of LST).  \nProof of theorem 3.2: Remember the standard definition of a proof of F: it is a \nsequence of formulæ ending with F, where each formula in the sequence either is a \nlogical axiom or is an axiom of ST or can be deduced from the previous ones by the \nrules of natural deduction. \nLet F be a block-free formula and consider a proof of it in ST. It suffices to show \nthat, if we apply BF to any step in this proof, we get a block-free proof of BF(F). \nThis is an advantage of the Gentzen’s formulation of logic adopted in this book: it is \nobvious (though tedious to check in detail) that all the rules of natural deduction in \nsection 3.1 are stable under the BF transformation. (See HLS1 for a slightly less \nobvious proof based on Hilbert’s formalism instead of Gentzen’s). The proof \ntherefore reduces to the following obvious relationship between the sets of axioms \nof ST and LST: BF(ST) = LST. \n\n \n4. CSP Resolution Theories \nBefore we try to capture CSP Resolution Theories in a logical formalism, we \nmust establish a clear distinction between a logical theory of the CSP itself (as it has \nbeen formulated in chapter 3, with no reference to candidates) and theories related to \nthe resolution methods (which we consider from now on as being based on the \nprogressive elimination of candidates). These two kinds of theories correspond to \ntwo options: are we just interested in formulating a set of axioms describing the \nconstraints a solution of a given CSP instance (if it has any) must satisfy or do we \nwant a theory that somehow applies to intermediate states in the resolution process? \nTo maintain this distinction as clearly as possible, we shall consistently use the \nexpressions “CSP Theory” for the first type and “CSP Resolution Theory” for the \nsecond type. Section 4.1 elaborates on this distinction. Since it has been shown in \nchapter 3 that formulating the first theory is straightforward, theories of the second \nkind will remain as our main topic of interest in the present book. Nevertheless, it \nwill be necessary to clarify the relationship between the two types of theories and \nbetween their respective basic notions (“value” and “candidate”). \nIn section 4.2, we formalise the notion of a “resolution state”. This provides the \nintuitive notion of a candidate with a clear logical status allowing to define precise \nrelationships between the basic formal predicates “value” and “candidate”. \nAs the first illustration of our logical formalism, section 4.3 shows that any CSP \nhas a minimal CSP Resolution Theory (its Basic Resolution Theory or BRT(CSP)) \nand it expresses its axioms in this formalism. Here, “minimal” means that all the \nother resolution theories introduced in this book will be obtained by adding axioms \nto BRT(CSP) (logically speaking, they will thus be specialisations of BRT(CSP)). \nSection 4.4 then defines the general concepts of a CSP Resolution Theory. Section \n4.5 defines a very important property a resolution theory can have (or not), the \nconfluence property, and it shows that BRT(CSP) has it in any CSP. \nFinally, sections 4.6 and 4.7 deal with the Sudoku example. The latter proves the \nformal versions of the informally stated meta-theorems 2.1, 2.2 and 2.3. It also \nproves an extension of theorem 2.3 that will be very useful when we want to apply it \nin practice. Notice that, even without understanding the technicalities of their proofs, \none can consider these meta-theorems as simple heuristics suggesting new potential \nrules and one can prove directly all the resolution rules deduced from them (this will \ngenerally be very easy). \n\n76 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n4.1. CSP Theory vs CSP Resolution Theories; resolution rules \nAs our first approximation, we could say that a CSP Theory is about what we \nwant (a complete assignment of values to the CSP variables satisfying the general \nCSP constraints and the specific givens), with no consideration at all for the way it \ncan be obtained, whereas a CSP Resolution Theory is about how we can reach this \ndesired final state; but then we must correct the resulting erroneous suggestion that a \ntheory of this second kind would be mainly concerned with resolution processes. \nTo state it formally, throughout this book, the status we grant a CSP Resolution \nTheory is logical, not operational; and we make a clear distinction between a \nResolution Theory and possible resolution methods that may be built as operational \ncounterparts or algorithmic computer implementations of it (e.g. by superimposing \npriorities on the pure logic of the resolution rules). Such resolution methods may \nthemselves be considered from different points of view and different kinds of logic \nmay be used to express these. For instance, one might be interested in the dynamics \nof the resolution processes associated with the method, in which case one could use \ntemporal or dynamic logic for modelling them. This is not the point of view chosen \nin this book, where we consider a resolution method from the point of view of the \n“resolution states” underlying it and we adopt modal logic (logic of necessity and \npossibility) to model these. However, whereas the main part of this book deals with \nresolution theories themselves, these theories can have properties, such as \nconfluence, that will be shown (in chapter 5) to be very important when one wants \nto define and implement specific resolution methods based on them. \nThen, from a logical standpoint, the only purpose of a Resolution Theory is to \nrestrict the number of resolution states compatible with the axioms (i.e. the number \nof partial solutions, expressed in terms of values and candidates) and the \nrelationships that exist between them. From an operational standpoint, it can be used \nas a reference for defining a resolution method that will dynamically modify the \ncurrent information content; but, before a resolution theory can be used this way, \nthere must be some operationalization process. This distinction is essential (and very \nclassical in Artificial Intelligence) because a given set of logical axioms (a \nResolution Theory) can often be operationalized in many different ways. (To be \nmore specific: it can, for instance, be expressed as very different sets of rules in an \ninference engine; but it can also be implemented as a classical C program.) \nWhereas CSP Theories, as developed in chapter 3 are very simple, CSP \nResolution Theories require a more complex approach. All the CSP Resolution \nTheories should be restricted to satisfy two obvious general requirements: a) any of \ntheir rules should be a consequence of the CSP theory (under conditions, to be \ndefined, on the relationship between values and candidates); b) they should apply to \nany set of givens. This is very far from being enough to constrain the possible \ntheories of interest. But, as a consequence of these broad requirements, some aspects \n\n4. CSP Resolution Theories      \n77 \nof CSP solving are excluded from our considerations, such as any form of \npsychological bias: in Sudoku, we do not take into account the physical proximity of \nrows or columns, although it is probably easier to see Hidden Triplets in three \ncontiguous cells in a row than in three cells disseminated in this row; in map \ncolouring, we forget the real shapes of the regions, although complicated shapes \nmay make some adjacency relations more difficult to see. \n4.2. The logical nature of CSP Resolution Theories \nThe analyses in this section constitute the central part of this chapter and they are \nthe key to understanding the logical foundations of this book: given that the naive \nnotion of a candidate is the basis for the various popular resolution rules in many \nlogic puzzles and that it will also be the basis for the formulation of any resolution \nrule for any CSP, can one grant it a well defined logical status? Another point to be \nconsidered here is the relationship between the CSP Theory T(CSP), which does not \nuse this notion, and related CSP Resolution Theories, which are based on it. \n4.2.1. On the (non existent) problem on non-monotonicity \nLet us first clarify the following point. One apparent problem in choosing the \nnotion of a candidate as the basis for a logical formulation is that the set of \ncandidates for any CSP variable is monotonically decreasing throughout the \nresolution process, whereas logic is usually associated with monotonically \nincreasing sets: starting from what is initially assumed to be true (the axioms), each \nstep in a proof adds new assertions to what has been proven to be true in the \nprevious steps; there is no possibility in standard logic for removing anything. \nDo we therefore need to use some sort of non-monotonic logic, as is often the \ncase with AI problems? Not really: instead of considering candidates for a variable, \nwe can consider the complementary set of “not-candidates” or excluded values, i.e. \nvalues that are effectively proven to be incompatible with all that is already known \n(in the Sudoku case, the crossed or erased candidates in the grid on the paper \nsheet) – and this is a monotonically increasing set. By “effectively proven”, one \nshould understand “proven by admissible reasoning techniques” (and the sequel will \nshow that the informal word “admissible” must in turn be understood technically as \n“intuitionistically valid” or, equivalently, “constructively valid”). \nWhat is really important in logic is that the abstract information content is \nmonotone increasing with the development of the proof. (One should not confuse \nthis information content with possibly varied representations of it.) In the sequel, \nwhen we write resolution rules, we shall conform to what we have done in HLS for \nSudoku and we shall refer to candidates, but we must keep in mind that, when \nexpressed with not-candidates, the underlying logic is always monotone increasing. \n\n78 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n4.2.2. Resolution states and resolution models \nNotwithstanding the above remarks on the informal notion of a candidate, can \nwe grant it a precise logical status allowing us to use it consistently in the expression \nof the resolution rules? But, first of all, how is it related to the primary predicate \n“value”? Notice the vocabulary we used spontaneously: a value is asserted as being \ntrue, while a candidate is proven (or not proven) to be incompatible with all that is \nalready proven. The most straightforward way of interpreting this is as an indication \nthat the underlying logic of any CSP Resolution Theory based on candidates should \nbe modal: it should be a logic of possibility/necessity as opposed to a logic of truth \n(such as standard logic or MS-FOL). \nBefore entering into the formal details, let us define the notions of a resolution \nstate and of a resolution model. Defining the model theoretic aspects before the \nsyntactic aspects is not the usual way to proceed in logic, but it is more intuitive.  \n4.2.2.1. Resolution states \nDefinitions (here, meta-variable l° designates a constant symbol for a label): \n– a value datum is any ground atomic formula of the kind value(l°); \n– a candidate datum is any ground atomic formula of the kind candidate(l°); \n– a resolution state RS is any set of value data, of candidate data and of negated \ncandidate data; it is not necessarily devoid of (implicit) contradictions with respect \nto the CSP constraints, but it cannot contain both candidate(l°) and ¬candidate(l°) \nfor the same label l°; we shall write RS |= value(l°), RS |= candidate(l°) and \nRS |= ¬candidate(l°) to mean respectively that the value datum is present in RS, that \nthe candidate datum or the negated candidate datum is present in RS; \n– for a resolution state RS and a label l°, if RS |= candidate(l°) [respectively \nRS |= ¬candidate(l°), RS |= value(l°)], we say informally that l° is a candidate [resp. \nis not a candidate, is a value] in RS. \nNotice that:  \na) we need not consider negated value data, because value data can only be asserted;  \nb) instead of considering the absence of a candidate from RS (which could have an \nambiguous interpretation), we consider the presence of its negation (the positive fact \nthat the candidate has been “effectively eliminated” from RS). \nAny resolution state is a finite set and the whole set RS of resolution states is \ntherefore finite (and independent of any particular instance of the CSP) although \nvery large. \nAs suggested in part by the name, a resolution state is intended to represent the \ntotality of the ground atomic facts and their negations (in terms of value and \ncandidate predicates) that are present in some possible state of reasoning for some \n\n4. CSP Resolution Theories      \n79 \ninstance of the CSP. This is what we called informally the information content of \nthis state – in which all the “static” knowledge about the CSP, such as links between \nlabels, is considered as background knowledge and is not explicitly listed, but is \nimplicitly present. In the Sudoku CSP, a resolution state is a straightforward \nabstraction for something very concrete: the set of decided values, of candidates still \npresent on the sheet of paper used to solve a puzzle and of candidates erased or \ncrossed. (And the structure of the grid remains implicit.) \nVocabulary: if RS is a resolution state, “a candidate l in RS” is an informal way \nof saying “a label l such that RS |= candidate(l)”. Similarly, “a value in RS” is a way \nof saying “a label l such that RS |= value(l)”. \n4.2.2.2. Resolution models \nIn order to be able to give the above interpretation of a resolution state in a way \nthat respects our resolution paradigm, we must add some structure on the set RS of \nall the resolution states and on the way they are related. On RS, we define a natural \npartial order relation: RS1 ≤ RS2 if and only if, for any constant symbol l° for a \nlabel, one has: \n– if RS1 |= value(l°), then RS2 |= value(l°), (assertion/addition of a value is not \nreversible), \n– if RS1 |= ¬candidate(l°), then RS2 |= ¬candidate(l°) (negation/deletion of a \ncandidate is not reversible), \n– if RS2 |= candidate(l°), then RS1 |= candidate(l°) (new candidates cannot \nappear or re-appear in a posterior resolution state). \nThus, the intended meaning of RS1 ≤ RS2 is that when one passes from one \nresolution state to a “greater” or “posterior” one (according to this abstract order \nrelation), the information content can only increase – the negation of a candidate \nbeing considered as an increase of this information content. The last condition says \nthat no candidate absent from a resolution state can (re-)appear in a posterior one. In \npractical terms, it also means that RS2 is closer to a solution (or to the detection of a \ncontradiction) than RS1 is. \nNow, with any instance P of the CSP (considered as defined by a set of labels), \none can associate a unique well-defined resolution state RSP, called the initial \nresolution state of P, in which: \n– for every given l° in P, RSP |= value( l°), \n– for every label l1 which has no direct contradiction with any of the givens l° of \nP, i.e. such that linked(l°, l1) is not in the background axioms for any given l° of P, \nRSP |= candidate(l1), \n– RSP contains no other value or candidate data than those defined above (in \nparticular, it contains no negated candidate data). \n\n80 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nThe resolution model of an instance P is then defined as the subset RSP of RS \n(together with the order relation induced by RS) consisting of all the resolution \nstates RS such that RSP ≤ RS. When trying to solve P, one can never escape RSP, at \nleast as long as one reasons consistently. Any solution of P must be in RSP and it \ncan only be a maximally consistent element of RSP. But, conversely, a maximally \nconsistent element of RSP is not necessarily a solution (especially in case there is no \nsolution). By exploring systematically all the states in RSP, one is certain either to \nprove that P has no solution or to find all the solutions of P, if P has any. Of course, \nto find a solution, one does not have to explore all of RSP. In some sense, the \npurpose of a resolution theory is to define a smart way of reducing RSP to a relevant \npart as small as possible (without excluding any parts that may lead to a solution). \nOur definition of RSP already includes the deletion of candidates obviously \ncontradictory with the givens of the problem instance. This amounts to restricting \nfrom the start the resolution model RSP of P to a relevant part. \n4.2.2.3. Remarks on the notions of a resolution state and a resolution model \nNotice that the above notions of a resolution state and a resolution model are \nvery narrow. For instance, a resolution state does not include any “mental” \ncomponent such as having identified a pattern corresponding to the preconditions of \na resolution rule. Similarly, the resolution model RSP of an instance P defines only \nan abstract order relation on the set of resolution states reachable from the initial \nstate RSP, it does not indicate how to pass from one state to a posterior one. But this \nis the only way one can build a consistent semantics in case an instance has zero or \nseveral solutions. \nSimplistic as they may seem, the above-defined notions allow us to state \nprecisely what kind of resolution rules we are looking for. Given a resolution theory \nT, the application of any resolution rule R in T to an instance P should lead from one \nresolution state in RSP to a posterior one, with the following interpretation: if, \nstarting from a resolution state RS in RSP, we notice a pattern (or configuration) of \nlabels, links, values and candidates, satisfying the condition part of R, then R can be \napplied to this pattern; and, if we apply it, then, in the resulting resolution state RS1 \nand in all the subsequent ones (still in RSP), the value(s) and candidate(s) specified \nin the action part of R will respectively be asserted and negated (in a resolution rule, \nvalues can only be asserted, candidates can only be negated). Notice that the whole \nprocess of detecting a pattern, applying a rule and passing from RS to RS1 is \nsuperimposed on RSP but is not part of this abstract static model. \nNow, still starting from the same resolution state RS, if we notice that the \nconditions of another resolution rule R’ in T are also satisfied in RS and if we apply \nR’ instead of R, we usually reach a resolution state RS2 (still in RSP) different from \nRS1. For a real understanding of what a resolution theory is and is not, it is crucial to \nremark that the (relatively informal) definition we have just given does not a priori \n\n4. CSP Resolution Theories      \n81 \nimply that the two states RS1 and RS2 are T-compatible, in the sense that there \nwould be a resolution state RS3 posterior to both RS1 and RS2 (i.e. such that \nRS1 ≤ RS3, RS2 ≤ RS3) and accessible from each of RS1 and RS2 via rules in T (see \nFigure 4.1). This is related to the fundamental question of the confluence property of \na resolution theory T (see section 4.5 for a definition and an example of a theory \nwith the confluence property). \n \n \n \n \n \nFigure 4.1. The resolution model RSP of an instance P with two solutions (RS-Sol1 and RS-\nSol2) and the part of it accessible by some Resolution Theory T (full lines). Notice that the \nresolution states RS1 and RS2 (or RS2 and RS3) are not T-compatible, but RS1 and RS3 are. \nRSP \nRS4 \nRS1 \nRS2 \nRS3 \nRS5 \nRS6 \nRS7 \nRS8 \nRS9 \nRS10 \nRS-Sol1 \nRS-Sol2 \nRS13 \n\n82 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n4.2.3. Logical interpretations of a resolution model \nThere are two possible logical interpretations of the above notions. The most \nstraightforward one is in terms of modal logic. [In HLS, we used epistemic, instead \nof modal, logic; but the final interpretation of resolution theories (intuitionistic or \nconstructive logic) is the same.] \n4.2.3.1. The modal interpretation of a resolution model \nOur notions of a resolution state and a resolution model appear to be a special \ncase of the classical notions of a possible world and a Kripke model in modal logic.  \nIn modal logic, there is a modal operator “□” of necessity (and a modal operator \n“◊” of possibility, which does not always appear explicitly, because it is equivalent \nto ¬□¬ in the most common modal theories); for any formula A, □A and ◊A are \nintended to mean respectively “A is necessary” and “A is possible”.  \nOur notion of a resolution model coincides with that of a canonical Kripke \nmodel and the order relation we have defined on the set of resolution states \ncorresponds to the accessibility relation between possible worlds in this model \n([Kripke 1963]). We can apply Hintikka’s interpretation of “□” ([Hintikka 1962]): \nRS |= □A if and only if RS’ |= A for any possible world RS’ accessible from RS \n(i.e., in our resolution model, such that RS ≤ RS’). \nWhich (propositional) logical axioms for the modal operator □ should one \nadopt? This is the subject of much philosophical and scientific debate. It concerns \nthe general relationship between truth, necessity and possibility and the axioms \nexpressing this relationship. There are several modal theories in competition, the \nmost classical of which are, in increasing order of strength: S4 < S4.2 < S4.3 < S4.4 \n< S5 (on this point and the following, see e.g. [Feys 1965], [Fitting et al. 1999] or \nthe Stanford Encyclopaedia of Philosophy: http://plato.stanford.edu/entries/logic-\nmodal/). \nMoreover, it is known that there is a correspondence between the axioms on □ \nand the properties of the accessibility relation between possible worlds (this is a \nform of the classical relationship between syntax and semantics). A very general \nexpression of this correspondence was obtained by [Lemmon et al. 1977]. \nHere, we shall adopt the following rule of inference and set of axioms (in \naddition to the usual axioms of classical logic), which constitute the (most \ncommonly used) propositional system S4 (we give them the names they are \nclassically given in modal logic and, because of axioms M and 4, we write the \naccessibility relation “≤”): \n– (Necessitation Rule) if A is a theorem, then so is □A; \n– (Distribution Axiom) □(A ⇒ B) ⇒ (□A ⇒ □B); \n\n4. CSP Resolution Theories      \n83 \n–  (axiom M) □A ⇒ A: “if a proposition is necessary then it is true” or “only \ntrue propositions can be necessary”; this axiom corresponds to the accessibility \nrelation being reflexive (for all RS in RS, one has: RS ≤ RS); \n– (axiom 4, reflection) □A ⇒ □□A: if a proposition is necessary then it is \nnecessarily necessary; this axiom corresponds to the accessibility relation being \ntransitive (for all RS1, RS2 and RS3 in RS, one has: if RS1 ≤ RS2 and RS2 ≤ RS3, \nthen RS1 ≤ RS3). \nFrom our definition of a resolution model, it can easily be checked that it \nsatisfies all the axioms of S4. \nAs for the predicate calculus part of our logic, quantifiers are generally a big \nproblem in modal logic. But we must notice that in our CSPs we deal only with \nfixed domains; there is therefore no problem with quantifiers: we can merely adopt \nas axioms both Barcan Formula (BF) and its converse (CBF) ([Barcan 1946a and \n1946b]), namely:  \n– (BF) ∀x□A ⇒ □∀xA,  \n \n \n– (CBF) □∀xA ⇒ ∀x□A. \nOne final thing should be noted: in modal logic, for any ground atomic formula \nA, “A ∨ ¬A” is true in any resolution state and it is also necessarily true, i.e. one \nalways has RS |= □( A ∨ ¬A), but this is not the case for “□A ∨ □¬A”. For instance, \ngiven some definite place in space-time, it is always true that either it is raining (A) \nor it is not raining (¬A) at this place, and this is necessarily true (□(A ∨ ¬A)). But it \nis not true that either it is necessarily raining (□A) or it is necessarily not raining \n(□¬A) at this place: the weather may change at this place. Said otherwise, “□¬A” \n(A is necessarily false) and “¬□A” (A is not necessarily true) are very different \nthings and the first is much stronger than the second. \n4.2.3.2. The intuitionistic interpretation of a resolution model \nSo far so good; but we are not very enthusiastic with the prospect of having to \noverload the formulation of our resolution rules with modal operators. Let us try to \ndo one more step.  \nThere is a well-known correspondence ([Fitting 1969]) between modal logic S4 \nand intuitionistic or constructive logic ([Bridges et al. 2006]). The language of a \ntheory in intuitionistic logic is the same as in classical logic (there is no □ or ◊ \nlogical operator). Given a formula A in intuitionistic logic, one can define a formula \nM(A) in S4 recursively by: \n– for A atomic: M(A) = □A, \n– M(A ∧ B) = M(A) ∧ M(B), \n– M(A ∨ B) = M(A) ∨ M(B), \n\n84 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– M(¬A) = □¬M(A), \n– M(A ⇒ B) = □(M(A) ⇒ M(B)), \n– M(∀xA) = ∀xM(A). \nThen, for every formula F with no modal operator, one has the well-known \ncorrespondence theorem (proven in any textbook on modal logic): F is a theorem in \nintuitionistic logic if and only if M(F) is a theorem in modal logic S4. \nIn intuitionistic logic, although the formulæ are the same as in classical logic, \ntheir informal interpretation is different:  \n– A means that A is effectively proven; \n– ¬A means that A is effectively proven to be contradictory; \n– ¬¬A is not equivalent to A; it is weaker than A; it means that it is not \neffectively proven that A is contradictory (which does not imply that A is proven). \nOne main difference with classical logic is the “law of the excluded middle”: \nA ∨ ¬A is not valid (when A is atomic, it corresponds to formula □A ∨ □¬A in S4). \nA ∨ ¬A would mean that either A is proven or ¬A is proven. But there are \npropositions for which this is not true. Similarly, ∃xA is stronger than ¬∀x¬A; ∃xA \nmeans that a proof has effectively produced some x and it has shown that it satisfies \nA; ¬∀x¬A only supposes that ∀x¬A leads to a contradiction.  \nThe question for us is now: can we adopt intuitionistic instead of modal logic? It \namounts to: can each of our resolution rules be written in the form M(A) for some \nformula A without modal operators? This raises the question of the intended \nmeaning of the resolution rules. \n4.2.4. Resolution theories are intuitionistic \nAnticipating on our resolution rules (which will not refer explicitly to resolution \nstates), in their naive formulations, their (non static) conditions will bear on the \npresence of some candidates and on the absence of others and their conclusions will \nalways be the assertion of a value or the elimination of a candidate.  \n4.2.4.1. Analysing the intended meaning of resolution rules \nLet us see how this can be used in the formulation of a CSP resolution theory: \n– first, the entries of a CSP instance P, which are axioms, can be understood as \nnecessarily true (in a formal way by the Necessitation rule, or in a semantic way \nbecause they will be present in all the resolution states): □value; this can be written \nas M(value), because “value” is atomic; intuitionistically, this is merely the \ntautology that axioms of T are effectively proven in T. \nAs for the resolution rules themselves: \n\n4. CSP Resolution Theories      \n85 \n– as links are part of the CSP structural background, they are also axioms of any \nResolution Theory and a condition on the presence of a link between two labels can \nbe understood as necessarily true (by the Necessitation rule): □linked-by(l1, l2, c); \nthis can be written as M(linked-by(l1, l2, c)), because “linked-by” is atomic; using \nBarcan formula, the same conclusion is valid for predicate “linked”; \n– a negative condition on a candidate [i.e. a condition ¬candidate(l)] in a \nresolution state RS implies that it is negated in any posterior resolution state; \nsemantically, it must therefore be interpreted as: □¬candidate(l); this can be written \nas M(¬candidate(l)); intuitionistically, this means that this candidate has effectively \nbeen proven to be contradictory; \n– a positive condition on a candidate in a resolution state RS could be intended \nto mean (in the modal sense) that “this label is still a possible value in RS”: \n◊value(l); but one should here anticipate on the final intended intuitionistic meaning: \n“this label l has not yet been effectively proven to be an impossible value”; \ntherefore, one should rather interpret such a condition in the sense of ¬¬value(l) (in \nthe intuitionistic meaning of it); in relation to the modal setting, this would appear to \nhave for M transform the stronger □¬□¬value(l) or □◊value(l); (see section 4.2.4.3 \nbelow for comments); \n– any ∧ and ∨ combination of such conditions remains of the form M(some \nformula with no □ symbol); \n– a conclusion on the assertion of a value is intended to mean that the value \nbecomes necessarily true: □value; this can be written as M(value), because “value” \nis atomic; \n– a conclusion on the elimination of a candidate is intended to mean that this \ncandidate becomes necessarily contradictory: □¬candidate; this can be written as \nM(¬candidate); \n– any ∧ combination of such conclusions remains of the form M(some formula \nwith no □ symbol); \n– again by the Necessitation rule, the implication sign appearing in a resolution \nrule Cond ⇒ Act (which is an axiom in a Resolution Theory) can be understood as \nnecessary: □(Cond ⇒ Act); this can be written as M(Cond ⇒ Act). \n– finally, if the whole resolution rule ∀xR is surrounded by ∀ quantifiers, where \nR = M(A), it can be written as M(∀xA). \n4.2.4.2. Resolution rules pertain to intuitionistic instead of classical logic \nThe above analysis shows that a resolution rule will always be of the form M(F) \nwith no □ symbol in F. The general conclusion of all this is that a resolution rule is \nalways the M transform of an MS-FOL formula and the MS-FOL formula can be \nused instead of the modal form, provided that we consider that Resolution Theories \npertain to intuitionistic (or constructive) logic. \n\n86 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n4.2.4.3. The meaning of positive conditions on candidates in resolution rules \nOur interpretation of a positive condition on a candidate in the condition part of \na resolution rule is worth some discussion. Our intuitionistic interpretation of \n“candidate” as “¬¬value”, corresponding to the modal interpretation □◊value, \nrather than adopting the seemingly more natural (from the modal point of view) \n◊value, is consistent with our definition of the order relation on RS: once a \ncandidate has been eliminated, it can no longer re-appear in a posterior resolution \nstate. So that, for any label l and resolution state RS, one can have \nRS |= ◊candidate(l) only if RS |= candidate(l), i.e. if l is effectively present in RS as \na candidate, which in turn implies that RS |= □◊candidate(l) . \nNotice that the definition of RS and this interpretation together put a strong \nrestriction on how resolution rules can be applied in a resolution state RS: a pattern \nmentioning non-negated candidates may only be instantiated if such candidates are \neffectively present in this resolution state. The condition part of the rule thus means: \nthe pattern defined by this rule can be considered as present in RS only if the \nfollowing candidates are still present in RS (i.e. have not yet been proven to be \ncontradictory) and the other conditions of the rule are satisfied. From a \ncomputational point of view, the positive aspect is that, as candidates are \nprogressively eliminated, it puts stronger and stronger conditions on patterns and it \nmakes their potential number decrease while the resolution process goes on. \n4.3. The Basic Resolution Theory of a CSP: BRT(CSP) \nWe can now define formally the Basic Resolution Theory of any CSP: \nBRT(CSP). Its logical language is an extension of the language defined in section \n3.2 for the CSP Theory T(CSP). In addition to it, it has only: \n– two 0-ary predicates: solution-found and contradiction-found, \n– a unary predicate: candidate, with signature (Label). \nAs for the axioms of BRT(CSP), they include all (the implicit sort axioms and) \nthe background axioms of the CSP Theory defined in section(s) (3.2.2 and) 3.2.3. \nThey cannot include the CSP constraint axioms of section 3.2.4 because these do not \nhave the structure required of resolution rules: “meaning of links as constraints” is \nof the condition-action type, but it has the negation of a value in its conclusion (in a \nresolution rule, a value can never be negated); “completeness of solution” is not of \nthe condition-action type. Instead, they contain the following: \n \n– ECP (Elementary Constraints Propagation): “if a value is asserted for a \nCSP variable (as is initially the case for the givens), then remove any candidate that \nis linked to this value by a direct contradiction”: \n \n\n4. CSP Resolution Theories      \n87 \nECP: ∀l1 ∀l2 {value(l1) ∧ linked(l1, l2) ⇒ ¬candidate(l2)}; \nthis is very close to “meaning of links as constraints”, but the conclusion is about a \ncandidate instead of a value; \n \n– S (Single): “if a CSP variable V has only one candidate <V, v> left, then assert \nit as the value of this variable”: \n \nS: ∀l ∀V ∀v { [label(l, V, v) ∧ candidate(l)  \n            ∧ ∀v’≠v ∀l’≠l (¬label(l’, V, v’) ∨ ¬candidate(l’))] ⇒ value(l) }; \n \nthis rule has no equivalent in the CSP Theory. \nAxioms ECP and S together establish the correspondence between predicates \n“value” and “candidate”. We define the set of value-candidate relationship axioms \nas VCR = ECP ∪ S. \nBRT(CSP) also has a few technical axioms: \n– OOS (Only One Status): “when a label is asserted as a value, it is no longer a \ncandidate” (this rule has no equivalent in the CSP Theory): \n \nOOS: ∀l {value(l) ⇒  ¬candidate(l)}; \n \n– SD (Solution Detection): “if all the CSP variables have a unique decided \nvalue, then the problem is solved”: \n \nSD: ∀V ∃!v ∃l {[label(l, V, v) ∧ value(l)] ⇒  solution-found()}; \n \n– CD (Contradiction Detection): “if there is a CSP variable with no decided \nvalue and no candidate left, then the problem has no solution”: \n \nCD: ∃V ∀v ∃l {[label(l, V, v) ∧ ¬value(l) ∧ ¬candidate(l)]  \n⇒  contradiction-found()}. \nPredicates “solution-found” and “contradiction-found” as well as rules SD and \nCD are not strictly necessary, but they illustrate how such situations can be written \nas resolution rules. They can be considered as hooks for external non-logical actions \n(such as displaying the solution). ⊥ could be used instead of contradiction-found. \nFinally, we define:  \nBRT(CSP) = {background axioms} ∪ ECP ∪ S ∪ {OOS, SD, CD}. \nTwo questions immediately come to mind. Can one solve all the instances of the \nCSP with only BRT(CSP)? No. How powerful is this Basic Resolution Theory? Just \nto give an idea, in Sudoku (with the strongest formulation including all the Xrc, Xrn, \n\n88 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nXcn, Xbn variables), it allows to solve about 29% of the minimal puzzles; notice that, \nif we considered only the Xrc variables, very few minimal puzzles could be solved. \n4.4. Formalising the general concept of a Resolution Theory of a CSP \nLet us now state our final formal definitions. Given a CSP: \n– a formula in the language of the CSP Basic Resolution Theory defined above, \nBRT(CSP), is said to be in the restricted condition-action form if it is written as \nA ⇒ B, possibly surrounded with universal quantifiers, where formula A does not \ncontain the “⇒” sign and formula B is either value(z) or ¬candidate(z) for some \nvariable z of sort Label, called the target of the rule, that already appears in the \ncondition part (one can act only on what has been previously identified); \n– a resolution rule is a formula written in the restricted condition-action form, \nwith no constant symbols other than those already present in the constraint axioms \nof T(CSP), if any, and provable in the intuitionistic theory T(CSP) ∪ {ECP, S}, i.e. \nthe union of the CSP Theory (now considered as an intuitionistic theory) and the \naxioms on the value-candidate relationship; \n– a resolution rule is instantiated in some resolution state RS when a value has \nbeen assigned to each of its variables in such a way that RS satisfies all the \nconditions of this rule; the rule can thus be applied; after its action part has been \napplied, another resolution state is reached in which its conclusion is valid; \n– the condition part of a resolution rule is composed of two subparts: the pattern-\nconditions and the target-conditions;  \n– the pattern-conditions describe (in terms of labels, of well defined links \nbetween some of these labels and of value and candidate predicates for these labels) \na factual situation that may occur in a resolution state (some of these conditions may \ndepend on the target z); \n– the target-conditions bear on label variable z; they always include the actual \npresence of this candidate in the resolution state (one cannot assert or eliminate \nsomething that is not present as a candidate; said otherwise, it is absurd to assert \nsomething that has already been proven to be impossible and it is useless to negate \nsomething that has already been negated); expressed in terms of its links with other \nlabels mentioned in the pattern, they specify the conditions under which, in the \naction part of the rule, this candidate can be negated or asserted as a value;  \n– a Resolution Theory for a CSP is a specialisation of its Basic Resolution \nTheory in which all the additional axioms are resolution rules; it must be understood \nas a theory in intuitionistic logic. \nIn order to be concretely used to solve some instance of a CSP, a Resolution \nTheory must be completed with the same instance axioms as the corresponding \n\n4. CSP Resolution Theories      \n89 \nT(CSP) theory (see section 3.5). Nothing guarantees that a resolution theory can \nsolve all the instances of the CSP, not even those that have a unique solution. \nOne immediate consequence of this definition is that the general-purpose search \nalgorithms – depth-first seach (DFS), breadth-first search (BFS), etc. – which are \nguaranteed to find a solution or to prove a contradiction, cannot in general be \nreplaced by any “equivalent” resolution theory, i.e. one that would always produce \nthe same results. The reason is obvious if one considers instances of the CSP that \nhave multiple solutions: DFS or BFS will always find a solution, whereas a logical \ntheory can only prove properties (here value assertions and candidate eliminations) \nthat are true in all its models and it cannot therefore find a solution. \n4.5. The confluence property of resolution theories \nThe confluence property is one of the most useful properties a resolution theory \nT can have. It justifies our principle according to which the instantiation of a rule in \nsome resolution state RS depends on the effective presence of some candidates in \nRS (instead of depending only on relations between underlying labels); moreover, it \nallows to superimpose on T different resolution strategies. \n4.5.1. Definition of the confluence property \nGiven a resolution theory T, consider all the strategies that can be built on it, e.g. \nby defining various implementations with different priorities on the rules in T. \nGiven an instance P of the CSP and starting from the corresponding resolution state \nRSP, the resolution process associated with a strategy S built on T consists of \nrepeatedly applying resolution rules from T according to the additional conditions \n(e.g. the priorities) introduced by S. Considering that, at any point in the resolution \nprocess, different rules from T may be applicable (and different rules will be \napplied) depending on the chosen strategy S, we may obtain different resolution \npaths starting from RSP when we vary S. \nDefinition: a CSP Resolution Theory T has the confluence property if, for any \ninstance P of the CSP, any two resolution paths in T can be extended in T to meet in \na common resolution state.  \nWhen a resolution theory has the confluence property, all the resolution paths \nstarting from RSP and associated with all the strategies built on T will lead to the \nsame final state in RSP (all explicitly inconsistent states are considered as identical; \nthey mean contradictory constraints). If a resolution theory T does not have the \nconfluence property, one must be careful about the order in which they apply the \nresolution rules (and they must try all the resolution paths if they want to find the \n“simplest”). But if T has this property, one may choose any resolution strategy, \n\n90 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhich makes finding a solution much easier, and one can define “simplest first” \nstrategies if they want to find the simplest solution (see chapters 5 and 7).  \nEquivalent definitions: \n– for any instance P of the CSP and any two resolution states RS1 and RS2 of P \nreachable from RSP by resolution rules in T, there is a resolution state RS3 such that \nRS3 is reachable independently from both RS1 and RS2 by resolution rules in T; \n– for any instance P of the CSP, the subset of RSP consisting of the resolution \nstates for P reachable by resolution rules in T, ordered by the reachability relation \ndefined by T, is a DAG (Directed Acyclic Graph). \nConsequence: if a resolution theory T has the confluence property, then for any \ninstance P of the CSP, there is a single final state reachable by rules in T and all the \nresolution paths lead to this state. In particular, if T solves P, one cannot miss the \nsolution by choosing to apply the “wrong” rule at any time.  \n \nThe following property, a priori stronger than confluence, will often be useful to \nprove the confluence property of a resolution theory. \nDefinition: a CSP resolution theory T is stable for confluence if for any instance \nP of the CSP, for any resolution state RS1 of P and for any resolution rule R in T \napplicable in state RS1 for an elimination of a candidate Z, if any set Y of \nconsistency preserving assertions and/or eliminations is done before R is applied, \nleading to a resolution state RS2, and if it destroys the pattern of R (R can therefore \nno longer be applied to eliminate Z), then, there always exists a sequence of rules in \nT that will eliminate Z starting from RS2 (if Z is still in RS2). (Remark: in this \ndefinition, the assertions or eliminations in Y are not necessarily done by rules in T.) \nIt is obvious that: if T is stable for confluence, then T has the confluence \nproperty. A result that will be useful in Part III is the following (obvious): \nLemma 4.1: Let T1 and T2 be two resolution theories. If T1 and T2 are stable \nfor confluence, then the union of T1 and T2 (considered as sets of rules) is stable \nfor confluence (and therefore it has the confluence property). \n4.5.2. The confluence property of BRT(CSP) \nThe following obvious case will be useful in many places, e.g. for defining T&E \nin section 5.5. \nTheorem 4.1: The Basic Resolution Theory of any CSP, BRT(CSP), is stable \nfor confluence and it has the confluence property. \n\n4. CSP Resolution Theories      \n91 \n4.5.3. Resolution strategies and the strategic level \nThere are the resolution theories defined above and there are the many ways one \ncan use them in practice to solve real instances of a CSP. From a strict logical \nstandpoint, all the rules in a resolution theory are on an equal footing, which leaves \nno possibility for ordering them. But, when it comes to the practical exploitation of \nresolution theories and in particular to their implementation, e.g. in an inference \nengine (as in our general CSP-Rules solver) or in any procedural algorithm, one \nquestion remains unanswered: can superimposing some ordering on the set of rules \n(using priorities or “saliences”) prevent us from reaching a solution that the choice \nof another ordering might have made accessible? With resolution theories that have \nthe confluence property, such problems cannot appear and one can take advantage \nof this to define different resolution strategies. \nIndeed, the confluence property allows to define a strategic level above the logic \nlevel (the level of the resolution rules) – which is itself above the implementation \nlevel in case the rules are implemented in a computer program of any kind.  \nResolution strategies based on a resolution theory T can be defined in different \nways and may correspond to different goals: \n– implementation efficiency (in terms of speed, memory, …);  \n– giving a preference to some patterns over other ones: preference for bivalue-\nchains over whips, for whips over braids (see chapter 5 for the definitions); \n– allowing the use of heuristics, such as focusing the attention on the elimination \nof some candidates (e.g. because they correspond to a bivalue variable or because \nthey seem to be the key for further eliminations); but good heuristics are hard to \ndefine (in particular, the popular, intuitively natural heuristics consisting of focusing \nthe attention on bivalue variables is blatantly unfit for hard Sudoku puzzles); \n– finding the “simplest” resolution path and computing the rating of the instance \naccording to some rating system; this will be the justification for the “simplest-first” \nresolution strategies we shall introduce later; notice that this goal will in general be \nin strong opposition to a goal of pure implementation efficiency. \n4.6. Example: the Basic Sudoku Resolution Theory (BSRT) \nAfter all the above general considerations, time has come to turn to the concrete \nSudoku example and to its Basic Resolution Theory, hereafter named BSRT. It will \nfollow the general theory above, with the same adaptations as in ST for taking the \nbasic sorts and their symmetries into better account. \n\n92 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n4.6.1. Sorts, functions and predicates \nAs in the above general theory, the logical language of BSRT has the same sorts, \nfunctions and predicates as ST. In addition, it has predicates “solution-found”, \n“contradiction-found” and “candidate”. Indeed, as in the case of “value” in ST, we \nintroduce a predicate candidate with signature (Number, Row, Column) and an \nauxiliary predicate candidate’ with signature (Number, Block, Square) defined by \nthe “change-of-coordinates axiom”: \nCC’: ∀n∀b∀s [candidate’[n, b, s] ⇔ candidate(n, row(b,s), column(b,s))]. \nAs can be seen from the signatures of predicates “value” and “candidate”, they \nwill be the basic support for the quasi-automatic expression of symmetry and super-\nsymmetry in the Sudoku Theory and in all the Sudoku Resolution Theories. \n4.6.2. The axioms of Basic Sudoku Resolution Theory (BSRT) \nBSRT is defined a priori as being composed of the axioms of SGT plus CC, CC’ \nand the following fourteen resolution rules. \nThe first group of four axioms expresses the mutual exclusion conditions on \ncells, rows, columns and blocks. They correspond to the ECP rule of the general \ntheory (cut into four parts according to the type of constraint: rc, rn, cn or bn). These \nfour rules, the elementary constraints propagation rules, can be considered as the \ndirect operational transpositions of axioms ST-rc to ST-bn of ST. They can be used \nin practice to eliminate candidates as soon as a value is asserted. In this respect, they \nwill be much more useful than rules such as ST-rc to ST-bn could be: \n \n– ECP(cell): unique value in a cell: if a number is effectively proven to be the \nvalue of a cell, then any other number is effectively proven to be excluded for this \ncell: \n \n∀r∀c∀n∀n’{value(n, r, c) ∧ n’≠n ⇒ ¬candidate(n’, r, c)}; \n \n– ECP(row): unique value in a row: if a number is effectively proven to be the \nvalue of a cell, then it is effectively proven to be excluded for any other cell in this \nrow: \n \n∀r∀n∀c∀c’{value(n, r, c) ∧ c’≠c ⇒ ¬candidate(n, r, c’)}; \n \n– ECP(col): unique value in a column: if a number is effectively proven to be \nthe value of a cell, then it effectively proven to be excluded for any other cell in this \ncolumn: \n \n∀c∀n∀r∀r’{value(n, r, c) ∧ r’≠r ⇒ ¬candidate(n, r’, c)}; \n \n\n4. CSP Resolution Theories      \n93 \n– ECP(blk): unique value in a block: if a number is effectively proven to be the \nvalue of a cell, then it is effectively proven to be excluded for any other cell in this \nblock: \n \n∀b∀n∀s∀s’{value’[n, b, s] ∧ s’≠s ⇒ ¬candidate’[n, b, s’]}. \n \nThe second group of four axioms corresponds to the S rule of the general theory \n(again cut into four parts according to the type of constraint: rc, rn, cn or bn): \n \n– NS or Naked-Single: assert a value whenever there is a unique possibility in an \nrc-cell: \n∀r∀c∀n {[candidate(n, r, c) ∧ ∀n’≠n ¬candidate(n’, r, c)] ⇒ value(n, r, c)}; \n \n– HS(row) or Naked-Single-in-a-row: assert a value whenever there is a unique \npossibility in an rn-cell: \n∀r∀n∀c {[candidate(n, r, c) ∧ ∀c’≠c ¬candidate(n, r, c’)] ⇒ value(n, r, c)}; \n \n– HS(col) or Naked-Single-in-a-column: assert a value whenever there is a \nunique possibility in a cn-cell: \n∀c∀n∀r {[candidate(n, r, c) ∧ ∀r’≠r ¬candidate(n, r’, c)] ⇒ value(n, r, c)}; \n \n– HS(blk) or Naked-Single-in-a-block: assert a value whenever there is a unique \npossibility in a bn-cell: \n∀b∀n∀s {[candidate’[n, b, s] ∧ ∀s’≠s ¬candidate’[n, b, s’]] ⇒ value’[n, b, s]}. \n \nThe ninth axiom is the general axiom about uniqueness of status: \n– OOS (Only One Status): “when a label is asserted as a value, it is no longer a \ncandidate”: \n∀n∀r∀c {value(n, r, c)] ⇒  ¬candidate(n, r, c)}; \n \nThe tenth axiom expresses solution detection (there could also be four axioms): \n– SD: if every rc-cell has a value assigned, then the problem is solved: \n∀r∀c∃n value(n, r, c) ⇒ solution-found(); \n \nThe last group of four axioms expresses contradiction detection (these axioms \nare redundant, but it is easier to have them all if we want to apply to Sudoku the \ngeneral correspondence between braids and T&E in section 5.7): \n \n– CD-rc: if there is an rc-cell such that all the numbers are proven to be \nexcluded values for it, then the puzzle has no solution: \n∃r∃c∀n [¬value(n, r, c) ∧ ¬candidate(n, r, c)] ⇒ contradiction-found(); \n\n94 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– CD-rn: if there is an rn-cell such that all the columns are proven to be \nexcluded values for it, then the puzzle has no solution: \n∃r∃n∀c [¬value(n, r, c) ∧ ¬candidate(n, r, c)] ⇒ contradiction-found(); \n \n– CD-cn: if there is a cn-cell such that all the rows are proven to be excluded \nvalues for it, then the puzzle has no solution: \n∃c∃n∀r [¬value(n, r, c) ∧ ¬candidate(n, r, c)] ⇒ contradiction-found(); \n \n– CD-bn: if there is a bn-cell such that all the squares are proven to be excluded \nvalues for it, then the puzzle has no solution: \n∃b∃n∀s (¬value’[n, b, s] ∧ ¬candidate’[n, b, s)]) ⇒ contradiction-found(). \n \nFinally, we define the same sets of axioms as in the general theory (plus those \nassociated with the existence of a double coordinate system): \nECP = {ECP(cell), ECP(row), ECP(col), ECP(blk)}, \nS = {NS, HS(row), HS(col), HS(blk)}, \nCD = {CD-rc, CD-rn, CD-cn, CD-bn}, \nVCR = ECP ∪ S (the value-candidate relationship axioms), \nBSRT = SGT ∪ {CC, CC’} ∪ ECP ∪ S ∪ CD ∪ {OOS, SD}. \n4.6.3. The axiom associated with the entries of a puzzle \nAs was the case for Sudoku Theory ST, with any specific puzzle P we can \nassociate the axiom EP defined as the finite conjunction of all the formulæ of type \nvalue(nk, ri, cj) corresponding to each entry of P. Then, when added to the axioms of \nBSRT (or any extension of it), axiom EP defines a Sudoku Resolution Theory for the \nspecific puzzle P. \n4.6.4. The Basic LatinSquare Resolution Theory: BLSRT  \nLet us define the following sets of block-free axioms: \nB(ECP) = {ECP(cell), ECP(row), ECP(col)}, \nB(S) = {NS, HS(row), HS(col}, \nB(VCR) = B(ECP) ∪ B(S) (the block-free value-candidate relationship axioms), \nBLSRT = LSGT ∪ B(ECP) ∪ B(S) ∪ {OOS, CD, SD}. \nBLSRT is the Basic LatinSquare Resolution Theory: BRT(LatinSquare) \n4.7. Sudoku symmetries and the three fundamental meta-theorems \nLet us first extend the definition of the Src, Srn, Scn and Srcbs transforms to \npredicate “candidate” and therefore to the whole language of BSRT: \n\n4. CSP Resolution Theories      \n95 \n \n \n \n \n \n \n \nF \nSrcbs(F) \ncandidate(ni, rj, ck) \ncandidate’[ni, bj, sk] \n \nWe now have all the technical tools necessary for stating and proving our three \nfundamental meta-theorems. \n4.7.1. Formal statement and proof of meta-theorem 2.1 \nMeta-theorem 4.1 (formal version of 2.1): if R is a resolution rule, then Src(F) \nis a resolution rule (and it obviously has the same logical complexity as R). We \nshall express this as: the set of resolution rules is closed under symmetry. \nProof: If R is a resolution rule, then (by definition) R has a formal proof in ST ∪ \nVCR. From such a proof of R, a proof of Src(R) in ST ∪ VCR can be obtained by \nreplacing successively each step in the first proof (axioms included) by its \ntransformation under Src. This is legitimate since: \n– the set of axioms in ST ∪ VCR is invariant under Src symmetry; \n– any application of a logical rule can be transposed. \nThe only technicality is that Src must be extended to non block-free formulæ. \nThis is easily done by letting unchanged anything that is not of sort Row or Column. \n4.7.2. Formal statement and proof of meta-theorem 2.2 \nMeta-theorem 4.2 (formal version of 2.2): if R is a block-free resolution rule, \nthen Srn(R) and Scn(R) are resolution rules (and they obviously have the same \nlogical complexity as R). We shall express this as: the set of resolution rules is \nclosed under supersymmetry. \nProof: the proof (for Srn) is similar to that of meta-theorem 4.1. By definition, R \nhas a formal proof in ST ∪ VCR. Let T be the block-free theory consisting of the \naxioms in B(ST ∪ VCR) = B(ST) ∪ B(VCR) = LST ∪ B(VCR). Following the \nsame lines as in the proof of theorem 3.2, there is a (second) proof of R, this time in \nLST ∪ B(VCR). From such a proof, a proof of Srn(R) in LST ∪ B(VCR) can be \nF \nSrc(F) \nSrn(F) \nScn(F) \ncandidate \n(ni, rj, ck) \ncandidate \n(ni, rk, cj) \ncandidate \n(nj, ri, ck) \ncandidate \n(nk, rj, ci) \n\n96 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nobtained by replacing successively each step in the second proof (axioms included) \nby its transformation under Srn. This will also be a proof of Srn(R) in ST ∪ VCR. \n4.7.3. Formal statement and proof of meta-theorem 2.3 \nFormally stating and proving meta-theorem 2.3 is done along the same lines as \nwe did for meta-theorems 2.1 and 2.2. \n \nMeta-theorem 4.3 (formal version of 2.3): if a block-free resolution rule R can \nbe proved without using axiom ST-cn, then Srcbs(R) is a resolution rule (and it \nobviously has the same logical complexity as R). We shall express this as: the set \nof resolution rules is closed under analogy. \nProof: after the proof of theorem 4.2, there is a proof of R in LST ∪ B(VCR). \nThis is not enough for our purpose, but the proof of theorem 4.2 can be transposed \nto show that there is a proof of R in LST ∪ B(VCR) that does not use axiom ST-cn \n(the transposition done in the proof of theorem 4.2 does not introduce axiom ST-cn \nif it was not used in the first proof); it is therefore a proof of R using only the \naxioms in the set {ST-rc, ST-rn, ST-C} ∪ B(VCR). From this proof of R, a proof of \nSrcbs(R) using only the axioms in the set {ST-rc, ST-bn, ST-C} ∪ B(VCR) is \nobtained by replacing each step in the first proof by its transformation under Srcbs. \n4.7.4. Symmetries, analogies and supersymmetries in BSRT \nThe above theorems are illustrated in Figure 4.2 with the various relationships \nexisting between Singles. Similar figures could be drawn for ECP or CD rules. \n \n  \n  \nFigure 4.2. Symmetries, analogies and supersymmetries for Singles \nNS \nHS(row) \nScn \nHS(col) \nSrn \n  \nSrc \n  \nHS(blk) \nSrcbs \n  \nScrbs \n  \n\n4. CSP Resolution Theories      \n97 \n4.7.5. Extension of meta-theorem 4.2 \nFinally, meta-theorem 4.2 can be modified and extended to a wider class of \nresolution rules by defining the notion of a block-positive formula. For an easier \nformulation, let us consider formulæ written without the logical symbol for \nimplication (“⇒”), i.e. written with only the following logical symbols: ∧, ∨, ¬, ∀, \n∃. Remember that the condition part of any resolution rule satisfies this restriction. \nDefinitions: A formula F is block-positive if it does not contain the logical \nsymbol for implication (“⇒”) and if any of its non block-free primary predicates is \nin the scope of an even number of negations (i.e. of “¬” symbols). A resolution rule \nA⇒B is said to be block-positive if B is block-free and A is block-positive. \nTheorem 4.4: if F is a block-positive formula, then the validity of BF(F) \nentails the validity of F; in particular, if R is a block-positive resolution rule, then \nBF(R) is a resolution rule. \nThe proof of the first part is obvious. Notice that BF(R) is weaker than R, since \nit has stronger conditions; it might therefore be considered as totally uninteresting. \nBut BF(R) is block-free and it can be submitted to meta-theorem 4.3. This is the \nway how, when we dealt with chains in HLS1, counterparts of all the chain rules in \nnatural rc-space could be defined in rn- and cn-spaces, leading to entirely new types \nof chains (hidden xy-chains, hidden xyzt-chains, …). \nMeta-theorem 4.5 (formal, extended version of 4.2): if R is a block-positive \nresolution rule, then Srn•BF(R) and Scn•BF(R) are resolution rules. \n\n\n \nPart Two \nGENERAL CHAIN RULES \n \n \n\n\n \n5. Bivalue-chains, whips and braids \nNow that our logical framework is completely set, this chapter – the central one \nof this book as for the types of resolution rules we shall meet – introduces very \ngeneral types of chain patterns (of increasing complexity) giving rise to resolution \nrules for any CSP: bivalue chains and whips (together with a few intermediate \ncases). Braids, a pattern more general than chains, are also defined. We review a few \nproperties of these patterns and of resolution theories based on them. All the \nexamples studied in this book will show that whips are very powerful. \nIn this chapter, we give only examples related to the subsumption relationships \nbetween the whip and braid resolution theories. In the Sudoku case, many \nspecialisations of the patterns introduced here (such as 2D chains and hidden chains) \nand many more examples can be found in HLS. In order not to overload the main \ntext with long resolution paths, these are all grouped in the final section.  \nLet us now introduce the basic definitions needed for all the rules of this chapter. \nDefinition: in a resolution state RS, a chain is a finite sequence of candidates (it \nis thus linearly ordered) such that any two consecutive candidates in the sequence \nare linked (we call this the “continuity condition” of chains; it implies that \nconsecutive candidates are different). \nRemarks: \n– non consecutive candidates are not a priori forbidden to be identical, so that a \nchain may contain inner loops; for some specific types of chains, one can discard \nsuch loops as being “unproductive”, an idea that will be explained in section 5.9; \n– in case we need to specify the length of a chain, we shall speak of a chain[3], a \nchain[4], a chain[5]…, according to half the number of candidates it contains; if the \nnumber of candidates is odd, we round to the integer above (these conventions will \nbe justified later); \n– sequentiality (or linearity) and continuity are the two characteristic properties \nof all our types of chains; but chains must satisfy additional conditions in order to be \nusable for eliminations, such as given by the following definition. \nDefinition: in a resolution state RS, a regular sequence of length n associated \nwith a sequence (V1, … Vn) of CSP variables is a sequence of 2n or 2n-1 candidates \n(L1, R1, L2, R2, …. Ln, [Rn]) such that: \n\n102 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– any two consecutive candidates in the sequence are different; \n– Ln is a label for Vn: Ln = <Vn, ln>; if Rn is present in the sequence, it is also a \nlabel for Vn: Rn = <Vn, rn>; \n– for any 1≤k<n, both Lk and Rk are labels for Vk: <Vk, lk> and <Vk, rk>; this \ncondition, which we call “the strong Lk to Rk continuity condition”, implies the “Lk \nto Rk continuity condition” of chains, i.e. that, for any 1≤k<n, Lk and Rk are linked. \nThe Lk’s are called the left-linking candidates and the Rk’s the right-linking \ncandidates.  \nDefinition: in a resolution state RS, a regular chain is a regular sequence that \nsatisfies all the Rk-1 to Lk continuity conditions of chains (i.e. Lk is linked to Rk-1 for \nall k). It is thus a particular kind of chain. \n5.1 Bivalue chains \nBivalue chains are the most basic chains that can be defined for any CSP. \nDefinition: a CSP variable V is said to be bivalue in a resolution state RS if it \nhas exactly two candidates in RS. This could be formally defined by the auxiliary \npredicate “bivalue”, with signature (CSP-Variable): \nbivalue(V) ≡ ∃≠(v1, v2)  ∃≠(l1, l2) {  label(l1, V, v1) ∧ candidate(l1)  \n                    ∧ label(l2, V, v2) ∧ candidate(l2)  \n  \n \n                          ∧ ∀v≠(v1,v2) ∀l ¬[label(l, V, v)  ∧ candidate(l)]}. \nDefinition: in any CSP and resolution state RS, a bivalue-chain of length n \n(n ≥ 1) is a regular chain (L1, R1, L2, R2, …. Ln, Rn) associated with CSP variables \n(V1, … Vn) such that, for any 1 ≤ k ≤ n, Vk is bivalue in RS (Lk and Rk are thus the \nonly two candidates for Vk in RS). \nDefinition: in a resolution state RS, a target of a bivalue chain is a candidate Z \nthat does not belong to the chain and that is linked to both its endpoints (L1 and Rn). \nNotice that these conditions imply that Z is a label for none of the CSP variables Vk. \nTheorem 5.1 (bivalue-chain rule for a general CSP): in any resolution state of \nany CSP, if Z is a target of a bivalue-chain, then it can be eliminated (formally, \nthis rule concludes ¬candidate(Z)). \nProof: the proof is short and obvious but it will be the basis for the proofs of all \nour forthcoming chain, whip and braid rules. \nIf Z was True, then L1 would be eliminated by ECP; therefore R1 would be \nasserted by S; but then L2 would be eliminated by ECP and R2 would be asserted by \nS… ; finally Rn would be asserted by S; which would contradict the hypothesis that \nZ was True. Therefore Z can only be False. qed. \n\n5. Bivalue-chains, whips and braids      \n103 \nNotation: a bivalue-chain of length n, together with a potential target \nelimination, is written symbolically as:  \nbiv-chain[n]: {L1 R1} – {L2 R2} – …… – {Ln Rn} ⇒ ¬candidate(Z),  \nwhere the curly brackets recall that the two candidates inside have representatives \nwith the same CSP variable.  \nRe-writing the candidates as <variable, value> pairs and “factoring” the CSP \nvariables out of the pairs, a bivalue chain will also be written symbolically in either \nof the more explicit forms: \n \nbiv-chain[n]: V1{l1 r1} – V2{l2 r2} – …… – Vn{ln rn} ⇒ ¬candidate(Z), or: \nbiv-chain[n]: V1{l1 r1} – V2{l2 r2} – …… – Vn{ln rn} ⇒ VZ ≠ vZ. \n5.2 z-chains, t-whips and zt-whips (or whips) \n5.2.1 Definitions \nThe definition of a bivalue-chain can be extended in different ways (z-extension, \nt-extension and zt-extension), as follows. We first introduced the following \ngeneralisations of bivalue-chains in HLS, in the Sudoku context. But everything \nworks similarly for any CSP (see [Berthier 2008b]). It is convenient to start with the \ndefinitions: a label C is compatible with a set S of labels if it does not belong to \nS and it is not linked to any element of S; notice that this is a structural property, \nindependent of any resolution state. In a resolution state RS, a candidate is \ncompatible with a set S of candidates if its underlying label is compatible with all \nthe underlying labels of the elements of S. \nDefinition: in a resolution state RS, given a candidate Z (which will be the \ntarget), a z-chain of length n (n ≥ 1) built on Z is a regular chain (L1, R1, L2, R2, …. \nLn, Rn) associated with a sequence (V1, … Vn) of CSP variables, such that: \n– Z does not belong to {L1, R1, L2, R2, …. Ln, Rn}; \n– L1 is linked to Z; \n– for any 1 ≤ k < n, Rk is the only candidate for Vk compatible with Z, apart \npossibly for Lk; \n– Z is not a label for Vn; \n– Ln is the only candidate for Vn possibly compatible with Z (but Vn has more \nthan one candidate – this is a non-degeneracy condition); in particular Rn is linked to \nZ. \nTheorem 5.2 (z-chain rule for a general CSP [Berthier 2008b]): in any \nresolution state of any CSP, any target of a z-chain can be eliminated (formally, \nthis rule concludes ¬candidate(Z)). \n\n104 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nFor the following “t-extension” of bivalue chains, it is natural to introduce whips \ninstead of chains. Whips are also more general, because they are able to catch more \ncontradictions than chains. A target of a whip is required to be linked to its first \ncandidate, not necessarily to its last; the condition on the last variable is changed so \nthat the final contradiction can occur with previous right-linking candidates. \nDefinition: in a resolution state RS, given a candidate Z (which will be the \ntarget), a t-whip of length n (n ≥ 1) built on Z is a regular chain (L1, R1, L2, R2, …. \nLn) [notice there is no Rn] associated with a sequence (V1, … Vn) of CSP variables, \nsuch that: \n– Z does not belong to {L1, R1, L2, R2, …. Ln}; \n– L1 is linked to Z; \n– for any 1 ≤ k < n, Rk is the only candidate for Vk compatible with all the \nprevious right-linking candidates (i.e. with all the Ri for i ≤ k), [in t-whips, \ncompatibility with Z does not have to be checked for intermediate candidates; it \nallows to build t-whips before the target is fixed; this is a computational advantage \nover the zt-whips defined below, but they have a weaker resolution power]; \n– Z is not a label for Vn; \n– Vn has no candidate compatible with Z and with all the previous right-linking \ncandidates (but Vn has more than one candidate – this is a non-degeneracy \ncondition). \nDefinition: in a resolution state RS, given a candidate Z (which will be the \ntarget), a zt-whip (in short a whip) of length n (n ≥ 1) built on Z is a regular chain \n(L1, R1, L2, R2, …. Ln) [notice there is no Rn] associated with a sequence (V1, … Vn) \nof CSP variables, such that: \n– Z does not belong to {L1, R1, L2, R2, …. Ln}; \n– L1 is linked to Z; \n– for any 1 ≤ k < n, Rk is the only candidate for Vk compatible with Z and with \nall the previous right-linking candidates (i.e. with Z and with all the Ri, 1 ≤ i < k); \n– Z is not a label for Vn; \n– Vn has no candidate compatible with Z and with all the previous right-linking \ncandidates (but Vn has more than one candidate – this is a non-degeneracy \ncondition). \nDefinition: in any of the above defined chains and whips (and in the forthcoming \nbraids), a candidate other than Lk or Rk for any of the CSP variables Vk is called a t-\ncandidate [respectively a z-candidate] if it is incompatible with a previous right-\nlinking candidate [resp. with the target]. Notice that a candidate can be z- and t- at \nthe same time and that the t- and z- candidates are not considered as being part of \nthe pattern. \n\n5. Bivalue-chains, whips and braids      \n105 \nTheorem 5.3 (t- and zt-whip rules for a general CSP [Berthier 2008b]): in any \nresolution state of any CSP, if Z is a target of a t- or a zt- whip, then it can be \neliminated (formally, this rule concludes ¬candidate(Z)). \nProof: the proof is a simple adaptation of that for bivalue-chains. If Z was True, \nthen all the z- candidates would be eliminated by ECP and, progressively: all the \nleft-linking candidates and all the t- candidates would be eliminated by ECP and all \nthe right-linking ones would be asserted by S. The end is slightly different: the last \ncondition on the whip entails that there would be no possible value for the last \nvariable Vn (because it is not a CSP-Variable for Z), a contradiction. \nAlthough these new chains or whips seem to be straightforward generalisations \nof bivalue-chains, their solving potential is much higher. In chapter 6, we shall give \ndetailed statistics illustrating this in the Sudoku case. \nNotation:  \n– a z-chain is written symbolically in the same two ways as a bivalue chain, but \nwith prefix “z-chain” instead of “biv-chain”; \n– (a t-whip or) a whip of length n, together with a potential target elimination, is \nwritten symbolically as:  \n(t-)whip[n]: {L1 R1} – {L2 R2} – …… – {Ln .} ⇒ ¬candidate(Z),  \nwhere the curly brackets recall that the two candidates inside them are relative to the \nsame CSP variable; the dot inside the last curly brackets means the absence of a \ncompatible candidate; as in the bivalue chains case, and for the same reasons, we \nshall also write whips in the form:  \n \nwhip[n]: V1{l1 r1} – V2{l2 r2} – …… – Vn{ln .} ⇒ ¬candidate(Z), or: \nwhip[n]: V1{l1 r1} – V2{l2 r2} – …… – Vn{ln .} ⇒ VZ ≠ vZ. \nRemarks:  \n– an alternative equivalent definition of a whip is available in section 11.1; \n– as a consequence of the definition, Z is a label for none of the CSP variables in \nthe whip; \n– another consequence is that all the CSP variables of the whip are different; \n– particular attention should be given to the whip[1] case; a given CSP may have \nwhips of length 1 or not (without prejudice for longer ones – see section 5.11.7): \nSudoku, N-Queens, N-SudoQueens, Futoshiki and Kakuro have, LatinSquare does \nnot; having whips of length one has many consequences for the resolution theories \nof the CSP; chapter 7 will be entirely dedicated to CSPs having such whips; \n– very instructive whip[2] examples can be found in sections 8.7.1.1 and 8.8.1, \nwhere it is shown that they cannot be considered as S2-subsets. \n\n106 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n5.2.2. Formal definitions \nAs a mere exercise in logic, let us write the formal definitions of whips. We \nleave it as an exercise for the reader to write similar formulæ for all the other kinds \nof chains introduced above (and for the forthcoming braids). \nLet us first introduce two auxiliary predicates “Linked-by” and “Linked” (with \ncapital “L”), with respective signatures (Label, Label, Constraint) and (Label, \nLabel): \nLinked-by(l1, l2, c) ≡ linked-by(l1, l2, c) ∧ candidate(l1) ∧ candidate(l2) \nLinked(l1, l2) ≡ linked(l1, l2) ∧ candidate(l1) ∧ candidate(l2) \n        ≡ ∃c Linked-by(l1, l2, c) \nRecalling that CSP-Variable is a sub-sort of Constraint, we can now define a \nwhip of length 1 based on target z by predicate whip[1] with signature (Label, \nLabel, CSP-Variable): \nwhip[1](z, l1, V1) ≡ Linked(z, l1) ∧ ∀l ¬[Linked-by(l1, l, V1) ∧¬linked(z, l)].  \nNotice that the third argument of predicate whip[1] is restricted to be of sort \nCSP-Variable in order to conform to our definition of whips. \nThe second condition above says that any candidate l linked to l1 by CSP \nvariable V1 (i.e. any candidate value l≠l1 for CSP variable V1) must be linked to z \n(by some constraint); notice that this condition could not be written as  \n∀l [¬Linked-by(l1, l, V1) ∨ linked(z, l)], because negating Linked-by(l1, l, V1) may \nnegate a condition which is not the one we want, e.g. that l is a candidate. \nFor longer whips, we need auxiliary predicates whip[n] and partial-whip[n] with \nsignatures (Label, [Label, Label, CSP-Variable]n-1 times, Label, CSP-Variable) and \n(Label, [Label, Label, CSP-Variable]n times) respectively; we define partial-whips and \nwhips by simultaneous induction on n: \npartial-whip[1](z, l1, r1, V1) ≡  \n   Linked(z, l1) ∧ Linked-by(l1, r1, V1) ∧ r1≠z \n   ∧ ¬whip[1](z, l1, V1)  \n   ∧ ∀l≠ r1 ¬[Linked-by(l1, l, V1) ∧¬linked(z, l)]; \n \nwhip[n+1](z, l1, r1, V1, l2, r2, V2, …, ln, rn, Vn, ln+1, Vn+1) ≡  \n   partial-whip[n](z, l1, r1, V1, l2, r2, V2, …, ln, rn, Vn) ∧ \n   ∧ Linked(rn, ln+1) ∧ ln+1≠z  \n   ∧ ∀l ¬[Linked-by(ln+1, l, Vn+1)  \n                 ∧¬linked(z, l) ∧¬ linked(z, r1) ∧¬ … ∧¬ linked(z, rn)]; \n \npartial-whip[n+1](z, l1, r1, V1, l2, r2, V2, …, ln, rn, Vn, ln+1, rn+1, Vn+1) ≡  \n   partial-whip[n](z, l1, r1, V1, l2, r2, V2, …, ln, rn, Vn) \n   ∧ Linked(rn, ln+1) ∧ ln+1≠z ∧ Linked-by(ln+1, rn+1, Vn+1) ∧ rn+1≠z \n\n5. Bivalue-chains, whips and braids      \n107 \n   ∧ ¬whip[n+1](z, l1, r1, V1, l2, r2, V2, …, ln, rn, Vn, ln+1, Vn+1) \n   ∧ ∀l≠ rn+1 ¬[Linked-by(ln+1, l, Vn+1)  \n                         ∧¬linked(z, l) ∧¬ linked(z, r1) ∧¬ … ∧¬ linked(z, rn)]. \nNotice that, in these definitions, a whip is minimal, i.e. no initial segment is a \nshorter whip, due to the condition “¬whip[n+1](z, …” in partial-whip[n+1]. \n5.2.3. A typical moderately hard example with bivalue-chains and whips \nThe resolution path of the Sudoku puzzle in Figure 5.1 is typical of how the \nabove defined resolution rules allow to solve a moderately difficult instance. \n \n  \n  3 4 5   \n \n8 \n \n    1 2 3 4 5 6 7 8 9 \n4 \n \n6    \n \n  \n \n      4 5 6 7 8 9 1 2 3 \n  \n  \n \n1   \n \n  6 5     7 8 9 1 2 3 4 6 5 \n \n1   5   8  \n7       2 1 4 5 9 8 3 7 6 \n  \n \n  3 \n \n  \n \n9 1     5 6 7 3 4 2 8 9 1 \n9   \n \n  \n  \n \n  \n  \n \n    9 3 8 6 7 1 5 4 2 \n \n  \n  8 \n \n  \n \n  \n      3 7 2 8 6 5 9 1 4 \n6  \n  \n  \n \n7   3       6 4 5 9 1 7 2 3 8 \n  \n \n1   3 \n \n \n5 7     8 9 1 2 3 4 6 5 7 \nFigure 5.1. A moderately difficult Sudoku puzzle (cb#7) and its solution  \n*****\t\r  \t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  W\t\r  \t\r  \t\r  *****\t\r  \n25\t\r  givens,\t\r  224\t\r  candidates,\t\r  1648\t\r  csp-­‐links\t\r  and\t\r  1648\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.65\t\r  \nsingles:\t\r  r7c6\t\r  =\t\r  5,\t\r  r5c1\t\r  =\t\r  5,\t\r  r6c7\t\r  =\t\r  5,\t\r  r8c3\t\r  =\t\r  5,\t\r  r2c2\t\r  =\t\r  5,\t\r  r2c5\t\r  =\t\r  8,\t\r  r6c6\t\r  =\t\r  1,\t\r  r4c5\t\r  =\t\r  9,\t\r  r3c7\t\r  =\t\r  4,\t\r  \nr3c6\t\r  =\t\r  3,\t\r  r1c6\t\r  =\t\r  6,\t\r  r1c1\t\r  =\t\r  1\t\r  \nwhip[1]:\t\r  r4n6{c7\t\r  .}\t\r  ==>\t\r  r6c9\t\r  ≠\t\r  6,\t\r  r5c7\t\r  ≠\t\r  6\t\r  \nwhip[1]:\t\r  r3n9{c3\t\r  .}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  9\t\r  \nwhip[1]:\t\r  r1n9{c9\t\r  .}\t\r  ==>\t\r  r2c7\t\r  ≠\t\r  9,\t\r  r2c9\t\r  ≠\t\r  9\t\r  \nbiv-­‐chain[2]:\t\r  r4n4{c3\t\r  c9}\t\r  -­‐\t\r  c8n4{r6\t\r  r7}\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  4\t\r  \nwhip[1]:\t\r  b7n4{r9c2\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  4,\t\r  r5c2\t\r  ≠\t\r  4\t\r  \nbiv-­‐chain[3]:\t\r  b6n8{r5c7\t\r  r6c9}\t\r  –\t\r  r6n3{c9\t\r  c2}\t\r  –\t\r  c2n6{r6\t\r  r5}\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  8\t\r  \nbiv-­‐chain[3]:\t\r  r4c1{n2\t\r  n3}\t\r  –\t\r  r6n3{c2\t\r  c9}\t\r  –\t\r  r2c9{n3\t\r  n2}\t\r  ==>\t\r  r4c9\t\r  ≠\t\r  2\t\r  \nbiv-­‐chain[3]:\t\r  r1c2{n2\t\r  n7}\t\r  –\t\r  c1n7{r3\t\r  r7}\t\r  –\t\r  r7n3{c1\t\r  c2}\t\r  ==>\t\r  r7c2\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  r6n3{c2\t\r  c9}\t\r  –\t\r  r2c9{n3\t\r  n2}\t\r  –\t\r  r1n2{c7\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  2\t\r  \nwhip[4]:\t\r  b3n7{r1c7\t\r  r2c7}\t\r  –\t\r  c7n3{r2\t\r  r4}\t\r  –\t\r  c1n3{r4\t\r  r7}\t\r  –\t\r  c1n7{r7\t\r  .}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  7\t\r  \nsingles\t\r  ==>\t\r  r1c2\t\r  =\t\r  2,\t\r  r1c9\t\r  =\t\r  9,\t\r  r1c7\t\r  =\t\r  7,\t\r  r2c4\t\r  =\t\r  7,\t\r  r3c5\t\r  =\t\r  2,\t\r  r2c6\t\r  =\t\r  9\t\r  \nwhip[3]:\t\r  b8n2{r9c6\t\r  r8c4}\t\r  –\t\r  b8n9{r8c4\t\r  r9c4}\t\r  –\t\r  r9n6{c4\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  r9c1{n8\t\r  n2}\t\r  –\t\r  c6n2{r9\t\r  r5}\t\r  –\t\r  r5c7{n2\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  8\t\r  \nwhip[1]:\t\r  b9n8{r8c7\t\r  .}\t\r  ==>\t\r  r8c2\t\r  ≠\t\r  8\t\r  \nbiv-­‐chain[3]:\t\r  r8c2{n4\t\r  n9}\t\r  –\t\r  r8c4{n9\t\r  n2}\t\r  –\t\r  r9c6{n2\t\r  n4}\t\r  ==>\t\r  r9c2\t\r  ≠\t\r  4\t\r  \nsingles:\t\r  r9c6\t\r  =\t\r  4,\t\r  r8c5\t\r  =\t\r  1,\t\r  r7c5\t\r  =\t\r  6,\t\r  r5c6\t\r  =\t\r  2,\t\r  r6c4\t\r  =\t\r  6,\t\r  r5c7\t\r  =\t\r  8,\t\r  r8c9\t\r  =\t\r  8,\t\r  r8c2\t\r  =\t\r  4,\t\r  r5c2\t\r  =\t\r  6,\t\r  \nr9c7\t\r  =\t\r  6,\t\r  r4c9\t\r  =\t\r  6,\t\r  r4c3\t\r  =\t\r  4,\t\r  r5c3\t\r  =\t\r  7,\t\r  r5c5\t\r  =\t\r  4,\t\r  r6c5\t\r  =\t\r  7\t\r  \n\n108 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nbiv-­‐chain[2]:\t\r  r7n3{c1\t\r  c2}\t\r  –\t\r  r7n7{c2\t\r  c1}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  2\t\r  \nbiv-­‐chain[2]:\t\r  b7n2{r7c3\t\r  r9c1}\t\r  –\t\r  r4n2{c1\t\r  c7}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  b7n3{r7c2\t\r  r7c1}\t\r  –\t\r  b7n7{r7c1\t\r  .}\t\r  ==>\t\r  r7c2\t\r  ≠\t\r  9\t\r  \nbiv-­‐chain[3]:\t\r  r3c3{n8\t\r  n9}\t\r  –\t\r  b7n9{r7c3\t\r  r9c2}\t\r  –\t\r  r9n8{c2\t\r  c1}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  8\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \nGRID\t\r  SOLVED.\t\r  rating-­‐type\t\r  =\t\r  W,\t\r  MOST\t\r  COMPLEX\t\r  RULE\t\r  =\t\r  Whip[4]\t\r  \n5.3 Braids \nWe now introduce braids, a further generalisation of whips. Whereas whips have \na sequential and continuous structure (a chain structure), braids still have a \nsequential structure but it is discontinuous (in restricted ways). In any CSP, braids \nare interesting for three reasons:  \n– they have an a priori greater solving potential than whips (at the cost of a \nmore complex logical structure and a priori higher computational complexity);  \n– resolution theories based on them can be proven to have the very important \nconfluence property, allowing to superimpose on them various resolution strategies \n(see section 5.5);  \n– their scope can be defined very precisely by a simple procedure: they can \neliminate any candidate that can be eliminated by pure Trial-and-Error (T&E); they \ncan therefore solve any instance that can be solved by T&E (and conversely – see \nsection 5.6). \nDefinition: in a resolution state RS, given a candidate Z (which will be the \ntarget), a zt-braid (in short a braid) of length n (n ≥ 1) built on Z is a regular \nsequence (L1, R1, L2, R2, …. Ln) [notice that there is no Rn] associated with a \nsequence (V1, … Vn) of CSP variables, such that: \n– Z does not belong to {L1, R1, L2, R2, …. Ln}; \n– L1 is linked to Z; \n– for any 1 < k ≤ n, Lk is linked either to a previous right-linking candidate \n(some Ri, i < k) or to the target; this is the only (but major) structural difference with \nwhips (for which the only linking possibility is Rk-1); the Rk-1 to Lk continuity \ncondition of chains is not satisfied by braids (a braid is defined as a regular \nsequence, a whip as a regular chain); \n– for any 1 ≤ k < n, Rk is the only candidate for Vk compatible with Z and with \nall the previous right-linking candidates (i.e. with Z and with all the Ri, 1 ≤ i < k); \n– Z is not a label for Vn; \n– Vn has no candidate compatible with the target and with all the previous right-\nlinking candidates (but Vn has more than one candidate – this is a non-degeneracy \ncondition). \n\n5. Bivalue-chains, whips and braids      \n109 \nRemarks:  \n– an alternative equivalent definition is available in section 11.1; \n– as in the case of whips, the t- and z- candidates are not considered as being \npart of the braid; \n– in order to show the kind of restriction this definition implies on the nettish \nstructure of a braid, the first of the following two structures can be part of a braid \nstarting with{L1 R1} – {L2 R2} –… , whereas the second cannot: \n{L1 R1} – {L2 R2 A2} – … where A2 is linked to R1 (or to Z); \n{L1 R1 A1} – {L2 R2 A2} – … where A1 is linked to R2 and A2 is linked to R1 but \nnone of them is linked to Z. The only thing that could be concluded from this pattern \nif Z was True is (R1 ∧ R2) ∨ (A1 ∧ A2), whereas a braid should allow to conclude \nR1 ∧ R2. \nThe proof of the following theorem is almost the same as for whips, because the \ncondition replacing Rk-1 to Lk continuity still allows the elimination of Lk by ECP. \nTheorem 5.4 (braid rule for a general CSP [Berthier 2008b]): in any \nresolution state of any CSP, if Z is a target of a braid, then it can be eliminated \n(formally, this rule concludes ¬candidate(Z)). \nNotation: a braid is written symbolically in exactly the same ways as a whip, \nwith prefix “braid” instead of “whip”, but the “–” symbol must be interpreted \ndifferently: \n \nbraid[n]: {L1 R1} – {L2 R2} – …… – {Ln .} ⇒ ¬candidate(Z), or \nbraid[n]: V1{l1 r1} – V2{l2 r2} – …… – Vn{ln .} ⇒ ¬candidate(Z), or: \nbraid[n]: V1{l1 r1} – V2{l2 r2} – …… – Vn{ln .} ⇒ VZ ≠ vZ. \nNotice the double role played by the prefix in all of the above-defined notations:  \n– it indicates how the curly brackets must be understood (pure bivalue or bivalue \n“modulo” the previous right-linking candidates and/or the target);  \n– it also indicates how the link symbol “–” must be understood.  \nThe prefix of each resolution rule applied to solve any instance of the CSP \nshould therefore always appear explicitly in any resolution path. \n5.4. Whip and braid resolution theories; the W and B ratings  \n5.4.1. Whip resolution theories in a general CSP; the W rating \n \nWe are now in a position to define an increasing sequence of resolution theories \nbased on whips. As there can be no confusion, we shall always use the same name \n\n110 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nfor a resolution theory and for the set of instances it can solve. Recall that \nBRT(CSP) is the Basic Resolution Theory of the CSP, as defined in section 4.3. \nDefinition: for any n ≥ 0, let Wn be the following resolution theory: \n– W0 = BRT(CSP), \n– W1 = W0 ∪ {rules for whips of length 1}, \n– ....  \n– Wn = Wn-1 ∪ {rules for whips of length n}, \n– W∞ = ∪n≥0 Wn. \nDefinition : the W-rating of an instance P of the CSP, noted W(P), is the \nsmallest n ≤ ∞ such that P can be solved within Wn. An instance P has W rating n \n[i.e. W(P) = n] if it can be solved using only whips of length no more than n but it \ncannot be solved using only whips of length strictly smaller than n. By convention, \nW(P) = ∞ means that P cannot be solved by whips. \nThe W rating has some good properties one can expect of a rating: \n– it is defined in a purely logical way, independent of any implementation; the \nW rating of an instance P is an intrinsic property of P; \n– in the Sudoku case, it is invariant under symmetry and supersymmetry ; \nsimilar symmetry properties will be true for any CSP, if it has symmetries of any \nkind and they are properly formalised in the definition of its CSP variables; \n– in the Sudoku case, it is well correlated with familiar (though informal) \nmeasures of complexity. \n5.4.2. Braid resolution theories in a general CSP; the B rating \n \nOne can define a similar increasing sequence of resolution theories, now based \non braids. \nDefinition: for any n ≥ 0, let Bn be the following resolution theory: \n– B0 = BRT(CSP) = W0, \n– B1 = B0 ∪ {rules for braids of length 1} = W1 (obviously), \n– B2 = B1 ∪ {rules for braids of length 2}, \n– ....  \n– Bn = Bn-1 ∪ {rules for braids of length n}, \n– B∞ = ∪n≥0 Bn. \nDefinition : the B-rating of an instance P of the CSP, noted B(P), is the smallest \nn ≤ ∞ such that P can be solved within Bn. By convention, B(P) = ∞ means that P \ncannot be solved by braids. \n\n5. Bivalue-chains, whips and braids      \n111 \nThe B rating has all the good properties one can expect of a rating: \n– it is defined in a purely logical way, independent of any implementation; the B \nrating of an instance P is an intrinsic property of P; \n– as will be shown in the next section, it is based on an increasing sequence (Bn, \nn≥0) of resolution theories with the confluence property; this ensures a priori better \ncomputational properties; in particular, one can define a “simplest first” resolution \nstrategy able to find the B rating after following a single resolution path; \n– in the Sudoku case, it is invariant under symmetry and supersymmetry ; \nsimilar symmetry properties will be true for any CSP, if it has symmetries of any \nkind and they are properly formalised in the definition of its CSP variables; \n– in the Sudoku case, it is well correlated with familiar (though informal) \nmeasures of complexity. \n5.4.3. Comparison of whip and braid resolution theories (and ratings) \n \nNotice first that both the W and B ratings are measures of the hardest step in the \nsimplest resolution paths, they do not take into account any combination of steps in \nthe whole path. An instance P with W(P) = 12 having a single step with such a long \nwhip may be simpler (in some different, intuitive sense) than an instance Q with \nW(Q) = 11 but that has many steps with whips of length 11. \nAs a whip is a particular case of a braid, one has Wn ⊆ Bn and B(P) ≤ W(P) for \nany CSP, any instance P and any n ≥ 1. Moreover, as braids have a much more \ncomplex structure than whips, one may expect that the two ratings are very different \nin general. However, in the Sudoku case, it will be shown in chapter 6 that (although \nwhip theories do not have the confluence property, they are not far from having it \nand) the W rating, when it is finite, is an excellent approximation of the B rating \n(fairly good approximations of W are easier to compute than the real value of B).  \nOne has Wn ⊆ Bn for any n and any CSP, but the converse is not true in general, \nexcept for B1 = W1 (obviously) and B2 = W2 (proof below): braids are a true \ngeneralisation of whips. Firstly, there are Sudoku puzzles (e.g. the example in \nsection 5.10.1) with W(P) = 5 and B(P) = 4. Secondly, even in the Sudoku case (for \nwhich whips solve almost any puzzle), examples can be given (see one in section \n5.10.2) of puzzles that can be solved with braids but not with whips, i.e. W∞ is \nstrictly included in B∞.  \nThe case n = 3 remains open for the general CSP. We have no example in \nSudoku with B(P) = 3 and W(P) > 3, although there exist braids[3] that are not \nwhips[3] (see an example in section 5.10.5). In section 7.4.2, we shall show that, for \nany CSP, one has gW3 = gB3 and therefore W3 ⊆ B3 ⊆ gW3, where gWn \n(respectively gBn) is the resolution theory for g-whips (resp. g-braids) of length ≤ n. \n\n112 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nTheorem 5.5: In any CSP, any elimination done by a braid of length 2 can be \ndone by a whip of same or shorter length; as a result, B2 = W2. \nProof: Let B = V1{l1 r1} – V2{l2 .} ⇒ Vz ≠ vz be a braid[2] with target Z = \n<VZ, rZ> in some resolution state RS. \nIf variable V2 has a candidate <V2, v’> (it may be <V2, l2>) such that <V2, v’> is \nlinked to <V1, r1>, then V1{l1 r1} – V2{v’ .} ⇒ Vz ≠ vz is a whip[2] with target Z. \nOtherwise, <V2, l2> can only be linked to <Vz, vz> and V2{l2 .} ⇒ Vz ≠ vz is a \nshorter whip[1] with target Z. \n5.5. Confluence of the Bn resolution theories; resolution strategies \nWe now consider the braid resolution theories Bn defined in section 5.4.2 and we \nprove that they have the confluence property. As a result, we can define a “simplest \nfirst strategy” allowing more efficient ways of computing the B rating of instances. \n5.5.1. The confluence property of braid resolution theories \nTheorem 5.6 [Berthier 2008b]: each of the Bn resolution theories, 0 ≤ n ≤ ∞, is \nstable for confluence; therefore it has the confluence property. \nBefore proving this theorem, we must recall a convention about candidates. \nWhen one is asserted, its status changes: it becomes a value and it is “eliminated” \n(i.e. negated) as a candidate (axiom OOS). (This convention is very important for \nminimising the number of useless patterns, but the theorem does not really depend \non it; the proof would only have to be slightly modified with other conventions.)  \nLet n<∞ be fixed (the case n=∞ is a corollary to all the cases n<∞). We must \nshow that, if an elimination of a candidate Z could have been done in a resolution \nstate RS1 by a braid B of length m ≤ n and with target Z, it will always still be \npossible, starting from any further state RS2 obtained from RS1 by consistency \npreserving assertions and eliminations, if we use a sequence of rules from Bn. Let B \nbe: {L1 R1} – {L2 R2} – …. – {Lp Rp} – {Lp+1 Rp+1} – … – {Lm .}, with target Z. \nConsider first the state RS3 obtained from RS2 by applying repeatedly the rules \nin BRT until quiescence. As BRT has the confluence property (theorem 4.1), this \nstate is uniquely defined, independently of the way we apply the BRT rules.  \nIf target Z has been eliminated in RS3, there remains nothing to prove. If target Z \nhas been asserted, then the instance of the CSP is contradictory; if not yet detected \nin RS3, this contradiction can be detected by CD in a state posterior to RS3, reached \nby a series of applications of rules from BRT, following the braid structure of B. \n\n5. Bivalue-chains, whips and braids      \n113 \nOtherwise, we must consider all the elementary events related to B that can have \nhappened between RS1 and RS3 (all the possibilities are marked by a letter for \nreference in further proofs). For this, we start from B’ = what remains of B in RS3. \nAt this point, B’ may not be a braid in RS3. We repeat the following procedure, for \np = 1 to p = m, producing in the end a new (possibly shorter) braid B’ in RS3 with \ntarget Z. All the references below are to the current B’. \na) If, in RS3, the left-linking or any t- or z- candidate of CSP variable Vp has \nbeen asserted, then Z and/or the previous Rk(’s) to which Lp is linked must have \nbeen eliminated by ECP in the passage from RS2 to RS3 (if it was not yet eliminated \nin RS2); if Z is among these eliminations, there remains nothing to prove; otherwise, \nthe procedure has already been successfully terminated by case f of the first such k. \nb) If, in RS3, left-linking candidate Lp has been eliminated (but not asserted) (it \ncan therefore no longer be used as a left-linking candidate in a braid) and if CSP \nvariable Vp still has a z- or a t- candidate Cp, then replace Lp by Cp; now, up to Cp, \nB’ is a partial braid in RS3 with target Z. Notice that, even if Lp was linked to Rp-1 \n(as it would if B was a whip), this may not be the case for Cp; therefore trying to \nprove a similar theorem for whips would fail here (see section 5.10.3 for an example \nof non-confluence of the Wn theories). [As it missed this point, the proof given for \nzt-chains in HLS1 was not correct.] \nc) If, in RS3, any t- or z- candidate of Vp has been eliminated (but not asserted), \nthis has not changed the basic structure of B (at stage p). Continue with the same B’. \nd) If, in RS3, right-linking candidate Rp has been asserted (p can therefore not be \nthe last index of B’), it can no longer be used as an element of a braid, because it is \nno longer a candidate. Notice that all the left-linking and t- candidates for CSP \nvariables of B after p that were incompatible in B with Rp, i.e. linked to it, if still \npresent in RS2, must have been eliminated by ECP somewhere between RS2 and \nRS3. But, considering the braid structure of B upwards from p, more eliminations \nand assertions must have been done by rules from BRT between RS2 and RS3. \nLet q be the smallest number strictly greater than p such that, in RS3, CSP \nvariable Vq still has a (left-linking, t- or z-) candidate Cq that is not linked to any of \nthe Ri for p ≤ i < q (by definition of a braid, Cq is therefore linked to Z or to some Ri \nwith i < p). Between RS2 and RS3, the following rules from BRT must have been \napplied for each of the CSP variables Vu of B with index u increasing from  p+1 to \nq-1 included: eliminate its left-linking candidate (Lu) by ECP, assert its right-linking \ncandidate (Ru) by S, eliminate by ECP all the left-linking and t-candidates for CSP \nvariables after u that were incompatible in B with the newly asserted candidate (Ru).  \nIn RS3, excise from B’ the part related to CSP variables p to q-1 (included) and \n(if Lq has been eliminated in the passage from RS1 to RS3) replace Lq by Cq; for each \n\n114 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ninteger s ≥ p, decrease by q-p the index of CSP variable Vs and of its candidates in \nB’; in RS3, B’ is now, up to p (the ex q), a partial braid in Bn with target Z.  \ne) If, in RS3, left-linking candidate Lp has been eliminated (but not asserted) and \nif CSP variable Vp has no t- or z- candidate in RS3 (complementary to case b), then \nVp has only one possible value in RS3, namely Rp; Rp must therefore have been \nasserted by S somewhere between RS1 and RS3; this case has therefore been dealt \nwith by case d (because the assertion of Rp also entails the elimination of Lp). \nf) If, in RS3, right-linking candidate Rp of B has been eliminated (but not \nasserted), in which case p cannot be the last index of B’, then replace B’ by its initial \npart: {L1 R1} – {L2 R2} – …. – {Lp .}. At this stage, B’ is in RS3 a shorter braid with \ntarget Z. Return B’ and stop. \nNotice that this proof works only because the notion of being linked does not \ndepend on the resolution state. \nNotice also that what we have proven is indeed the following: given RS1, B and \nRS2 as above, if RS3 is the resolution state obtained from RS2 by the repeated \napplication of rules from BRT until quiescence, then: \n– either a contradiction has been detected by CD somewhere between RS2 and \nRS3 (and, due to consistency preservation between RS1 and RS2, it can only be \nbecause a contradiction inherent in the givens of P has been made manifest by CD); \n– or Z has been eliminated by ECP somewhere between RS2 and RS3; \n– or Z can be eliminated in RS3 by a braid B’ possibly shorter than B, with target \nZ, with CSP variables a sub-sequence W’ of those of B, with right-linking \ncandidates those of B belonging to the sub-sequence W’, with left-linking \ncandidates those of B belonging to the sub-sequence W’, each of them possibly \nreplaced by a t-candidate of B for the same CSP variable. \n5.5.2. Braid resolution strategies consistent with the B rating \nAs explained in section 4.5.3, we can take advantage of the confluence property \nof braid resolution theories to define a “simplest first” strategy that will always find \nthe simplest solution, in terms of the maximum length of the braids it will use. As a \nresult, it will also compute the B rating of an instance after following a single \nresolution path. The following precedence order satisfies this requirement: \nECP > S > biv-chain[1] > z-chain[1] > t-whip[1] > whip[1] > braid[1] > … > \nbiv-chain[k] > z-chain[k] > t-whip[k] > whip[k] > braid[k] > \nbiv-chain[k+1] > z-chain[k+1] > t-whip[k+1] > whip[k+1] > braid[k+1] > … \nNotice that bivalue-chains, z-chains, t-whips and whips being special cases of \nbraids of same length, their explicit presence in the set of rules does not change the \nfinal result. We put them here because when we look at a resolution path, it may be \n\n5. Bivalue-chains, whips and braids      \n115 \nnicer to see simple patterns appear instead of more complex ones (braids). Also, it \nshows (in the Sudoku case) that braids that are not whips appear only rarely. \nThe above ordering defines a “simplest first” resolution strategy. It does not \ncompletely define a deterministic procedure: it does not set any precedence between \ndifferent chains of same type and length. This could be done by using an ordering of \nthe candidates instantiating them, based e.g. on their lexicographic order. But one \ncan also decide that, for all practical purposes, which of these equally prioritised \nrule instantiations should be “fired” first will be chosen randomly (as in CSP-Rules). \n5.6. The “T&E vs braids” theorem  \n For braids, the following “T&E vs braids” theorem is second in importance only \nto the confluence property. As it is easy to program very fast implementations of the \nT&E procedure, it allows to check quickly if a given instance P will be solvable by \nbraids. This may be very useful: in case the answer is negative, we may not want to \nwaste computation time on P. In case it is positive, it does not produce an explicit \nresolution path with braids and, even if we build one from the trace of this \nprocedure, it will not be one with the shortest braids and it will not provide the B \nrating; but the computations with braids will then be guaranteed to give a solution. \n5.6.1. Definition of the Trial-and-Error procedure T&E(T, P) \nThe following definition of the Trial-and-Error (T&E) procedure is intimately \nrelated to the informal idea that the solution should be obtained with “no guessing”. \nIndeed, in our view, it is the only proper formalisation of the vague “no guessing” \nrequirement. In standard search algorithms (depth-first, beadth-first, …), if a path in \nthe search graph leads to a solution, this result is accepted. In T&E, this would be \nconsidered as arbitrary, i.e. as “guessing”; it must be shown that there can be no \nother solution (see section 5.6.3 for more detailed comments). \nDefinition: given a resolution theory T with the confluence property, a resolution \nstate RS and a candidate Z in RS, T&E(T, Z, RS) or Trial-and-Error based on T for \nZ in RS, is the following procedure (notice: a procedure, not a resolution rule):  \n- make a copy RS’ of RS; in RS’, delete Z as a candidate and assert it as a value;  \n- in RS’, apply repeatedly all the rules in T until quiescence; \n- if RS’ has become a contradictory state, then delete Z from RS (sic: RS, not RS’); \nelse do nothing (in particular if a solution is obtained in RS’, merely forget it);  \n- return the (possibly) modified RS state.  \nNotice that this definition is meaningful only if T has the confluence property: \notherwise, the result of “applying repeatedly in RS’ all the rules in T until \nquiescence” may not be uniquely defined. \n\n116 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nDefinition: given a resolution theory T with the confluence property and a \nresolution state RS, we define the T&E(T, RS) procedure as follows: \na) in RS, apply the rules in T until quiescence; if the resulting RS is a solution or a \ncontradictory state, then return it and stop; \nb) mark all the candidates remaining in RS as “not-tried”; \nc) choose some “not-tried” candidate Z, un-mark it and apply T&E(T, Z, RS); \nd) if Z has been eliminated from RS by step c,  \n       then goto a  \n       else if there remains at least one “not-tried” candidate in RS \n                  then goto c else return RS and stop. \nDefinition: given a resolution theory T with the confluence property and an \ninstance P with initial resolution state RSP, we define T&E(T, P) as T&E(T, RSP). \nNotice that this procedure always stays at depth 1 (i.e. only one candidate is \ntested at a time) but that a candidate Z may be tried several times for T&E(T, Z, \nRSi) in different resolution states RSi. This is normal, because the result may be \ndifferent if other candidates have been eliminated in the meanwhile. This also \nguarantees that the result of this procedure does not depend on the order in which \nremaining candidates are “tried”. \nWe say that P can be solved by T&E(T), or that P is in T&E(T), if T&E(T, P) \nproduces a solution for P. When T is the Basic Resolution Theory of a CSP (which \nis known to always have the confluence property), we simply write T&E instead of \nT&E(BRT(CSP))). \n5.6.2. The “T&E vs braids” theorem \nConsider the simplest resolution theory T = BRT(CSP). It is obvious that any \nelimination that can be done by a braid B can be done by T&E (by applying rules \nfrom BRT following the structure of B). The converse is more interesting: \nTheorem 5.7: for any instance of any CSP, any elimination that can be done \nby T&E can be done by a braid. Any instance of a CSP that can be solved by T&E \ncan be solved by braids. \nProof: Let RS be a resolution state and let Z be a candidate eliminated by \nT&E(BRT, Z, RS) using some auxiliary resolution state RS’. Following the steps of \nBRT in RS’, we progressively build a braid in RS with target Z. First, remember that \nBRT contains three types of rules: ECP (which eliminates candidates), S (which \nasserts a value for a CSP variable) and CD (which detects a contradiction on a CSP \nvariable).  \nConsider the first step of BRT in RS’ that is an application of rule S, asserting \nsome label R1 as a value. As R1 was not a value in RS, there must have been in RS’ \n\n5. Bivalue-chains, whips and braids      \n117 \nsome elimination of a candidate, say L1, for a CSP variable V1 of which R1 is a \ncandidate, and the elimination of L1 (which made the assertion of R1 by S possible \nin RS’) can only have been made possible in RS’ by the assertion of Z. But if L1 has \nbeen eliminated in RS’, it can only be by ECP and because it is linked to Z. Then \n{L1 R1} is the first pair of candidates of our braid in RS and V1 is its first CSP \nvariable. (Notice that there may be other z-candidates for V1, but this is pointless, \nwe can choose any of them as L1 and consider the remaining ones as z-candidates).  \nThe sequel is done by recursion. Suppose we have built a braid in RS \ncorresponding to the part of the BRT resolution in RS’ up to its k-th assertion step. \nLet Rk+1 be the next candidate asserted by BRT in RS’. As Rk+1 was not a value in \nRS, there must have been in RS’ some elimination of a candidate, say Lk+1, for a \nCSP variable Vk+1 of which Rk+1 is a candidate, and the elimination of Lk+1 (which \nmade the assertion of Rk+1 possible in RS’) can only have been made possible in RS’ \nby the assertion of Z and/or of some of the previous Ri. But if Lk+1 has been \neliminated in RS’, it can only be by ECP and because it is linked to Z or to some of \nthe previous Ri, say C. Then our partial braid in RS can be extended to a longer one, \nwith {Lk+1 Rk+1} added to its candidates, Lk+1 linked to C, and Vk+1 added to its \nsequence of CSP variables. \nEnd of the procedure: as Z is supposed to be eliminated by T&E(Z, RS), a \ncontradiction must have been obtained by BRT in RS’. As, in BRT, only ECP can \neliminate a candidate, a contradiction is obtained if a value asserted in RS’, i.e. Z or \none of the Ri, i<n, eliminates in RS’ (via ECP) a candidate, say Ln, that was the last \none for a corresponding variable Vn and that is linked to Z or one of the Ri, i<n. Ln \nand Vn are thus the last left-linking candidate and CSP variable of the braid we were \nlooking for in RS. \nHere again (as in the proof of confluence), this proof works only because the \nexistence of a link between two candidates does not depend on the resolution state. \nFinally, notice that it is very unlikely that the T&E procedure followed by the \nconstruction in this proof would produce the shortest available braid in resolution \nstate RS (and this intuition is confirmed by experience). \n5.6.3. Comments on T&E and on the “T&E vs braids” theorem \nAs using T&E(T) leads to examining arbitrary hypotheses for the creation of \nauxiliary resolution states, it could be considered as blind search. Nevertheless, as T \nhas the confluence property, the final result of T&E(T) applied to any instance does \nnot depend in any way on the sequence of tested candidates. \n5.6.3.1. T&E versus structured search: no-guessing \nMoreover, it is essential for our purposes and for our vague initial “no guessing” \nrequirement to notice that, contrary to the usual structured search algorithms [e.g. \n\n118 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ndepth-first or breadth-first search, with search paths pruned by the rules in T – \nDFS(T) or BFS(T)], T&E(T) includes no “guessing”: if a solution is obtained in an \nauxiliary state RS’, then it is not taken into account. This notion of “guessing” is \ninherent to the DFS or BFS procedures. Closely related to it is the idea of a \n“backdoor” of an instance (see section 11.5.3): a set of labels of minimal cardinality \nsuch that adding them as values to the instance would give a solution within T, i.e. \nwith no search at all. But this idea is totally alien to T&E(T). \nAs a result of the “no guessing” and no recursion, there is a major difference \nbetween T&E(T) and general DFS(T) and BFS(T): whereas, given any instance P, \nthe latter algorithms can always find a solution (if there is any) or prove that it has \nnone, T&E(T) cannot: if P has multiple solutions, T&E(T) can only find what is \ncommon to all its solutions. Given the “T&E(T) vs T-braids” theorem (this theorem \nwill be proved for many resolution theories T) and the correspondence between a \nsolution of P in a resolution theory T’ and a model of T’ ∪ EP, this is just the basic \nfact that what can be proved in a FOL theory (here T’ = T-braids) is (and can only \nbe) what is true in all the models of this theory. Notice that another consequence of \nthis basic property of FOL is that, given T, there cannot exist any resolution theory \nTT such that one would get a “DFS(T) vs TT” or a “BFS(T) vs TT” theorem. \n5.6.3.2. Comments on the “acceptability” of braids \nIn the Sudoku community, T&E (which had always been the topic of heated \ndebates, although it had never been precisely defined before HLS) is generally not \naccepted by advocates of “pattern-based” solutions. But the above “T&E vs braids” \ntheorem shows that a solution based on T&E can always be replaced by a rule-based \nsolution, more precisely by a solution based on braids. The question naturally arises, \nfor any CSP: can one reject T&E and nevertheless accept solutions based on braids? \nThere are three main reasons for a positive answer, both related to the goals one \npursues. \nFirstly, as shown in section 5.5, resolution theories based on braids have the \nconfluence property and many different resolution strategies can be super-imposed \non them. One may prefer a solution with the shortest braids and adopt the “simplest \nfirst” strategy defined in section 5.5. The T&E procedure cannot provide this (unless \nit is drastically modified, in ways that would make it computationally very \ninefficient). \nSecondly, in each of the Bn resolution theories based on braids, one can add rules \ncorresponding to special cases, such as whips or bivalue-chains of same length, and \none can decide to give a natural preference to such special cases. This is still a \n“simplest first” principle. In Sudoku (and in most of the other examples we have \nanalysed), this entails that non-whip braids appear very rarely in the solution of \nrandomly generated puzzles; in a sense, this is a measure of how powerful whips \nare: although they are structurally much more “beautiful” and simpler (they are \n\n5. Bivalue-chains, whips and braids      \n119 \ncontinuous chains with no “branching”) and computationally much better than \nbraids, they can solve almost all the puzzles that can be solved by T&E (i.e. almost \nall the randomly generated ones). One could say that the “T&E vs braids” theorem \n(together with the statistical results of chapter 6 and the subsumption results of \nchapter 8) is the best advertisement for whips. \nThirdly, in spite of what some Sudoku addicts would like to believe or make \nbelieve, the reality is that most of the Sudoku players (and, more generally, players \nof logic puzzles) heavily rely on T&E as their main and most natural resolution \nstrategy for the non-trivial instances. Trying to find a braid or a whip justifying an \nelimination in a simpler way than what they have first found by T&E may thus be an \nentertaining idea. The same remarks may be applied to any CSP. \n5.7. The objective properties of chains and braids \nChains should not be confused with chain rules. A chain rule can only be valid \nor not valid, which depends neither on the way it has been proven nor on any of the \nproperties defined below for the underlying chain. A non-valid chain rule is merely \nuseless. But a valid chain rule can be more a less general (giving rise to subsumption \nrelationships), more or less useful, easy to apply, acceptable. As (apart from the \nfirst) these are purely subjective criteria, they can only lead to confusion if they \ncannot be grounded in objective ones. \nWe have therefore devised a few, purely objective (or descriptive, or factual) \nproperties of chains that may be relevant to estimate their usefulness, desirability or \nunderstandability. Even these objective properties can give rise to much debate \nwhen it comes to subjectively evaluating their impact on usefulness or acceptability; \nit all depends on which criteria of acceptability are adopted. \n5.7.1. Linearity (sequentiality) \nWe use the words linearity or sequentiality as synonyms to mean that the \ncandidates composing the pattern are sequentially ordered; it is supposed that this \norder is essential in the definition of the pattern (i.e. not arbitrarily super-imposed on \nit) and in the proof of the associated resolution rule. Linearity is what makes the \ndifference with a net: a net has a DAG (directed acyclic graph) structure; in a net, \nonly a partial ordering of the candidates is required, while there may be branching \nand merging of different paths. Both whips and braids are linear. \n5.7.2. Continuity \nContinuity supposes linearity and means that consecutive candidates are linked. \nIn this definition, possible additional t- or z- candidates of whips and braids, which \n\n120 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nare not considered as part of the pattern, do not alleviate in any way this requirement \n(they are considered as inessential). Continuity is what distinguishes whips from \nbraids: braids satisfy linearity but not continuity. \n5.7.3. Homogeneity \nHomogeneous means that the pattern is a sequence of similar bricks. This vague \nproperty is obvious for all the chains and braids introduced here. \n5.7.4. Reversibility \nAlthough it had never been defined before HLS2, the word “reversibility” has \nbeen the pretext for the most poisonous debates on Sudoku Web forums. There is \nnevertheless an obvious definition, valid for any CSP: \n– given a sequential pattern, the reversed pattern is the sequential pattern \nobtained by reversing the order of the candidates; in the process, when used in the \ndefinition of some types of chains, left- [respectively right-] linking candidates \nbecome right- [resp. left-] linking candidates; \n– a given type of sequential pattern is called reversible if for any pattern of this \ntype, the reversed pattern is of this type. \nThese definitions will be extended in chapters 9 and 10 to sequential patterns \nwith more general right-linking objects. \nTheorem 5.8: bivalue-chains and z-chains are reversible. \nProof: obvious (left and right-linking candidates are interchanged). \nThe advantage of reversibility is that, in general, one can find other chains by \n“circulating along the chain” (i.e. making circular permutations of the candidates \nand changing the endpoints accordingly); these often allow other eliminations. \nNotice that chains (and braids) using the t-extension are not reversible. This is a \nweak point for them. But the sequel will show that they satisfy properties (left-\nextendibility and composability) that partially palliate this weakness. \n5.7.5. Non anticipativeness (or no look-ahead) \nDefinition: a given type of sequential pattern is called non-anticipative or no \nlook-ahead if, when a pattern of this type is built from left to right, all that needs be \nchecked when the next candidate is added depends only on the previous candidates \n(and not on the potential future ones) and possibly on the target (for patterns that \nhave to be built around a target, such as whips or braids). Notice that this does not \nimply that adding a candidate will always allow to finally get a full pattern of this \n\n5. Bivalue-chains, whips and braids      \n121 \ntype, but it guarantees that, up to the new candidate added, the pattern satisfies the \nconditions on patterns of this type whatever will be added to it later. \nComment: this seems to be a strong criterion for acceptability of sequential \npatterns, from both points of view of human solvers and programmers, because it is \nthe practical condition necessary for being able to build the pattern progressively \nfrom left to right, instead of having to spot it globally at once. It is a major \ncomputational property, the opposite of which is look-ahead. \nTheorem 5.9: a reversible chain is non-anticipative. \nTheorem 5.10: all the sequential patterns defined in this chapter, from \nbivalue-chains to whips and braids, are non-anticipative. \nProofs: obvious. Indeed, we had implicitly this condition in mind when we \nintroduced the first types of chains in HLS1. \n5.7.6. Left-extendibility and composability \nDefinition: a given type of sequential pattern is called left-extendable if, when \ngiven a partial pattern of this type, candidates can be added not only to its right but \nalso to its left (of course, respecting the linking conditions on left- and right- linking \ncandidates for patterns of this type at the junction and having the same target in case \nthey are built around a target). \nTheorem 5.11: a reversible chain is left-extendable. \nTheorem 5.12: a non-anticipative chain is left-extendable. \nTheorem 5.13: all the sequential patterns defined in this chapter, from \nbivalue-chains to whips and braids, are left-extendable. \nProof: obvious. The idea is that, when the presence of a t-candidate can be \njustified by previous right-linking candidates in a partial chain, it will remain \njustified by them if we add candidates to the left of this partial chain (and \njustifications of z-candidates will not be changed). This notion and theorem 5.13 \nwere first suggested by Mike Barker. \nDefinition: a given type of sequential pattern is called composable if, when two \npartial patterns of this type are given, they can be combined into a single pattern of \nthis type (of course, respecting the linking conditions on left- and right- linking \ncandidates for chains of this type at the junction and having the same target in case \nthey are built around a target). \nTheorem 5.14: all the sequential patterns defined in this chapter, from \nbivalue-chains to whips and braids, are composable. \n\n122 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nThe practical impact of this theorem is mainly for sequential patterns with the t-\nextension (t-whips, zt-whips, t-braids and zt-braids): when t-candidates are justified \nby previous right-linking candidates of a partial pattern, they will still be justified by \nthe same candidates if another partial pattern of the same type is added to its left. Of \ncourse, not all the sequential patterns with the t-extension can be obtained by \ncombining shorter patterns of the same type, but looking first for combinations of \nsuch shorter sub-patterns before patterns with longer distance t-interactions may be \na valuable strategy, different from the one described in section 5.5.2 (and it can also \nbe combined with it in order to keep taking advantage of the confluence property).  \n5.7.7. No OR-branching \nAll the chain/whip/braid patterns introduced in this chapter and all their \nextensions that will appear later on in this book have two essential properties in \ncommon:  \n– they involve no OR-branching, \n– they involve only structured AND-branching. \n5.7.7.1. How do you branch?: AND-branching vs OR-branching \nOriginating in the theorem proving literature and the associated backwards-\nchaining view (and closely related to PROLOG-like languages), there is a classical \ndistinction in AI between AND-branching and OR-branching. Whereas the \nconditions of only one of the branches are required to be satisfied at any OR-\nbranching point, AND-branching is much more complex because the conditions of \nall the branches are required to be simultaneously satisfied at any AND-branching \npoint. \nTransposed to the forward-chaining view that better applies to our approach, \nOR-branching becomes the most complex of the two. OR-branching corresponds to \npatterns where alternative possibilities would be allowed to appear, namely, instead \nof having only one right-linking candidate (or, anticipating on later chapters, right-\nlinking pattern), one would have several. From the point of view of logic, OR-\nbranching in forward-chaining is equivalent to reasoning by cases, which is \nperfectly valid in theory (even in intuitionistic logic): if one has A1 ⇒ B, A2 ⇒ B, \n… and An ⇒ B, then one can conclude A1 ∨ A2 ∨ … ∨ An ⇒ B.  \nBut, in practice, mathematicians do not like reasoning by cases very much and it \nis relatively important for the current discussion to understand why. In addition to \nthe often invoked reason that it is inelegant, especially if it is repeated several times \nin a proof (subcases of subcases of …), there is always the suspicion that it fails to \nfind deeper properties common to all the cases. This is true even without recursion, \nas shown by the most famous example of an extensive use of reasoning by cases, the \nproof of the four-colour theorem (“every planar graph is 4-colourable” or, more \n\n5. Bivalue-chains, whips and braids      \n123 \ninformally, “every map can be coloured by only four colours”). In 1976, Appel and \nHaken proposed a proof reducing the theorem to 1,936 particular cases [twenty \nyears later, this number was brought down to “only” 633, but this is irrelevant here] \nand they proved all these cases separately by a computer program. There have been \nmany arguments against this type of proof: 1) the final step (the 1,936 cases) was \ndone by a computer program, which could always be suspected of having bugs; 2) \nthere are so many cases (even in the improved version) that it is impossible for a \nhuman being to check them all. But, in our view, the most powerful objection does \nnot bear on validity; it is that this final part of the proof is meaningless, it does not \nteach us anything general, it involves no general mathematical knowledge – and this \nobjection would remain relevant even if there were only a dozen cases. \nIt should now be stressed that none of the patterns introduced in this book \ninvolve OR-branching – except the forcing-whips and forcing-braids quickly \nmentioned below in section 5.9. Even forcing-bi-braids (see chapter 12), if properly \nconstrued as B*-braids[1], do not rely on OR-branching. g-candidates (chapter 7) or \ninner Subsets (chapter 8) could be considered as involving a form of OR-branching, \nbut they are wrapped in such a way in the S-braids, S-whips, g-braids or g-whips \nthat this pseudo OR-branching is limited to one step and can only merge in \npredefined labels. \n5.7.7.2. Structured AND-branching vs free AND-branching \nAs for AND-branching, we said that all the patterns introduced in this book \ninvolve only structured forms of it. There are actually only two forms:  \n– in both whips and braids: from the target or a right-linking candidate (or \nobject) to a left-linking candidate and to the associated z- and t- candidates; \n– in braids: from a left-linking candidate to possibly several right-linking ones. \n5.7.8. Complexity \nAs whips or braids are much more general than bivalue-chains, the search for \nwhips or braids in a real resolution state of a real instance of a CSP is likely to be \nmore difficult than the search for the simplest bivalue-chains of same length. The \ncounterpart is, the former can solve many more instances (see chapter 6). \nUnfortunately, defining an objective complexity measure for the instances of a \nCSP is a very difficult task. Whereas worst case analysis is not very meaningful, \nmean case analysis is more meaningful but is very difficult in practice, as will be \nillustrated by the Sudoku case in chapter 6, where the Wn and Bn ratings will be \nshown to be reasonable measures of complexity. \n\n124 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n5.8. About loops in bivalue-chains, in whips and in braids \nWe say that there is a loop in a sequential pattern if it has two identical \ncandidates. In this section, we review the usefulness of accepting various kinds of \nloops in the different chains or braids introduced in this chapter. \n5.8.1 Global loops are useless in bivalue-chains \nDefine a global loop as a chain with same first and last candidates; this is the \nbroadest definition of a global loop one can give for a chain. \nConsider a bivalue-chain C =  {L1 R1} – {L2 R2} – … – {Ln Rn} with target Z \nand with a global loop, i.e. Rn = L1. (Notice that this situation is globally \ncontradictory and that such a pattern could be used to detect contradictory instances \nof a CSP, but this is not the question we want to deal with here.) We shall show that \nZ can be eliminated by rules from BRT and by a shorter bivalue-chain with no loop. \nThe bivalue-chain obtained by excising the last pair of candidates from C, i.e. \n{L1 R1} – {L2 R2} – … – {Ln-1 Rn-1}, admits Ln as a target: Ln is linked to its first \ncandidate (because L1 = Rn) and to its other endpoint (Rn-1). Ln can therefore be \neliminated by this shorter bivalue-chain with no global loop. After this, Rn can be \nasserted by rule S (because the CSP variable Vn of {Ln Rn} in C was bivalue); and Z \ncan be deleted by rule ECP.  \nAs a result, we have: \nTheorem 5.15: Any elimination that could be done by a bivalue-chain with a \nglobal loop can be done by BRT(CSP) and by a shorter bivalue-chain with no \nglobal loop. Practical statement: global loops are useless in bivalue-chains. \n5.8.2. Inner loops are useless in bivalue-chains \nWe say that a chain has an inner loop if it has two equal candidates, but at most \none of them is an endpoint. \nLet {L1 R1} – {Lk Rk} – … – {Lp Rp} – … – {Ln Rn} be a bivalue-chain and \nsuppose it has an inner loop. Let Z be a target. There are two possibilities for an \ninner loop. \nThe first possibility is the equality of two left-linking candidates or of two right-\nlinking candidates: Lk = Lp or Rk = Rp. Then, by excision of the inner loop, we get a \nshorter bivalue-chain with Z as a target: \n{L1 R1} – {Lk-1 Rk-1} – {Lp Rp} – … – {Ln Rn} or \n{L1 R1} – {Lk Rk} – {Lp+1 Rp+1} – … – {Ln Rn}. \n\n5. Bivalue-chains, whips and braids      \n125 \nThe second possibility is the equality of a right-linking candidate with a \nsubsequent or a previous left-linking candidate, corresponding respectively to the \ntwo cases Rk = Lp and Lk = Rp.  \nIn the first case, by excision of the extremities, we get a shorter bivalue-chain: \n{Lk+1 Rk+1} – … – {Lp-1 Rp-1} with Rk = Lp as a target. Once it has been used to \neliminate Lp, rules S and ECP from BRT(CSP) will progressively assert all the right-\nlinking candidates and eliminate all the left-linking candidates after p. After Rn has \nbeen asserted by S, Z will be eliminated by ECP. \nThe second case can be dealt with in exactly the same way, after reversing the \noriginal chain (which reverses the role of candidates: left-linking become right-\nlinking and conversely).  \nIn case the original chain had several inner loops, all these reductions can be \napplied iteratively to as many subparts of the chain as necessary; every iteration \neliminates one loop, until there remains none. Finally, we get: \nTheorem 5.16: Any elimination that could be done by a bivalue-chain with \ninner loops can be done by BRT(CSP) and by a shorter bivalue-chain with no \ninner loop. Practical statement: inner loops are useless in bivalue-chains. \n5.8.3. Bivalue-chains should have no loops \nAs a general conclusion of all the preceding cases, we have: \nTheorem 5.17: resolution rules that might be obtained from bivalue-chains \nwith global or inner loops are subsumed by BRT(CSP) together with rules for \nshorter bivalue-chains with no loops. Practical statement: bivalue-chains should \nhave no such loops. \n5.8.4. Should one allow loops in whips and braids? \nIn whips or braids, equality of a left-linking and a right-linking candidate is the \nclosest notion we can have of a loop; but such equality would produce the final whip \ncontradiction. In particular, a z-chain with a global loop would merely be a z-whip. \nAs for other kinds of inner loops in whips (equality of two left-linking or of two \nright-linking candidates), nothing allows to eliminate them. A priori, one can \nconsider that, as we go forward along a whip, we accumulate knowledge about the \nconsequences of assuming its target, which allows more possibilities of extending it; \nallowing such inner loops could therefore lead to accumulate more knowledge and \nto find more whips. \n\n126 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nHowever, although the general definition of a whip does not exclude loops, \nexperience with the Sudoku example shows that they do not bring much more \ngenerality but they bring more computational complexity. Moreover, in any CSP, \nwhips with loops are subsumed by braids and it may be more interesting to use \nbraids than whips with inner loops. Therefore, we do not add any a priori no-loop \ncondition in the general definition of a whip, but, unless otherwise stated, all the \nwhips we shall consider will be loopless. In particular, the statistical results for \nSudoku in chapter 6 are about loopless whips. \nAs for braids, the notion of an inner loop is pointless: the same left-linking or \nright-linking candidate can be used several times for sprouting new branches, which \nhas the same “accumulation” result as loops, but without the useless parts that may \nbe needed to join the endpoints of a loop; i.e. for any possible inner loop, there is \nalways, obviously, a shorter braid without this loop. \n5.9. Forcing whips and braids, a bad idea? \nConsider a bivalue variable (in any resolution state), with its two possible values \nx1 and x2 corresponding to candidates Z1 and Z2. Suppose there are two partial \nwhips/braids, say W1 and W2, one with target Z1, the other with target Z2. In case \nW1 and W2 share a left-linking candidate L [respectively a right-linking candidate \nR], L can be deleted [resp. R can be asserted]: this is reasoning by cases, which is \nperfectly valid in intuitionistic logic. Do we get interesting new patterns this way (to \nbe called forcing whips / forcing braids because they force a conclusion that could \nnot be obtained by a single whip/braid pattern)? Obviously, the answer would be \nnegative for reversible chains: it would suffice to reverse one of the chains and to \nlink the two by the bivalue variable in order to obtain a single chain of same type as \nthe two given ones. Notice that in this process the chain thus obtained should be \nassigned length n1+n2+1, where the ni are the lengths of the two chains. \nBut as whips and braids are not reversible, it seems one could get new patterns, \nmore general than whips and braids. What is the resolution power of such patterns? \nWe have no general answer. But, in the Sudoku case, if these patterns are assigned \nlength n1+n2+1 and given smaller priority than whips/braids of same length, we have \nfound no occurrence in a random sample of 1,300 puzzles. As the memory \nrequirements for such combinations are very high, we did not try on larger samples. \nThere is still the possibility of starting from trivalue variables and considering \nthree whips/braids instead of two, but the complexity increases accordingly. \nSee chapter 12 for the definition of a much broader type of patterns based on \nsimilar ideas, but with drastically increased resolution power. \n\n5. Bivalue-chains, whips and braids      \n127 \n5.10. Exceptional examples \nAll the resolution rules defined in this chapter have been implemented in our \nCSP-Rules solver in a way valid for any CSP. Each of them can be activated or de-\nactivated independently. Different strategies can be chosen. In the examples below, \nwe systematically apply the “simplest first” resolution strategy defined in section \n5.5.2, with whips [respectively whips and braids] activated, in order to get the W \n[respectively the B] rating. \nThe longest whip(s) or braid(s) of each resolution path appears in bold \ncharacters. As for the notation (the “nrc notation”), it is self explaining and \nconsistent with the general representation for whips and braids introduced in \nsections 5.2 and 5.3; the only adaptations are: 1) outside curly brackets, CSP \nVariables Xrc, Xrn, … are merely written as rc, rn, …; 2) within curly brackets, the s \nvalue of an Xbn variable is replaced by its equivalent in rc-coordinates; the reason is \nbetter readability on the standard rc-grid. Apart from some hand editing, the \nfollowing is the raw output from SudoRules. Handmade changes (in addition to \nthose mentioned in the Introduction) have the only purpose of using less paper; they \nconsist mainly of writing several whips in the same line (even if, because they have \ndifferent targets, the justifications of their z-candidates may be different). \nA general warning is in order about our Sudoku examples: because they are \nintended to illustrate exceptional properties, most of them are much more difficult \nthan the vast majority of puzzles (see the classification results in chapter 6); as a \nresult, they have exceptionally long resolution paths with exceptionally long \nwhips/braids and they may give a very wrong idea of the much simpler typical \nresolution paths. A “normal” puzzle can be solved with only a few rule applications \n(not counting ECP), often even less than in the example of Figure 5.1. \n5.10.1. Proof of B4 ≠ W4: an instance with W(P) = 5 and B(P) = 4 \n \n \n  2   4   \n  7 \n \n \n    1 2 3 4 5 6 7 8 9 \n \n \n  \n  8 9 1 \n \n      4 5 6 7 8 9 1 2 3 \n  \n  \n \n \n  \n \n  6 5     7 8 9 1 2 3 4 6 5 \n \n  4 8   \n   \n  \n      2 1 4 8 7 5 3 9 6 \n3 \n \n  9 \n \n  \n \n  1     3 6 7 9 4 2 8 5 1 \n \n9 5   \n  1   7 \n \n    8 9 5 6 3 1 2 7 4 \n \n7   3 \n \n  \n \n1 2     5 7 8 3 6 4 9 1 2 \n6 3   \n  \n \n  \n   \n      6 3 1 2 9 8 5 4 7 \n  \n \n2   1 \n \n \n  8     9 4 2 5 1 7 6 3 8 \n \n Figure 5.2. A puzzle P with B(P) = 4 and W(P) = 5 \n\n128 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nThe example in Figure 5.2 is one of the rare (in percentage) puzzles with a B \nrating smaller than its W rating.  \n1) The resolution path with whips shows that W(P) = 5: \n \n*****\t\r  \t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  W\t\r  \t\r  *****\t\r  \n26\t\r  givens,\t\r  196\t\r  candidates,\t\r  1151\t\r  csp-­‐links\t\r  and\t\r  1151\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.51\t\r  \nsingles\t\r  ==>\t\r  r8c9\t\r  =\t\r  7,\t\r  r8c3\t\r  =\t\r  1,\t\r  r1c1\t\r  =\t\r  1,\t\r  r4c2\t\r  =\t\r  1,\t\r  r3c4\t\r  =\t\r  1,\t\r  r8c6\t\r  =\t\r  8\t\r  \nwhip[1]:\t\r  c9n6{r6\t\r  .}\t\r  ==>\t\r  r4c7\t\r  ≠\t\r  6,\t\r  r5c7\t\r  ≠\t\r  6,\t\r  r6c7\t\r  ≠\t\r  6\t\r  \nwhip[1]:\t\r  r1n5{c5\t\r  .}\t\r  ==>\t\r  r2c4\t\r  ≠\t\r  5\t\r  \nwhip[1]:\t\r  c4n5{r9\t\r  .}\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  5,\t\r  r7c6\t\r  ≠\t\r  5,\t\r  r7c5\t\r  ≠\t\r  5,\t\r  r9c6\t\r  ≠\t\r  5\t\r  \nwhip[1]:\t\r  b4n6{r5c2\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  6,\t\r  r5c5\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  c8n8{r1\t\r  r5}\t\r  –\t\r  c2n8{r5\t\r  .}\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  8\t\r  \nhidden-­‐single-­‐in-­‐a-­‐row\t\r  ==>\t\r  r1c8\t\r  =\t\r  8\t\r  \nwhip[3]:\t\r  r9c2{n4\t\r  n5\t\r  \t\r  r7n5{c1\t\r  c7}\t\r  –\t\r  b9n6{r7c7\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  r6c1{n2\t\r  n8}\t\r  –\t\r  r5n8{c3\t\r  c7}\t\r  –\t\r  r5n2{c7\t\r  c8}\t\r  –\t\r  r2n2{c8\t\r  .}\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  2\t\r  \nsingles\t\r  ==>\t\r  r6c4\t\r  =\t\r  6,\t\r  r4c9\t\r  =\t\r  6,\t\r  r1c9\t\r  =\t\r  9\t\r  \nwhip[1]:\t\r  r2n6{c2\t\r  .}\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  6\t\r  \nnaked-­‐single\t\r  ==>\t\r  r1c3\t\r  =\t\r  3\t\r  \nwhip[1]:\t\r  r2n3{c9\t\r  .}\t\r  ==>\t\r  r3c7\t\r  ≠\t\r  3\t\r  \nwhip[4]:\t\r  r6n8{c7\t\r  c1}\t\r  –\t\r  r6n2{c1\t\r  c5}\t\r  –\t\r  c6n2{r4\t\r  r3}\t\r  –\t\r  r3c7{n2\t\r  .}\t\r  ==>\t\r  r6c7\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  b9n3{r9c8\t\r  r9c7}\t\r  –\t\r  r9n6{c7\t\r  c6}\t\r  –\t\r  r7c6{n6\t\r  n4}\t\r  –\t\r  r8n4{c5\t\r  .}\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  r6n4{c5\t\r  c9}\t\r  –\t\r  c8n4{r5\t\r  r2}\t\r  –\t\r  r2n2{c8\t\r  c4}\t\r  –\t\r  b8n2{r8c4\t\r  .}\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  4\t\r  \nwhip[1]:\t\r  r8n4{c8\t\r  .}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  b9n4{r8c8\t\r  r8c7}\t\r  –\t\r  r3c7{n4\t\r  n2}\t\r  –\t\r  r2n2{c8\t\r  c4}\t\r  –\t\r  r8c4{n2\t\r  .}\t\r  ==>\t\r  r8c8\t\r  ≠\t\r  5\t\r  \nwhip[4]:\t\r  b8n9{r7c5\t\r  r8c5}\t\r  –\t\r  r8c8{n9\t\r  n4}\t\r  –\t\r  r8c7{n4\t\r  n5}\t\r  –\t\r  r7n5{c7\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  9\t\r  \nwhip[4]:\t\r  b7n9{r9c1\t\r  r7c3}\t\r  –\t\r  b7n8{r7c3\t\r  r7c1}\t\r  –\t\r  r7n5{c1\t\r  c7}\t\r  –\t\r  b9n6{r7c7\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  9\t\r  \nwhip[4]:\t\r  r9n9{c1\t\r  c8}\t\r  –\t\r  b9n3{r9c8\t\r  r9c7}\t\r  –\t\r  b9n6{r9c7\t\r  r7c7}\t\r  –\t\r  r7n5{c7\t\r  .}\t\r  ==>\t\r  r9c1\t\r  ≠\t\r  5\t\r  \n;;; Resolution state RS1 \n \nwhip[5]:\t\r   c2n5{r2\t\r   r9}\t\r   –\t\r   r9c4{n5\t\r   n7}\t\r   –\t\r   r2c4{n7\t\r   n2}\t\r   –\t\r   b3n2{r2c8\t\r   r3c7}\t\r   –\t\r   b3n4{r3c7\t\r   .}\t\r   ==>\t\r  \nr2c2\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  c2n8{r5\t\r  r3}\t\r  –\t\r  c1n8{r3\t\r  r7}\t\r  –\t\r  b7n5{r7c1\t\r  r9c2}\t\r  –\t\r  c2n4{r9\t\r  .}\t\r  ==>\t\r  r5c3\t\r  ≠\t\r  8\t\r  \nwhip[2]:\t\r  c3n9{r3\t\r  r7}\t\r  –\t\r  c3n8{r7\t\r  .}\t\r  ==>\t\r  r3c3\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  r3c7{n2\t\r  n4}\t\r  –\t\r  r3c2{n4\t\r  n8}\t\r  –\t\r  r5n8{c2\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  c6n2{r4\t\r  r3}\t\r  –\t\r  r2n2{c4\t\r  c8}\t\r  –\t\r  r5n2{c8\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  c6n2{r5\t\r  r3}\t\r  –\t\r  r2n2{c4\t\r  c8}\t\r  –\t\r  r5n2{c8\t\r  .}\t\r  ==>\t\r  r6c5\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  r6c9{n3\t\r  n4}\t\r  –\t\r  r6c5{n4\t\r  .}\t\r  ==>\t\r  r6c7\t\r  ≠\t\r  3\t\r  \nwhip[4]:\t\r  b6n9{r4c7\t\r  r4c8}\t\r  –\t\r  c8n2{r4\t\r  r2}\t\r  –\t\r  c8n3{r2\t\r  r9}\t\r  –\t\r  c7n3{r9\t\r  .}\t\r  ==>\t\r  r4c7\t\r  ≠\t\r  2\t\r  \nwhip[4]:\t\r  b9n5{r9c7\t\r  r9c8}\t\r  –\t\r  r9c2{n5\t\r  n4}\t\r  –\t\r  r3c2{n4\t\r  n8}\t\r  –\t\r  r5n8{c2\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  r3c7{n4\t\r  n2}\t\r  –\t\r  r6c7{n2\t\r  n8}\t\r  –\t\r  r5c7{n8\t\r  .}\t\r  ==>\t\r  r8c7\t\r  ≠\t\r  4\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r8c8\t\r  =\t\r  4\t\r  \nwhip[3]:\t\r  r3c2{n4\t\r  n8}\t\r  –\t\r  r5n8{c2\t\r  c7}\t\r  –\t\r  c7n4{r5\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  4\t\r  \nwhip[3]:\t\r  b1n5{r2c1\t\r  r2c2}\t\r  –\t\r  r9c2{n5\t\r  n4}\t\r  –\t\r  c1n4{r9\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  7\t\r  \nwhip[2]:\t\r  c5n7{r4\t\r  r3}\t\r  –\t\r  c1n7{r3\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  b7n9{r9c1\t\r  r7c3}\t\r  –\t\r  b7n8{r7c3\t\r  r7c1}\t\r  –\t\r  r7n5{c1\t\r  c7}\t\r  –\t\r  r8c7{n5\t\r  .}\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  9\t\r  \nsingles\t\r  ==>\t\r  r4c8\t\r  =\t\r  9,\t\r  r9c1\t\r  =\t\r  9,\t\r  r7c3\t\r  =\t\r  8,\t\r  r3c3\t\r  =\t\r  9\t\r  \n\n5. Bivalue-chains, whips and braids      \n129 \nwhip[3]:\t\r  r4c7{n3\t\r  n5}\t\r  –\t\r  r5c8{n5\t\r  n2}\t\r  –\t\r  b5n2{r5c5\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  3\t\r  \nhidden-­‐single-­‐in-­‐a-­‐column\t\r  ==>\t\r  r3c6\t\r  =\t\r  3\t\r  \nwhip[1]:\t\r  c6n2{r5\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  c3n7{r5\t\r  r2}\t\r  –\t\r  b2n7{r2c4\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  c7n4{r5\t\r  r3}\t\r  –\t\r  c7n2{r3\t\r  r6}\t\r  –\t\r  r5n2{c8\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  4\t\r  \nwhip[1]:\t\r  c6n4{r9\t\r  .}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  4\t\r  \nwhip[3]:\t\r  c8n5{r5\t\r  r9}\t\r  –\t\r  r9c4{n5\t\r  n7}\t\r  –\t\r  c6n7{r9\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  r4c6{n5\t\r  n2}\t\r  –\t\r  r5n2{c6\t\r  c8}\t\r  –\t\r  b6n5{r5c8\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  r9n6{c7\t\r  c6}\t\r  –\t\r  r1c6{n6\t\r  n5}\t\r  –\t\r  r4n5{c6\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  5\t\r  \nwhip[4]:\t\r  r9c2{n4\t\r  n5}\t\r  –\t\r  r9c8{n5\t\r  n3}\t\r  –\t\r  b3n3{r2c8\t\r  r2c9}\t\r  –\t\r  b3n4{r2c9\t\r  .}\t\r  ==>\t\r  r3c2\t\r  ≠\t\r  4\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n2) The resolution path with braids shows that B(P) = 4: \n \n*****\t\r  \t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  B\t\r  \t\r  *****\t\r  \n;;; same path up to RS1 (no braid appears before); after, the two paths diverge: \nbraid[4]:\t\r  r2c4{n7\t\r  n2}\t\r  –\t\r  r4c1{n7\t\r  n2}\t\r  –\t\r  c8n2{r2\t\r  r5}\t\r  –\t\r  c6n2{r5\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  7\t\r  \nwhip[2]:\t\r  c5n7{r4\t\r  r3}\t\r  –\t\r  c1n7{r3\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  c2n4{r2\t\r  r9}\t\r  –\t\r  c2n5{r9\t\r  r2}\t\r  –\t\r  r2c1{n5\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  b1n6{r2c2\t\r  r2c3}\t\r  –\t\r  r2n7{c3\t\r  c4}\t\r  –\t\r  r9c4{n7\t\r  n5}\t\r  –\t\r  c2n5{r9\t\r  .}\t\r  ==>\t\r  r2c2\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  c2n8{r5\t\r  r3}\t\r  –\t\r  c1n8{r3\t\r  r7}\t\r  –\t\r  b7n5{r7c1\t\r  r9c2}\t\r  –\t\r  c2n4{r9\t\r  .}\t\r  ==>\t\r  r5c3\t\r  ≠\t\r  8\t\r  \nwhip[2]:\t\r  c3n9{r3\t\r  r7}\t\r  –\t\r  c3n8{r7\t\r  .}\t\r  ==>\t\r  r3c3\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  r3c7{n2\t\r  n4}\t\r  –\t\r  r3c2{n4\t\r  n8}\t\r  –\t\r  r5n8{c2\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  c6n2{r4\t\r  r3}\t\r  –\t\r  r2n2{c4\t\r  c8}\t\r  –\t\r  r5n2{c8\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  c6n2{r5\t\r  r3}\t\r  –\t\r  r2n2{c4\t\r  c8}\t\r  –\t\r  r5n2{c8\t\r  .}\t\r  ==>\t\r  r6c5\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  r6c9{n3\t\r  n4}\t\r  –\t\r  r6c5{n4\t\r  .}\t\r  ==>\t\r  r6c7\t\r  ≠\t\r  3\t\r  \nwhip[4]:\t\r  b6n9{r4c7\t\r  r4c8}\t\r  –\t\r  c8n2{r4\t\r  r2}\t\r  –\t\r  c8n3{r2\t\r  r9}\t\r  –\t\r  c7n3{r9\t\r  .}\t\r  ==>\t\r  r4c7\t\r  ≠\t\r  2\t\r  \nwhip[4]:\t\r  b9n5{r9c7\t\r  r9c8}\t\r  –\t\r  r9c2{n5\t\r  n4}\t\r  –\t\r  r3c2{n4\t\r  n8}\t\r  –\t\r  r5n8{c2\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  r3n4{c7\t\r  c2}\t\r  –\t\r  c2n8{r3\t\r  r5}\t\r  –\t\r  r5c7{n8\t\r  .}\t\r  ==>\t\r  r8c7\t\r  ≠\t\r  4\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r8c8\t\r  =\t\r  4\t\r  \nwhip[4]:\t\r  b7n9{r9c1\t\r  r7c3}\t\r  –\t\r  b7n8{r7c3\t\r  r7c1}\t\r  –\t\r  r7n5{c1\t\r  c7}\t\r  –\t\r  r8c7{n5\t\r  .}\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  9\t\r  \nsingles\t\r  ==>\t\r  r4c8\t\r  =\t\r  9,\t\r  r9c1\t\r  =\t\r  9,\t\r  r7c3\t\r  =\t\r  8,\t\r  r3c3\t\r  =\t\r  9\t\r  \nwhip[3]:\t\r  r4c7{n3\t\r  n5}\t\r  –\t\r  r5c8{n5\t\r  n2}\t\r  –\t\r  b5n2{r5c5\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  3\t\r  \nhidden-­‐single-­‐in-­‐a-­‐column\t\r  ==>\t\r  r3c6\t\r  =\t\r  3\t\r  \nwhip[1]:\t\r  c6n2{r5\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  c3n7{r5\t\r  r2}\t\r  –\t\r  b2n7{r2c4\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  c7n4{r5\t\r  r3}\t\r  –\t\r  c7n2{r3\t\r  r6}\t\r  –\t\r  r5n2{c8\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  4\t\r  \nwhip[1]:\t\r  c6n4{r9\t\r  .}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  4\t\r  \nwhip[3]:\t\r  c8n5{r5\t\r  r9}\t\r  –\t\r  r9c4{n5\t\r  n7}\t\r  –\t\r  c6n7{r9\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  r4c6{n5\t\r  n2}\t\r  –\t\r  r5n2{c6\t\r  c8}\t\r  –\t\r  b6n5{r5c8\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  r9n6{c7\t\r  c6}\t\r  –\t\r  r1c6{n6\t\r  n5}\t\r  –\t\r  r4n5{c6\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  5\t\r  \nwhip[4]:\t\r  r2c9{n3\t\r  n4}\t\r  –\t\r  r2c1{n4\t\r  n5}\t\r  –\t\r  r7n5{c1\t\r  c7}\t\r  –\t\r  r4c7{n5\t\r  .}\t\r  ==>\t\r  r6c9\t\r  ≠\t\r  3\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n\n130 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n5.10.2. Proof of B∞ ≠ W∞ : an instance with W(P) = ∞ and B(P) = 12 \nAfter the previous example, one may still wonder: if a puzzle can be solved by \nbraids, cannot one always find whips, though longer than the braids, such that they \nwill also solve it? Said otherwise, is not B∞ equal to W∞? The answer is negative; \nthere are puzzles that can be solved by braids but not by whips of any length. The \nexample in Figure 5.3 is one of the exceptional (in percentage) puzzles in this case \n(see statistics in chapter 6); it is the only one in the whole “Magictour top 1465” \ncollection; its B rating is 12 but its W rating is ∞. \n \n \n  \n  \n  3   \n  5 \n \n \n    9 1 4 3 7 8 5 2 6 \n \n5   \n  1 \n \n  3       6 5 8 9 1 2 7 3 4 \n  \n  7 \n \n  4   \n \n1     3 2 7 5 6 4 9 8 1 \n2   \n  \n  \n  \n  4   \n      2 8 9 1 3 7 4 6 5 \n  6   \n \n9   \n \n  \n      4 6 3 2 9 5 1 7 8 \n \n  1   \n  6   \n  2     5 7 1 8 4 6 3 9 2 \n8   \n  7 \n \n  2   \n      8 4 6 7 5 3 2 1 9 \n  9   \n  8   \n  5       7 9 2 4 8 1 6 5 3 \n  \n \n5   \n  9 \n \n  7     1 3 5 6 2 9 8 4 7 \nFigure 5.3. Puzzle Magictour top 1465 #89 and its solution; W = ∞ and B = 12 \nAlthough the following resolution paths are exceptionally long, they have a \nfeature typical of what one gets with the “simplest first” strategy: braids that are not \nwhips appear much less often than whips. For puzzles P solvable by whips, if both \nwhips and braids are activated, braids appear even more rarely – and they very \nrarely change the rating, i.e. W(P) = B(P) most of the time. In both resolution paths \nbelow, one can also notice the long streaks of eliminations necessary before a new \nvalue can be asserted. \n1) The resolution path with whips shows that W(P) = ∞ ; it also gives an \nexample of a very long whip[18] (but there are much longer ones in other puzzles): \n \n*****\t\r  \t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  W\t\r  \t\r  *****\t\r  \n24\t\r  givens,\t\r  218\t\r  candidates,\t\r  1379\t\r  csp-­‐links\t\r  and\t\r  1379\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.46\t\r  \nhidden-­‐single-­‐in-­‐a-­‐row\t\r  ==>\t\r  r8c1\t\r  =\t\r  7\t\r  \nwhip[2]:\t\r  r5n7{c8\t\r  c6}\t\r  –\t\r  r2n7{c6\t\r  .}\t\r  ==>\t\r  r6c7\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  c2n2{r1\t\r  r9}\t\r  –\t\r  c5n2{r9\t\r  r3}\t\r  –\t\r  b3n2{r3c8\t\r  .}\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  c5n2{r1\t\r  r9}\t\r  –\t\r  c2n2{r9\t\r  r3}\t\r  –\t\r  b3n2{r3c8\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  c1n9{r2\t\r  r6}\t\r  –\t\r  c7n9{r6\t\r  r3}\t\r  –\t\r  r1n9{c8\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r2n2{c6\t\r  c3}\t\r  –\t\r  c2n2{r1\t\r  r9}\t\r  –\t\r  c5n2{r9\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  b6n5{r4c9\t\r  r5c9}\t\r  –\t\r  b4n5{r5c1\t\r  r6c1}\t\r  –\t\r  b4n9{r6c1\t\r  .}\t\r  ==>\t\r  r4c9\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  b7n2{r9c2\t\r  r8c3}\t\r  –\t\r  r2n2{c3\t\r  c6}\t\r  –\t\r  b5n2{r5c6\t\r  .}\t\r  ==>\t\r  r9c4\t\r  ≠\t\r  2\t\r  \nwhip[4]:\t\r  b6n6{r4c8\t\r  r4c9}\t\r  –\t\r  b6n5{r4c9\t\r  r5c9}\t\r  –\t\r  b4n5{r5c1\t\r  r6c1}\t\r  –\t\r  b4n9{r6c1\t\r  .}\t\r  ==>\t\r  r4c8\t\r  ≠\t\r  9\t\r  \n\n5. Bivalue-chains, whips and braids      \n131 \nhidden-­‐single-­‐in-­‐a-­‐row\t\r  ==>\t\r  r4c3\t\r  =\t\r  9\t\r  \nwhip[7]:\t\r   b9n9{r7c9\t\r   r7c8}\t\r   –\t\r   r1n9{c8\t\r   c1}\t\r   –\t\r   r3n9{c1\t\r   c4}\t\r   –\t\r   b2n5{r3c4\t\r   r3c5}\t\r   –\t\r   b8n5{r7c5\t\r   r7c6}\t\r   –\t\r  \nr7n1{c6\t\r  c2}\t\r  –\t\r  c1n1{r9\t\r  .}\t\r  ==>\t\r  r2c9\t\r  ≠\t\r  9\t\r  \n;;; Resolution state RS1 \nwhip[9]:\t\r  c7n7{r2\t\r  r5}\t\r  –\t\r  c8n7{r4\t\r  r1}\t\r  –\t\r  r1n9{c8\t\r  c1}\t\r  –\t\r  c1n1{r1\t\r  r9}\t\r  –\t\r  c7n1{r9\t\r  r8}\t\r  –\t\r  b8n1{r8c6\t\r  r7c6}\t\r  –\t\r  \nb8n5{r7c6\t\r  r7c5}\t\r  –\t\r  b2n5{r3c5\t\r  r3c4}\t\r  –\t\r  b2n9{r3c4\t\r  .}\t\r  ==>\t\r  r2c7\t\r  ≠\t\r  9\t\r  \nwhip[11]:\t\r  b3n7{r2c7\t\r  r1c8}\t\r  –\t\r  r1c6{n7\t\r  n8}\t\r  –\t\r  c3n8{r1\t\r  r5}\t\r  –\t\r  c9n8{r5\t\r  r4}\t\r  –\t\r  c8n8{r4\t\r  r9}\t\r  –\t\r  c8n4{r9\t\r  r7}\t\r  –\t\r  \nb9n9{r7c8\t\r  r7c9}\t\r  –\t\r  r1n9{c9\t\r  c1}\t\r  –\t\r  c1n1{r1\t\r  r9}\t\r  –\t\r  r7c2{n1\t\r  n3}\t\r  –\t\r  c3n3{r8\t\r  .}\t\r  ==>\t\r  r2c7\t\r  ≠\t\r  8\t\r  \nwhip[18]:\t\r  r1c6{n8\t\r  n7}\t\r  –\t\r  r2n7{c6\t\r  c7}\t\r  –\t\r  r5n7{c7\t\r  c8}\t\r  –\t\r  r6c8{n7\t\r  n9}\t\r  –\t\r  c7n9{r6\t\r  r3}\t\r  –\t\r  r1n9{c9\t\r  c1}\t\r  \n–\t\r   c1n1{r1\t\r   r9}\t\r   –\t\r   c2n1{r7\t\r   r1}\t\r   –\t\r   r1n2{c2\t\r   c5}\t\r   –\t\r   r2n2{c4\t\r   c3}\t\r   –\t\r   c3n8{r2\t\r   r5}\t\r   –\t\r   c9n8{r5\t\r   r4}\t\r   –\t\r  \nc7n8{r5\t\r  r9}\t\r  –\t\r  c7n6{r9\t\r  r8}\t\r  –\t\r  b7n6{r8c3\t\r  r7c3}\t\r  –\t\r  c3n3{r7\t\r  r8}\t\r  –\t\r  b9n3{r8c7\t\r  r7c9}\t\r  –\t\r  b9n9{r7c9\t\r  .}\t\r  \n==>\t\r  r1c8\t\r  ≠\t\r  8\t\r  \nAfter this very long whip, there is no more elimination. (Whips are programmed \nup to length 36 in CSP-Rules and there is a mechanism for detecting the need for \nlonger ones – it never fired! The same programmed maximum length is true of the \nbraids and of the g-whips and g-braids to be introduced in chapter 7.) \n2) The resolution path with braids shows that B(P) = 12: \n \n*****\t\r  \t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  B\t\r  \t\r  *****\t\r  \n;;; same path up to resolution state RS1 \n;;; the next two eliminations were done by slightly longer whips (length +1) in the \nprevious path \nbraid[8]:\t\r   r1n9{c9\t\r   c1}\t\r   –\t\r   r3n9{c1\t\r   c4}\t\r   –\t\r   b2n5{r3c4\t\r   r3c5}\t\r   –\t\r   b8n5{r7c5\t\r   r7c6}\t\r   –\t\r   c1n1{r1\t\r   r9}\t\r   –\t\r  \nc7n7{r2\t\r  r5}\t\r  –\t\r  c7n1{r5\t\r  r8}\t\r  –\t\r  b8n1{r9c4\t\r  .}\t\r  ==>\t\r  r2c7\t\r  ≠\t\r  9\t\r  \nbraid[10]:\t\r   b3n7{r2c7\t\r   r1c8}\t\r   –\t\r   r1c6{n7\t\r   n8}\t\r   –\t\r   c3n8{r1\t\r   r5}\t\r   –\t\r   b9n8{r9c7\t\r   r9c8}\t\r   –\t\r   c8n4{r1\t\r   r7}\t\r   –\t\r  \nb9n9{r7c8\t\r  r7c9}\t\r  –\t\r  r1n9{c8\t\r  c1}\t\r  –\t\r  c1n1{r1\t\r  r9}\t\r  –\t\r  r7c2{n1\t\r  n3}\t\r  –\t\r  c3n3{r8\t\r  .}\t\r  ==>\t\r  r2c7\t\r  ≠\t\r  8\t\r  \n;;; now the two paths diverge completely \nbraid[11]:\t\r  c9n9{r7\t\r  r1}\t\r  –\t\r  c7n9{r3\t\r  r6}\t\r  –\t\r  b6n3{r6c7\t\r  r5c7}\t\r  –\t\r  c3n3{r5\t\r  r8}\t\r  –\t\r  c3n2{r8\t\r  r2}\t\r  –\t\r  c7n7{r5\t\r  r2}\t\r  –\t\r  \nr2c6{n2\t\r  n8}\t\r  –\t\r  r1c6{n8\t\r  n7}\t\r  –\t\r  r5n7{c6\t\r  c8}\t\r  –\t\r  r6c8{n7\t\r  n8}\t\r  –\t\r  c9n8{r5\t\r  .}\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  3\t\r  \nbraid[10]:\t\r   b6n6{r4c8\t\r   r4c9}\t\r   –\t\r   b6n5{r4c9\t\r   r5c9}\t\r   –\t\r   c9n3{r5\t\r   r8}\t\r   –\t\r   r5n7{c8\t\r   c6}\t\r   –\t\r   r1c6{n7\t\r   n8}\t\r   –\t\r  \nc9n8{r5\t\r  r2}\t\r  –\t\r  r3n8{c8\t\r  c2}\t\r  –\t\r  r4c2{n8\t\r  n3}\t\r  –\t\r  c6n3{r8\t\r  r7}\t\r  –\t\r  c3n3{r8\t\r  .}\t\r  ==>\t\r  r4c8\t\r  ≠\t\r  7\t\r  \nbraid[12]:\t\r   c7n9{r3\t\r   r6}\t\r   –\t\r   b9n8{r9c7\t\r   r9c8}\t\r   –\t\r   r6c8{n9\t\r   n7}\t\r   –\t\r   r5c8{n8\t\r   n1}\t\r   –\t\r   r5c7{n8\t\r   n3}\t\r   –\t\r  \nb9n3{r9c7\t\r  r8c9}\t\r  –\t\r  r5n7{c8\t\r  c6}\t\r  –\t\r  r1c6{n7\t\r  n8}\t\r  –\t\r  r2c6{n8\t\r  n2}\t\r  –\t\r  c3n3{r8\t\r  r7}\t\r  –\t\r  c5n2{r1\t\r  r9}\t\r  –\t\r  \nr9n3{c7\t\r  .}\t\r  ==>\t\r  r3c7\t\r  ≠\t\r  8\t\r  \nwhip[8]:\t\r  r2c7{n7\t\r  n6}\t\r  –\t\r  r3c7{n6\t\r  n9}\t\r  –\t\r  r1n9{c8\t\r  c1}\t\r  –\t\r  c1n1{r1\t\r  r9}\t\r  –\t\r  c1n6{r9\t\r  r3}\t\r  –\t\r  r2c1{n6\t\r  n4}\t\r  –\t\r  \nr1c3{n4\t\r  n8}\t\r  –\t\r  r1c6{n8\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  7\t\r  \nhidden-­‐single-­‐in-­‐a-­‐row\t\r  ==>\t\r  r2c7\t\r  =\t\r  7\t\r  \nwhip[4]:\t\r  r5n7{c8\t\r  c6}\t\r  –\t\r  r1c6{n7\t\r  n8}\t\r  –\t\r  r3n8{c4\t\r  c2}\t\r  –\t\r  b4n8{r6c2\t\r  .}\t\r  ==>\t\r  r5c8\t\r  ≠\t\r  8\t\r  \nbraid[9]:\t\r  b2n9{r2c4\t\r  r3c4}\t\r  –\t\r  r3c7{n9\t\r  n6}\t\r  –\t\r  r2n9{c4\t\r  c1}\t\r  –\t\r  r2n6{c9\t\r  c3}\t\r  –\t\r  c3n2{r2\t\r  r8}\t\r  –\t\r  r2n4{c3\t\r  c9}\t\r  –\t\r  \nr8n4{c9\t\r  c4}\t\r  –\t\r  c4n6{r8\t\r  r9}\t\r  –\t\r  b7n6{r9c1\t\r  .}\t\r  ==>\t\r  r2c4\t\r  ≠\t\r  2\t\r  \nbraid[9]:\t\r  b2n9{r2c4\t\r  r3c4}\t\r  –\t\r  r3c7{n9\t\r  n6}\t\r  –\t\r  r2n9{c4\t\r  c1}\t\r  –\t\r  r2n6{c9\t\r  c3}\t\r  –\t\r  c3n2{r2\t\r  r8}\t\r  –\t\r  r2c9{n8\t\r  n4}\t\r  –\t\r  \nr8n4{c9\t\r  c4}\t\r  –\t\r  c4n6{r8\t\r  r9}\t\r  –\t\r  b7n6{r9c1\t\r  .}\t\r  ==>\t\r  r2c4\t\r  ≠\t\r  8\t\r  \nbraid[11]:\t\r  c4n2{r5\t\r  r8}\t\r  –\t\r  b6n1{r5c8\t\r  r4c8}\t\r  –\t\r  b6n6{r4c8\t\r  r4c9}\t\r  –\t\r  b6n5{r4c9\t\r  r5c9}\t\r  –\t\r  c9n3{r5\t\r  r8}\t\r  –\t\r  \nr8n4{c9\t\r  c3}\t\r  –\t\r  r8n6{c9\t\r  c7}\t\r  –\t\r  b9n1{r9c8\t\r  r9c7}\t\r  –\t\r  c1n1{r9\t\r  r1}\t\r  –\t\r  r3c7{n6\t\r  n9}\t\r  –\t\r  r1n9{c9\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  1\t\r  \n\n132 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[8]:\t\r  r8n1{c4\t\r  c7}\t\r  –\t\r  r5n1{c7\t\r  c8}\t\r  –\t\r  r5n7{c8\t\r  c6}\t\r  –\t\r  c6n5{r5\t\r  r4}\t\r  –\t\r  r4c5{n5\t\r  n3}\t\r  –\t\r  b8n3{r9c5\t\r  r8c6}\t\r  –\t\r  \nc9n3{r8\t\r  r5}\t\r  –\t\r  b6n5{r5c9\t\r  .}\t\r  ==>\t\r  r7c6\t\r  ≠\t\r  1\t\r  \nwhip[8]:\t\r  c1n1{r1\t\r  r9}\t\r  –\t\r  r7n1{c2\t\r  c8}\t\r  –\t\r  b9n9{r7c8\t\r  r7c9}\t\r  –\t\r  r1n9{c9\t\r  c8}\t\r  –\t\r  r3c7{n9\t\r  n6}\t\r  –\t\r  c1n6{r3\t\r  r2}\t\r  –\t\r  \nr1c3{n6\t\r  n8}\t\r  –\t\r  r1c9{n8\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  4\t\r  \nwhip[8]:\t\r  c1n1{r1\t\r  r9}\t\r  –\t\r  r7n1{c2\t\r  c8}\t\r  –\t\r  b9n9{r7c8\t\r  r7c9}\t\r  –\t\r  r1n9{c9\t\r  c8}\t\r  –\t\r  r3c7{n9\t\r  n6}\t\r  –\t\r  r2n6{c9\t\r  c4}\t\r  –\t\r  \nr9c4{n6\t\r  n4}\t\r  –\t\r  c8n4{r9\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  6\t\r  \nwhip[10]:\t\r   b6n6{r4c8\t\r   r4c9}\t\r   –\t\r   b6n5{r4c9\t\r   r5c9}\t\r   –\t\r   c9n3{r5\t\r   r8}\t\r   –\t\r   r8c7{n3\t\r   n1}\t\r   –\t\r   r9c7{n1\t\r   n8}\t\r   –\t\r  \nr5c7{n8\t\r  n3}\t\r  –\t\r  c3n3{r5\t\r  r7}\t\r  –\t\r  b7n6{r7c3\t\r  r8c3}\t\r  –\t\r  b8n6{r8c4\t\r  r7c5}\t\r  –\t\r  r1n6{c5\t\r  .}\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  6\t\r  \nbraid[10]:\t\r  r3c7{n6\t\r  n9}\t\r  –\t\r  r1n9{c8\t\r  c1}\t\r  –\t\r  c1n1{r1\t\r  r9}\t\r  –\t\r  r9c4{n1\t\r  n4}\t\r  –\t\r  r9c8{n4\t\r  n8}\t\r  –\t\r  r3n8{c8\t\r  c2}\t\r  –\t\r  \nc1n6{r9\t\r  r2}\t\r  –\t\r  r1c3{n8\t\r  n4}\t\r  –\t\r  c8n4{r9\t\r  r7}\t\r  –\t\r  b7n4{r9c2\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  6\t\r  \nwhip[4]:\t\r  c4n6{r9\t\r  r2}\t\r  –\t\r  c1n6{r2\t\r  r3}\t\r  –\t\r  r3c7{n6\t\r  n9}\t\r  –\t\r  b2n9{r3c4\t\r  .}\t\r  ==>\t\r  r9c5\t\r  ≠\t\r  6\t\r  \nwhip[10]:\t\r  b6n6{r4c8\t\r  r4c9}\t\r  –\t\r  b6n5{r4c9\t\r  r5c9}\t\r  –\t\r  c9n3{r5\t\r  r8}\t\r  –\t\r  r8c7{n3\t\r  n1}\t\r  –\t\r  b8n1{r8c6\t\r  r9c4}\t\r  –\t\r  \nr9n6{c4\t\r  c1}\t\r  –\t\r  r8n6{c3\t\r  c4}\t\r  –\t\r  r8n4{c4\t\r  c3}\t\r  –\t\r  c3n2{r8\t\r  r2}\t\r  –\t\r  r2n6{c3\t\r  .}\t\r  ==>\t\r  r7c8\t\r  ≠\t\r  6\t\r  \nwhip[11]:\t\r  r3c7{n6\t\r  n9}\t\r  –\t\r  r1n9{c8\t\r  c1}\t\r  –\t\r  c1n1{r1\t\r  r9}\t\r  –\t\r  c2n1{r9\t\r  r1}\t\r  –\t\r  r1n2{c2\t\r  c5}\t\r  –\t\r  r2c6{n2\t\r  n8}\t\r  –\t\r  \nr2c9{n8\t\r  n4}\t\r  –\t\r  r1n4{c8\t\r  c3}\t\r  –\t\r  r8n4{c3\t\r  c4}\t\r  –\t\r  b8n2{r8c4\t\r  r8c6}\t\r  –\t\r  b8n1{r8c6\t\r  .}\t\r  ==>\t\r  r1c8\t\r  ≠\t\r  6\t\r  \nwhip[5]:\t\r  c8n6{r4\t\r  r3}\t\r  –\t\r  r3c7{n6\t\r  n9}\t\r  –\t\r  r1n9{c8\t\r  c1}\t\r  –\t\r  c1n1{r1\t\r  r9}\t\r  –\t\r  r7n1{c2\t\r  .}\t\r  ==>\t\r  r4c8\t\r  ≠\t\r  1\t\r  \nwhip[1]:\t\r  r4n1{c4\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  1\t\r  \nwhip[5]:\t\r  r5n1{c7\t\r  c8}\t\r  –\t\r  r5n7{c8\t\r  c6}\t\r  –\t\r  r1c6{n7\t\r  n8}\t\r  –\t\r  c9n8{r1\t\r  r2}\t\r  –\t\r  c3n8{r2\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  r5n1{c7\t\r  c8}\t\r  –\t\r  b6n7{r5c8\t\r  r6c8}\t\r  –\t\r  b6n9{r6c8\t\r  r6c7}\t\r  –\t\r  c7n8{r6\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  1\t\r  \nwhip[5]:\t\r  r5c7{n1\t\r  n3}\t\r  –\t\r  b9n3{r9c7\t\r  r8c9}\t\r  –\t\r  c3n3{r8\t\r  r7}\t\r  –\t\r  c6n3{r7\t\r  r4}\t\r  –\t\r  c6n1{r4\t\r  .}\t\r  ==>\t\r  r8c7\t\r  ≠\t\r  1\t\r  \nsingles\t\r  ==>\t\r  r5c7\t\r  =\t\r  1,\t\r  r5c8\t\r  =\t\r  7\t\r  \nwhip[1]:\t\r  r8n1{c4\t\r  .}\t\r  ==>\t\r  r9c4\t\r  ≠\t\r  1\t\r  \t\r  \nbraid[7]:\t\r  r8c7{n6\t\r  n3}\t\r  –\t\r  c3n2{r8\t\r  r2}\t\r  –\t\r  r2c6{n2\t\r  n8}\t\r  –\t\r  r8c9{n6\t\r  n4}\t\r  –\t\r  r2c9{n8\t\r  n6}\t\r  –\t\r  b9n6{r8c9\t\r  r9c7}\t\r  –\t\r  \nc4n6{r9\t\r  .}\t\r  ==>\t\r  r8c3\t\r  ≠\t\r  6\t\r  \nwhip[5]:\t\r  b7n6{r7c3\t\r  r9c1}\t\r  –\t\r  r9c4{n6\t\r  n4}\t\r  –\t\r  r5n4{c4\t\r  c1}\t\r  –\t\r  c2n4{r6\t\r  r1}\t\r  –\t\r  c8n4{r1\t\r  .}\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  4\t\r  \nwhip[5]:\t\r  b9n9{r7c9\t\r  r7c8}\t\r  –\t\r  r7n1{c8\t\r  c2}\t\r  –\t\r  r7n4{c2\t\r  c5}\t\r  –\t\r  r9c4{n4\t\r  n6}\t\r  –\t\r  r8n6{c4\t\r  .}\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  r7n6{c3\t\r  c5}\t\r  –\t\r  c4n6{r9\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  6\t\r  \nbraid[6]:\t\r  b7n6{r9c1\t\r  r7c3}\t\r  –\t\r  r8c7{n6\t\r  n3}\t\r  –\t\r  c3n3{r8\t\r  r5}\t\r  –\t\r  r6n3{c7\t\r  c5}\t\r  –\t\r  r9c4{n6\t\r  n4}\t\r  –\t\r  c5n4{r9\t\r  .}\t\r  \n==>\t\r  r9c7\t\r  ≠\t\r  6\t\r  \nwhip[1]:\t\r  b9n6{r8c7\t\r  .}\t\r  ==>\t\r  r8c4\t\r  ≠\t\r  6\t\r  \t\r  \nwhip[8]:\t\r   b4n7{r6c2\t\r   r4c2}\t\r   –\t\r   b4n8{r4c2\t\r   r5c3}\t\r   –\t\r   r5n4{c3\t\r   c4}\t\r   –\t\r   r9c4{n4\t\r   n6}\t\r   –\t\r   r7n6{c5\t\r   c3}\t\r   –\t\r  \nr1c3{n6\t\r  n4}\t\r  –\t\r  r2n4{c3\t\r  c9}\t\r  –\t\r  r8n4{c9\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  4\t\r  \nbraid[6]:\t\r   b4n4{r5c1\t\r   r5c3}\t\r   –\t\r   b7n6{r9c1\t\r   r7c3}\t\r   –\t\r   c3n3{r7\t\r   r8}\t\r   –\t\r   b7n2{r8c3\t\r   r9c2}\t\r   –\t\r   r9c5{n4\t\r   n3}\t\r   –\t\r  \nb9n3{r9c7\t\r  .}\t\r  ==>\t\r  r9c1\t\r  ≠\t\r  4\t\r  \nwhip[8]:\t\r  r7c3{n3\t\r  n6}\t\r  –\t\r  r9c1{n6\t\r  n1}\t\r  –\t\r  b9n1{r9c8\t\r  r7c8}\t\r  –\t\r  c2n1{r7\t\r  r1}\t\r  –\t\r  c2n4{r1\t\r  r9}\t\r  –\t\r  c2n2{r9\t\r  r3}\t\r  –\t\r  \nb3n2{r3c8\t\r  r1c8}\t\r  –\t\r  c8n4{r1\t\r  .}\t\r  ==>\t\r  r7c2\t\r  ≠\t\r  3\t\r  \nwhip[3]:\t\r  r7c9{n4\t\r  n9}\t\r  –\t\r  r7c8{n9\t\r  n1}\t\r  –\t\r  r7c2{n1\t\r  .}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  4\t\r  \nwhip[6]:\t\r  r8c7{n3\t\r  n6}\t\r  –\t\r  r3c7{n6\t\r  n9}\t\r  –\t\r  r1n9{c8\t\r  c1}\t\r  –\t\r  c1n1{r1\t\r  r9}\t\r  –\t\r  b7n6{r9c1\t\r  r7c3}\t\r  –\t\r  r7n3{c3\t\r  .}\t\r  ==>\t\r  \nr8c6\t\r  ≠\t\r  3\t\r  \nwhip[7]:\t\r  r2c6{n8\t\r  n2}\t\r  –\t\r  c5n2{r3\t\r  r9}\t\r  –\t\r  c5n4{r9\t\r  r6}\t\r  –\t\r  b5n7{r6c5\t\r  r4c5}\t\r  –\t\r  r4c2{n7\t\r  n3}\t\r  –\t\r  r6c1{n3\t\r  n5}\t\r  –\t\r  \nr6c4{n5\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  8\t\r  \nwhip[6]:\t\r  b4n8{r6c2\t\r  r5c3}\t\r  –\t\r  c6n8{r5\t\r  r2}\t\r  –\t\r  r2n2{c6\t\r  c3}\t\r  –\t\r  r3c2{n2\t\r  n3}\t\r  –\t\r  r6c2{n3\t\r  n7}\t\r  –\t\r  r4c2{n7\t\r  .}\t\r  ==>\t\r  \nr1c2\t\r  ≠\t\r  8\t\r  \nwhip[7]:\t\r   b5n2{r5c4\t\r   r5c6}\t\r   –\t\r   r8c6{n2\t\r   n1}\t\r   –\t\r   b5n1{r4c6\t\r   r4c4}\t\r   –\t\r   b5n8{r4c4\t\r   r6c4}\t\r   –\t\r   r3c4{n8\t\r   n9}\t\r   –\t\r  \nc7n9{r3\t\r  r6}\t\r  –\t\r  r6c8{n9\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  5\t\r  \nwhip[8]:\t\r  c4n1{r4\t\r  r8}\t\r  –\t\r  r8c6{n1\t\r  n2}\t\r  –\t\r  r2c6{n2\t\r  n8}\t\r  –\t\r  r3c4{n8\t\r  n9}\t\r  –\t\r  c7n9{r3\t\r  r6}\t\r  –\t\r  r6c8{n9\t\r  n8}\t\r  –\t\r  \nb5n8{r6c4\t\r  r5c4}\t\r  –\t\r  b5n2{r5c4\t\r  .}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  5\t\r  \n\n5. Bivalue-chains, whips and braids      \n133 \nwhip[7]:\t\r   c4n6{r9\t\r   r2}\t\r   –\t\r   b2n9{r2c4\t\r   r3c4}\t\r   –\t\r   c4n5{r3\t\r   r6}\t\r   –\t\r   b4n5{r6c1\t\r   r5c1}\t\r   –\t\r   r5n4{c1\t\r   c3}\t\r   –\t\r  \nc1n4{r6\t\r  r2}\t\r  –\t\r  r2n9{c1\t\r  .}\t\r  ==>\t\r  r9c4\t\r  ≠\t\r  4\t\r  \nsingles\t\r  ==>\t\r  r9c4\t\r  =\t\r  6,\t\r  r2c4\t\r  =\t\r  9,\t\r  r7c3\t\r  =\t\r  6\t\r  \nwhip[1]:\t\r  r7n3{c6\t\r  .}\t\r  ==>\t\r  r9c5\t\r  ≠\t\r  3\t\r  \t\r  \nwhip[5]:\t\r  c3n3{r5\t\r  r8}\t\r  –\t\r  r8c7{n3\t\r  n6}\t\r  –\t\r  r8c9{n6\t\r  n4}\t\r  –\t\r  c8n4{r9\t\r  r1}\t\r  –\t\r  r1c3{n4\t\r  .}\t\r  ==>\t\r  r5c3\t\r  ≠\t\r  8\t\r  \nwhip[1]:\t\r  c3n8{r1\t\r  .}\t\r  ==>\t\r  r3c2\t\r  ≠\t\r  8\t\r  \t\r  \nwhip[2]:\t\r  b4n7{r4c2\t\r  r6c2}\t\r  –\t\r  c2n8{r6\t\r  .}\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  b4n7{r6c2\t\r  r4c2}\t\r  –\t\r  c2n8{r4\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  3\t\r  \nwhip[3]:\t\r  b3n2{r1c8\t\r  r3c8}\t\r  –\t\r  r3n8{c8\t\r  c4}\t\r  –\t\r  r2c6{n8\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  2\t\r  \nwhip[4]:\t\r  b8n4{r8c4\t\r  r9c5}\t\r  –\t\r  c8n4{r9\t\r  r1}\t\r  –\t\r  b3n2{r1c8\t\r  r3c8}\t\r  –\t\r  c5n2{r3\t\r  .}\t\r  ==>\t\r  r8c9\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  r8c7{n3\t\r  n6}\t\r  –\t\r  r8c9{n6\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  3\t\r  \nnaked-­‐single\t\r  ==>\t\r  r9c7\t\r  =\t\r  8\t\r  \nr9n3{c1\t\r  .}\t\r  ==>\t\r  r8c3\t\r  ≠\t\r  3\t\r  \t\r  \nhidden-­‐single-­‐in-­‐a-­‐column\t\r  ==>\t\r  r5c3\t\r  =\t\r  3\t\r  \nb4n4{r6c1\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  4\t\r  \t\r  \nnaked-­‐single\t\r  ==>\t\r  r2c1\t\r  =\t\r  6\t\r  \nwhip[4]:\t\r  c4n8{r6\t\r  r3}\t\r  –\t\r  c4n5{r3\t\r  r6}\t\r  –\t\r  r4n5{c5\t\r  c9}\t\r  –\t\r  r5c9{n5\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  8\t\r  \nwhip[1]:\t\r  c6n8{r1\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  8\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n5.10.3. An example of non-confluence for the W4 whip resolution theory \nAs mentioned in the proof of the confluence property for the Bn resolution \ntheories (section 5.5), there is one step in this proof (step b) that would not work for \nthe Wn theories. But this did not prove that the Wn theories do not have the \nconfluence property. The puzzle in Figure 5.4 (Sudogen0_1M #279845) provides \nthe missing proof, for the Sudoku CSP. n = 4 is the smallest n we could find with a \ncounter-example to confluence. \n \n \n9 8 1 7 \n  3 2 5 \n \n    9 8 1 7 6 3 2 5 4 \n7 5 2 \n  \n \n1 9 \n \n      7 5 2 4 8 1 9 3 6 \n3 6 4 \n \n9 \n \n  \n \n8     3 6 4 5 9 2 1 7 8 \n \n1 7 3 \n  \n   \n9 2     8 1 7 3 5 6 4 9 2 \n  \n4 3 \n \n \n9 \n \n6       2 4 3 8 1 9 7 6 5 \n \n9 \n \n  \n \n7   \n  \n \n    6 9 5 2 4 7 8 1 3 \n4 \n  \n  1 \n \n  \n \n2 9     4 7 8 1 3 5 6 2 9 \n  2 \n9 \n  \n \n8    \n      5 2 9 6 7 8 3 4 1 \n  \n \n \n9 \n  \n \n5   \n \n    1 3 6 9 2 4 5 8 7 \nFigure 5.4. An example of non confluence of W4: puzzle Sudogen0_1M #279845 \n*****\t\r  \t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  W\t\r  \t\r  *****\t\r  \n37\t\r  givens,\t\r  146\t\r  candidates,\t\r  792\t\r  csp-­‐links\t\r  and\t\r  792\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.97.\t\r  \nwhip[1]:\t\r  c7n6{r7\t\r  .}\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  6,\t\r  r8c9\t\r  ≠\t\r  6\t\r  \n\n134 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[2]:\t\r  c1n8{r6\t\r  r9}\t\r  –\t\r  c8n8{r9\t\r  .}\t\r  ==>\t\r  r6c3\t\r  ≠\t\r  8\t\r  \nwhip[1]:\t\r  c3n8{r9\t\r  .}\t\r  ==>\t\r  r9c1\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  c7n4{r6\t\r  r8}\t\r  –\t\r  c4n4{r8\t\r  r2}\t\r  –\t\r  b3n4{r2c9\t\r  .}\t\r  ==>\t\r  r6c9\t\r  ≠\t\r  4\t\r  \nwhip[3]:\t\r  b7n5{r8c1\t\r  r7c3}\t\r  –\t\r  r7n8{c3\t\r  c7}\t\r  –\t\r  b9n6{r7c7\t\r  .}\t\r  ==>\t\r  r8c1\t\r  ≠\t\r  6\t\r  \nwhip[3]:\t\r  b8n2{r9c5\t\r  r9c6}\t\r  –\t\r  r3c6{n2\t\r  n5}\t\r  –\t\r  r7c6{n5\t\r  .}\t\r  ==>\t\r  r9c5\t\r  ≠\t\r  6\t\r  \nwhip[3]:\t\r  c6n4{r9\t\r  r4}\t\r  –\t\r  r4c7{n4\t\r  n8}\t\r  –\t\r  b9n8{r7c7\t\r  .}\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  r1n4{c5\t\r  c9}\t\r  –\t\r  b9n4{r9c9\t\r  .}\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  4\t\r  \t\r  \nThe resolution state RS1 at this point is shown in Figure 5.5.  \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nr1 \n9 \n8 \n1 \n7 \n \nn4      n6 \n \n3 \n2 \n5 \n \nn4      n6 \n \nr1 \nr2 \n7 \n5 \n2 \n \nn4     n6 \nn8 \n \nn4     n6 \nn8 \n1 \n9 \n           n3 \n n4 \n \n          n3 \nn4      n6 \n \nr2 \nr3 \n3 \n6 \n4 \nn2 \nn5 \n \n9 \nn2 \nn5 \n \n n1 \n \n n7 \n n1 \n \n n7 \n8 \nr3 \nr4 \n \n     n5 n6 \nn8 \n1 \n7 \n3 \n \nn4 n5 n6 \nn8 \n \nn4 n5 n6 \n \n \nn4 \nn8 \n9 \n2 \nr4 \nr5 \nn2 \nn5 \nn8 \n4 \n3 \nn2 \nn5 \nn8 \nn1 n2 \nn5 \nn8 \n9 \n n1 \n \n n7 n8 \n6 \n n1 \nn5 \n n7 \nr5 \nr6 \nn2 \n     n5 n6 \nn8 \n9 \n \n     n5 n6 \n \nn2 \nn4 n5 n6 \nn8 \n n1 n2 \nn4 n5 n6 \nn8 \n7 \nn1     n3 \nn4 \nn8 \nn1     n3 \nn4 \nn8 \nn1      n3 \nn5 \n \nr6 \nr7 \n4 \nn3 \n \nn7 \n \n    n5 n6 \nn8 \n1 \n          n3 \n     n5 n6 \n n7 \n \n     n5 n6 \n \n         n3 \n         n6 \n n7 n8 \n2 \n9 \nr7 \nr8 \n n1 \nn5 \n \n2 \n9 \n \nn4 n5 n6 \n \n          n3 \n     n5 n6 \n n7 \n8 \nn1     n3 \nn4     n6 \n n7 \nn1      n3 \n n4 \n n7 \nn1     n3 \n n4 \n n7 \nr8 \nr9 \n n1 \nn6 \n \nn3 \n \nn7 \n \n         n6 \nn8 \n9 \n     n2 n3 \n n4 \n n7 \nn2 \nn4      n6 \n \n5 \nn1      n3 \n \n n7 n8 \nn1     n3 \n n4 \n n7 \nr9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 5.5. Resolution state RS1 of puzzle Sudogen0_1M #279845 \nAfter RS1 has been reached, there are (at least) the following two resolution \npaths. \n1) The first path starts with a general whip: \n \nwhip[4]:\t\r  c6n4{r4\t\r  r9}\t\r  –\t\r  c6n6{r9\t\r  r7}\t\r  –\t\r  r8c4{n6\t\r  n5}\t\r  –\t\r  c5n5{r8\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  5\t\r  \t\r  \nIt is worth analysing this whip by adding it a few details: \n \nwhip[4]:\t\r  c6n4{r4\t\r  r9(1)}\t\r  –\t\r  c6n6{r9\t\r  r7(2)\t\r  r4*}\t\r  –\t\r  r8c4{n6\t\r  n5(3)\t\r  n4#1}\t\r  –\t\r  c5n5{r8\t\r  .\t\r  r4*\t\r  r5*\t\r  r6*\t\r  r7#3}\t\r  ==>\t\r  \nr4c6≠5\t\r  \t\r  \n\n5. Bivalue-chains, whips and braids      \n135 \nThe * sign corresponds to z-candidates, the # sign corresponds to t-candidates \nand the number following this # sign is the number of the right-linking candidate \nlinked to this t-candidate (remember however that, by definition, these z- and t- \ncandidates do not belong to the whip; we display them here for the only sake of \nillustrating how a whip deals with these additional candidates).  \nNotice that there is an alternative whip, for the same target, with the same first \ntwo cells and the last cell replaced by the slightly simpler: r3n5{c4 . c6*}. Using it \ninstead would not change the sequel. \nThe end of this first resolution path has nothing noticeable: \n \nwhip[2]:\t\r  b7n5{r7c3\t\r  r8c1}\t\r  –\t\r  r4n5{c1\t\r  .}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  5\t\r  \nwhip[4]:\t\r  r7c6{n5\t\r  n6}\t\r  –\t\r  r4c6{n6\t\r  n4}\t\r  –\t\r  r4c7{n4\t\r  n8}\t\r  –\t\r  r7n8{c7\t\r  .}\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  5\t\r  \nsingles\t\r  ==>\t\r  r8c1\t\r  =\t\r  5,\t\r  r6c3\t\r  =\t\r  5,\t\r  r5c9\t\r  =\t\r  5,\t\r  r4c5\t\r  =\t\r  5,\t\r  r3c4\t\r  =\t\r  5,\t\r  r3c6\t\r  =\t\r  2,\t\r  r9c5\t\r  =\t\r  2,\t\r  r7c6\t\r  =\t\r  5,\t\r  r5c7\t\r  =\t\r  7,\t\r  \nr3c7\t\r  =\t\r  1,\t\r  r3c8\t\r  =\t\r  7,\t\r  r5c5\t\r  =\t\r  1,\t\r  r9c1\t\r  =\t\r  1\t\r  \nwhip[2]:\t\r  b8n3{r7c5\t\r  r8c5}\t\r  –\t\r  b8n7{r8c5\t\r  .}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  r7c2{n3\t\r  n7}\t\r  –\t\r  r7c5{n7\t\r  .}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  b8n3{r8c5\t\r  r7c5}\t\r  –\t\r  b8n7{r7c5\t\r  .}\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  r9n4{c9\t\r  c6}\t\r  –\t\r  r4n4{c6\t\r  .}\t\r  ==>\t\r  r8c7\t\r  ≠\t\r  4\t\r  \nwhip[1]:\t\r  c7n4{r4\t\r  .}\t\r  ==>\t\r  r6c8\t\r  ≠\t\r  4\t\r  \nwhip[3]:\t\r  r9n4{c9\t\r  c6}\t\r  –\t\r  b8n6{r9c6\t\r  r8c4}\t\r  –\t\r  r8c7{n6\t\r  .}\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  3\t\r  \nwhip[3]:\t\r  r8c7{n3\t\r  n6}\t\r  –\t\r  r7c7{n6\t\r  n8}\t\r  –\t\r  r9c8{n8\t\r  .}\t\r  ==>\t\r  r8c9\t\r  ≠\t\r  3,\t\r  r8c8\t\r  ≠\t\r  3\t\r  \nwhip[3]:\t\r  r6n2{c4\t\r  c1}\t\r  –\t\r  r6n6{c1\t\r  c5}\t\r  –\t\r  r4c6{n6\t\r  .}\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  c8n4{r2\t\r  r8}\t\r  –\t\r  c4n4{r8\t\r  .}\t\r  ==>\t\r  r2c9\t\r  ≠\t\r  4,\t\r  r2c5\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  r1n4{c9\t\r  c5}\t\r  –\t\r  c4n4{r2\t\r  .}\t\r  ==>\t\r  r8c9\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  b9n6{r7c7\t\r  r8c7}\t\r  –\t\r  r8c4{n6\t\r  n4}\t\r  –\t\r  c6n4{r9\t\r  r4}\t\r  –\t\r  r4c7{n4\t\r  .}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  8\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \nNow, if we activate braids and we re-start with our usual “simplest first” \nstrategy, we get exactly the same path (there appears no non-whip braid). Thanks to \nthe confluence property of B4, we do not have to consider any other resolution path \nto claim that the correct B rating is B = 4. As W(P) ≤ B(P) for any P and we have \nfound a resolution path for P with whips of lengths no more than 4, we can also \nclaim that W(P) = 4. \n2) Let us now consider what would have happened if we had followed an \nalternative resolution path. In state RS1, before using the first whip[4] above, we \ncould have chosen a whole sequence of simpler whips – “simpler” in the sense that \nthey are special subtypes of whips, not in the sense of being shorter (these subtypes \nwere introduced in HLS, but it is not necessary here to know their precise \ndefinitions, they are whips anyway, with the lengths indicated in square brackets): \n \n*****\t\r  \t\r  SudoRules\t\r  13.7wter2\t\r  \t\r  *****\t\r  \n;;; same path up to resolution stateRS1 \nxyzt-­‐chain[4]:\t\r  \t\r  r7c6{n6\t\r  n5}\t\r  –\t\r  r3c6{n5\t\r  n2}\t\r  –\t\r  r9c6{n2\t\r  n4}\t\r  –\t\r  r8c4{n4\t\r  n6}\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  6,\t\r  r7c5\t\r  ≠\t\r  6\t\r  \n\n136 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nnrc-­‐chain[4]:\t\r   \t\r   b6n7{r5c7\t\r   r5c9}\t\r   –\t\r   b6n5{r5c9\t\r   r6c9}\t\r   –\t\r   c3n5{r6\t\r   r7}\t\r   –\t\r   r7n8{c3\t\r   c7}\t\r   ==>\t\r   r7c7\t\r   ≠\t\r   7,\t\r  \nr5c7\t\r  ≠\t\r  8\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐column\t\r  c7{r3\t\r  r5}{n1\t\r  n7}\t\r  ==>\t\r  r8c7\t\r  ≠\t\r  7,\t\r  r8c7\t\r  ≠\t\r  1,\t\r  r6c7\t\r  ≠\t\r  1\t\r  \n;;; Resolution state RS2 \nnrc-­‐chain[4]:\t\r  \t\r  r9c3{n6\t\r  n8}\t\r  –\t\r  b9n8{r9c8\t\r  r7c7}\t\r  –\t\r  r4c7{n8\t\r  n4}\t\r  –\t\r  c6n4{r4\t\r  r9}\t\r  ==>\t\r  r9c6\t\r  ≠\t\r  6\t\r  \n;;; Resolution state RS3 \ninteraction\t\r  row\t\r  r9\t\r  with\t\r  block\t\r  b7\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  6\t\r  \nnrct-­‐chain[5]:\t\r   \t\r   c6n4{r4\t\r   r9}\t\r   –\t\r   c6n2{r9\t\r   r3}\t\r   –\t\r   r3n5{c6\t\r   c4}\t\r   –\t\r   r8c4{n5\t\r   n6}\t\r   –\t\r   r7c6{n6\t\r   n5}\t\r   ==>\t\r  \nr4c6≠5\t\r  \nnrc-­‐chain[2]:\t\r  \t\r  r4n5{c5\t\r  c1}\t\r  –\t\r  b7n5{r8c1\t\r  r7c3}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  5\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐row:\t\r  r7{c2\t\r  c5}{n3\t\r  n7}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  3\t\r  \nxy-­‐chain[3]:\t\r  \t\r  r7c7{n6\t\r  n8}\t\r  –\t\r  r4c7{n8\t\r  n4}\t\r  –\t\r  r4c6{n4\t\r  n6}\t\r  ==>\t\r  r7c6\t\r  ≠\t\r  6\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \nUntil we reach resolution state RS2, the whip[4] of the first path is still available; \nbut if we apply the nrc-chain[4] rule before this whip[4], it deletes the left-linking \ncandidate n6r9c6 for its second CSP variable. Then, in the resulting state RS3, there \nremains no whip[4]; the simplest whip available is a slightly longer nrct-chain[5]; it \nmakes the same r4c6 ≠ 5 elimination.  \nConclusion: if we considered only this second resolution path, we would find, \nerroneously, that the W rating of this puzzle is 5. This example is thus not only a \nclear case of non-confluence for whip theories, it is also a case in which this non-\nconfluence leads to a bad evaluation of the W rating if we do not try all the paths. \nThis is a very rare case. \nFinal remark: if we allow braids, even after the nrc-chain[4] is applied, there is a \nreplacement braid for the missing whip[4] (and it is as provided in section 5.5.1 by \nthe general proof of confluence for braid resolution theories):  \nbraid[4]:\t\r  \t\r  c6n4{r4\t\r  r9}\t\r  –\t\r  c6n6{r4\t\r  r7}\t\r  –\t\r  r8c4{n6\t\r  n5\t\r  n4#1}\t\r  –\t\r  c5n5{r8\t\r  .\t\r  r4*\t\r  r5*\t\r  r6*\t\r  r7#3}\t\r  ==>\t\r  \nr4c6\t\r  ≠\t\r  5\t\r  \n \nThe z-candidate n6r4c6 in cell 2 of the whip[4] is now used as a left-linking \ncandidate in the braid, in which it is linked to the target. \n5.10.4. A puzzle P with a whip of length 31 and B(P) = 19 [and gW(P) = 12] \nWhat is the largest whip one can find? This is a very difficult question. The \nlargest W rating we could obtain with random generators is 16 (and we could find \nonly one puzzle with W=16 in more than 10,000,000). In Figure 5.5 of CRT, we \ngave an example of a puzzle (of unknown origin) with a whip of length 24. Since \nthen, Mauricio, on the Player’s Forum, has found one (Figure 5.6 below) with length \n31. It does not prove that W(P) = 31, but after trying several resolution paths, we \nfound none without a whip of length 31. Most interestingly, the B rating is \nB(P) = 19 only, suggesting that, in extremely rare cases, the gap between the W and \n\n5. Bivalue-chains, whips and braids      \n137 \nB ratings, even when they are both finite, can be very large. Moreover, in chapter 7, \nit will be shown that the gW rating is only 12. \n \n \n \n  \n  \n \n  1 \n \n \n2     6 9 4 7 5 1 8 3 2 \n \n \n  \n \n3 \n \n  4       1 7 2 8 3 9 5 4 6 \n  \n  5 2   \n \n1 \n \n \n    8 3 5 2 6 4 1 7 9 \n \n \n3 6   \n   \n1       7 \n4 3 6 9 8 2 1 5 \n  2   \n \n7   \n \n  8     5 2 6 1 7 3 4 9 8 \n9   \n \n \n  5 7 \n \n \n    9 1 8 4 2 5 7 6 3 \n \n  9  \n \n7 \n \n  \n \n    4 5 9 3 8 7 6 2 1 \n  8   9 \n \n \n   \n4     2 8 7 9 1 6 3 5 4 \n3 \n \n \n  4 \n \n \n8 \n \n    3 6 1 4 4 2 9 8 7 \nFigure 5.6. A puzzle P with W(P) = 31 \nThe path with whips provides a whip of length 31.  \n \n*****\t\r  \t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  W\t\r  \t\r  *****\t\r  \n24\t\r  givens,\t\r  220\t\r  candidates,\t\r  1433\t\r  csp-­‐links\t\r  and\t\r  1433\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.49\t\r  \nwhip[11]:\t\r   c8n9{r1\t\r   r5}\t\r   –\t\r   r4c9{n9\t\r   n5}\t\r   –\t\r   r2n5{c9\t\r   c4}\t\r   –\t\r   b2n7{r2c4\t\r   r1c4}\t\r   –\t\r   b2n4{r1c4\t\r   r3c6}\t\r   –\t\r  \nc6n9{r3\t\r  r4}\t\r  –\t\r  r5c6{n9\t\r  n3}\t\r  –\t\r  c4n3{r5\t\r  r7}\t\r  –\t\r  b8n8{r7c4\t\r  r7c5}\t\r  –\t\r  r4n8{c5\t\r  c1}\t\r  –\t\r  r3n8{c1\t\r  .}\t\r  ==>\t\r  r2c7\t\r  ≠\t\r  9\t\r  \nwhip[11]:\t\r   r8n1{c1\t\r   c5}\t\r   –\t\r   r9c4{n1\t\r   n5}\t\r   –\t\r   c2n5{r9\t\r   r4}\t\r   –\t\r   b4n7{r4c2\t\r   r4c1}\t\r   –\t\r   b4n8{r4c1\t\r   r6c3}\t\r   –\t\r  \nr6n1{c3\t\r  c4}\t\r  –\t\r  r6c5{n1\t\r  n2}\t\r  –\t\r  r4n2{c6\t\r  c7}\t\r  –\t\r  b6n4{r4c7\t\r  r5c7}\t\r  –\t\r  c4n4{r5\t\r  r1}\t\r  –\t\r  c3n4{r1\t\r  .}\t\r  ==>\t\r  r7c2\t\r  ≠\t\r  1\t\r  \nwhip[12]:\t\r   b9n1{r7c9\t\r   r9c9}\t\r   –\t\r   r9c4{n1\t\r   n5}\t\r   –\t\r   c2n5{r9\t\r   r4}\t\r   –\t\r   r4c9{n5\t\r   n9}\t\r   –\t\r   b5n9{r4c6\t\r   r5c6}\t\r   –\t\r  \nr2n9{c6\t\r  c2}\t\r   –\t\r   c2n1{r2\t\r   r6}\t\r   –\t\r   b5n1{r6c5\t\r   r5c4}\t\r   –\t\r   b5n3{r5c4\t\r  r6c4}\t\r   –\t\r   r6n4{c4\t\r   c3}\t\r   –\t\r   r5c3{n4\t\r   n6}\t\r   –\t\r  \nr5c1{n6\t\r  .}\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  5\t\r  \nwhip[12]:\t\r  b9n9{r9c7\t\r  r9c9}\t\r  –\t\r  r4c9{n9\t\r  n5}\t\r  –\t\r  r2n5{c9\t\r  c4}\t\r  –\t\r  r9c4{n5\t\r  n1}\t\r  –\t\r  c5n1{r8\t\r  r6}\t\r  –\t\r  c2n1{r6\t\r  r2}\t\r  \n–\t\r  r2n9{c2\t\r  c6}\t\r  –\t\r  b5n9{r5c6\t\r  r4c5}\t\r  –\t\r  b5n2{r4c5\t\r  r4c6}\t\r  –\t\r  c6n8{r4\t\r  r3}\t\r  –\t\r  b2n4{r3c6\t\r  r1c4}\t\r  –\t\r  b2n7{r1c4\t\r  .}\t\r  \n==>\t\r  r9c7\t\r  ≠\t\r  5\t\r  \nwhip[14]:\t\r  b3n8{r1c7\t\r  r2c7}\t\r  –\t\r  r2n5{c7\t\r  c4}\t\r  –\t\r  b2n7{r2c4\t\r  r1c4}\t\r  –\t\r  b2n4{r1c4\t\r  r3c6}\t\r  –\t\r  c6n8{r3\t\r  r4}\t\r  –\t\r  \nc4n8{r6\t\r   r7}\t\r   –\t\r   b8n3{r7c4\t\r   r8c6}\t\r   –\t\r   r5c6{n3\t\r   n9}\t\r   –\t\r   r4c5{n9\t\r   n2}\t\r   –\t\r   r6c5{n2\t\r   n1}\t\r   –\t\r   c4n1{r6\t\r   r9}\t\r   –\t\r  \nc2n1{r9\t\r  r2}\t\r  –\t\r  r2n9{c2\t\r  c9}\t\r  –\t\r  c8n9{r3\t\r  .}\t\r  ==>\t\r  r1c7\t\r  ≠\t\r  5\t\r  \nwhip[14]:\t\r  b7n4{r7c1\t\r  r7c2}\t\r  –\t\r  c2n5{r7\t\r  r4}\t\r  –\t\r  b4n7{r4c2\t\r  r4c1}\t\r  –\t\r  b4n8{r4c1\t\r  r6c3}\t\r  –\t\r  r6n4{c3\t\r  c4}\t\r  –\t\r  \nr4n4{c6\t\r   c7}\t\r   –\t\r   b6n2{r4c7\t\r   r6c8}\t\r   –\t\r   r6c5{n2\t\r   n1}\t\r   –\t\r   r5c4{n1\t\r   n3}\t\r   –\t\r   r5c6{n3\t\r   n9}\t\r   –\t\r   r4n9{c6\t\r   c9}\t\r   –\t\r  \nr2n9{c9\t\r  c2}\t\r  –\t\r  c2n1{r2\t\r  r9}\t\r  –\t\r  r8n1{c1\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  5\t\r  \nwhip[17]:\t\r  b2n4{r3c6\t\r  r1c4}\t\r  –\t\r  b2n7{r1c4\t\r  r2c4}\t\r  –\t\r  b2n5{r2c4\t\r  r1c5}\t\r  –\t\r  c5n9{r1\t\r  r4}\t\r  –\t\r  r4c9{n9\t\r  n5}\t\r  –\t\r  \nb3n5{r2c9\t\r  r2c7}\t\r  –\t\r  r5n5{c7\t\r  c1}\t\r  –\t\r  r8n5{c1\t\r  c8}\t\r  –\t\r  b9n7{r8c8\t\r  r9c9}\t\r  –\t\r  c9n9{r9\t\r  r2}\t\r  –\t\r  b1n9{r2c2\t\r  r1c2}\t\r  –\t\r  \nb1n3{r1c2\t\r  r3c2}\t\r  –\t\r  b1n4{r3c2\t\r  r3c1}\t\r  –\t\r  r3n8{c1\t\r  c5}\t\r  –\t\r  c6n8{r2\t\r  r4}\t\r  –\t\r  r4c1{n8\t\r  n7}\t\r  –\t\r  c2n7{r4\t\r  .}\t\r  ==>\t\r  \nr3c6\t\r  ≠\t\r  9\t\r  \nwhip[17]:\t\r  b4n8{r6c3\t\r  r4c1}\t\r  –\t\r  b4n7{r4c1\t\r  r4c2}\t\r  –\t\r  b4n5{r4c2\t\r  r5c1}\t\r  –\t\r  r5n1{c1\t\r  c4}\t\r  –\t\r  r9c4{n1\t\r  n5}\t\r  –\t\r  \nb7n5{r9c2\t\r   r7c2}\t\r   –\t\r   c5n5{r7\t\r   r1}\t\r   –\t\r   c8n5{r1\t\r   r8}\t\r   –\t\r   b9n7{r8c8\t\r   r9c9}\t\r   –\t\r   r9n1{c9\t\r   c2}\t\r   –\t\r   c1n1{r8\t\r   r2}\t\r   –\t\r  \nb1n2{r2c1\t\r  r2c3}\t\r  –\t\r  b1n8{r2c3\t\r  r1c3}\t\r  –\t\r  c3n4{r1\t\r  r5}\t\r  –\t\r  b6n4{r5c7\t\r  r4c7}\t\r  –\t\r  c7n5{r4\t\r  r2}\t\r  –\t\r  b3n8{r2c7\t\r  .}\t\r  \n==>\t\r  r6c3\t\r  ≠\t\r  1\t\r  \nwhip[31]:\t\r  b3n8{r1c7\t\r  r2c7}\t\r  –\t\r  c1n8{r2\t\r  r4}\t\r  –\t\r  c6n8{r4\t\r  r3}\t\r  –\t\r  b2n4{r3c6\t\r  r1c4}\t\r  –\t\r  b2n7{r1c4\t\r  r2c4}\t\r  \n–\t\r   b2n5{r2c4\t\r   r1c5}\t\r   –\t\r   b3n5{r1c8\t\r   r2c9}\t\r   –\t\r   r4c9{n5\t\r   n9}\t\r   –\t\r   r4c5{n9\t\r  n2}\t\r   –\t\r   r4c6{n2\t\r   n4}\t\r   –\t\r  \n\n138 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nb5n9{r4c6\t\r  r5c6}\t\r   –\t\r   c6n3{r5\t\r   r8}\t\r   –\t\r   b8n2{r8c6\t\r   r9c6}\t\r   –\t\r   c6n6{r9\t\r   r2}\t\r   –\t\r   b2n9{r2c6\t\r   r3c5}\t\r   –\t\r  \nc8n9{r3\t\r  r1}\t\r   –\t\r   c7n9{r1\t\r   r9}\t\r   –\t\r   r4c7{n9\t\r   n5}\t\r   –\t\r   b4n5{r4c2\t\r   r5c1}\t\r   –\t\r   r8n5{c1\t\r   c8}\t\r   –\t\r   c8n7{r8\t\r   r3}\t\r   –\t\r  \nc9n7{r2\t\r  r9}\t\r  –\t\r  c3n7{r9\t\r  r8}\t\r  –\t\r  c3n2{r8\t\r  r2}\t\r  –\t\r  r2c1{n2\t\r  n1}\t\r  –\t\r  r8n1{c1\t\r  c5}\t\r  –\t\r  b8n6{r8c5\t\r  r7c5}\t\r  –\t\r  \nb9n6{r7c7\t\r  r8c7}\t\r  –\t\r  b3n6{r2c7\t\r  r3c9}\t\r  –\t\r  c1n6{r3\t\r  r1}\t\r  –\t\r  c1n7{r1\t\r  .}\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  8\t\r  \nwhip[6]:\t\r   b4n8{r6c3\t\r   r4c1}\t\r   –\t\r   b1n8{r3c1\t\r   r2c3}\t\r   –\t\r   c6n8{r2\t\r   r3}\t\r   –\t\r   b2n4{r3c6\t\r   r1c4}\t\r   –\t\r   r6n4{c4\t\r   c2}\t\r   –\t\r  \nc3n4{r6\t\r  .}\t\r  ==>\t\r  r6c3\t\r  ≠\t\r  6\t\r  \nwhip[7]:\t\r   r1n4{c3\t\r   c4}\t\r   –\t\r   r6n4{c4\t\r   c3}\t\r   –\t\r   c3n8{r6\t\r   r2}\t\r   –\t\r   b1n2{r2c3\t\r   r2c1}\t\r   –\t\r   b1n1{r2c1\t\r  r2c2}\t\r   –\t\r  \nb1n9{r2c2\t\r  r1c2}\t\r  –\t\r  b1n3{r1c2\t\r  .}\t\r  ==>\t\r  r3c2\t\r  ≠\t\r  4\t\r  \nwhip[6]:\t\r  r3n4{c6\t\r  c1}\t\r  –\t\r  r3n8{c1\t\r  c5}\t\r  –\t\r  c6n8{r3\t\r  r4}\t\r  –\t\r  c6n4{r4\t\r  r5}\t\r  –\t\r  c3n4{r5\t\r  r6}\t\r  –\t\r  b4n8{r6c3\t\r  .}\t\r  ==>\t\r  \nr3c6\t\r  ≠\t\r  6\t\r  \nwhip[10]:\t\r   b4n8{r6c3\t\r   r4c1}\t\r   –\t\r   r3n8{c1\t\r   c6}\t\r   –\t\r   r3n4{c6\t\r   c1}\t\r   –\t\r   b7n4{r7c1\t\r   r7c2}\t\r   –\t\r   r1n4{c2\t\r   c4}\t\r   –\t\r  \nb2n7{r1c4\t\r  r2c4}\t\r  –\t\r  c4n8{r2\t\r  r7}\t\r  –\t\r  c4n5{r7\t\r  r9}\t\r  –\t\r  c2n5{r9\t\r  r4}\t\r  –\t\r  b4n7{r4c2\t\r  .}\t\r  ==>\t\r  r6c5\t\r  ≠\t\r  8\t\r  \nwhip[6]:\t\r  r6c5{n1\t\r  n2}\t\r  –\t\r  b6n2{r6c8\t\r  r4c7}\t\r  –\t\r  b6n4{r4c7\t\r  r5c7}\t\r  –\t\r  c4n4{r5\t\r  r1}\t\r  –\t\r  c3n4{r1\t\r  r6}\t\r  –\t\r  r6n8{c3\t\r  .}\t\r  \n==>\t\r  r6c4\t\r  ≠\t\r  1\t\r  \nwhip[2]:\t\r  r8n1{c3\t\r  c5}\t\r  –\t\r  r6n1{c5\t\r  .}\t\r  ==>\t\r  r9c2\t\r  ≠\t\r  1\t\r  \nwhip[6]:\t\r  r4c9{n5\t\r  n9}\t\r  –\t\r  b5n9{r4c6\t\r  r5c6}\t\r  –\t\r  r2n9{c6\t\r  c2}\t\r  –\t\r  c2n1{r2\t\r  r6}\t\r  –\t\r  b5n1{r6c5\t\r  r5c4}\t\r  –\t\r  r9c4{n1\t\r  .}\t\r  \n==>\t\r  r9c9\t\r  ≠\t\r  5\t\r  \nwhip[6]:\t\r  r4c9{n5\t\r  n9}\t\r  –\t\r  b5n9{r4c6\t\r  r5c6}\t\r  –\t\r  r2n9{c6\t\r  c2}\t\r  –\t\r  c2n1{r2\t\r  r6}\t\r  –\t\r  r6c5{n1\t\r  n2}\t\r  –\t\r  b6n2{r6c8\t\r  .}\t\r  \n==>\t\r  r4c7\t\r  ≠\t\r  5\t\r  \nwhip[6]:\t\r  b8n8{r7c5\t\r  r7c4}\t\r  –\t\r  c4n1{r7\t\r  r5}\t\r  –\t\r  c4n3{r5\t\r  r6}\t\r  –\t\r  r6n8{c4\t\r  c3}\t\r  –\t\r  r6n4{c3\t\r  c2}\t\r  –\t\r  b4n1{r6c2\t\r  .}\t\r  \n==>\t\r  r7c5\t\r  ≠\t\r  1\t\r  \nwhip[7]:\t\r   b5n9{r4c6\t\r   r5c6}\t\r   –\t\r   r2n9{c6\t\r   c2}\t\r   –\t\r   c2n1{r2\t\r   r6}\t\r   –\t\r   b5n1{r6c5\t\r   r5c4}\t\r   –\t\r   b5n3{r5c4\t\r   r6c4}\t\r   –\t\r  \nr6n8{c4\t\r  c3}\t\r  –\t\r  r6n4{c3\t\r  .}\t\r  ==>\t\r  r4c9\t\r  ≠\t\r  9\t\r  \nsingles\t\r  ==>\t\r  r4c9\t\r  =\t\r  5,\t\r  r5c1\t\r  =\t\r  5\t\r  \nbiv-­‐chain[2]:\t\r  b4n1{r5c3\t\r  r6c2}\t\r  –\t\r  b4n6{r6c2\t\r  r5c3}\t\r  ==>\t\r  r5c3\t\r  ≠\t\r  4\t\r  \nbiv-­‐chain[2]:\t\r  r5n1{c3\t\r  c4}\t\r  –\t\r  c5n1{r6\t\r  r8}\t\r  ==>\t\r  r8c3\t\r  ≠\t\r  1\t\r  \nwhip[2]:\t\r  b4n1{r6c2\t\r  r5c3}\t\r  –\t\r  b4n6{r5c3\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  r6n8{c4\t\r  c3}\t\r  –\t\r  r6n4{c3\t\r  .}\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  3\t\r  \nwhip[1]:\t\r  r6n3{c9\t\r  .}\t\r  ==>\t\r  r5c8\t\r  ≠\t\r  3,\t\r  r5c7\t\r  ≠\t\r  3\t\r  \nbiv-­‐chain[3]:\t\r  b2n7{r1c4\t\r  r2c4}\t\r  –\t\r  r2n5{c4\t\r  c7}\t\r  –\t\r  c7n8{r2\t\r  r1}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  r9n5{c2\t\r  c4}\t\r  –\t\r  r2n5{c4\t\r  c7}\t\r  –\t\r  r8n5{c7\t\r  c8}\t\r  –\t\r  b9n7{r8c8\t\r  .}\t\r  ==>\t\r  r9c2\t\r  ≠\t\r  7\t\r  \nbiv-­‐chain[3]:\t\r  r8n1{c1\t\r  c5}\t\r  –\t\r  r9c4{n1\t\r  n5}\t\r  –\t\r  r9c2{n5\t\r  n6}\t\r  ==>\t\r  r8c1\t\r  ≠\t\r  6\t\r  \nwhip[4]:\t\r  c2n1{r2\t\r  r6}\t\r  –\t\r  b5n1{r6c5\t\r  r5c4}\t\r  –\t\r  r9c4{n1\t\r  n5}\t\r  –\t\r  r9c2{n5\t\r  .}\t\r  ==>\t\r  r2c2\t\r  ≠\t\r  6\t\r  \nwhip[4]:\t\r  r9c4{n1\t\r  n5}\t\r  –\t\r  r9c2{n5\t\r  n6}\t\r  –\t\r  b4n6{r6c2\t\r  r5c3}\t\r  –\t\r  r5n1{c3\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  1\t\r  \nbiv-­‐chain[3]:\t\r  b9n1{r7c9\t\r  r9c9}\t\r  –\t\r  c4n1{r9\t\r  r5}\t\r  –\t\r  c4n3{r5\t\r  r7}\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  3\t\r  \nwhip[4]:\t\r  r7n1{c9\t\r  c1}\t\r  –\t\r  b7n4{r7c1\t\r  r7c2}\t\r  –\t\r  b7n5{r7c2\t\r  r9c2}\t\r  –\t\r  r9c4{n5\t\r  .}\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  1\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r7c9\t\r  =\t\r  1\t\r  \nbiv-­‐chain[2]:\t\r  r5n1{c3\t\r  c4}\t\r  –\t\r  r9n1{c4\t\r  c3}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  1\t\r  \nwhip[3]:\t\r  b7n7{r9c3\t\r  r8c1}\t\r  –\t\r  c1n1{r8\t\r  r2}\t\r  –\t\r  b1n2{r2c1\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  b4n6{r6c2\t\r  r5c3}\t\r  –\t\r  c3n1{r5\t\r  r9}\t\r  –\t\r  r9c4{n1\t\r  n5}\t\r  –\t\r  r9c2{n5\t\r  .}\t\r  ==>\t\r  r3c2\t\r  ≠\t\r  6,\t\r  r1c2\t\r  ≠\t\r  6\t\r  \nwhip[4]:\t\r  b4n6{r6c2\t\r  r5c3}\t\r  –\t\r  c3n1{r5\t\r  r9}\t\r  –\t\r  r9c4{n1\t\r  n5}\t\r  –\t\r  b7n5{r9c2\t\r  .}\t\r  ==>\t\r  r7c2\t\r  ≠\t\r  6\t\r  \nwhip[4]:\t\r  r6c4{n4\t\r  n8}\t\r  –\t\r  c3n8{r6\t\r  r2}\t\r  –\t\r  c6n8{r2\t\r  r3}\t\r  –\t\r  b2n4{r3c6\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  4\t\r  \nbiv-­‐chain[2]:\t\r  c3n4{r1\t\r  r6}\t\r  –\t\r  c4n4{r6\t\r  r1}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  4,\t\r  r1c1\t\r  ≠\t\r  4\t\r  \nbiv-­‐chain[5]:\t\r   r9c6{n2\t\r   n6}\t\r   –\t\r   c2n6{r9\t\r   r6}\t\r   –\t\r   r6n1{c2\t\r   c5}\t\r   –\t\r   r5c4{n1\t\r   n3}\t\r   –\t\r   b8n3{r7c4\t\r  r8c6}\t\r   ==>\t\r  \nr8c6\t\r  ≠\t\r  2\t\r  \nbiv-­‐chain[5]:\t\r  b7n1{r8c1\t\r  r9c3}\t\r  –\t\r  r9c4{n1\t\r  n5}\t\r  –\t\r  b7n5{r9c2\t\r  r7c2}\t\r  –\t\r  c2n4{r7\t\r  r4}\t\r  –\t\r  r4n7{c2\t\r  c1}\t\r  ==>\t\r  \nr8c1\t\r  ≠\t\r  7\t\r  \n\n5. Bivalue-chains, whips and braids      \n139 \nwhip[1]:\t\r  b7n7{r9c3\t\r  .}\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  r6n2{c8\t\r  c5}\t\r  –\t\r  c5n1{r6\t\r  r8}\t\r  –\t\r  r8c1{n1\t\r  .}\t\r  ==>\t\r  r8c8\t\r  ≠\t\r  2\t\r  \nwhip[5]:\t\r  r4c2{n7\t\r  n4}\t\r  –\t\r  r6n4{c3\t\r  c4}\t\r  –\t\r  r1c4{n4\t\r  n5}\t\r  –\t\r  r9n5{c4\t\r  c2}\t\r  –\t\r  r7c2{n5\t\r  .}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  7\t\r  \nwhip[5]:\t\r  b8n3{r8c6\t\r  r7c4}\t\r  –\t\r  r5c4{n3\t\r  n1}\t\r  –\t\r  r9c4{n1\t\r  n5}\t\r  –\t\r  r2n5{c4\t\r  c7}\t\r  –\t\r  r8n5{c7\t\r  .}\t\r  ==>\t\r  r8c8\t\r  ≠\t\r  3\t\r  \nwhip[5]:\t\r  r5c8{n9\t\r  n6}\t\r  –\t\r  r6n6{c9\t\r  c2}\t\r  –\t\r  c2n1{r6\t\r  r2}\t\r  –\t\r  r2n9{c2\t\r  c9}\t\r  –\t\r  c8n9{r3\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  9\t\r  \nwhip[1]:\t\r  r5n9{c8\t\r  .}\t\r  ==>\t\r  r4c7\t\r  ≠\t\r  9\t\r  \nbiv-­‐chain[3]:\t\r  b8n3{r7c4\t\r  r8c6}\t\r  –\t\r  r5c6{n3\t\r  n4}\t\r  –\t\r  r6c4{n4\t\r  n8}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  8\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r7c5\t\r  =\t\r  8\t\r  \nbiv-­‐chain[2]:\t\r  b4n8{r4c1\t\r  r6c3}\t\r  –\t\r  c4n8{r6\t\r  r2}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  8\t\r  \nbiv-­‐chain[2]:\t\r  c3n8{r2\t\r  r6}\t\r  –\t\r  c4n8{r6\t\r  r2}\t\r  ==>\t\r  r2c7\t\r  ≠\t\r  8\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r1c7\t\r  =\t\r  8\t\r  \nwhip[1]:\t\r  c7n3{r8\t\r  .}\t\r  ==>\t\r  r7c8\t\r  ≠\t\r  3\t\r  \nbiv-­‐chain[2]:\t\r  c3n8{r2\t\r  r6}\t\r  –\t\r  c4n8{r6\t\r  r2}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  8\t\r  \nbiv-­‐chain[2]:\t\r  r3c5{n6\t\r  n9}\t\r  –\t\r  r2c6{n9\t\r  n6}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  6\t\r  \nbiv-­‐chain[2]:\t\r  r3n4{c1\t\r  c6}\t\r  –\t\r  r3n8{c6\t\r  c1}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  7,\t\r  r3c1\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  r2n5{c7\t\r  c4}\t\r  –\t\r  b8n5{r9c4\t\r  .}\t\r  ==>\t\r  r8c7\t\r  ≠\t\r  5\t\r  \nwhip[2]:\t\r  r2c6{n9\t\r  n6}\t\r  –\t\r  r3c5{n6\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  9\t\r  \nsingles\t\r  ==>\t\r  r1c5\t\r  =\t\r  5,\t\r  r2c7\t\r  =\t\r  5,\t\r  r8c8\t\r  =\t\r  5,\t\r  r9c9\t\r  =\t\r  7,\t\r  r8c3\t\r  =\t\r  7,\t\r  r9c7\t\r  =\t\r  9,\t\r  r5c8\t\r  =\t\r  9,\t\r  r1c2\t\r  =\t\r  9,\t\r  r3c2\t\r  =\t\r  3,\t\r  \nr1c8\t\r  =\t\r  3,\t\r  r6c9\t\r  =\t\r  3,\t\r  r3c8\t\r  =\t\r  7\t\r  \nwhip[1]:\t\r  r1n6{c1\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  6,\t\r  r2c1\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  c2n6{r9\t\r  r6}\t\r  –\t\r  c8n6{r6\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  6\t\r  ;\t\r  singles\t\r  to\t\r  the\t\r  end\t\r  \nRadically different from the start, the path with braids shows that B(P) = 19. \n \n*****\t\r  \t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  B\t\r  \t\r  *****\t\r  \n24\t\r  givens,\t\r  220\t\r  candidates,\t\r  1433\t\r  csp-­‐links\t\r  and\t\r  1433\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.49\t\r  \nbraid[8]:\t\r   r9c4{n5\t\r   n1}\t\r   –\t\r   b9n1{r9c9\t\r   r7c9}\t\r   –\t\r   c5n1{r7\t\r   r6}\t\r   –\t\r   c2n1{r6\t\r   r2}\t\r   –\t\r   r4c9{n5\t\r   n9}\t\r   –\t\r  \nb5n9{r4c5\t\r  r5c6}\t\r  –\t\r  r2n9{c2\t\r  c7}\t\r  –\t\r  b9n9{r9c9\t\r  .}\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  5\t\r  \nbraid[10]:\t\r   c8n9{r1\t\r   r5}\t\r   –\t\r   r4c9{n9\t\r   n5}\t\r   –\t\r   b3n8{r1c7\t\r   r2c7}\t\r   –\t\r   r2n5{c7\t\r   c4}\t\r   –\t\r   b2n7{r2c4\t\r   r1c4}\t\r   –\t\r  \nb2n4{r1c4\t\r  r3c6}\t\r  –\t\r  c6n8{r2\t\r  r4}\t\r  –\t\r  c4n8{r1\t\r  r7}\t\r  –\t\r  r5c6{n4\t\r  n3}\t\r  –\t\r  b8n3{r8c6\t\r  .}\t\r  ==>\t\r  r1c7\t\r  ≠\t\r  9\t\r  \nbraid[10]:\t\r   r8n1{c1\t\r   c5}\t\r   –\t\r   r9c4{n1\t\r   n5}\t\r   –\t\r   b7n4{r7c1\t\r   r7c2}\t\r   –\t\r   c2n5{r7\t\r   r4}\t\r   –\t\r   b4n7{r4c2\t\r   r4c1}\t\r   –\t\r  \nb4n8{r4c1\t\r  r6c3}\t\r  –\t\r  r6n4{c2\t\r  c4}\t\r  –\t\r  r4n4{c1\t\r  c7}\t\r  –\t\r  b6n2{r4c7\t\r  r6c8}\t\r  –\t\r  r6c5{n8\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  1\t\r  \nwhip[11]:\t\r   c8n9{r1\t\r   r5}\t\r   –\t\r   r4c9{n9\t\r   n5}\t\r   –\t\r   r2n5{c9\t\r   c4}\t\r   –\t\r   b2n7{r2c4\t\r   r1c4}\t\r   –\t\r   b2n4{r1c4\t\r   r3c6}\t\r   –\t\r  \nc6n9{r3\t\r  r4}\t\r  –\t\r  r5c6{n9\t\r  n3}\t\r  –\t\r  c4n3{r5\t\r  r7}\t\r  –\t\r  b8n8{r7c4\t\r  r7c5}\t\r  –\t\r  r4n8{c5\t\r  c1}\t\r  –\t\r  r3n8{c1\t\r  .}\t\r  ==>\t\r  r2c7\t\r  ≠\t\r  9\t\r  \nwhip[11]:\t\r   r8n1{c1\t\r   c5}\t\r   –\t\r   r9c4{n1\t\r   n5}\t\r   –\t\r   c2n5{r9\t\r   r4}\t\r   –\t\r   b4n7{r4c2\t\r   r4c1}\t\r   –\t\r   b4n8{r4c1\t\r   r6c3}\t\r   –\t\r  \nr6n1{c3\t\r  c4}\t\r  –\t\r  r6c5{n1\t\r  n2}\t\r  –\t\r  r4n2{c6\t\r  c7}\t\r  –\t\r  b6n4{r4c7\t\r  r5c7}\t\r  –\t\r  c4n4{r5\t\r  r1}\t\r  –\t\r  c3n4{r1\t\r  .}\t\r  ==>\t\r  r7c2\t\r  ≠\t\r  1\t\r  \nbraid[11]:\t\r   b3n8{r1c7\t\r   r2c7}\t\r   –\t\r   c6n8{r2\t\r   r4}\t\r   –\t\r   b2n7{r1c4\t\r   r2c4}\t\r   –\t\r   r2n5{c4\t\r   c9}\t\r   –\t\r   r4c9{n5\t\r   n9}\t\r   –\t\r  \nr4c5{n8\t\r  n2}\t\r  –\t\r  b5n9{r4c5\t\r  r5c6}\t\r  –\t\r  r2n9{c6\t\r  c2}\t\r  –\t\r  r6c5{n2\t\r  n1}\t\r  –\t\r  c2n1{r2\t\r  r9}\t\r  –\t\r  r8n1{c5\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  8\t\r  \nwhip[11]:\t\r  c6n3{r8\t\r  r5}\t\r  –\t\r  c4n3{r5\t\r  r7}\t\r  –\t\r  c7n3{r7\t\r  r1}\t\r  –\t\r  b3n8{r1c7\t\r  r2c7}\t\r  –\t\r  c4n8{r2\t\r  r6}\t\r  –\t\r  c6n8{r4\t\r  r3}\t\r  –\t\r  \nb2n4{r3c6\t\r  r1c4}\t\r  –\t\r  b2n7{r1c4\t\r  r2c4}\t\r  –\t\r  r2n5{c4\t\r  c9}\t\r  –\t\r  r4c9{n5\t\r  n9}\t\r  –\t\r  r5n9{c8\t\r  .}\t\r  ==>\t\r  r8c8\t\r  ≠\t\r  3\t\r  \nbraid[11]:\t\r   b7n4{r7c1\t\r   r7c2}\t\r   –\t\r   r6n4{c2\t\r   c4}\t\r   –\t\r   b4n7{r4c1\t\r   r4c2}\t\r   –\t\r   c2n5{r4\t\r   r9}\t\r   –\t\r   r9c4{n5\t\r   n1}\t\r   –\t\r  \nb5n1{r5c4\t\r  r6c5}\t\r  –\t\r  r5c4{n1\t\r  n3}\t\r  –\t\r  r5c6{n3\t\r  n9}\t\r  –\t\r  c2n1{r6\t\r  r2}\t\r  –\t\r  r2n9{c2\t\r  c9}\t\r  –\t\r  c8n9{r5\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  4\t\r  \nwhip[11]:\t\r   c7n2{r8\t\r   r4}\t\r   –\t\r   b5n2{r4c6\t\r   r6c5}\t\r   –\t\r   r7n2{c5\t\r   c1}\t\r   –\t\r   b7n4{r7c1\t\r   r7c2}\t\r   –\t\r   r4n4{c2\t\r   c6}\t\r   –\t\r  \nr6n4{c4\t\r  c3}\t\r  –\t\r  b4n8{r6c3\t\r  r4c1}\t\r  –\t\r  b4n7{r4c1\t\r  r4c2}\t\r  –\t\r  c2n5{r4\t\r  r9}\t\r  –\t\r  r9c4{n5\t\r  n1}\t\r  –\t\r  b5n1{r5c4\t\r  .}\t\r  ==>\t\r  \nr8c8\t\r  ≠\t\r  2\t\r  \n\n140 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nbraid[11]:\t\r   r9c4{n5\t\r   n1}\t\r   –\t\r   c5n1{r8\t\r   r6}\t\r   –\t\r   c2n1{r6\t\r   r2}\t\r   –\t\r   b9n9{r9c7\t\r   r9c9}\t\r   –\t\r   r2n9{c9\t\r   c6}\t\r   –\t\r  \nb5n9{r5c6\t\r  r4c5}\t\r  –\t\r  b5n2{r6c5\t\r  r4c6}\t\r  –\t\r  r4n8{c6\t\r  c1}\t\r  –\t\r  r9n2{c7\t\r  c3}\t\r  –\t\r  b4n7{r4c1\t\r  r4c2}\t\r  –\t\r  r9n7{c9\t\r  .}\t\r  ==>\t\r  \nr9c7\t\r  ≠\t\r  5\t\r  \nbraid[11]:\t\r   r4c9{n5\t\r   n9}\t\r   –\t\r   b5n9{r4c6\t\r   r5c6}\t\r   –\t\r   r2n9{c6\t\r   c2}\t\r   –\t\r   b9n1{r7c9\t\r   r9c9}\t\r   –\t\r   c2n1{r9\t\r   r6}\t\r   –\t\r  \nb5n1{r6c5\t\r  r5c4}\t\r  –\t\r  b5n3{r5c6\t\r  r6c4}\t\r  –\t\r  c4n4{r6\t\r  r1}\t\r  –\t\r  c9n3{r7\t\r  r3}\t\r  –\t\r  b2n7{r1c4\t\r  r2c4}\t\r  –\t\r  c9n7{r9\t\r  .}\t\r  ==>\t\r  \nr7c9\t\r  ≠\t\r  5\t\r  \nbraid[12]:\t\r  b3n8{r1c7\t\r  r2c7}\t\r  –\t\r  r2n5{c7\t\r  c4}\t\r  –\t\r  b2n7{r2c4\t\r  r1c4}\t\r  –\t\r  b2n4{r1c4\t\r  r3c6}\t\r  –\t\r  c6n8{r3\t\r  r4}\t\r  –\t\r  \nr9c4{n5\t\r  n1}\t\r  –\t\r  b5n1{r5c4\t\r  r6c5}\t\r  –\t\r  b5n2{r4c6\t\r  r4c5}\t\r  –\t\r  b5n9{r4c5\t\r  r5c6}\t\r  –\t\r  c2n1{r6\t\r  r2}\t\r  –\t\r  r2n9{c2\t\r  c9}\t\r  –\t\r  \nc8n9{r5\t\r  .}\t\r  ==>\t\r  r1c7\t\r  ≠\t\r  5\t\r  \nbraid[12]:\t\r  b7n4{r7c1\t\r  r7c2}\t\r  –\t\r  c2n5{r7\t\r  r4}\t\r  –\t\r  b4n7{r4c2\t\r  r4c1}\t\r  –\t\r  b4n8{r4c1\t\r  r6c3}\t\r  –\t\r  r6n4{c3\t\r  c4}\t\r  –\t\r  \nr4c9{n5\t\r  n9}\t\r  –\t\r  b5n9{r4c5\t\r  r5c6}\t\r  –\t\r  b5n3{r5c6\t\r  r5c4}\t\r  –\t\r  b5n1{r5c4\t\r  r6c5}\t\r  –\t\r  r2n9{c6\t\r  c2}\t\r  –\t\r  c2n1{r2\t\r  r9}\t\r  –\t\r  \nr8n1{c5\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  5\t\r  \nwhip[16]:\t\r  b2n4{r3c6\t\r  r1c4}\t\r  –\t\r  b2n7{r1c4\t\r  r2c4}\t\r  –\t\r  b2n5{r2c4\t\r  r1c5}\t\r  –\t\r  c5n9{r1\t\r  r4}\t\r  –\t\r  r4c9{n9\t\r  n5}\t\r  –\t\r  \nb3n5{r2c9\t\r  r2c7}\t\r  –\t\r  r5n5{c7\t\r  c1}\t\r  –\t\r  r8n5{c1\t\r  c8}\t\r  –\t\r  b9n7{r8c8\t\r  r9c9}\t\r  –\t\r  c9n9{r9\t\r  r2}\t\r  –\t\r  b1n9{r2c2\t\r  r1c2}\t\r  –\t\r  \nb1n3{r1c2\t\r  r3c2}\t\r  –\t\r  c2n7{r3\t\r  r4}\t\r  –\t\r  r4c1{n7\t\r  n8}\t\r  –\t\r  r3n8{c1\t\r  c5}\t\r  –\t\r  c6n8{r3\t\r  .}\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  9\t\r  \nwhip[16]:\t\r  b4n8{r6c3\t\r  r4c1}\t\r  –\t\r  b4n7{r4c1\t\r  r4c2}\t\r  –\t\r  b4n5{r4c2\t\r  r5c1}\t\r  –\t\r  r5n1{c1\t\r  c4}\t\r  –\t\r  r9c4{n1\t\r  n5}\t\r  –\t\r  \nb7n5{r9c2\t\r   r7c2}\t\r   –\t\r   c5n5{r7\t\r   r1}\t\r   –\t\r   c8n5{r1\t\r   r8}\t\r   –\t\r   b9n7{r8c8\t\r   r9c9}\t\r   –\t\r   r9n1{c9\t\r   c2}\t\r   –\t\r   c1n1{r8\t\r   r2}\t\r   –\t\r  \nb1n2{r2c1\t\r  r2c3}\t\r  –\t\r  r2n7{c3\t\r  c4}\t\r  –\t\r  r1c4{n7\t\r  n4}\t\r  –\t\r  c3n4{r1\t\r  r5}\t\r  –\t\r  r6n4{c3\t\r  .}\t\r  ==>\t\r  r6c3\t\r  ≠\t\r  1\t\r  \nbraid[19]:\t\r  b1n3{r3c2\t\r  r1c2}\t\r  –\t\r  r1n4{c2\t\r  c4}\t\r  –\t\r  b2n7{r1c4\t\r  r2c4}\t\r  –\t\r  b2n5{r2c4\t\r  r1c5}\t\r  –\t\r  r1n9{c5\t\r  c8}\t\r  \n–\t\r  r3n9{c9\t\r  c5}\t\r  –\t\r  r6n4{c4\t\r  c3}\t\r  –\t\r  b4n8{r6c3\t\r  r4c1}\t\r  –\t\r  r3n8{c5\t\r  c6}\t\r  –\t\r  b2n6{r3c6\t\r  r2c6}\t\r  –\t\r  r4c5{n9\t\r  n2}\t\r  \n–\t\r   r6n2{c5\t\r   c8}\t\r   –\t\r   r9c6{n6\t\r   n2}\t\r   –\t\r   r8c6{n6\t\r   n3}\t\r   –\t\r   c1n4{r1\t\r   r7}\t\r   –\t\r   r7n2{c1\t\r   c7}\t\r   –\t\r   c7n3{r1\t\r   r5}\t\r   –\t\r  \nr5n4{c1\t\r  c6}\t\r  –\t\r  r5n9{c8\t\r  .}\t\r  ==>\t\r  r3c2\t\r  ≠\t\r  4\t\r  \nwhip[6]:\t\r  r3n4{c6\t\r  c1}\t\r  –\t\r  r3n8{c1\t\r  c5}\t\r  –\t\r  c6n8{r3\t\r  r4}\t\r  –\t\r  c6n4{r4\t\r  r5}\t\r  –\t\r  c3n4{r5\t\r  r6}\t\r  –\t\r  b4n8{r6c3\t\r  .}\t\r  ==>\t\r  \nr3c6\t\r  ≠\t\r  6\t\r  \nbraid[8]:\t\r   b4n8{r6c3\t\r   r4c1}\t\r   –\t\r   r3n8{c1\t\r   c6}\t\r   –\t\r   r3n4{c6\t\r   c1}\t\r   –\t\r   b4n7{r4c1\t\r   r4c2}\t\r   –\t\r   b7n4{r7c1\t\r   r7c2}\t\r   –\t\r  \nc2n5{r7\t\r  r9}\t\r  –\t\r  r9c4{n5\t\r  n1}\t\r  –\t\r  c5n1{r8\t\r  .}\t\r  ==>\t\r  r6c5\t\r  ≠\t\r  8\t\r  \nwhip[6]:\t\r  r6n8{c3\t\r  c4}\t\r  –\t\r  r6n4{c4\t\r  c2}\t\r  –\t\r  c3n4{r6\t\r  r1}\t\r  –\t\r  c3n8{r1\t\r  r2}\t\r  –\t\r  c6n8{r2\t\r  r3}\t\r  –\t\r  b2n4{r3c6\t\r  .}\t\r  ==>\t\r  \nr6c3\t\r  ≠\t\r  6\t\r  \nwhip[6]:\t\r  r6c5{n1\t\r  n2}\t\r  –\t\r  b6n2{r6c8\t\r  r4c7}\t\r  –\t\r  b6n4{r4c7\t\r  r5c7}\t\r  –\t\r  c4n4{r5\t\r  r1}\t\r  –\t\r  c3n4{r1\t\r  r6}\t\r  –\t\r  r6n8{c3\t\r  .}\t\r  \n==>\t\r  r6c4\t\r  ≠\t\r  1\t\r  \nwhip[2]:\t\r  r8n1{c3\t\r  c5}\t\r  –\t\r  r6n1{c5\t\r  .}\t\r  ==>\t\r  r9c2\t\r  ≠\t\r  1\t\r  \nwhip[6]:\t\r  r4c9{n5\t\r  n9}\t\r  –\t\r  b5n9{r4c6\t\r  r5c6}\t\r  –\t\r  r2n9{c6\t\r  c2}\t\r  –\t\r  c2n1{r2\t\r  r6}\t\r  –\t\r  r6c5{n1\t\r  n2}\t\r  –\t\r  b6n2{r6c8\t\r  .}\t\r  \n==>\t\r  r4c7\t\r  ≠\t\r  5\t\r  \nwhip[6]:\t\r  b8n8{r7c5\t\r  r7c4}\t\r  –\t\r  c4n1{r7\t\r  r5}\t\r  –\t\r  c4n3{r5\t\r  r6}\t\r  –\t\r  r6n8{c4\t\r  c3}\t\r  –\t\r  r6n4{c3\t\r  c2}\t\r  –\t\r  b4n1{r6c2\t\r  .}\t\r  \n==>\t\r  r7c5\t\r  ≠\t\r  1\t\r  \nwhip[3]:\t\r  b7n1{r9c3\t\r  r8c1}\t\r  –\t\r  r5n1{c1\t\r  c4}\t\r  –\t\r  b8n1{r9c4\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  1\t\r  \nbraid[6]:\t\r   b5n9{r4c6\t\r   r5c6}\t\r   –\t\r   b9n9{r9c7\t\r   r9c9}\t\r   –\t\r   r2n9{c6\t\r   c2}\t\r   –\t\r   c2n1{r2\t\r   r6}\t\r   –\t\r   r6c5{n1\t\r   n2}\t\r   –\t\r  \nb6n2{r6c8\t\r  .}\t\r  ==>\t\r  r4c7\t\r  ≠\t\r  9\t\r  \nwhip[7]:\t\r   b6n9{r5c8\t\r   r4c9}\t\r   –\t\r   r2n9{c9\t\r   c2}\t\r   –\t\r   c2n1{r2\t\r   r6}\t\r   –\t\r   b5n1{r6c5\t\r   r5c4}\t\r   –\t\r   b5n3{r5c4\t\r   r6c4}\t\r   –\t\r  \nr6n8{c4\t\r  c3}\t\r  –\t\r  r6n4{c3\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  9\t\r  \nwhip[1]:\t\r  r5n9{c8\t\r  .}\t\r  ==>\t\r  r4c9\t\r  ≠\t\r  9\t\r  \nsingles\t\r  ==>\t\r  r4c9\t\r  =\t\r  5,\t\r  r5c1\t\r  =\t\r  5\t\r  \nbiv-­‐chain[2]:\t\r  b4n1{r5c3\t\r  r6c2}\t\r  –\t\r  b4n6{r6c2\t\r  r5c3}\t\r  ==>\t\r  r5c3\t\r  ≠\t\r  4\t\r  \nbiv-­‐chain[2]:\t\r  r5n1{c3\t\r  c4}\t\r  –\t\r  c5n1{r6\t\r  r8}\t\r  ==>\t\r  r8c3\t\r  ≠\t\r  1\t\r  \nwhip[2]:\t\r  b4n1{r6c2\t\r  r5c3}\t\r  –\t\r  b4n6{r5c3\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  r6n8{c4\t\r  c3}\t\r  –\t\r  r6n4{c3\t\r  .}\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  3\t\r  \nwhip[1]:\t\r  r6n3{c9\t\r  .}\t\r  ==>\t\r  r5c8\t\r  ≠\t\r  3,\t\r  r5c7\t\r  ≠\t\r  3\t\r  \n\n5. Bivalue-chains, whips and braids      \n141 \nbiv-­‐chain[3]:\t\r  b8n3{r7c4\t\r  r8c6}\t\r  –\t\r  r5c6{n3\t\r  n4}\t\r  –\t\r  r6c4{n4\t\r  n8}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  8\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r7c5\t\r  =\t\r  8\t\r  \nbiv-­‐chain[2]:\t\r  b4n8{r4c1\t\r  r6c3}\t\r  –\t\r  c4n8{r6\t\r  r2}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  8\t\r  \nbiv-­‐chain[2]:\t\r  r3n8{c1\t\r  c6}\t\r  –\t\r  r4n8{c6\t\r  c1}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  8\t\r  \nbiv-­‐chain[2]:\t\r  r3n4{c1\t\r  c6}\t\r  –\t\r  r3n8{c6\t\r  c1}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  7,\t\r  r3c1\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  r2n5{c7\t\r  c4}\t\r  –\t\r  b8n5{r9c4\t\r  .}\t\r  ==>\t\r  r8c7\t\r  ≠\t\r  5\t\r  \nwhip[2]:\t\r  r3n8{c6\t\r  c1}\t\r  –\t\r  r4n8{c1\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  8\t\r  \nbiv-­‐chain[2]:\t\r  r3c5{n6\t\r  n9}\t\r  –\t\r  r2c6{n9\t\r  n6}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  r3c5{n9\t\r  n6}\t\r  –\t\r  r2c6{n6\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  9\t\r  \nsingles\t\r  ==>\t\r  r1c5\t\r  =\t\r  5,\t\r  r2c7\t\r  =\t\r  5,\t\r  r1c7\t\r  =\t\r  8,\t\r  r8c8\t\r  =\t\r  5,\t\r  r9c9\t\r  =\t\r  7,\t\r  r7c9\t\r  =\t\r  1,\t\r  r9c7\t\r  =\t\r  9,\t\r  r5c8\t\r  =\t\r  9,\t\r  r1c2\t\r  =\t\r  9,\t\r  \nr3c2\t\r  =\t\r  3,\t\r  r1c8\t\r  =\t\r  3,\t\r  r6c9\t\r  =\t\r  3,\t\r  r3c8\t\r  =\t\r  7\t\r  \nwhip[1]:\t\r  r1n6{c1\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  6,\t\r  r2c2\t\r  ≠\t\r  6,\t\r  r2c3\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  c2n6{r9\t\r  r6}\t\r  –\t\r  c8n6{r6\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  6\t\r  \nbiv-­‐chain[3]:\t\r  c1n6{r1\t\r  r8}\t\r  –\t\r  c1n1{r8\t\r  r2}\t\r  –\t\r  r2c2{n1\t\r  n7}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  7\t\r  \nbiv-­‐chain[3]:\t\r  c1n6{r1\t\r  r8}\t\r  –\t\r  b7n1{r8c1\t\r  r9c3}\t\r  –\t\r  r5c3{n1\t\r  n6}\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  6\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r1c1\t\r  =\t\r  6\t\r  \nwhip[2]:\t\r  r6n4{c4\t\r  c3}\t\r  –\t\r  r1n4{c3\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  4\t\r  \nbiv-­‐chain[3]:\t\r  r4c1{n7\t\r  n8}\t\r  –\t\r  r6c3{n8\t\r  n4}\t\r  –\t\r  r1c3{n4\t\r  n7}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  7\t\r  \nbiv-­‐chain[3]:\t\r  c2n7{r2\t\r  r4}\t\r  –\t\r  c1n7{r4\t\r  r8}\t\r  –\t\r  c1n1{r8\t\r  r2}\t\r  ==>\t\r  r2c2\t\r  ≠\t\r  1\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \nConsidering such exceptional puzzles, it appears that the notion of simplicity of \na resolution path can only be (very) relative. \n5.10.5. A braid[3] that is not a whip[3]; also a proof that a puzzle has no solution \nWe shall use the puzzle in Figure 5.7 for two different purposes at the same \ntime: giving an example of a braid[3] that is not a whip[3] and showing how our \nresolution rules can be used to prove that an instance has no solution (the steps of \nsuch a proof are exactly the same as those used to find a solution) . \n \n \n \n  3 \n \n  6 \n \n \n \n  \n \n5   1  \n \n  \n \n    \n6   \n \n \n2 3 4 \n \n \n  \n \n7   \n \n  \n   \n5     \n  \n \n  9 \n \n  \n \n  7   \n \n6 4 \n \n3 \n \n8 \n \n \n  \n \n4    \n \n  \n \n9 1   \n   \n2   \n \n8 3  \n    \n  \n \n \n  \n  \n \n \n  \n \n  \nFigure 5.7. A puzzle P with a non-whip braid[3] \n*****\t\r  \t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  B\t\r  *****\t\r  \n22\t\r  givens,\t\r  242\t\r  candidates\t\r  1692\t\r  csp-­‐links\t\r  and\t\r  1692\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.45\t\r  \n\n142 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[1]:\t\r  r7n8{c1\t\r  .}\t\r  ==>\t\r  r9c3\t\r  ≠\t\r  8,\t\r  r9c2\t\r  ≠\t\r  8,\t\r  r9c1\t\r  ≠\t\r  8\t\r  \nwhip[2]:\t\r  r3n9{c2\t\r  c9}\t\r  –\t\r  r6n9{c9\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  9,\t\r  r1c1\t\r  ≠\t\r  9\t\r  \nwhip[2]:\t\r  b6n3{r4c9\t\r  r5c8}\t\r  –\t\r  b6n4{r5c8\t\r  .}\t\r  ==>\t\r  r4c9\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  b6n4{r4c9\t\r  r5c8}\t\r  –\t\r  b6n3{r5c8\t\r  .}\t\r  ==>\t\r  r4c9\t\r  ≠\t\r  6,\t\r  r4c9\t\r  ≠\t\r  9\t\r  \nwhip[2]:\t\r  b6n3{r5c8\t\r  r4c9}\t\r  –\t\r  b6n4{r4c9\t\r  .}\t\r  ==>\t\r  r5c8\t\r  ≠\t\r  2,\t\r  r5c8\t\r  ≠\t\r  1\t\r  \nwhip[2]:\t\r  b6n4{r5c8\t\r  r4c9}\t\r  –\t\r  b6n3{r4c9\t\r  .}\t\r  ==>\t\r  r5c8\t\r  ≠\t\r  6\t\r  \nwhip[1]:\t\r  b6n6{r4c7\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  6,\t\r  r7c7\t\r  ≠\t\r  6,\t\r  r2c7\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  b3n3{r2c8\t\r  r2c9}\t\r  –\t\r  b3n6{r2c9\t\r  .}\t\r  ==>\t\r  r2c8\t\r  ≠\t\r  2,\t\r  r2c8\t\r  ≠\t\r  7,\t\r  r2c8\t\r  ≠\t\r  8\t\r  \nwhip[2]:\t\r  b3n3{r2c9\t\r  r2c8}\t\r  –\t\r  b3n6{r2c8\t\r  .}\t\r  ==>\t\r  r2c9\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  c2n2{r5\t\r  r1}\t\r  –\t\r  b3n2{r1c7\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  b3n3{r2c9\t\r  r2c8}\t\r  –\t\r  b3n6{r2c8\t\r  .}\t\r  ==>\t\r  r2c9\t\r  ≠\t\r  8,\t\r  r2c9\t\r  ≠\t\r  9\t\r  \nwhip[2]:\t\r  b6n2{r6c9\t\r  r4c7}\t\r  –\t\r  r2n2{c7\t\r  .}\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  b5n8{r4c4\t\r  r5c5}\t\r  –\t\r  r2n8{c5\t\r  c1}\t\r  –\t\r  b7n8{r7c1\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  b4n8{r5c3\t\r  r4c1}\t\r  –\t\r  b7n8{r7c1\t\r  r7c3}\t\r  –\t\r  r2n8{c3\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  8\t\r  \nwhip[1]:\t\r  b5n8{r4c4\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  8\t\r  \n;;; Resolution state RS1, displayed in Figure 5.8.  \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nr1 \nn1 n2      \nn4           \nn7 n8      \nn1 n2      \n  \n     n8 n9 n3 \n  \nn4 n5      \nn7 n8      \n \nn4 n5      \nn7 n8 n9 n6 \nn1 n2      \n n5  \nn7      n9 \nn1 n2      \n  \nn7 n8      \n n2  \n n5  \n     n8 n9 r1 \nr2 \n n2  \nn4           \nn7 n8      n5 \n  \n  \nn7 n8 n9 n1 \n \nn4           \nn7 n8 n9 \n \nn4           \nn7      n9 \n n2  \n  \nn7      n9 \n          n3 \n          n6 \n  \n          n3 \n          n6 \n \nr2 \nr3 n6 \nn1           \n  \n     n8 n9 \nn1           \n  \nn7 n8 n9 \n  \n n5  \nn7 n8      n2 \nn3 \nn4 \nn1           \n  \nn7 n8        \n  \n n5  \n     n8 n9 r3 \nr4 \nn1 n2 n3 \n  \n          n9 n7 \nn1           \n  \n          n9 \n n2  \nn4      n6 \n n8  \nn1           \nn4      n6 \n n8  \nn1 n2      \nn4           \n  \nn1 n2      \n          n6 \n          n9 n5 \n          n3 \nn4           \n  \nr4 \nr5 \nn1 n2 n3 \n n5  \n     n8      \nn1 n2 n3 \n  \n n8  \nn1           \n n5  \n n8  \nn9 \nn1           \nn4      n6 \n n8  \nn1 n2      \nn4 n5      \n  \nn1           \n          n6 \n   \n          n3 \nn4           \n  \nn7 r5 \nr6 \nn1           \n n5  \n          n9 n6 \nn4 \n n2  \n n5  \nn7           n3 \nn1 n2      \n n5  \nn7           n8 \nn1 n2      \n  \n  \n n2  \n  \n          n9 r6 \nr7 \n          n3 \n n5  \nn7 n8      n4 \n  \n     n5 n6 \nn7 n8      \n     n2 n3 \n     n5 n6 \nn7           \n  \n     n5 n6 \nn7           \n n2  \n n5  \nn7           \n n2  \n n5  \nn7           n9 \nn1 r7 \nr8 \nn1           \n n5  \nn7      n9 \nn1           \n  \n          n9 n2 \n  \nn4 n5 n6 \nn7           \nn1           \nn4 n5 n6 \nn7      n9 n8 \nn3 \n  \nn4      n6 \nn7           \n  \nn4 n5 n6 \n  \nr8 \nr9 \nn1      n3 \n n5  \nn7      n9 \nn1      n3 \n  \n          n9 \nn1           \n     n5 n6 \nn7      n9 \n     n2 n3 \nn4 n5 n6 \nn7           \nn1           \nn4 n5 n6 \nn7      n9 \nn1 n2      \nn4 n5      \nn7      n9 \n n2  \n n5  \nn7           \n n2  \nn4      n6 \nn7 n8      \n n2  \nn4 n5 n6 \n n8  \nr9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 5.8. Resolution state RS1 for puzzle in Figure 5.7 \nAt this point, there is no whip[3] but we find two braids[3]: \n \nbraid[3]:\t\r  r8c2{n1\t\r  n9}\t\r  –\t\r  r4c3{n1\t\r  n9}\t\r  –\t\r  c1n9{r4\t\r  .}\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  1\t\r  \n\n5. Bivalue-chains, whips and braids      \n143 \nbraid[3]:\t\r  r8c2{n1\t\r  n9}\t\r  –\t\r  r4c3{n1\t\r  n9}\t\r  –\t\r  c1n9{r9\t\r  .}\t\r  ==>\t\r  r9c3\t\r  ≠\t\r  1\t\r  \nAnticipating on the definitions in chapter 7 and as an illustration of theorem 7.6, \nthese eliminations could also be done respectively by the following g-whips[3] : \ng-­‐whip[3]:\t\r  r8c2{n1\t\r  n9}\t\r  –\t\r  c1n9{r8\t\r  r456}\t\r  –\t\r  r4c3{n9\t\r  .}\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  1\t\r  \ng-­‐whip[3]:\t\r  r8c2{n1\t\r  n9}\t\r  –\t\r  c1n9{r8\t\r  r456}\t\r  –\t\r  r4c3{n9\t\r  .}\t\r  ==>\t\r  r9c3\t\r  ≠\t\r  1\t\r  \n \nLet us now see the rest of the proof (in resolution theory B7) that this puzzle has \nno solution: \nwhip[6]:\t\r  b6n2{r6c9\t\r  r4c7}\t\r  –\t\r  r2n2{c7\t\r  c1}\t\r  –\t\r  c2n2{r1\t\r  r5}\t\r  –\t\r  c2n3{r5\t\r  r9}\t\r  –\t\r  r7n3{c1\t\r  c4}\t\r  –\t\r  r7n2{c4\t\r  .}\t\r  ==>\t\r  \nr6c6\t\r  ≠\t\r  2\t\r  \nwhip[7]:\t\r  c2n2{r1\t\r  r5}\t\r  –\t\r  c2n8{r5\t\r  r3}\t\r  –\t\r  r2c3{n8\t\r  n7}\t\r  –\t\r  r3c3{n7\t\r  n1}\t\r  –\t\r  r3n9{c3\t\r  c9}\t\r  –\t\r  c7n9{r2\t\r  r4}\t\r  –\t\r  \nr4c3{n9\t\r  .}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  9\t\r  \nwhip[7]:\t\r   b8n3{r7c4\t\r   r9c4}\t\r   –\t\r   c2n3{r9\t\r   r5}\t\r   –\t\r   c1n3{r5\t\r   r7}\t\r   –\t\r   b7n8{r7c1\t\r   r7c3}\t\r   –\t\r   b4n8{r5c3\t\r   r5c1}\t\r   –\t\r  \nr5n2{c1\t\r  c6}\t\r  –\t\r  b8n2{r9c6\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  5,\t\r  r7c4\t\r  ≠\t\r  6\t\r  \nwhip[5]:\t\r  b7n8{r7c1\t\r  r7c3}\t\r  –\t\r  r7n6{c3\t\r  c5}\t\r  –\t\r  c4n6{r9\t\r  r4}\t\r  –\t\r  b5n8{r4c4\t\r  r4c5}\t\r  –\t\r  r2n8{c5\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  8,\t\r  \nr5c1\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  c1n8{r7\t\r  r2}\t\r  –\t\r  c2n8{r3\t\r  r5}\t\r  –\t\r  b4n3{r5c2\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  3\t\r  \nhidden-­‐single-­‐in-­‐a-­‐row\t\r  ==>\t\r  r7c4\t\r  =\t\r  3\t\r  \nwhip[3]:\t\r  c2n2{r5\t\r  r1}\t\r  –\t\r  b3n2{r1c7\t\r  r2c7}\t\r  –\t\r  r7n2{c7\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  2\t\r  \nwhip[1]:\t\r  r5n2{c1\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  2\t\r  \nbraid[6]:\t\r  b7n8{r7c1\t\r  r7c3}\t\r  –\t\r  r7n6{c3\t\r  c5}\t\r  –\t\r  r2n2{c1\t\r  c7}\t\r  –\t\r  c4n6{r9\t\r  r4}\t\r  –\t\r  r7n2{c7\t\r  c6}\t\r  –\t\r  r4n2{c7\t\r  .}\t\r  ==>\t\r  \nr2c1\t\r  ≠\t\r  8\t\r  \nhidden-­‐single-­‐in-­‐a-­‐column\t\r  ==>\t\r  r7c1\t\r  =\t\r  8\t\r  \nwhip[6]:\t\r  r4n8{c4\t\r  c5}\t\r  –\t\r  b5n6{r4c5\t\r  r5c5}\t\r  –\t\r  r5c7{n6\t\r  n1}\t\r  –\t\r  r5c6{n1\t\r  n5}\t\r  –\t\r  r5c3{n5\t\r  n8}\t\r  –\t\r  r2n8{c3\t\r  .}\t\r  \n==>\t\r  r4c4\t\r  ≠\t\r  4\t\r  \nwhip[6]:\t\r  r7n2{c7\t\r  c6}\t\r  –\t\r  r4n2{c6\t\r  c4}\t\r  –\t\r  b5n8{r4c4\t\r  r4c5}\t\r  –\t\r  r2n8{c5\t\r  c3}\t\r  –\t\r  b4n8{r5c3\t\r  r5c2}\t\r  –\t\r  c2n2{r5\t\r  .}\t\r  \n==>\t\r  r1c7\t\r  ≠\t\r  2\t\r  \nwhip[7]:\t\r   r2n8{c5\t\r   c3}\t\r   –\t\r   b4n8{r5c3\t\r   r5c2}\t\r   –\t\r   b4n2{r5c2\t\r   r5c1}\t\r   –\t\r   r2n2{c1\t\r   c7}\t\r   –\t\r   r7n2{c7\t\r   c6}\t\r   –\t\r  \nr4n2{c6\t\r  c4}\t\r  –\t\r  b5n8{r4c4\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  8\t\r  \nwhip[7]:\t\r  r4n8{c4\t\r  c5}\t\r  –\t\r  r2n8{c5\t\r  c3}\t\r  –\t\r  b4n8{r5c3\t\r  r5c2}\t\r  –\t\r  c2n2{r5\t\r  r1}\t\r  –\t\r  r2n2{c1\t\r  c7}\t\r  –\t\r  r7n2{c7\t\r  c6}\t\r  –\t\r  \nr4n2{c6\t\r  .}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  6\t\r  \nwhip[1]:\t\r  c4n6{r9\t\r  .}\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  6,\t\r  r7c5\t\r  ≠\t\r  6\t\r  \nhidden-­‐single-­‐in-­‐a-­‐row\t\r  ==>\t\r  r7c3\t\r  =\t\r  6\t\r  \nwhip[1]:\t\r  c4n6{r9\t\r  .}\t\r  ==>\t\r  r9c5\t\r  ≠\t\r  6\t\r  \nwhip[5]:\t\r  r7n2{c6\t\r  c7}\t\r  –\t\r  r2n2{c7\t\r  c1}\t\r  –\t\r  b1n4{r2c1\t\r  r1c1}\t\r  –\t\r  c4n4{r1\t\r  r8}\t\r  –\t\r  b8n6{r8c4\t\r  .}\t\r  ==>\t\r  r9c4\t\r  ≠\t\r  2\t\r  \nwhip[1]:\t\r  b8n2{r9c6\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  r4n6{c7\t\r  c5}\t\r  –\t\r  b5n8{r4c5\t\r  r4c4}\t\r  –\t\r  r4n2{c4\t\r  .}\t\r  ==>\t\r  r4c7\t\r  ≠\t\r  1,\t\r  r4c7\t\r  ≠\t\r  9\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r6c9\t\r  =\t\r  9\t\r  \nwhip[1]:\t\r  r3n9{c2\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r4c3{n9\t\r  n1}\t\r  –\t\r  r6c1{n1\t\r  n5}\t\r  –\t\r  b7n5{r9c1\t\r  .}\t\r  ==>\t\r  r9c3\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r4n6{c5\t\r  c7}\t\r  –\t\r  r4n2{c7\t\r  c4}\t\r  –\t\r  b5n8{r4c4\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  1,\t\r  r4c5\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  r2n2{c7\t\r  c1}\t\r  –\t\r  c2n2{r1\t\r  r5}\t\r  –\t\r  b4n8{r5c2\t\r  r5c3}\t\r  –\t\r  r2c3{n8\t\r  .}\t\r  ==>\t\r  r2c7\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  c6n2{r7\t\r  r9}\t\r  –\t\r  c6n9{r9\t\r  r2}\t\r  –\t\r  r2c7{n9\t\r  .}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  2\t\r  \nhidden-­‐single-­‐in-­‐a-­‐row\t\r  ==>\t\r  r7c6\t\r  =\t\r  2\t\r  \nwhip[2]:\t\r  c3n5{r5\t\r  r9}\t\r  –\t\r  c6n5{r9\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  b6n1{r5c7\t\r  r6c8}\t\r  –\t\r  r6c1{n1\t\r  n5}\t\r  –\t\r  b5n5{r6c6\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  1\t\r  \n\n144 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[4]:\t\r  c3n5{r9\t\r  r5}\t\r  –\t\r  b4n8{r5c3\t\r  r5c2}\t\r  –\t\r  c2n2{r5\t\r  r1}\t\r  –\t\r  c9n2{r1\t\r  .}\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  5\t\r  \nwhip[4]:\t\r  r4c3{n1\t\r  n9}\t\r  –\t\r  b1n9{r3c3\t\r  r3c2}\t\r  –\t\r  r3n1{c2\t\r  c8}\t\r  –\t\r  b6n1{r6c8\t\r  .}\t\r  ==>\t\r  r5c3\t\r  ≠\t\r  1\t\r  \nwhip[2]:\t\r  c3n9{r3\t\r  r4}\t\r  –\t\r  c3n1{r4\t\r  .}\t\r  ==>\t\r  r3c3\t\r  ≠\t\r  8,\t\r  r3c3\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  b3n1{r1c7\t\r  r3c8}\t\r  –\t\r  r6n1{c8\t\r  c6}\t\r  –\t\r  b5n7{r6c6\t\r  r6c4}\t\r  –\t\r  r3n7{c4\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  1\t\r  \nwhip[3]:\t\r  r8c2{n1\t\r  n9}\t\r  –\t\r  b1n9{r3c2\t\r  r3c3}\t\r  –\t\r  b1n1{r3c3\t\r  .}\t\r  ==>\t\r  r9c2\t\r  ≠\t\r  1\t\r  \nwhip[3]:\t\r  r8c2{n9\t\r  n1}\t\r  –\t\r  b1n1{r3c2\t\r  r3c3}\t\r  –\t\r  b1n9{r3c3\t\r  .}\t\r  ==>\t\r  r9c2\t\r  ≠\t\r  9\t\r  \nnaked-­‐single\t\r  ==>\t\r  r9c2\t\r  =\t\r  3\t\r  \nwhip[4]:\t\r  b7n5{r9c3\t\r  r8c1}\t\r  –\t\r  r6c1{n5\t\r  n1}\t\r  –\t\r  r9n1{c1\t\r  c6}\t\r  –\t\r  r4n1{c6\t\r  .}\t\r  ==>\t\r  r9c5\t\r  ≠\t\r  5\t\r  \nwhip[4]:\t\r  r3n7{c8\t\r  c4}\t\r  –\t\r  b5n7{r6c4\t\r  r6c6}\t\r  –\t\r  r6n1{c6\t\r  c1}\t\r  –\t\r  c3n1{r4\t\r  .}\t\r  ==>\t\r  r3c8\t\r  ≠\t\r  1\t\r  \nwhip[1]:\t\r  b3n1{r1c7\t\r  .}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  1\t\r  \nwhip[2]:\t\r  c2n9{r3\t\r  r8}\t\r  –\t\r  c2n1{r8\t\r  .}\t\r  ==>\t\r  r3c2\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  r3c9{n8\t\r  n5}\t\r  –\t\r  r1c9{n5\t\r  n2}\t\r  –\t\r  r1c2{n2\t\r  .}\t\r  ==>\t\r  r1c8\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  c6n9{r9\t\r  r2}\t\r  –\t\r  r2c7{n9\t\r  n2}\t\r  –\t\r  r9c7{n2\t\r  n5}\t\r  –\t\r  r9c3{n5\t\r  .}\t\r  ==>\t\r  r9c6\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  r6c1{n1\t\r  n5}\t\r  –\t\r  r5c3{n5\t\r  n8}\t\r  –\t\r  r2c3{n8\t\r  n7}\t\r  –\t\r  c6n7{r2\t\r  .}\t\r  ==>\t\r  r6c6\t\r  ≠\t\r  1\t\r  \nwhip[2]:\t\r  b4n1{r6c1\t\r  r4c3}\t\r  –\t\r  c6n1{r4\t\r  .}\t\r  ==>\t\r  r9c1\t\r  ≠\t\r  1\t\r  \nwhip[1]:\t\r  r9n1{c6\t\r  .}\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  1\t\r  \nwhip[3]:\t\r  r1n9{c5\t\r  c7}\t\r  –\t\r  c7n1{r1\t\r  r5}\t\r  –\t\r  c5n1{r5\t\r  .}\t\r  ==>\t\r  r9c5\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r9n9{c1\t\r  c6}\t\r  –\t\r  c6n1{r9\t\r  r4}\t\r  –\t\r  r4c3{n1\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  9\t\r  \nsingles\t\r  ==>\t\r  r4c3\t\r  =\t\r  9,\t\r  r3c3\t\r  =\t\r  1,\t\r  r3c2\t\r  =\t\r  9,\t\r  r8c2\t\r  =\t\r  1\t\r  \nwhip[4]:\t\r  c6n1{r4\t\r  r9}\t\r  –\t\r  b8n9{r9c6\t\r  r8c5}\t\r  –\t\r  r1n9{c5\t\r  c7}\t\r  –\t\r  c7n1{r1\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  1\t\r  \nsingles\t\r  ==>\t\r  r4c6\t\r  =\t\r  1,\t\r  r4c1\t\r  =\t\r  3,\t\r  r4c9\t\r  =\t\r  4,\t\r  r5c8\t\r  =\t\r  3,\t\r  r2c8\t\r  =\t\r  6,\t\r  r2c9\t\r  =\t\r  3,\t\r  r9c5\t\r  =\t\r  1\t\r  \nwhip[3]:\t\r  r9n6{c4\t\r  c9}\t\r  –\t\r  r8c9{n6\t\r  n5}\t\r  –\t\r  r3n5{c9\t\r  .}\t\r  ==>\t\r  r9c4\t\r  ≠\t\r  5\t\r  \nwhip[4]:\t\r  b7n7{r9c3\t\r  r8c1}\t\r  –\t\r  r8n9{c1\t\r  c5}\t\r  –\t\r  r1n9{c5\t\r  c7}\t\r  –\t\r  b3n7{r1c7\t\r  .}\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  b7n5{r9c1\t\r  r9c3}\t\r  –\t\r  c3n7{r9\t\r  r2}\t\r  –\t\r  c6n7{r2\t\r  r6}\t\r  –\t\r  c6n5{r6\t\r  .}\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  5\t\r  \nwhip[4]:\t\r  c9n2{r1\t\r  r9}\t\r  –\t\r  c8n2{r9\t\r  r6}\t\r  –\t\r  r6n1{c8\t\r  c1}\t\r  –\t\r  r5c1{n1\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  2\t\r  \nwhip[4]:\t\r  b7n7{r9c3\t\r  r8c1}\t\r  –\t\r  r8c8{n7\t\r  n4}\t\r  –\t\r  c4n4{r8\t\r  r1}\t\r  –\t\r  r1c1{n4\t\r  .}\t\r  ==>\t\r  r9c4\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  b8n7{r7c5\t\r  r8c4}\t\r  –\t\r  b8n6{r8c4\t\r  r9c4}\t\r  –\t\r  c4n4{r9\t\r  r1}\t\r  –\t\r  r1c1{n4\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  c4n4{r9\t\r  r1}\t\r  –\t\r  r1c1{n4\t\r  n7}\t\r  –\t\r  b3n7{r1c8\t\r  r3c8}\t\r  –\t\r  r8c8{n7\t\r  .}\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  r2n2{c7\t\r  c1}\t\r  –\t\r  r5c1{n2\t\r  n1}\t\r  –\t\r  r6n1{c1\t\r  c8}\t\r  –\t\r  b6n2{r6c8\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  b9n8{r9c8\t\r  r9c9}\t\r  –\t\r  b9n2{r9c9\t\r  .}\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  4\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r8c8\t\r  =\t\r  4\t\r  \nwhip[1]:\t\r  b9n7{r9c7\t\r  .}\t\r  ==>\t\r  r1c7\t\r  ≠\t\r  7\t\r  \nwhip[2]:\t\r  b9n8{r9c9\t\r  r9c8}\t\r  –\t\r  b9n2{r9c8\t\r  .}\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  6\t\r  \nsingles\t\r  ==>\t\r  r8c9\t\r  =\t\r  6,\t\r  r9c4\t\r  =\t\r  6,\t\r  r9c6\t\r  =\t\r  4,\t\r  r5c6\t\r  =\t\r  5,\t\r  r6c6\t\r  =\t\r  7,\t\r  r2c6\t\r  =\t\r  9,\t\r  r2c7\t\r  =\t\r  2,\t\r  r4c7\t\r  =\t\r  6,\t\r  r5c7\t\r  =\t\r  1,\t\r  \nr6c8\t\r  =\t\r  2\t\r  \nNO\t\r  SOLUTION:\t\r  NO\t\r  CANDIDATE\t\r  FOR\t\r  RC-­‐CELL\t\r  r6c4.\t\r  \t\r  \n5.11. Whips in N-Queens and Latin Squares; definition of SudoQueens \nIn this final section, mainly about the N-Queens problem, we show that the rules \nintroduced in this chapter work concretely for other CSPs than Sudoku or \nLatinSquare. We also show that N-Queens has whips of length 1 and how they look \nlike. More examples will appear (with more detail) in chapters 14 to 16. Using the \nLatinSquare CSP, we also show that a CSP with no whips of length 1 can \nnevertheless have longer ones. Finally, we introduce the N-SudoQueens CSP. \n\n5. Bivalue-chains, whips and braids      \n145 \n5.11.1. The N-Queens CSP \nGiven an n×n chessboard, the n-Queens CSP consists of placing n queens on it in \nsuch a way that no two queens appear in the same row, column or diagonal. \nHere again, as in the Sudoku case, we introduce redundant sets of CSP variables:  \n- for each r° in {r1, r2, …, rn}, CSP variable Xr° with values in {c1, c2, …, cn};  \n- for each c° in {c1, c2, …, cn}, CSP variable Xc° with values in {r1, r2, …, rn}.  \nWe define CSP-Variable-Type as the sort with domain {r, c} and Constraint-\nType as the super-sort of CSP-Variable-Type with domain {r, c, f, s} corresponding \nto the four types of constraints: along a row, a column, parallel to the first diagonal \nand parallel to the second diagonal. Notice that there are now other constraints (f \nand s) than those taken care of by the CSP variables (corresponding to the r and c in \nConstraint-Type). And there is no possibility of adding CSP variables for the \nconstraints along these diagonals: although no two queens may appear in the same \ndiagonal, there are diagonals with no queen (there are 2n-1 diagonals of each kind); \nif we tried to define them as CSP variables, some of them would have no value. \nFor each r° in {r1, r2, …, rn} and each c° in {c1, c2, …, cn}, we define label \n(r°, c°) or r°c° as corresponding to the two <variable, value> pairs <Xr°, c°> and \n<Xc°, r°> (which is equivalent to the implicit axiom: Xr° = c° ⇔ Xc°= r°). A label \ncan be assimilated with a cell in the grid. \nEasy details of the model (in particular the writing of the constraints along rows, \ncolumns and diagonals) are left as an exercise for the reader. Similarly, the explicit \nwriting of the Basic Resolution Theory BRT(n-Queens) is considered as obvious. As \nfor whips, they need no specific definition; they are part of our general theory. \nIn all the forthcoming figures for n-Queens, the * signs represent the given \nqueens; the small ° signs represent the candidates eliminated by ECP at the start of \nthe resolution process; the A, B, C, … letters represent the candidates eliminated by \nresolution rules after the first ECP, in this order; the + signs represent the queens \nplaced by the Single rule (at any time in the resolution process).  \nNotice that all our solutions for n-Queens were obtained manually; therefore, the \nresolution path for some of them may not be the shortest possible and the resolution \ntheory in which the solution is obtained may not be the weakest possible. For lack of \na generator of minimal instances, all our examples were built manually and they \nremain elementary. Our only ambition with respect to the n-Queens CSP is to \nillustrate how our general concepts can be applied and how our patterns look in \nthem; contrary to Sudoku, it is not to produce any classification results.  \n \n\n146 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n5.11.2. Simple whips of length 1 and 2 in 8-Queens \n \n \nc1 \nc2 \nc3 c4 \nc5 c6 c7 c8 \nr1 \n° * \n° \n° \n° \n° \n° \n° \nr2 \n° \n° \n° \n° \n° \n° * \n° \nr3 \n° \n° \n° \n° * \n° \n° \n° \nr4 \n \n° \n \n° \n° \n° \n° \n+ \nr5 \n+ \n° \n° \n° \n° \n° \n° \n \nr6 \n° \n° \n° \n+ \n° \n \n° \n° \nr7 \n \n° \nB \nC \n° \n+ \n° \n° \nr8 \n° \n° \n+ \nA \n° \n \n° \n \nFigure 5.9. An 8-Queens instance solved by whips \nFor the 8-Queens CSP, consider the instance described in Figure 5.9, with 3 \nqueens already given (in positions r1c2, r2c7 and r3c5). After the first obvious ECP \neliminations, the Single rule cannot be applied. But we have the following resolution \npath with whips of lengths 1 and 2. \n \n*****\t\r  Manual\t\r  solution\t\r  *****\t\r  \nwhip[1]:\t\r  r6{c4\t\r  .}\t\r  \t\r  ⇒\t\r  ¬r8c4\t\r  (A\t\r  eliminated)\t\r  \nwhip[2]:\t\r  r6{c4\t\r  c6}\t\r  –\t\r  r8{c6\t\r  .}\t\r  \t\r  ⇒\t\r  ¬r7c3,\t\r  ¬r7c4\t\r  (B\t\r  and\t\r  C\t\r  eliminated)\t\r  \nsingle\t\r  in\t\r  c4:\t\r  r6c4;\t\r  single\t\r  in\t\r  c6:\t\r  r7c6;\t\r  single\t\r  in\t\r  r5:\t\r  r5c1;\t\r  single\t\r  in\t\r  r4:\t\r  r4c8;\t\r  single\t\r  in\t\r  r8:\t\r  r8c3\t\r  \nSolution\t\r  found\t\r  in\t\r  W2.\t\r  \nNotice the first whip[1], in the grey cells, with an interaction of a column and a \ndiagonal occurring in a row at a relatively small distance from the target; it proves \nthat there are whips of length 1 in n-Queens and it shows how some of them can \nlook.  \n5.11.3. Whips[1] in 10-Queens with long distance interactions \nThe instance of 10-Queens in Figure 5.10 shows that whip[1] interactions can \nhappen on much longer distances than in the previous example. They can also \nhappen at distance 0, i.e. in the row or column adjacent to the target (as in section \n5.11.5 below), or at still much longer distances in n-Queens for very large n. \n \n\n5. Bivalue-chains, whips and braids      \n147 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 c10 \nr1 \n° \n° \n° \n° \n° \n° * \n° \n°  ° \nr2 \n°  ° \n° \n° \n°  °  ° \n°  °  * \nr3  \n° \n° \n° \n° \n+ \n° \n° \n°  ° \nr4 \n° \n° * \n° \n° \n° \n° \n°  °  ° \nr5 \n+ \n° \n° \n° \n° \n \n° \n°  °  ° \nr6 \n°  ° \n°  ° \n° \n°  °  *  °  ° \nr7 \n° \n \n° \n+ \n° \n°  ° \n°  °  ° \nr8 \nC \n+ \n° \n° \n \n° \n° \n° \n°  ° \nr9 \n° \n° \n° \n° \n° \n° \n° \n°  *  ° \nr10 \nB \n° \n°  ° \n+ \nA \n° \n° \n°  ° \nFigure 5.10. A 10-Queens instance, with 3 whips[1] based on long distance interactions \nThis puzzle has five queens already given (in r1c7, r2c10, r4c3, r6c8 and r9c9). \nIts first three whips[1] have interactions of a column and a diagonal in rows at long \ndistances from their targets. After them, it can be solved by Singles. \n \n*****\t\r  Manual\t\r  solution\t\r  *****\t\r  \nwhip[1]:\t\r  r5{c6\t\r  .}\t\r  ⇒\t\r  ¬r10c6\t\r  (A\t\r  eliminated);\t\r  whip\t\r  in\t\r  light\t\r  grey\t\r  cells\t\r  with\t\r  target\t\r  A\t\r  \nwhip[1]:\t\r  r5{c6\t\r  .}\t\r  ⇒\t\r  ¬r10c1\t\r  (B\t\r  eliminated);\t\r  “same”\t\r  whip\t\r  in\t\r  light\t\r  grey\t\r  cells,\t\r  but\t\r  with\t\r  target\t\r  B\t\r  \nwhip[1]:\t\r  r3{c1\t\r  .}\t\r  ⇒\t\r  ¬r8c1\t\r  (C\t\r  eliminated);\t\r  whip\t\r  in\t\r  dark\t\r  grey\t\r  cells\t\r  with\t\r  target\t\r  C\t\r  \nsingle\t\r  in\t\r  r10:\t\r  r10c5;\t\r  single\t\r  in\t\r  r8:\t\r  r8c2;\t\r  single\t\r  in\t\r  r7:\t\r  r7c4;\t\r  single\t\r  in\t\r  r5:\t\r  r5c1;\t\r  single\t\r  in\t\r  r3:\t\r  r3c6\t\r  \nSolution\t\r  found\t\r  in\t\r  W1.\t\r  \n5.11.4. Another kind of whip[1] in N-Queens \nThe instance of 9-Queens in Figure 5.11, with three queens already given (in \nr3c3, r6c2 and r9c7) has three whips[1] of another kind, relying on the interaction of \nthree different constraints in a row or a column at a medium distance from the \ntarget. It can be solved in W4. \n \n*****\t\r  Manual\t\r  solution\t\r  *****\t\r  \nwhip[1]:\t\r  r7{c6\t\r  .}\t\r  ⇒\t\r  ¬r5c6\t\r  (A\t\r  eliminated,\t\r  whip\t\r  on\t\r  light\t\r  grey\t\r  cells)\t\r  \nwhip[1]:\t\r  r8{c5\t\r  .}\t\r  ⇒\t\r  ¬r4c5\t\r  (B\t\r  eliminated,\t\r  whip\t\r  on\t\r  medium\t\r  grey\t\r  cells\t\r  and\t\r  r8c5)\t\r  \nwhip[1]:\t\r  c5{r2\t\r  .}\t\r  ⇒\t\r  ¬r5c8\t\r  (C\t\r  eliminated,\t\r  whip\t\r  on\t\r  dark\t\r  grey\t\r  cells)\t\r  \n\n148 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[1]:\t\r  c6{r4\t\r  .}\t\r  ⇒\t\r  ¬r4c9\t\r  (D\t\r  eliminated)\t\r  \nwhip[2]:\t\r  r5{c9\t\r  c4}\t\r  –\t\r  r7{c4\t\r  .}\t\r  ⇒\t\r  ¬r8c9\t\r  (E\t\r  eliminated)\t\r  \nwhip[3]:\t\r  r5{c9\t\r  c4}\t\r  –\t\r  r2{c1\t\r  c5}\t\r  –\t\r  r8{c5\t\r  .}\t\r  ⇒\t\r  ¬r1c9\t\r  (F\t\r  eliminated)\t\r  \nwhip[4]:\t\r  r5{c9\t\r  c4}\t\r  –\t\r  r4{c8\t\r  c6}\t\r  –\t\r  r1{c6\t\r  c8}\t\r  –\t\r  r8{c1\t\r  .}\t\r  ⇒\t\r  ¬r2c9\t\r  (G\t\r  eliminated)\t\r  \nwhip[4]:\t\r  r5{c9\t\r  c4}\t\r  –\t\r  r1{c4\t\r  c6}\t\r  –\t\r  r4{c6\t\r  c8}\t\r  –\t\r  r7{c8\t\r  .}\t\r  ⇒\t\r  ¬r2c9\t\r  (H\t\r  eliminated)\t\r  \nsingle\t\r  in\t\r  c9:\t\r  r5c9;\t\r  single\t\r  in\t\r  c4:\t\r  r1c4;\t\r  single\t\r  in\t\r  r4:\t\r  r4c6;\t\r  single\t\r  in\t\r  r2:\t\r  r2c1;\t\r  single\t\r  in\t\r  r8:\t\r  r8c5;\t\r  single\t\r  in\t\r  \nr7:\t\r  r7c8.\t\r  \t\r  \nSolution\t\r  found\t\r  in\t\r  W4\t\r  or\t\r  gW3.\t\r  \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \nr1 \n° \n° \n° \n+ \n° \n \n° \n \n F \nr2 \n+ \n° \n° \n° \n  ° \n° \n \nH \nr3 \n° \n° * \n° \n° \n° \n° \n° \n \n° \nr4   \n° \n° \n° \nB \n+ \n° \n \n D \nr5 \n° \n \n° \n° \n \n° \nA \n° \n C \n+ \nr6 \n° * \n° \n° \n° \n° \n° \n° \n° \nr7  °  ° \n° \nG \n° \n \n° \n+ \n° \nr8 \n \n° \n° \n° \n+ \n° \n° \n° \nE \nr9 \n° \n° \n° \n° \n° \n° * \n° \n° \nFigure 5.11. A 9-Queens instance, with another kind of whip[1] \n5.11.5. An instance of 8-Queens with two solutions \nWhips can also be used to produce a readable proof that an instance has two (or \nmore) solutions. For the 8-Queens CSP, consider the instance displayed in Figure \n5.12, with 3 queens already given (in positions r2c7, r3c5 and r4c8). Although it has \nthe same solution as the example in section 5.11.2, we shall prove that it has two \nsolutions. \n \n*****\t\r  Manual\t\r  solution\t\r  *****\t\r  \n;;; The first two whips[1] display an interaction of a row and a diagonal in a column \nat the shortest possible distance from the target: \nwhip[1]:\t\r  c3{r7\t\r  .}\t\r  ⇒\t\r  ¬r7c4\t\r  (A\t\r  eliminated)\t\r  \nwhip[1]:\t\r  c3{r8\t\r  .}\t\r  ⇒\t\r  ¬r8c2\t\r  (B\t\r  eliminated)\t\r  \n \n\n5. Bivalue-chains, whips and braids      \n149 \n \nc1 \nc2 \nc3 c4 \nc5 c6 c7 c8 \nr1 \n \n \n° \nE \n° \n° \n° \n° \nr2 \n° \n° \n° \n° \n° \n° * \n° \nr3 \n° \n° \n° \n° * \n° \n° \n° \nr4 \n° \n° \n° \n° \n° \n° \n° * \nr5 \n \n \n° \n° \n° \nC \n° \n° \nr6 \nD \n° \n° \n+ \n° \n° \n° \n° \nr7 \n° \n° \n \nA \n° \n+ \n° \n° \nr8 \n° \nB \n+ \n° \n° \n \n° \n° \nFigure 5.12. An instance of 8-Queens with two solutions, partially solved by whips \n;;; The third whip[1], in the grey cells, appearing after B has been eliminated, has an \ninteraction of a column and a diagonal in a row at a longer distance from the target: \nwhip[1]:\t\r  r8{c6\t\r  .}\t\r  ⇒\t\r  ¬r5c6\t\r  (C\t\r  eliminated)\t\r  \n \n;;; The fourth whip[1], appearing after C has been eliminated, has an interaction of a \ncolumn and a diagonal in a row, again at the shortest possible distance from the \ntarget: \nwhip[1]:\t\r  r5{c1\t\r  .}\t\r  ⇒\t\r  ¬r6c1\t\r  (D\t\r  eliminated)\t\r  \nwhip[2]:\t\r  c1{r1\t\r  r5}\t\r  –\t\r  c2{r5\t\r  .}\t\r  ⇒\t\r  ¬r1c4\t\r  (E\t\r  eliminated)\t\r  \nsingle\t\r  in\t\r  r6\t\r  ⇒\t\r  r6c4\t\r  ;\t\r  single\t\r  in\t\r  c3\t\r  ⇒\t\r  r8c3\t\r  ;\t\r  single\t\r  in\t\r  r7\t\r  ⇒\t\r  r7c6\t\r  \t\r  \nAt this point, the resolution path cannot go further because there appears to be \ntwo obvious solutions: r1c2+r5c1 (as in section 5.11.1) and r1c1+r5c2; but we have \nshown that whips can be used to lead from a situation where this was not obvious to \none where it is. \n5.11.6. An instance of 6-Queens with no solution \nAs shown in section 5.10.5, whips or braids can also provide a readable proof \nthat an instance has no solution. Of course, this is not specific to Sudoku but it is \ntrue for any CSP. And the proof that an instance has no solution can be as hard as \nfinding a solution when there is one. It can also be very simple, as shown below. \nConsider Figure 5.13, an instance of 6-Queens, with only two queens given in \ncells r4c5 and r5c2. Although these data show no direct contradiction with the \n\n150 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nconstraints, a unique elimination by a whip[3] and two Singles are enough to make \nit obvious, without trying all the remaining possibilities, that there can be no \nsolution. \n \n \n \nc1 \nc2 \nc3 c4 \nc5 \nc6 \nr1 \n \n° \n \n+ \n° \n° \nr2 \n \n° \n° \n \n° \n \nr3 \nA \n° \n+ \n° \n° \n° \nr4 \n° \n° \n° \n° * \n° \nr5 \n° * \n° \n° \n° \n° \nr6 \n° \n° \n° \n \n° \n \nFigure 5.13. An instance of 6-Queens with no solution; proven by a whip[3] \n*****\t\r  Manual\t\r  solution\t\r  \t\r  *****\t\r  \nwhip[3]:\t\r  r6{c4\t\r  c6}\t\r  –\t\r  r2{c6\t\r  c4}\t\r  –\t\r  r1{c4\t\r  .}\t\r  ⇒\t\r  ¬r3c1\t\r  (A\t\r  eliminated)\t\r  \nsingle\t\r  in\t\r  r3\t\r  ⇒\t\r  r3c3\t\r  \nsingle\t\r  in\t\r  r1\t\r  ⇒\t\r  r1c4\t\r  \nThis\t\r  puzzle\t\r  has\t\r  no\t\r  solution:\t\r  no\t\r  value\t\r  for\t\r  Xr6\t\r  \n5.11.7. The absence of whip[1] does not preclude the existence of longer whips \nThe non-existence of whips of length 1 in a CSP does not preclude the existence \nof longer whips. Figure 5.14 gives an example of a partial whip[3] in LatinSquare. \nIn this Figure, black horizontal lines represent CSP variables (V1, V2, V3); they \nare supposed to have candidates only at their extremities (Lk and Rk candidates) or at \ntheir meeting points with arrows (z- and t- candidates). Dark grey vertical arrows \nrepresent links from Z to L1 or from Rk to Lk+1. Light grey arrows represent links to \nz- or t- candidates. Here, arrows represent only the flow of reasoning in the proof of \nthe whip rule (by themselves, links are not orientated). \nA particular interpretation of Figure 5.14 can be obtained by considering only \nlabels (n, r, c) with a fixed Number n and by interpreting horizontal lines as rows \nand vertical lines as columns. Similarly, one can fix Row r or Column c. But these \nrestricted visions of the symbolic representation, limited to rc-space (or cn-space, or \nrn-space), do not take into account the 3D symmetries of this CSP. \n \n\n5. Bivalue-chains, whips and braids      \n151 \n \nFigure 5.14. A symbolic representation of a partial whip[3] in LatinSquare. \nSimilar symbolic representations, for whips in a general CSP (Figure 11.1) and \nfor generalised whips (Figures 9.1 and 11.2) can be seen in chapters 9 and 11. \n5.11.8. Defining SudoQueens \nGiven an integer n that is a square (n = m2) and starting from the n-Queens CSP, \none can define the n-SudoQueens CSP by the additional constraint that there should \nnot be two queens in the same m×m block, where blocks are defined as in Sudoku. \nIn this new CSP, we can use the same two coordinate systems as in Sudoku, with \nthe same relations between them. Because it implies that there must be one queen in \neach square, the new constraint can be taken care of by n new CSP-Variables Xb1, \n…, Xbn, all with domain {s1, …., sn} and/or by a new CSP-Variable-Type: b.  \nIt is easy to check that n-SudoQueens has no instances for n=2 or n=4 (i.e. m=1 \nor m=2). But, as shown by the example in Figure 5.15, it has for n ≥ 9 (m ≥ 3). \nIn n-SudoQueens, one can find two types of whips[1]: the same as in n-Queens \nand the same as in Sudoku[n]. \n \n \n \nV1 \nL1 \nR1 \nZ \nL2 \nR2 \nV2 \nL3 \nR3 \nV3 \n\n152 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \nr1 * \n° \n° \n° \n° \n° \n° \n° \n° \nr2 \n° \n° \n° \n° \n° \n° \n° * \n° \nr3 \n° \n° \n° \n° * \n° \n° \n° \n° \nr4 \n° \n° * \n° \n° \n° \n° \n° \n° \nr5 \n° \n° \n° \n° \n° * \n° \n° \n° \nr6 \n° \n° \n° \n° \n° \n° \n° \n° * \nr7 \n°  * \n° \n° \n° \n° \n° \n° \n° \nr8 \n° \n° \n° \n* \n° \n° \n° \n° \n° \nr9 \n° \n° \n° \n° \n° \n° \n* \n° \n° \nFigure 5.15. A complete grid for 9-SudoQueens \n\n \n6. Unbiased statistics and whip classification results \nIn the previous chapter, we gave a pure logic definition of the W and B ratings of \nan instance P, as the smallest n (0≤n≤∞) such that P can be solved by resolution \ntheory Wn [respectively Bn]. Because these theories involve longer and longer whips \n[resp. braids] as n increases, it is a priori meaningful for any CSP to chose W(P) \n[resp. B(P)] as a measure of complexity for P. In the Sudoku case, there are \nadditional justifications, based on results2 obtained with our SudoRules solver: \n– W [resp. B] is strongly correlated with the logarithm of the number3 of partial \nwhips [resp. braids] one must check before finding the solution when the “simplest \nfirst” strategy is adopted4;  \n– for W ≤ 9,5 W [resp. B] is strongly correlated with SER, the Sudoku Explainer \nrating [Juillerat www]; this rating (version 1.2.1) is widely used in the Sudoku \ncommunity in spite of its many shortcomings6; it often gives some rough idea of the \ndifficulty of a puzzle for a human player (at least for SER ≤ 9.3);  \n– W is also well correlated with less popular ratings (see our website). \n \nIt should however be noted that a rating based on the hardest step (instead of e.g. \nthe whole resolution path) can only be meaningful statistically. (This applies also to \nSER.) In particular, there remains much variance in the number of partial chains \n                               \n2 Details and additional correlation results can be found on our website. \n3 Although this number is not completely independent of implementation (it depends in part \non the resolution path chosen), it is statistically meaningful. \n4 In this situation, W is also strongly correlated with the logarithm of the resolution time, but \nthis is mainly a consequence of the previous correlation (and computation times are too \nimplementation-dependent to be good indicators). \n5 For larger values of W, the number of available instances in our unbiased samples is too \nsmall to compute meaningful correlations. \n6 SER is defined only by non-documented Java code, it is not invariant under logical \nsymmetries and it is based neither on any general theory nor (for the most part of it) on any \npopular application-specific resolution techniques. Indeed, the main part of SER is based on \nthe number of inference steps (which is implementation dependent) in a resolution procedure \nmore or less equivalent to T&E(1) complemented by T&E(2) when T&E(1) is not enough; it \nis easy to see that this cannot be given by a purely logical definition (because a logical theory \ncan put no limit on how many applications of its axioms may be used to prove a theorem). \nBut it is free and it is the “less worse” of the currently available ratings. \n\n154 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nneeded to solve Sudoku puzzles with W(P) = n, n fixed. Based on the thousands of \nresolution paths we observed in detail, one explanation is that a puzzle P with \nW(P) = n can be hard to solve with whips [or any other type of pattern: braids, g-\nwhips, …] for two opposed reasons: either because it does not have enough smaller \nwhips [patterns of this type] or because it has too many useless ones. \nThe results7 reported in this chapter required several months of (2.66 GHz) CPU \ntime (for the generation of unbiased samples and for the computation of ratings). \nThey will show that: \n– building unbiased uncorrelated samples of minimal instances of a (fixed size) \nCSP and obtaining unbiased statistics can be very hard; \n– (loopless) whips have a very strong resolution power, at least for Sudoku; the \nten million puzzles we have produced using different kinds of random generators \ncould all be solved by whips of relatively short length: 93.9% by whips of length no \nmore than 4, 99.9% by whips of length no more than 7 and 99.99% by whips of \nlength no more than 9 – see Table 6.4.  \nOnly the main results of direct relevance to the topic of this book are provided \nhere; many additional statistical results for Sudoku can be found on our website. \n \nAlthough we can only present such results in the specific context of the Sudoku \nCSP, the sample generation methods described here (bottom-up, top-down and \ncontrolled-bias) could be extended to many CSPs. The specific P(n+1)/P(n) formula \nproven in section 6.2.2 for the controlled-bias generator will not hold in any CSP, \nbut the same approach can in many cases help understand the existence of a very \nstrong bias in the samples with respect to the number of clues (see the end of chapter \n14 for an adaptation to the Futoshiki CSP). Probably, it can also help explain the \nwell-known fact that, for many CSPs, it is very difficult to generate the hardest \ninstances. \nThe number of clues may not be a criterion of much interest in itself, but the \nexistence of such a strong bias in it suggests the possibility of a bias with respect to \nmany other different classification criteria, even if they are weakly correlated with \nthe number of clues: in the Sudoku case, preliminary analyses showed that the \ncorrelation coefficient between the W rating and the number of clues is only 0.12, \nbut Tables 6.3 and 6.4 below show that the bias in the generators has nevertheless a \nvery noticeable impact on the classification of instances according to the W rating.  \nEven in the very structured and apparently simple Sudoku domain, none of this \nwas clear before the present analysis. In particular, as the results in HLS were based \non a top-down generator, they were biased. \n                               \n7 We first published them on the late Sudoku Player’s Forum (July to October 2009) and then \nin [Berthier 2009]. \n\n6. Unbiased statistics and whip classification results      \n155 \nAcknowledgements: Thanks are due to “Eleven” for implementing the first \nmodification (suexg-cb) of a well-known top-down generator (suexg, written in C) \nto make it compliant with the specification of controlled-bias defined below, and \nthen several faster versions of it; this allowed to turn the whole idea into reality. \nThanks to Paul Isaacson for adapting Brian Turner’s fast solver so that it could be \nused instead of that of suexg. Thanks to Glenn Fowler (alias gsf) for providing an a \npriori unbiased source of complete grids: the full (compressed) collection of their \nequivalence classes together with a fast decompressor. Thanks also, for discussions \nand/or various contributions, to Allan Barker, Coloin, David P. Bird, Mike Metcalf, \nRed Ed (who was first to suggest the existence of a bias in the current generators). \nThe informal collaboration that the controlled-bias idea sprouted on the late Sudoku \nPlayer's Forum was very productive: due to several independent optimisations, the \nlast version of suexg-cb (which does not retain much of the original suexg code) is \n200 times faster than the first. \nAll the generators mentioned below are available on our website. \n6.1 Classical top-down and bottom-up generators \nThere is a very simple procedure for generating an unbiased sample of n \nuncorrelated minimal Sudoku puzzles: \n \n1) set p = 0 and list = (); \n2) if p = n then return list; \n3) randomly choose a complete grid P; \n4) for each cell in P, delete its value with probability 0.5, thus \nobtaining a puzzle Q; \n5) if Q is minimal then add Q to list, set p = p+1 and goto 2 else \ngoto 3. \nUnfortunately, the probability of getting a valid puzzle this way is infinitesimal \nfor each complete grid tried as a starting point (see last column of Table 6.2, which \nshould be combined for each n with the probability of obtaining 81-n deletions). \nOne has no choice but rely on more efficient generators. Before going further, let us \nintroduce the two classical algorithms that have been widely used in the Sudoku \ncommunity for generating minimal puzzles: bottom-up and top-down. \nA standard bottom-up generator works as follows to produce n minimal puzzles: \n \n1) set p = 0 and list = (); \n2) if p = n then return list; \n3a) set p = p+1 and start from an empty grid P; \n3b) in P, randomly choose an undecided cell and a value for it, thus \ngetting a puzzle Q with one more clue than P; \n3c) if Q is minimal, then add it to list and goto 2; \n3d) if Q has several solutions, then set P = Q and goto 3b; \n\n156 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n3e) if Q has no solution, then goto 3b (i.e. backtrack: forget Q and \ntry another cell from P).  \nA standard top-down generator works as follows to produce n minimal puzzles: \n \n1) set p = 0 and list = (); \n2) if p = n then return list; \n3a) set p = p+1 and randomly choose a complete grid P; \n3b) randomly choose one clue from P and delete it, thus obtaining a \npuzzle Q; \n3c) if Q still has only one solution but is not minimal, set P=Q and \ngoto 3b (for trying to delete one more clue); \n3d) if Q is minimal, then add it to list and goto 2; \n3e) otherwise, i.e. if Q has several solutions, then goto 3b (i.e. \nreinsert the clue just deleted and try deleting another clue from P). \nNotice that, in both cases, a minimal puzzle is produced from each complete \nrandom grid. Backtracking (i.e. clause 3e in both cases) makes any formal analysis \nof these algorithms very difficult. However, at first sight, it seems that it causes the \ngenerator to look for puzzles with fewer clues (this intuition will be confirmed in \nsection 6.3). It may thus be suspected of introducing a strong, uncontrolled bias with \nrespect to the number of clues, which, in turn, may induce a bias with respect to \nother properties of the collection of puzzles generated. \n6.2 A controlled-bias generator \nNo unbiased generator of uncorrelated minimal puzzles is currently known and \nbuilding such a generator with reasonable computation times seems out of reach. \nWe therefore decided to proceed differently: taking the generators (more or less) as \nthey are and applying corrections for the bias, if we can estimate it. \nThis idea was inspired by an article we read in a newspaper about what is done \nin digital cameras: instead of complex optimisations of the lenses to reduce typical \nanomalies (such as chromatic aberration, purple fringing, barrel or pincushion \ndistortion…) – optimisations that lead to large and expensive lenses –, some camera \nmakers now accept a small amount of these in the lenses and they take advantage of \nthe huge computational power available in the processors to correct the result in real \ntime with dedicated software before recording the photo. \nThe main question was then: can we determine the bias of the classical top-down \nor bottom-up generators? The answer was negative. But there appeared to be a \nmedium way between “improving the lens to make it perfect” and “correcting its \nsmall defects by software”: we devised a modification of the top-down generator \nthat allows a precise mathematical computation of the bias. \n\n6. Unbiased statistics and whip classification results      \n157 \n6.2.1. Definition of the controlled-bias generator \nConsider the following, modified top-down generator, the controlled-bias \ngenerator for producing n minimal uncorrelated puzzles: \n \n1) set p = 0 and list = (); \n2) if p = n then return list; \n3a) randomly choose a complete grid P; \n3b) randomly choose one clue from P and delete it, thus obtaining a \npuzzle Q; \n3c) if Q still has only one solution but is not minimal, set P=Q and \ngoto 3b (for trying to delete one more clue); \n3d) if Q is minimal, then add it to list, set p = p+1 and goto 2; \n3e) otherwise, i.e. if Q has several solutions, then goto 3a (i.e. \nforget everything about P and restart with another complete grid). \nThe only difference with the top-down algorithm is in clause 3e: if a multi-\nsolution puzzle is encountered, instead of backtracking to the previous state, the \ncurrent complete grid is merely discarded and the search for a minimal puzzle is \nrestarted with another complete grid.  \nNotice that, contrary to the standard bottom-up or top-down generators, which \nproduce one minimal puzzle per complete grid, the controlled-bias generator will \ngenerally use several complete grids before it outputs a minimal puzzle. The \nefficiency question is: how many? Experimentations show that many complete grids \n(approximately 257,514 in the mean) are necessary before a minimal puzzle is \nreached. But this question is about the efficiency of the generator, it is not a \nconceptual problem. \nThe controlled-bias generator has the same output and will therefore produce \nminimal puzzles according to the same probability distribution as its following \n“virtual” counterpart: \n \n1) set p = 0 and list = (); \n2) if p = n then return list; \n3a) randomly choose a complete grid P; \n3b) if P has no more clue, then goto 2 else randomly choose one clue \nfrom P and delete it, thus obtaining a puzzle Q; \n3c) if Q is minimal, add Q to list, set P=Q, set p=p+1 and goto 3b; \n3d) otherwise, set P=Q and goto 3b. \nThe only difference with the controlled-bias generator is that, once it has found a \nminimal or a multi-solution puzzle, instead of exiting, this virtual generator \ncontinues along a useless path until it reaches the empty grid. \nBut this virtual generator is interesting theoretically because it works similarly to \nthe random uniform search defined in the next section and according to the same \n\n158 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ntransition probabilities; and it outputs minimal puzzles according to the probability \nPr on the set B of minimal puzzles defined below. \n6.2.2. Analysis of the controlled-bias generator \nWe now build our formal probabilistic model of the controlled-bias generator. \nLet us first introduce the notion of a doubly indexed puzzle. We consider only \n(single or multi solution) consistent puzzles P. The double index of a doubly \nindexed puzzle P has a clear intuitive meaning: the first index is one of its solution \ngrids and the second index is a sequence (notice: not a set, but a sequence, i.e. an \nordered set) of clue deletions leading from this complete grid to P. In a sense, the \ndouble index keeps track of the full generation process. \nGiven a doubly indexed puzzle Q, there is an underlying singly-indexed puzzle: \nthe ordinary puzzle obtained by forgetting the second index of Q, i.e. by \nremembering the solution grid from which it came and by forgetting the order of the \ndeletions leading from this solution to Q. Given a doubly indexed puzzle Q, there is \nalso a non indexed puzzle, obtained by forgetting the two indices. \nFor a single solution doubly indexed puzzle, the first index is useless as it can be \ncomputed from the puzzle; in this case singly indexed and non-indexed are \nequivalent. This is true in particular for minimal puzzles. In terms of the generator, \nit could equivalently output minimal puzzles or couples (minimal-puzzle, solution). \nConsider now the following layered structure (a forest, in the graph-theoretic \nsense, i.e. a set of disjoint trees, with branches pointing downwards), the nodes \nbeing (single or multi solution) doubly indexed puzzles: \n– floor 81 : the N different complete solution grids (considered as puzzles), each \nindexed by itself and by the empty sequence; notice that all the puzzles at floor 81 \nhave 81 clues; \n– recursive step: given floor n+1, where each doubly indexed puzzle has n+1 \nclues and is indexed by a complete grid that solves it and by a sequence of length \n81-(n+1), build floor n as follows: \neach doubly indexed puzzle Q at floor n+1 sprouts n+1 branches; for each clue C in \nQ, there is a branch leading to a doubly indexed puzzle R at floor n: R is obtained \nfrom Q by removing clue C; its first index is identical to that of Q and its second \nindex is the (81-n)-element sequence obtained by appending C to the end of the \nsecond index of Q; notice that all the doubly indexed puzzles at floor n have n clues \nand the length of their second index is equal to 1 + (81-(n+1)) = 81-n. \nIt is easy to see that, at floor n, each doubly indexed puzzle has an underlying \nsingly indexed puzzle identical to that of (81 - n)! doubly indexed puzzles with the \nsame first index (i.e. the same solution grid) at the same floor (including itself). \n\n6. Unbiased statistics and whip classification results      \n159 \nThis is equivalent to saying that, at any floor n < 81, any singly indexed puzzle \nQ can be reached by exactly (81 - n)! different paths from the top (all of which start \nnecessarily from the complete grid defined as the first index of Q). These paths are \nthe (81 - n)! different ways of deleting one by one its missing 81-n clues from its \nsolution grid. \nNotice that this would not be true for non-indexed puzzles that have multiple \nsolutions. This is where the first index is useful. \nLet N be the number of complete grids (N is known to be close to 6.67x1021, but \nthis is pointless here). At each floor n, there are N × 81! / n! doubly indexed puzzles \nand N × 81! / (81-n)! / n! singly indexed puzzles. For each n, there is therefore a \nuniform probability P(n) = 1/N × 1/81! × (81-n)! × n! that a singly indexed puzzle Q \nat floor n is reached by a random (uniform) search starting from one of the complete \ngrids. What is important here is the ratio: P(n+1) / P(n) = (n + 1) / (81 - n), giving \nthe relative probability of being reached by the generation process, for two singly \nindexed puzzles with respectively n+1 and n clues. \nThe above formula is valid globally if we start from all the complete grids, as \nabove, but it is also valid for all the single solution puzzles if we start from a single \ncomplete grid (just forget N in the proof above). (Notice however that it is not valid \nif we start from a subgrid instead of a complete grid.) \nNow, call B the set of (non indexed) minimal puzzles. On B, all the puzzles are \nminimal. Any puzzle strictly above B has redundant clues and a single solution. \nNotice that, for all the puzzles on B and above B, singly indexed and non-indexed \npuzzles are in one-to-one correspondence. Therefore, the relative probability of two \nminimal puzzles is given by the above formula. \nOn the set B of minimal puzzles, there is thus a probability Pr naturally induced \nby the different Pn's and it is the probability that a minimal puzzle Q is output by \nour controlled-bias generator. It depends only on the number of clues and it is \ndefined by Pr(Q) = P(n) if Q has n clues. \nThe most important here is that, by construction of Pr on B (a construction \nwhich models the workings of the virtual controlled bias generator), the fundamental \nrelation: Pr(n+1)/Pr(n) = (n+1)/(81-n) holds for any two minimal puzzles, with \nrespectively n+1 and n clues. \nFor n < 41, this relation means that a minimal puzzle with n clues is more likely \nto be reached from the top than a minimal puzzle with n+1 clues. More precisely, \nwe have: Pr(40) = Pr(41), Pr(39) = 42/40×Pr(40), Pr(38) = 43/39×Pr(39). Repeated \napplication of the formula gives Pr(24) = 61.11×Pr(30): a puzzle with 24 clues has \nabout 61 times more chances of being output by the controlled-bias generator than \na puzzle with 30 clues. This is indeed a very strong bias. \n\n160 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nA non-biased generator would give the same probability to all the minimal \npuzzles. The above analysis shows that the controlled bias generator: \n- is unbiased when restricted (by filtering its output) to n-clue puzzles, for any \nfixed n, \n- is strongly biased towards puzzles with fewer clues, \n- this bias is well known and given by Pr(n+1) / Pr(n) = (n + 1) / (81 – n), \n- the puzzles produced are uncorrelated, provided that the complete grids are \nchosen in an uncorrelated way. \nAs we know precisely the bias with respect to uniformity, we can correct it \neasily by applying correction factors cf(n) to the probabilities on B. Only the \nrelative values of the cf(n) is important: they satisfy cf(n+1) / cf(n) = (81-n)/(n+1). \nMathematically, after normalisation, cf is just the relative density of the uniform \ndistribution on B with respect to the probability distribution Pr. \n This analysis also shows that a classical top-down generator is still more \nstrongly biased towards puzzles with fewer clues because, instead of discarding the \ncurrent path when it meets a multi-solution puzzle, it backtracks to the previous \nfloor and tries again to go deeper. \n6.2.3. Computing unbiased means and standard deviations using a controlled-bias \ngenerator \nIn practice, how can one compute unbiased statistics of minimal puzzles based \non a (large) sample produced by a controlled-bias generator? Consider any random \nvariable X defined (at least) on the set of minimal puzzles. Define: on(n) = the \nnumber of n-clue puzzles in the sample, E(X, n) = the mean value of X for n-clue \npuzzles in the sample and σ(X, n) = the standard deviation of X for n-clue puzzles in \nthe sample.  \nThe mean and standard-deviation of X on a sample are classically computed as:  \nmean(X) = ∑n [E(X, n) × on(n)] / ∑n on(n) \nσ(X) = √{∑n [σ(X, n)2 × on(n)] / ∑n [on(n)]}. \nThe unbiased mean and standard deviation of X must then be estimated as (this \nis merely the mean and standard deviation for a weighted average): \nunbiased-mean(X) = ∑n [E(X, n) × on(n) × cf(n)] / ∑n [on(n) × cf(n)]; \nunbiased-σ(X) = √{∑n [σ(X, n)2 × on(n) × cf(n)] / ∑n [on(n) × cf(n)]}. \nThese formulæ show that the cf(n) sequence needs be defined only modulo a \nmultiplicative factor. It is convenient to choose cf(26) = 1. This gives the following \nsequence of correction factors (in the range n = 19-31, which includes all the \npuzzles of all the samples we have obtained with all the random generators \nconsidered here): \n\n6. Unbiased statistics and whip classification results      \n161 \n[0.00134 0.00415 0.0120 0.0329 0.0843 0.204 0.464 1 2.037 3.929 7.180 12.445 \n20.474] \nIt may be shocking to consider that 30-clue puzzles in a sample must be given a \nweight 61 times greater than 24-clue puzzles, but it is a fact. As a result of this \nstrong bias of the controlled-bias generator (strong but known and much smaller \nthan the other generators), unbiased statistics for the mean number of clues of \nminimal puzzles (and any variable correlated with this number) must rely on \nextremely large samples with sufficiently many 29-clue and 30-clue puzzles. \n6.3. The real distribution of clues and the number of minimal puzzles \nThe above formulæ show that the number-of-clue distribution of the controlled-\nbias generator is the key for computing unbiased statistics. \n6.3.1. The number-of-clue distribution as a function of the generator \n \nGenerator → \nsample size → \n   ↓ #clues \nbottom-up \n1,000,000 \n% (sample) \ntop-down \n1,000,000 \n% (sample) \nctr-bias \n5,926,343 \n% (sample) \nreal \n \n% (estimated) \n20 \n0.028 \n0.0044 \n0.0 \n0.0 \n21 \n0.856 \n0.24 \n0.0030 \n0.000034 \n22 \n8.24 \n3.45 \n0.11 \n0.0034 \n23 \n27.67 \n17.25 \n1.87 \n0.149 \n24 \n36.38 \n34.23 \n11.85 \n2.28 \n25 \n20.59 \n29.78 \n30.59 \n13.42 \n26 \n5.45 \n12.21 \n33.82 \n31.94 \n27 \n0.72 \n2.53 \n17.01 \n32.74 \n28 \n0.054 \n0.27 \n4.17 \n15.48 \n29 \n0.0024 \n0.017 \n0.52 \n3.56 \n30 \n0 \n0.001 \n0.035 \n0.41 \n31 \n0 \n0 \n0.0012 \n0.022 \nmean \n23.87 \n24.38 \n25.667 \n26.577 \nstd-dev \n1.08 \n1.12 \n1.116 \n1.116 \nTable 6.1: The experimental number-of-clue distribution (%) for the bottom-up, top-down and \ncontrolled-bias generators and the estimated real distribution. \nAfter applying the above formulæ to estimate the real number-of-clue \ndistribution, Table 6.1 shows that the bias with respect to the number of clues is \nvery strong in all the generators we have considered; moreover, controlled-bias, top-\n\n162 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ndown and bottom-up are increasingly biased towards puzzles with fewer clues. \nGraphically, the estimated number-of-clue distribution is very close to Gaussian. \nTable 6.1 partially explains Tables 6.3 and 6.4 in section 6.4. More precisely, it \nexplains why there can be a noticeable W rating bias in the samples produced by the \nbottom-up and top-down generators, in spite of the weak correlation coefficient \nbetween the number of clues and the W rating of a puzzle: the bias with respect to \nthe number of clues is very strong in these generators. \n6.3.2. Collateral result: the number of minimal puzzles \nThe number of minimal Sudoku puzzles has been a longstanding open question. \nWe can now provide precise estimates for the distribution of the mean number of n-\nclue minimal puzzles per complete grid (mean and standard deviation in the second \nand third columns of Table 6.2).  \n \nnumber  \nof \nclues \nnumber of n-clue \nminimal puzzles \nper complete grid: \nmean \nnumber of n-clue \nminimal puzzles \nper complete grid: \nrelative error \n(~ 1 std dev) \nmean number  \nof tries \n20 \n6.152×106 \n70.7% \n7.6306×1011 \n21 \n1.4654×109 \n7.81% \n9.3056×109 \n22 \n1.6208×1012 \n1.23% \n2.2946×108 \n23 \n6.8827×1012 \n0.30% \n1.3861×107 \n24 \n1.0637×1014 \n0.12% \n2.1675×106 \n25 \n6.2495×1014 \n0.074% \n8.4111×105 \n26 \n1.4855×1015 \n0.071% \n7.6216×105 \n27 \n1.5228×1015 \n0.10% \n1.5145×106 \n28 \n7.2063×1014 \n0.20% \n6.1721×106 \n29 \n1.6751×1014 \n0.56% \n4.8527×107 \n30 \n1.9277×1013 \n2.2% \n7.3090×108 \n31 \n1.1240×1012 \n11.6% \n2.0623×1010 \n32 \n4.7465×1010 \n70.7% \n7.6306×1011 \nTotal \n4.6655×1015 \n0.065% \n \nTable 6.2: Mean number of n-clue minimal puzzles per complete grid. Last column: inverse of \nthe proportion of n-clue minimal puzzles among n-clue sub-grids \nAnother number of interest (e.g. for the first naïve algorithm given in section \n6.1) is the mean number of tries one must do to find an n-clue minimal puzzle by \n\n6. Unbiased statistics and whip classification results      \n163 \nrandomly deleting 81-n clues from a complete grid. It is the inverse of the \nproportion of n-clue minimal puzzles among n-clue sub-grids, given by the last \ncolumn in Table 6.2. \nOne can also get: \n– after multiplying the total mean by the number of complete grids (known to be \n6,670,903,752,021,072,936,960 [Felgenhauer et al. 2005]), the total number of \nminimal Sudoku puzzles: 3.1055×1037, with 0.065% relative error; \n– after multiplying the total mean by the number of non isomorphic complete \ngrids (known to be 5,472,730,538 [Russell et al. 2006]), the total number of non \nisomorphic minimal Sudoku puzzles: 2.5477×1025, also with 0.065% relative \nerror. \n6.4. The W-rating distribution as a function of the generator  \nWe can now apply the bias correction formulæ of section 6.2.3 to estimate the W \nrating distribution. Table 6.3 shows that the mean W rating of the minimal puzzles \nin a sample depends noticeably on the type of generator used to produce them and \nthat all the generators give rise to mean complexity below the real values. \n \nGenerator \nsample size \nbottom-up \n10,000 \ntop-down \n50,000 \nctr-bias \n5,926,343 \nreal \nW rating : mean \nW rating : std dev \n1.80 \n1.24 \n1.94 \n1.29 \n2.22 \n1.35 \n2.45 \n1.39 \nmax W found in sample \n11 \n13 \n16 \n \nTable 6.3: The W-rating means and standard deviations for bottom-up, top-down and \ncontrolled-bias generators, compared with the estimated real values. \nThe mean W rating gives only a very pale idea of what really happens, because \nthe first two levels, W0 and W1, concentrate a large part of the distribution, for any \nof the generators. With the full distributions, Table 6.4 provides more detail about \nthe bias in the W rating for the three kinds of generators (with the same sample sizes \nas in Table 6.3). All these distributions have the same two modes as the real \ndistribution, at levels W0 and W3. But, when one moves from bottom-up to top-\ndown to controlled-bias to real, the mass of the distribution moves progressively to \nthe right. This displacement towards higher complexity occurs mainly at the first W \nlevels, after which it is only slight, but still visible.  \n\n164 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nMore detailed analyses (available on our website), in particular with skewness \nand kurtosis, seem to show that there is a (non absolute) barrier of complexity, such \nthat, when we consider n-clue puzzles and when the number n of clues increases: \n- the n-clue mean W rating increases; \n- the proportion of puzzles with W rating away from the n-clue mean increases; \nbut: \n- the proportion of puzzles with W rating far below the n-clue mean increases; \n- the proportion of puzzles with W rating far above the n-clue mean decreases. \nGraphically, the W rating distribution of n-clue puzzles looks like a wave. When \nn increases, the wave moves to the right, with a longer tail on its left and a steeper \nfront on its right. The same remarks apply if the W rating is replaced by the SER. \n \nGenerator → \nW-rating ↓ \nbottom-up \n% (sample) \ntop-down \n% (sample) \nctr-bias \n% (sample) \nreal \n% (estimated) \n0 (first mode →) \n46.27 \n41.76 \n35.08 \n29.17 \n1 \n13.32 \n12.06 \n9.82 \n8.44 \n2 \n12.36 \n13.84 \n13.05 \n12.61 \n3 (second mode →) \n15.17 \n16.86 \n20.03 \n22.26 \n4 \n10.18 \n12.29 \n17.37 \n21.39 \n5 \n1.98 \n2.42 \n3.56 \n4.67 \n6 \n0.49 \n0.55 \n0.79 \n1.07 \n7 \n0.19 \n0.15 \n0.21 \n0.29 \n8 \n0.020 \n0.047 \n0.055 \n0.072 \n9 \n0.010 \n0.013 \n0.015 \n0.020 \n10 \n0* \n3.8 10-3 \n4.4 10-3 \n5.5 10-3 \n11 \n0.01* \n1.5 10-3 \n1.2 10-3 \n1.5 10-3 \n12-16 \n0* \n1.1 10-3 \n4.3 10-4 \n5.4 10-4 \nTable 6.4: The W-rating distribution (in %) for bottom-up, top-down and controlled-bias \ngenerators, compared with the estimated real distribution. A * sign on a result means that the \nnumber of puzzles justifying it is too small to allow a precise value. \n6.5. Stability of the classification results \n6.5.1. Insensivity of the controlled-bias generator wrt the source of complete grids  \nThere remains a final question: do the above results depend on the source of \ncomplete grids? Until now, we have done as if this was not a problem. Nevertheless, \nproducing the unbiased and uncorrelated collections of complete grids, necessary in \nthe first step of all the puzzle generators, is all but obvious. It is known that there are \n6.67x1021 complete grids; it is therefore impossible to have a generator scan them \n\n6. Unbiased statistics and whip classification results      \n165 \nall. Up to isomorphisms, there are “only” 5.47x109 complete grids, but this remains \na very large number and storing them in uncompressed format would require about \nhalf a terabyte. \nIn 2009, Glenn Fowler provided both a collection of all the (equivalence classes \nof) complete grids in a compressed format (only 6 gigabytes) and a real time \ndecompressor. All the results reported above for the controlled bias generator were \nobtained with this a priori unbiased source of complete grids. (Notice that, due to \nthe normalisation and compression of grids, it is unbiased only when one does full \nscans of its grids, whence the queer sizes of some of our samples of controlled-bias \nminimal puzzles). \nBefore this, all the generators we tried had a first phase consisting of creating a \ncomplete grid and this is where some type of bias could slip in at this level. \nNevertheless, we tested several sources of complete grids based on very different \ngeneration principles and the classification results remained very stable.  \nThis insensitivity of the controlled-bias generator to the source of complete grids \ncan be understood intuitively: it deletes in the mean two thirds of the initial grid data \nand any structure that might be present in the complete grids and cause a bias is \nwashed away by the deletion phase. \n6.5.2. Insensivity of the classification results wrt the generators implementation  \nAs can be seen from additional results on our website, we have tested several \nindependent implementations of the bottom-up and top-down generators, using in \nparticular various pseudo-random number generators for the selection of clue \ndeletions (or additions in the bottom-up case); they all lead to the same conclusions. \n6.6. The W rating is a good approximation of the B rating \nThe above statistical results are unchanged when the W rating is replaced by the \nB rating. Indeed, in 10,000 puzzles tested, only 20 (0.2%) have different W and B \nratings. Moreover, in spite of non-confluence of the whip resolution theories, the \nmaximum length of whips in a single resolution path using only loopless whips \nand obtained by the “simplest first” strategy (defined in section 5.5.2 for the B \nrating) is a good approximation of both the W and B ratings. \n\n\n \n7. g-labels, g-candidates, g-whips and g-braids \nAfter introducing the purely structural notion of a “grouped-label” or “g-label”, \nwe give a new description of whips of length one. Having g-labels (or, equivalently, \nwhips of length one) is an intrinsic property of a CSP with deep consequences for its \nresolution theories. When a CSP has g-labels, one can define two new families of \nresolution rules: g-whips and g-braids, extending the resolution power of whips and \nbraids by allowing the presence of slightly more complex right-linking objects: g-\ncandidates, i.e. groups of candidates related by pre-defined structural relationships, \nthat act locally like the logical “or” of the candidates in the group. \n7.1. g-labels, g-links, g-candidates and whips[1] \n7.1.1. g-labels and g-links \n7.1.1.1. General definition of a grouped label (g-label) in a CSP \nDefinition: in a CSP, a potential-g-label is a pair <V, g>, where V is a CSP \nvariable and g is a set of labels for V, such that: \n– the cardinality of g is greater than one, but g is not the full set of labels for V; \n– there is at least one label l such that l is not a label for V and l is linked \n(possibly by different constraints) to all the labels in g. \nDefinition: a g-label is a potential g-label <V, g> that is “saturated” or “locally \nmaximal” in the sense that, for any potential g-label <V, g’> with g’ strictly larger \nthan g, there is a label l that is not a label for V and that is linked to all the elements \nof g but not to all the elements of g’. \nMiscellaneous remarks: \n– when CSP variable V is clear, we often speak of g-label g, but one must be \ncareful with this abuse of language; (see the Sudoku discussion in section 7.1.1.3); \n– as a result of the first condition, a label is not a g-label and there are CSPs with \nno g-labels; \n– one can introduce a new, auxiliary sort: g-Label, with a constant symbol for \nevery g-label and with variable symbols g, g’, g1, g2, …; \n\n168 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– the “saturation” or “local maximality” condition plays no role in all our \ntheoretical analyses (in particular, it has no impact on the definition of a g-link); it is \nthere mainly for efficiency reasons; it has the effect of minimising the number of g-\nlabels one must consider when looking for chain patterns built on them; accepting \nnon locally maximal g-labels would increase the computational complexity of the \ncorresponding resolution rules without providing any more generality (as can easily \nbe checked from the definitions of g-whips and g-braids below); for an example \nwhere this saturation condition appears as essential from a computational point of \nview and how it works in more complex cases than Sudoku, see section 15.5 on \nKakuro; \n– in LatinSquare, there are no g-labels; in Sudoku, all the elements of a g-label \nare linked to l by constraints of the same type; in N-Queens, there are g-labels but \ntheir different elements are always linked to l by two or three constraints of different \ntypes (see section 7.8.1); in Kakuro (section 15.5) there are two types of CSP-\nvariables and two corresponding types of g-labels. \n7.1.1.2. g-links \nDefinition: a g-label <V, g> and a label l are g-linked if l is not a label for V and \nl is linked to all the elements of g; and we define an auxiliary predicate g-linked with \nsignature (g-Label, Label) by:  \ng-linked(<V, g>, l) ≡ ∀v ¬label(l, V, v) ∧ ∀l’∈g linked(l’, l);  \nDefinition: a g-label <V, g> and a label l are compatible if they are not g-linked.  \nDefinition: a g-label <V, g> is compatible with a g-label <V’, g’> if g contains \nsome label l compatible with <V’, g’> . Notice that this is a symmetric relation, in \nspite of the non symmetric definition (most of the time, we shall use this relation in \nits apparently non-symmetric form); it is equivalent to: there are some l ∈ g and \nsome l’ ∈ g’ such that l and l’ are not linked. \nDefinition: a label l [respectively a g-label <V, g>] is compatible with a set S of \nlabels and g-labels if l [resp. <V, g>] is compatible with each element of S. \n7.1.1.3. Grouped labels (g-labels) in Sudoku \nAs an example, let us analyse the situation in Sudoku. Informally, a g-label \ncould be defined as the set of labels for a given Number “in” the intersection of a \nrow and a block or “in” the intersection of a column and a block (these are the only \npossibilities). These intersections are known respectively as row-segments and \ncolumn-segments (sometimes also as mini-rows and mini-columns). \nThen, g-label (n°, r°, cijk) would be the mediator of a symmetric conjugacy \nrelationship between the set of labels (n°, r°, c°1) such that rc-cell (r°, c°1) is in row \nr° but not in block b° and the set of labels for <variable, value> pairs <b°n°, s°2> \n\n7. g-labels, g-candidates, g-whips and g-braids     \n169 \nsuch that rc-cell [b°, s°2] is in block b° but not in row r°. Similarly, if (rijk, c°) = \n[b°, spqr], then g-label (n°, rijk, c°) would be the mediator of a conjugacy between the \nset of labels (n°, r°1, c°) such that rc-cell (r°1, c°) is in column c° but not in block b° \nand the set of labels for <variable, value> pairs <b°n°, s°2> such that rc-cell [b°, s°2] \nis in block b° but not in column c°. \n“Conjugacy”, in the above sentences, must be understood in the following sense. \nWhen two sets of labels are conjugated via a g-label as above, a proof that all the \ncandidates from one set are impossible leads in an obvious way to a proof that all \nthe candidates from the other set are also impossible. Thus, when one knows that, in \nrow r° [resp. in column c°], number n° can only be in block b°, one can delete n° \nfrom all the rc-cells in block b° that are not in row r° [resp. not in column c°]. \nConversely, when one knows that, in block b°, number n° can only be in row r° \n[resp. in column c°], one can delete n° from all the rc-cells in row r° [resp. in \ncolumn c°] that are not in block b°. These rules are among the most basic ones in \nSudoku; they are usually named row-block and column-block interactions (or \n“locked candidates”). In Sudoku, g-labels correspond to what is also sometimes \ncalled “hinges”: they are hinges for the conjugacy. As shown in HLS (see also the \nend of section 7.1.2), these basic interactions are equivalent to whip[1]. \nNevertheless, this kind of symmetric conjugacy between two CSP variables is \nspecific to Sudoku. We have chosen to define the notion of a g-label in a much more \ngeneral way, involving only one CSP variable, so that it can be applied when it is \nnot the “intersection” of two CSP variables and there is no associated symmetric \nconjugacy relationship. In particular, g-labels in the N-Queens CSP (section 7.8.1) \nwill not be defined by two CSP variables. \nAccording to our formal definition, Sudoku has the following 972 “g-labels”: \n– for each Row r°, for each Number n°, three g-labels for CSP variable Xr°n°: \n<Xr°n°, r°n°c123>, <Xr°n°, r°n°c456> and <Xr°n°, r°n°c789>, where: \nr°n°c123 is the set of three labels {(n°, r°, c1), (n°, r°, c2), (n°, r°, c3)}; \nr°n°c456 is the set of three labels {(n°, r°, c4), (n°, r°, c5), (n°, r°, c6)}; \nr°n°c789 is the set of three labels {(n°, r°, c7), (n°, r°, c8), (n°, r°, c9)}; \n– for each Column c°, for each Number n°, three g-labels for CSP variable \nXc°n°: <Xc°n°, c°n°r123>, <Xc°n°, c°n°r456> and <Xc°n°, c°n°r789>, where: \nc°n°r123 is the set of three labels {(n°, c°, r1), (n°, c°, r2), (n°, c°, r3)}; \nc°n°r456 is the set of three labels {(n°, c°, r4), (n°, c°, r5), (n°, c°, r6)}; \nc°n°r789 is the set of three labels {(n°, c°, r7), (n°, c°, r8), (n°, c°, r9)}; \n– for each Block b°, for each Number n°, three g-labels for CSP variable Xb°n°: \n<Xb°n°, b°n°s123>, <Xb°n°, c°n°s456> and <Xb°n°, c°n°s789>, where: \nb°n°s123 is the set of three labels {(n°, b°, s1), (n°, b°, s2), (n°, b°, s3)}; \nb°n°s456 is the set of three labels {(n°, b°, s4), (n°, b°, s5), (n°, b°, s6)}; \nb°n°s789 is the set of three labels {(n°, b°, s7), (n°, b°, s8), (n°, b°, s9)}; \n\n170 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– for each Block b°, for each Number n°, three g-labels for CSP variable Xb°n°: \n<Xb°n°, b°n°s147>, <Xb°n°, c°n°s258> and <Xb°n°, c°n°s369>, where: \nb°n°s147 is the set of three labels {(n°, b°, s1), (n°, b°, s4), (n°, b°, s7)}; \nb°n°s258 is the set of three labels {(n°, b°, s2), (n°, b°, s5), (n°, b°, s8)}; \nb°n°s369 is the set of three labels {(n°, b°, s3), (n°, b°, s6), (n°, b°, s9)}. \nThe two groups of g-labels for the Xbn CSP variables may seem redundant with \nrespect to the first two groups: their sets of label triplets are the same as the sets of \nlabel triplets related to rows and columns. But they are not considered as g-labels for \nthe same CSP variables. In Sudoku, this difference has always been in implicit \nexistence with the classical distinction between the rules of interaction from blocks \nto rows (or columns) and rules of interaction from rows (or columns) to blocks, \nrespectively called pointing and claiming (names that are now falling into oblivion). \nContrary to what we did for labels (considering them as equivalence classes of \npre-labels), we do not consider two g-labels as being essentially the same if they \nhave the same sets of labels but different underlying CSP variables. The reason for \nthis will be clear after the SudoQueens example in section 7.8.3.  \n7.1.2. g-candidates and their correspondence with whips of length one \nDefinitions: we say that a g-label <V, g> for a CSP variable V is a g-candidate \nfor V in a resolution state RS if there are at least two different labels l1 and l2 in g \nsuch that l1 and l2 are present as candidates in RS, i.e. RS |= candidate(l1) and \nRS |= candidate(l2). Thus, in the same spirit as in the definition of a g-label, we \nconsider that an ordinary candidate is not a g-candidate. The above defined notion of \n“g-linked” can be extended straightforwardly from g-labels to g-candidates, by \nconsidering the complete g-labels underlying the g-candidates. Beware: it is not \nenough that all the actual candidates be linked; the underlying g-labels must be g-\nlinked). As for “compatibility” between a candidate l and a g-candidate g, it is \ndefined similarly, in terms of the underlying g-label of g, and there is the condition \nthat g must contain at least two candidates compatible with l. \ng-labels act like the logical “or” of several candidates (but not any combination \nof any candidates, only structurally fixed combinations for the same CSP variable, \npredefined by the set of g-labels): in any context in which the true value of V is one \nof those in the g-candidate, it is not necessary to know precisely which of them is \ntrue; one can always conclude that any candidate g-linked to this g-label must be \nfalse in this context.  \nIt can also be noticed that g-labels could be used to define two kinds of extended \nelementary resolution rules (which could be called g-resolution rules, as they deal \nwith g-labels, g-links, g-values and g-candidates in addition to labels, links, values \n\n7. g-labels, g-candidates, g-whips and g-braids     \n171 \nand candidates): gS would assert a g-value predicate for a g-label <V, g> and gECP \nwould eliminate any candidate g-linked to an asserted g-value <V, g>. \nBut the following remark will lead us further and will require no extension of the \nnotion of a resolution theory. If <V, g> is a g-candidate for V, Z is a candidate g-\nlinked to it and l = <V, x> is any candidate in g, then V{x .} is a whip[1] with target \nZ. Conversely, for any whip[1]: V{x .} with target Z, there must be at least another \nvalue x’ for V such that <V, x’> is in g, is still a candidate and is linked to Z \n(otherwise, the whip would degenerate into a Single, a possibility we have excluded \nfrom the definition of a whip); if one defines g as the set of labels for V that are \nlinked to Z, then <V, g> is a g-label for variable V and Z is g-linked to it. \n7.2. g-bivalue chains, g-whips and g-braids \nWe now introduce extensions of bivalue chains, whips and braids by allowing \nthe right-linking (but not the left-linking) objects to be either candidates or g- \ncandidates. \nDefinition: in a resolution state RS, a g-regular sequence of length n associated \nwith a sequence (V1, … Vn) of CSP variables is a sequence of length 2n [or 2n-1] \n(L1, R1, L2, R2, …. Ln, [Rn]), such that: \n– for 1≤k≤ n, Lk is a candidate, \n– for 1≤k≤ n [or 1≤k<n], Rk is a candidate or a g-candidate, \n– for each k, Lk has a representative <Vk, lk> with Vk and Rk is a candidate or a \ng-candidate <Vk, rk> for Vk; this “strong continuity” or “strong g-continuity” \n(depending on what Rk is) from Lk to Rk implies “continuity” or “g-continuity” (i.e. \nlink or g-link) from Lk to Rk. \nThe Lk are called the left-linking candidates of the sequence and the Rk the right-\nlinking candidates or g-candidates.  \nDefinition: A g-regular chain is a g-regular sequence that satisfies all the \nadditional Rk-1 to Lk g-continuity conditions: Lk is linked or g-linked to Rk-1 for all k. \n7.2.1. Definition of g-bivalue chains \nDefinition: in any CSP and in any resolution state RS, given a candidate Z \n(which will be a target), a g-bivalue-chain of length n (n ≥ 1) is a g-regular chain \n(L1, R1, L2, R2, …. Ln, Rn) associated with a sequence (V1, … Vn) of CSP variables, \nsuch that: \n– Z is neither equal to any candidate in {L1, R1, L2, R2, …. Ln, Rn}, nor a \nmember of any g-candidate in this set, for any 1≤k<n; \n– Z is linked to L1; \n\n172 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– R1 is the only candidate or g-candidate for V1 compatible with Z; \n– for any 1 < k ≤ n, Rk is the only candidate or g-candidate for Vk compatible \nwith Rk-1; \n– Z is not a label for Vm; \n– Z is linked or g-linked to Rm. \nNotice that these conditions imply that Z cannot be a label for any of the CSP \nvariables Vk. \nTheorem 7.1 (g-bivalue-chain rule for a general CSP): in any resolution state \nof any CSP, if Z is a target of a g-bivalue-chain, then it can be eliminated \n(formally, this rule concludes ¬candidate(Z)). \nProof: the proof is short and obvious but it will be the basis for the proof of all \nour forthcoming generalised chain, whip and braid rules including g-labels. \nIf Z was True, then L1 and all the other candidates for V1 linked to Z would be \neliminated by ECP; therefore R1 would have to be or to contain the true value of V1; \nbut then L2 and all the candidates for V2 linked or g-linked to R1 would be \neliminated by ECP or W1 and R2 would have to be or to contain the true value of \nV2….; finally Rn would have to be or to contain the true value of Vn; which would \ncontradict the hypothesis that Z was True. Therefore Z can only be False. qed. \nNotation: a g-bivalue-chain of length n, together with a potential target \nelimination, is written symbolically as:  \ng-biv-chain[n]: {L1 R1} – {L2 R2} – …… – {Ln Rn} ⇒ ¬candidate(Z),  \nwhere the curly brackets recall that the two candidates or g-candidates inside have \nrepresentatives with the same CSP variable.  \nRe-writing the candidates or g-candidates as <variable, value> or <variable, g-\nvalue> pairs and “factoring” the CSP variables out of the pairs, a bivalue chain will \nalso be written symbolically in either of the more explicit forms: \ng-biv-chain[n]: V1{l1 r1} – V2{l2 r2} – …… – Vn{ln rn} ⇒ ¬candidate(Z), or: \ng-biv-chain[n]: V1{l1 r1} – V2{l2 r2} – …… – Vn{ln rn} ⇒ VZ ≠ vZ. \nIn spite of the apparently non reversible definition, one has: \nTheorem 7.2: a g-bivalue-chain is reversible. \nProof: the main point of the proof is the construction of the reversed chain (L’1, \nR’1, L’2, R’2, …. L’n, R’n). It is based on the reversed sequence of CSP variables and \ndefined as follows (for a similar theorem, see section 9.2.2): \n– L’k = Rn-k+1 if Rn-k+1 is a candidate; L’k = any element in Rn-k+1 if Rn-k+1 is a g-\ncandidate; thus, L’k is always a candidate; \n\n7. g-labels, g-candidates, g-whips and g-braids     \n173 \n– R’k = Ln-k+1 plus all the candidates for Vn-k+1 that are linked to Rn-k; thus, R’k \ncan be a candidate or a g-candidate. \n7.2.2. Definition of g-whips \nDefinition: in a resolution state RS, given a candidate Z (which will be the \ntarget), a g-whip of length n (n ≥ 1) built on Z is a g-regular sequence (L1, R1, L2, \nR2, …. Ln) [notice that there is no Rn] associated with a sequence (V1, … Vn) of CSP \nvariables, such that: \n– Z is neither equal to any candidate in {L1, R1, L2, R2, …. Ln} nor a member of \nany g-candidate in this set; \n– L1 is linked to Z; \n– for each 1 < k ≤ n, Lk is linked or g-linked to Rk-1; this is what we call g-\ncontinuity from Rk-1 to Lk; \n– for any 1 ≤ k < n, Rk is the only candidate or g-candidate for Vk compatible \nwith Z and with all the previous right-linking candidates and g-candidates (i.e. with \nZ and with all the Ri, 1 ≤ i < k); \n– Z is not a label for Vn; \n– Vn has no candidate compatible with Z and with all the previous right-linking \ncandidates and g-candidates (but Vn has more than one candidate). \nNotice that left-linking candidates are labels, as in the case of whips; they are not \ng-labels. Accepting g-labels instead of labels would lead to no added generality but \nit would entail unnecessary complications. This is the main reason for our restrictive \ndefinition of a g-label (i.e. a label is not a g-label). \nDefinition: as in the cases of bivalue-chains, whips and braids, in any of the \nabove defined g-bivalue chains, g-whips or g-braids, a candidate other than Lk for a \nCSP variable Vk is called a t- [respectively a z-] candidate if it is incompatible with \na previous right-linking candidate or g-candidate [resp. with the target]. And, here \nagain, a candidate can be z- and t- at the same time and that the t- and z- candidates \nare not considered as being part of the pattern. Notice also that a right-linking g-\ncandidate can contain z- and/or t-candidates, as long as it has more than one non-z \nand non-t candidate (otherwise, the only compatible candidate is considered as a \nmere right-linking candidate). \nTheorem 7.3 (g-whip rule for a general CSP): in any resolution state of any \nCSP, if Z is a target of a g-whip, then it can be eliminated (formally, this rule \nconcludes ¬candidate(Z)). \nProof: the proof is a simple adaptation of that for g-bivalue-chains, adding the \nelimination of all the z-candidates by ECP and, at each step, the elimination of all \nthe next t-candidates by ECP or W1. The end is slightly different: the last condition \n\n174 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \non the g-whip entails that, if the target Z was True, there would be no possible value \nfor the last variable Vn (because it is not a CSP-Variable for Z). \n7.2.3. Definition of g-braids \nDefinition: in a resolution state RS, given a candidate Z (which will be the \ntarget), a g-braid of length n (n ≥ 1) built on Z is a g-regular sequence (L1, R1, L2, \nR2, …. Ln) [notice that there is no Rn] associated with a sequence (V1, … Vn) of CSP \nvariables, such that: \n– Z is neither equal to any candidate in {L1, R1, L2, R2, …. Ln} nor a member of \nany g-candidate in this set; \n– L1 is linked to Z; \n– for any 1 < k ≤ n, Lk is either linked to a previous right-linking candidate or to \nthe target or g-linked to a previous right-linking g-candidate; this is the only (but \nmajor) structural difference with g-whips (for which the only linking possibility is \nRk-1); the “g-continuity” condition of g-whips is not satisfied by g-braids; \n– for any 1 ≤ k < n, Rk is the only candidate or g-candidate for Vk compatible \nwith Z and with all the previous right-linking candidates and g-candidates (i.e. with \nZ and with all the Ri, 1 ≤ i < k); \n– Z is not a label for Vn; \n– Vn has no candidate compatible with Z and with all the previous right-linking \ncandidates and g-candidates (but Vn has more than one candidate). \nAs in g-whips, left-linking candidates are labels, not g-labels. Here also, \naccepting g-labels instead of labels would lead to no added generality but it would \nentail unnecessary complications. \nTheorem 7.4 (g-braids rule for a general CSP): in any resolution state of any \nCSP, if Z is a target of a g-braid, then it can be eliminated (formally, this rule \nconcludes ¬candidate(Z)). \nProof: obvious (almost the same as in the g-whips case). \n7.2.4. Properties of g-whips and g-braids \ng-whips and g-braids have properties very similar to those of whips and braids, \nnamely: linearity, g-continuity (for g-whips), non anticipativeness, left-\ncomposability,… In the next sections, we shall see that g-braids also have the two \nstrongest properties of braids: confluence and relationship with gT&E, i.e. \nT&E(W1). \n\n7. g-labels, g-candidates, g-whips and g-braids     \n175 \n7.3. g-whip and g-braid resolution theories; the gW and gB ratings \nOne can now define two new families of resolution theories and two new ratings, \nin a way that strictly parallels what was done for whips and braids in chapter 5. As \nwas the case for the W and B ratings, the gW and gB ratings of an instance will be \nmeasures of the hardest step in its simplest resolution path with g-whips or g-braids; \nthey will not take into account combinations of steps of the whole path. \n7.3.1. g-whip resolution theories in a general CSP; the gW rating \n \nRecall that BRT(CSP) is the Basic Resolution Theory of the CSP defined in \nsection 4.3. \nDefinition: for any n ≥ 0, let gWn be the following resolution theory: \n– gW0 = BRT(CSP) = W0 = B0, \n– gW1 = gW0 ∪ {rules for g-whips of length 1} = W1 (obviously), \n– gW2 = gW1 ∪ {rules for g-whips of length 2}, \n– ....  \n– gWn = gWn-1 ∪ {rules for g-whips of length n}, \n– gW∞ = ∪n≥0 gWn. \nDefinition : the gW-rating of an instance P of the CSP, noted gW(P), is the \nsmallest n ≤ ∞ such that P can be solved within gWn. An instance P has gW rating n \nif it can be solved using only g-whips of length no more than n but it cannot be \nsolved using only g-whips of length strictly smaller than n. By convention, \ngW(P) = ∞ means that P cannot be solved by g-whips. \nThe gW rating has some good properties one can expect of a rating: \n– it is defined in a purely logical way, independent of any implementation; the \ngW rating of an instance is an intrinsic property of this instance; \n– in the Sudoku case, it is invariant under symmetry and supersymmetry; similar \nsymmetry properties will be true for any CSP, if it has symmetries of any kind and \nthey are properly formalised. \n7.3.2. g-braid resolution theories in a general CSP; the gB rating \n \nDefinition: for any n ≥ 0, let gBn be the following resolution theory: \n– gB0 = BRT(CSP) = gW0 = W0 = B0, \n– gB1 = gB0 ∪ {rules for g-braids of length 1} = gW1 = W1 = B1, \n– gB2 = gB1 ∪ {rules for g-braids of length 2}, \n– ....  \n\n176 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– gBn = gBn-1 ∪ {rules for g-braids of length n}, \n– gB∞ = ∪n≥0 gBn. \n \nDefinition : the gB-rating of an instance P of the CSP, noted gB(P), is the \nsmallest n ≤ ∞ such that P can be solved within gBn. An instance P has gB rating n if \nit can be solved using only g-braids of length no more than n but it cannot be solved \nusing only g-braids of length strictly smaller than n. By convention, gB(P) = ∞ \nmeans that P cannot be solved by g-braids. \nThe gB rating has all the good properties one can expect of a rating: \n– it is defined in a purely logical way, independent of any implementation; the \ngB rating of an instance is an intrinsic property of this instance; \n– as will be shown in the second next section, it is based on an increasing \nsequence of theories (gBn) with the confluence property; this ensures a priori better \ncomputational properties ; in particular, one can define a “simplest first” resolution \nstrategy able to provide the gB rating after following a single resolution path; \n– in the Sudoku case, it is invariant under symmetry and supersymmetry ; \nsimilar properties will be true for any CSP with symmetries properly formalised. \n7.4. Comparison of the ratings based on whips, braids, g-whips and g-braids \nThe first natural question is: how do these two new ratings differ from the W and \nB ratings associated with ordinary whips and braids? For any CSP, any instance P \nand any 1 ≤ n ≤ ∞, it is obvious that gBn(P) ≤ {gWn(P), Bn(P)} ≤ Wn(P), but the \nrelationship between gWn(P) and Bn(P) is not obvious at all. \nStatistically, in Sudoku, there is surprisingly little difference between the four \nratings for instances with finite W ratings. Based on 21,371 puzzles generated by the \ncontrolled bias generator, only 49 cases with gW(P) < W(P) were found. This is a \nproportion of 0.23%. In most of these cases, the difference was 1. In 3 cases, the \ndifference was 2. In 1 case, the difference was 5 (see section 7.7.1). \nIn what follows, as there can be no confusion, we use the same symbol to name a \nresolution theory T and the set of instances of the CSP solvable in it, i.e. we use T to \nmean {P / P solvable in T}. \n7.4.1. In any CSP, W2 = B2 ⊆ gW2 = gB2 \nTheorem 5.5 has shown that W2 = B2. The proof below will show that \ngW2 = gB2. As a result, one has W2 = B2 ⊆ gW2 = gB2.  \n\n7. g-labels, g-candidates, g-whips and g-braids     \n177 \nThis is the most one can hope in general: the inclusion B2 ⊂ gW2 is strict in \nSudoku (gW2 ⊄ B2), as shown by the counter-example to equality in section 7.7.2. \nThe example in section 7.7.3 will even show that gW2 ⊄ B∞. \nTheorem 7.5: In any CSP, any elimination done by a g-braid of length 2 can \nbe done by a g-whip of same or shorter length; as a result, gB2 = gW2. \nProof: Let B = V1{l1 r1} – V2{l2 .} ⇒ Vz ≠ vz be a g-braid[2] with target \nZ = <VZ, rZ> in some resolution state RS. If variable V2 has a candidate <V2, v’> (it \nmay be <V2, l2>) such that <V2, v’> is linked or g-linked to <V1, r1>, then V1{l1 r1} \n– V2{v’ .} ⇒ Vz ≠ vz is a g-whip[2] with target Z. Otherwise, <V2, l2> is linked to \n<Vz, vz> and V2{l2 .} ⇒ Vz ≠ vz is a shorter g-whip[1] with target Z. \n7.4.2. In any CSP, gW3 = gB3 and therefore W3 ⊆ B3 ⊆ gW3 \nTheorem 7.6: In any CSP, any elimination done by a g-braid of length 3 can \nbe done by a whip or a g-whip of same or shorter length; as a result, gB3 = gW3 \nand W3 ⊆ B3 ⊆ gW3. \nProof: The proof is a little harder than that of gB2 = gW2. It involves three kinds \nof changes: 1) re-ordering the various cells; exchanging the roles of left-linking, \nright-linking and t- objects; exchanging candidates with g-candidates. It is a very \ngood exercise on the manipulation of these notions. \nLet B = V1{l1 r1} – V2{l2 r2} – V3{l3 .} ⇒ Vz ≠ vz be a g-braid[3] in some \nresolution state RS. We can always suppose that is has been pruned of its useless \nbranches, i.e. of any part Vk{lk rk} such that no candidate for any posterior CSP \nvariable is linked or g-linked to rk. This entails in particular that CSP variable V3 has \na candidate linked or g-linked to <V2, r2>; by modifying B if necessary, we can \nalways suppose it is <V3, l3>. Then all the other candidates for V3 are linked or g-\nlinked to (at least) one of <VZ, vZ>, <V1, r1> or <V2, r2>. We now consider two \nsubcases. \n1) If CSP variable V2 has at least one candidate linked or g-linked to <V1, r1>, \nwe can always suppose it is <V2, l2> (otherwise, we modify the l2 of the original g-\nbraid). Then B is a g-whip[3] built on target <VZ, vZ>. \n2) Otherwise, all the candidates for V2 other than <V2, r2> are linked or g-linked \nto <VZ, vZ>; then “V2{l2 r2} – V3{l3 ” is a possible beginning for a g-whip built on \ntarget <VZ, vZ>. Moreover, in this case, V3 must have at least one candidate <V3, t3> \nlinked or g-linked to <V1, r1> (otherwise V1{l1 r1} would be a useless branch of B \nand it would have been pruned). If V3 has only one such t3, let gt3 be t3; if V3 has \nseveral such t3, they can only belong to a same g-label, say gt3, for V3. Let r’1 be r1 if \nr1 is a candidate and any candidate in r1 if r1 is a g-candidate. Then the following is a \ng-whip[3] built on target <VZ, vZ>: V2{l2 r2} – V3{l3 gt3} – V1{r’1 .}. qed. \n\n178 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nCase 2 is where a tentative proof of B3 ⊆ W3 along similar lines would fail: in \nsome subcases, we need a right-linking g-candidate gt3, even if B had only right-\nlinking candidates. (Of course, this is not enough to prove that B3 ⊄ W3.) \n7.4.3. General comparisons \nGetting occasionally a lower rating is not the only advantage of having g-whips. \nWe already mentioned that the inclusion B2 ⊂ gW2 is strict in Sudoku (i.e. \ngW2 ⊄ B2). But we also have the much stronger (a priori unexpected) result that \ngW2 cannot be reduced in general to whips or braids of any length, i.e. gW2 ⊄ B∞ \n(which obviously implies that gW∞ ⊄ B∞). This will be shown by the example of \nsection 7.7.3. Notice however that such instances will be very exceptional, at least \nfor the Sudoku CSP, as “almost all” the randomly generated puzzles can be solved \nwith whips (see chapter 6). \nThe simple counter-example in section 7.7.3 is related to the presence in the \npuzzle of a Sudoku specific pattern, a Swordfish (see chapter 8). The example in \nsection 7.7.4 is much more complex but it shows that even when the Subset patterns \nare not involved, one can prove that gW∞ ⊄ B∞ (indeed it shows that gW18 ⊄ B∞).  \nWhat about the converse? Is B∞ ⊆ gW∞? With a puzzle that can be solved by \nbraids (of maximal length 6) but not by g-whips, section 7.7.5 gives a negative \nanswer: B∞ ⊄ gW∞. What the smallest n such that Bn ⊄ gWn is remains an open \nquestion; we only know that n ≤ 6.  \nFinally, none of B∞ and gW∞ is included in the other. \nNow, as a g-whip is a particular case of a g-braid, one has gWn ⊆ gBn for all n. \nBut the converse is not true in general, except for n = 0, 1, 2 or 3. g-braids are a true \ngeneralisation of g-whips. Even in the Sudoku case (for which whips solve almost \nany puzzle), there seems to be (rare) examples of puzzles that can be solved with g-\nbraids but (probably) not with g-whips: a probable one will appear in section 7.7.6. \n7.5. The confluence property of the gBn resolution theories \n7.5.1. The confluence property of g-braid resolution theories \nTheorem 7.7: each of the gBn resolution theories, 0 ≤ n ≤ ∞, is stable for \nconfluence; therefore it has the confluence property. \nLet n be fixed. We must show that, if an elimination of a candidate Z could have \nbeen done in a resolution state RS1 by a g-braid B of length m ≤ n and with target Z, \nit will always still be possible, starting from any further state RS2 obtained from RS1 \n\n7. g-labels, g-candidates, g-whips and g-braids     \n179 \nby consistency preserving assertions and eliminations, if we use a sequence of rules \nfrom gBn. Let B be: {L1 R1} – {L2 R2} – …. – {Lp Rp} – {Lp+1 Rp+1} – … – {Lm .}, \nwith target Z, where the Rk’s are candidates or g-candidates modulo Z and the \nprevious Ri’s. \nThe proof follows that for braids in section 5.5, with a few additional subtleties. \nConsider first the state RS3 obtained from RS2 by applying repeatedly the rules in \nBRT until quiescence. As BRT has the confluence property, this state is uniquely \ndefined. (Notice that we could legitimately apply rules from W1 instead of only \nBRT, but this would not guarantee that they do all the eliminations needed in later \nsteps of the following proof). \nIf, in RS3, target Z has been eliminated, there remains nothing to prove. If target \nZ has been asserted, then the instance of the CSP is contradictory; if not yet detected \nin RS3, this contradiction can be detected by CD in a state posterior to RS3, reached \nby a series of applications of rules from W1, following the g-braid structure of B. \nOtherwise, we must consider all the elementary events related to B that can have \nhappened between RS1 and RS3 as well as those we must provoke in posterior \nresolution states RS. For this, we start from B’ = what remains of B in RS3 and we \nlet RS = RS3. At this point, B’ may not be a g-braid in RS. We progressively update \nRS and B’ by repeating the following procedure, for p = 1 to p = m, until it produces \na new (possibly shorter) g-braid B’ with target Z in RS – a situation that is bound to \nhappen. (This is a difference with the braids case: we have to consider a state RS \nposterior to RS3). We return from this procedure as soon as B’ is a g-braid in RS. \nAll the references below are to the current RS and B’. \na) If, in RS, the left-linking or any t- or z- candidate of CSP variable Vp has been \nasserted (as can be checked on what is done in the other steps, this can only have \nhappened between RS1 and RS3), then all the candidates linked to it have been \neliminated by ECP in RS3, in particular: Z and/or the candidate(s) Rk (k<p) to which \nit is linked and/or all the elements of the g-candidate(s) Rk (k<p) to which it is g-\nlinked; if Z is among them, there remains nothing to prove; otherwise, the procedure \nhas already been successfully terminated by case f1 or f2α of the first such k. \nb) If, in RS, left-linking candidate Lp has been eliminated (but not asserted) (it \ncan therefore no longer be used as a left-linking candidate in a g-braid) and if CSP \nvariable Vp still has a z- or a t- candidate Cp (i.e. a candidate Cp linked or g-linked to \nZ or to some previous Ri), then replace Lp by Cp. Now, up to Cp, B’ is a partial g-\nbraid in RS with target Z. Notice that, even if Lp was linked or g-linked to Rp-1 (e.g. \nif B was a g-whip) this may not be the case for Cp; therefore trying to prove a \nsimilar theorem for g-whips would fail here. \nc) If, in RS, any t- or z- candidate of Vp has been eliminated (but not asserted), \nthis does not change the basic structure of B (at stage p). Continue with the same B’. \n\n180 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nd) If, in RS, right-linking candidate Rp or a candidate Rp’ in right-linking g-\ncandidate Rp has been asserted (p can therefore not be the last index of B’), Rp can \nno longer be used as an element of a g-braid, because it is no longer a candidate or a \ng-candidate. Contrary to the proof for braids, and only because of this d case, we \ncannot be sure that this assertion occurred in RS3; we must palliate this. First \neliminate by ECP or W1 any left-linking or t- candidate for any CSP variable of B’ \nafter p that is incompatible with Rp, i.e. linked or g-linked to it, if it is still present in \nRS. Now, considering the g-braid structure of B upwards from p, more eliminations \nand assertions can been done by rules from W1. (Notice that we are not trying to do \nmore eliminations or assertions than needed to get a g-braid in RS; in particular, we \ncontinue to consider Rp, not Rp’; in any case, it will be excised from B’; but, most of \nall, we do not have to find the shortest possible g-braid!)  \nLet q be the smallest number strictly greater than p such that, in RS, CSP \nvariable Vq still has a (left-linking, t- or z-) candidate Cq that is not linked or g-\nlinked to any of the Ri for p ≤ i < q (by definition of a g-braid, Cq is therefore linked \nor g-linked to Z or to some Ri with i < p). Apply the following rules from W1 (if \nthey have not yet been applied between RS2 and RS) for each of the CSP variables \nVu of B with index u increasing from p+1 to q-1 included: \n- eliminate its left-linking candidate Lu by ECP or W1; \n- at this stage, CSP variable Vu had no left-linking, t- or z- candidate;  \n- if Ru is a candidate, assert it by S and eliminate by ECP all the left-linking and t- \ncandidates for CSP variables after u that are incompatible with Ru in the current RS; \n- if Ru is a g-candidate, it cannot be asserted by S; eliminate by W1 all the left-\nlinking and t- candidates for CSP variables after u that are incompatible with Ru in \nthe current RS. \nIn the new RS thus obtained, excise from B’ the part related to CSP variables p \nto q-1 (included) and, if Lq has been eliminated in the passage from RS2 to RS, \nreplace it by Cq; for each integer s ≥ p, decrease by q-p the index of CSP variable Vs \nand of its candidates and g-candidates in the new B’. In RS, B’ is now, up to p (the \nex q), a partial g-braid in gBn with target Z.  \n \ne) If, in RS, left-linking candidate Lp has been eliminated (but not asserted), and \nif CSP variable Vp has no t- or z- candidate in RS (complementary to case b), then \nthere are now two cases (Vp must have at least one candidate). \ne1) If Rp is a candidate, then Vp has only one possible value, namely Rp. If Rp \nhas not yet been asserted by S somewhere between RS2 and RS, do it now; this case \nis now reducible to case d (because the assertion of Rp also entails the elimination of \nLp); go back to case d for the same value of p (this does not introduce an infinite \nloop!). Otherwise, go to the next p.  \n\n7. g-labels, g-candidates, g-whips and g-braids     \n181 \ne2) If Rp is a g-candidate, then Rp cannot be asserted by S; use it, for any CSP \nvariable after p, to eliminate by W1 any of its t-candidates that is g-linked to Rp. Let \nq be the smallest number strictly greater than p such that, in RS, CSP variable Vq \nstill has a (left-linking, t- or z-) candidate Cq that is not linked or g-linked to any of \nthe Ri for p ≤ i < q. Replace RS by the state obtained after all the assertions and \neliminations similar to those in case d above have been done. Then, in RS, excise \nthe part of B’ related to CSP variables p to q-1 (included), replace Lq by Cq (if Lq \nhas been eliminated in the passage from RS2 to RS3) and re-number the posterior \nelements of B’, as in case d. In RS, B’ is now, up to p (the ex q), a partial g-braid in \ngBn with target Z. If p is its last index, it is a g-braid; return it and stop. \n \nf) Finally, consider eliminations occurring in a right-linking candidate or g-\ncandidate Rp. This implies that p cannot be the last index of B’. There are two cases. \nf1) If, in RS, right-linking candidate Rp of B has been eliminated (but not \nasserted) or marked (by f2γ) in a previous step (i.e. it has become a t-candidate), \nthen replace B’ by its initial part: {L1 R1} – {L2 R2} – …. – {Lp .}. At this stage, B’ \nis in RS a (possibly shorter) g-braid with target Z. Return B’ and stop. \nf2) If, in RS, a candidate in right-linking g-candidate Rp has been eliminated (but \nnot asserted) or marked in a previous step, then: \nf2α) either there remains no unmarked candidate of Rp in RS; then replace B’ by \nits initial part: {L1 R1} – {L2 R2} – …. – {Lp .}; at this stage, B’ is in RS a (possibly \nshorter) g-braid with target Z; return B’ and stop; \nf2β) or the remaining unmarked candidates of Rp in RS still make a g-candidate \nand B’ does not have to be changed; \nf2γ) or there remains only one unmarked candidate Rp’ of Rp; replace Rp by Rp’ \nin B’. We must also prepare the next steps by putting marks. Any t-candidate of B \nthat was g-linked to Rp, if it is still present in RS, can still be considered as a t-\ncandidate in B’, where it is now linked to Rp’ instead of being g-linked to Rp; this \ndoes not raise any problem. However, this substitution may entail that candidates \nthat were not t-candidates in B become t-candidates in B’; if they are left-linking \ncandidates of B’, this is not a problem either; but if any of them is a right-linking \ncandidate or an element of a right-linking g-candidate for B’, then mark it so that the \nsame procedure (i.e. f1 or f2) can be applied to it in a later step. \nNotice that, as was the case for braids, this proof works only because the notions \nof being linked and g-linked do not depend on the resolution state. \n\n182 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n7.5.2. g-braid resolution strategies consistent with the gB rating \nAs explained in section 4.5.3 and in exactly the same way as in the braids case, \nwe can take advantage of the confluence property of g-braid resolution theories to \ndefine a “simplest firth” strategy that will always find the simplest (in terms of the \nlength of the g-braids it will use) solution after following a single resolution path. \nAs a result, it will also compute the gB rating of an instance. The following order \nsatisfies this requirement: \nECP > S > \nbiv-chain[1] > whip[1] > g-whip[1] > braid[1] > g-braid[1] >  \n… > … \nbiv-chain[k] > whip[k] > g-whip[k] > braid[k] > g-braid[k] > \nbiv-chain[k+1] > whip[k+1] > g-whip[k+1] > braid[k+1] > g-braid[k+1] > … \nNotice that bivalue-chains, whips, g-whips and braids being special cases of g-\nbraids of same length, their explicit presence in the set of rules does not change the \nfinal result (z-chains and t-whips could also be added in the landscape). We put \nthem here because when we look at a resolution path, it may be nicer to see simple \npatterns appear instead of more complex ones (g-braids). Also, it allows to see (in \nthe Sudoku case) that, in practice, g-braids that are neither g-whips nor braids do not \nappear very often in the resolution paths.  \nHere, we have put g-whips before braids of same length, because they are \nstructurally simpler and experiments confirm this complexity hierarchy (in terms of \ncomputation times and memory requirements). This choice has no impact on the gB \nrating. \nAs in the case of ordinary braids, the above ordering does not completely define \na deterministic procedure: it does not set any precedence between different chains of \nsame type and length. This could be done by using an ordering of the candidates \ninstantiating them, based e.g. on their lexicographic order. But, here again, one can \nalso decide that, for all practical purposes, which of these equally prioritised rule \ninstantiations should be “fired” first should be chosen randomly (as in the default \nbehaviour of CSP-Rules). \n7.6. The “gT&E vs g-braids” theorem \nIn section 5.6.1, we defined the procedure T&E(T, Z, RS) for any candidate Z, \nany resolution state RS and any resolution theory T with the confluence property. In \nthis section, we consider T = W1 = B1 and we set gT&E = T&E(W1). It is obvious \nthat any elimination that can be done by a g-braid B can be done by gT&E, using a \nsequence of rules from B1 = W1, following the structure of B. The converse is more \ninteresting: \n\n7. g-labels, g-candidates, g-whips and g-braids     \n183 \nTheorem 7.8: for any instance of any CSP, any elimination that can be done \nby gT&E can be done by a g-braid. Any instance of a CSP that can be solved by \ngT&E can be solved by g-braids. \nProof: Let RS be a resolution state and let Z be a candidate eliminated by \ngT&E(Z, RS) using some auxiliary resolution state RS’. Following the steps of \nresolution theory B1 in RS’, we progressively build a g-braid in RS with target Z. \nBut we must do this in a little smarter way than in our proof for mere braids. First, \nremember that B1 contains only four types of rules: ECP (which eliminates \ncandidates), S (which asserts a value for a CSP variable), W1 (whips of length 1, \nwhich eliminates candidates) and CD (which detects a contradiction on a CSP \nvariable).  \nConsider the sequence (P1, P2, …, Pk, …Pn) of rule applications in RS’ based on \nrules from W1 different from ECP and suppose that Pn is the first occurrence of CD \n(there must be at least one occurrence of CD if Z is eliminated by gT&E). We first \ndefine the Rk and Vk sequences; starting from empty Rk and Vk, for k = 1 to n-1: \n- if Pk is of type S, then it asserts a value Rk for some CSP variable Vk; add Rk and \nVk at the end of the appropriate sequences; \n- if Pk is of type whip[1]: {Mk .} ⇒ ¬candidate(Ck) for some CSP variable Vk, then \ndefine Rk as the g-candidate for Vk that contains Mk and is g-linked to Ck; (notice \nthat Ck will not necessarily be Lk+1); add Rk and Vk to the appropriate sequences. \nWe shall build a g-braid[n] in RS with target Z, with the Rk’s as its sequence of \nright-linking candidates or g-candidates and with the Vk’s as its sequence of first n-1 \nCSP variables. We only have to define properly the Lk’s. We do this successively \nfor k = 1, …, k = n. As the proofs for k = 1 and for the passage from k to k+1 are \nalmost identical, we skip the case k = 1. Suppose we have done it until k and \nconsider CSP variable Vk+1.  \nWhatever rule Pk+1 is (S or whip[1]), the fact that it can be applied means that, \napart from Rk+1 (if it is a candidate) or the labels contained in Rk+1 (if it is a g-\ncandidate), all the other labels for CSP variable Vk+1 that were still candidates for \nVk+1 in RS (and there must be at least one, say Lk+1) have been eliminated in RS’ by \nthe assertion of Z and the previous rule applications. But these previous eliminations \ncan only result from being linked or g-linked to Z or to some Ri, i≤k. {Lk+1 Rk+1} is \ntherefore a legitimate extension for our partial g-braid. \nEnd of the procedure: at step n, a contradiction is obtained by CD for some \nvariable Vn. It means that all the candidates for Vn that were still candidates for Vn \nin RS (and there must be at least one, say Ln) have been eliminated in RS’ by the \nassertion of Z and the previous rule applications. But these previous eliminations \ncan only result from being linked or g-linked to Z or to some Ri, i<n. Ln is thus the \nlast left-linking candidate of the g-braid we were looking for in RS. \n\n184 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nHere again (as in the proof of confluence), this proof works only because the \nexistence of a link or a g-link between two candidates does not depend on the \nresolution state. And, again, it is very unlikely that the gT&E procedure followed by \nthe construction in this proof would produce the shortest available g-braid in RS. \n7.7. Exceptional examples \nThis section provides the proofs by examples announced in section 7.4. \n7.7.1. A puzzle with W=B=7 and gW=2 \nIn section 7.4, we mentioned the rare case of a puzzle P with finite W rating but \nwith very different W and gW ratings: gW(P) = W(P) - 5. One might think that this \ncan happen only for hard puzzles, but the example in Figure 7.1 shows that it can \nalso happen with relatively simple ones: here, we have gW(P) = 2 and W(P) = 7. \n \n \n1   \n  \n \n  6 \n \n \n9     1 2 3 4 5 6 7 8 9 \n \n \n  \n   \n \n  \n \n      4 5 6 7 8 9 1 3 2 \n  8 \n \n1   \n \n5 6 \n \n    7 8 9 1 3 2 5 6 4 \n \n3   6   \n  8   1     2 3 4 6 9 7 8 5 1 \n  \n \n  \n \n \n  \n \n  7     6 1 8 5 2 4 3 9 7 \n \n  \n \n  \n  8 2 4 6     9 7 5 3 1 8 2 4 6 \n \n4   9 \n \n  \n \n2       3 4 1 9 7 5 6 2 8 \n5 6   8 4 1    \n      5 6 2 8 4 1 9 7 3 \n  \n \n7   \n  3 \n \n  \n \n    8 9 7 2 6 3 4 1 5 \nFigure 7.1. Puzzle P (cb#41065 ) with W(P)=B(P)=7 and gW(P)=2 \n1) If we accept g-whips, there is a very short resolution path: \n \n*****\t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  gW\t\r  *****\t\r  \n26\t\r  givens\t\r  and\t\r  206\t\r  candidates,\t\r  1339\t\r  csp-­‐links\t\r  and\t\r  1339\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.59\t\r  \nsingles\t\r  ==>\t\r  r8c9\t\r  =\t\r  3,\t\r  r8c3\t\r  =\t\r  2\t\r  \nwhip[1]:\t\r  c9n5{r9\t\r  .}\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  5\t\r  \nwhip[1]:\t\r  r8n9{c7\t\r  .}\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  9,\t\r  r9c7\t\r  ≠\t\r  9,\t\r  \t\r  \nwhip[1]:\t\r  r8n7{c8\t\r  .}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  7\t\r  \nwhip[1]:\t\r  r6n3{c5\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  3,\t\r  r5c5\t\r  ≠\t\r  3\t\r  \n;;; Resolution state RS1 \nwhip[2]:\t\r  b4n6{r5c1\t\r  r5c3}\t\r  –\t\r  b4n8{r5c3\t\r  .}\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  4,r5c1\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  b4n8{r5c1\t\r  r5c3}\t\r  –\t\r  b4n6{r5c3\t\r  .}\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  9\t\r  \nwhip[2]:\t\r  b4n6{r5c3\t\r  r5c1}\t\r  –\t\r  b4n8{r5c1\t\r  .}\t\r  ==>\t\r  r5c3\t\r  ≠\t\r  5,\t\r  r5c3\t\r  ≠\t\r  4\t\r  \nwhip[1]\t\r  :\t\r  r5n4{c6\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  4\t\r  \n\n7. g-labels, g-candidates, g-whips and g-braids     \n185 \nwhip[2]:\t\r  b4n6{r5c3\t\r  r5c1}\t\r  –\t\r  b4n8{r5c1\t\r  .}\t\r  ==>\t\r  r5c3\t\r  ≠\t\r  1\t\r  \nwhip[2]:\t\r  b4n8{r5c3\t\r  r5c1}\t\r  –\t\r  b4n6{r5c1\t\r  .}\t\r  ==>\t\r  r5c3\t\r  ≠\t\r  9\t\r  \n;;; Resolution state RS2 \ng-­‐whip[2]:\t\r  r3n7{c1\t\r  c456}\t\r  –\t\r  c4n7{r2\t\r  .}\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  7\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n2) If we accept only whips, the resolution path is much longer: \n \n*****\t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  W\t\r  *****\t\r  \n;;; same path up to resolution stateRS2  \nwhip[3]:\t\r  c4n7{r1\t\r  r6}\t\r  –\t\r  c2n7{r6\t\r  r2}\t\r  –\t\r  r3n7{c1\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  c2n7{r1\t\r  r6}\t\r  –\t\r  c4n7{r6\t\r  r1}\t\r  –\t\r  r3n7{c6\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  c4n7{r2\t\r  r6}\t\r  –\t\r  c2n7{r6\t\r  r1}\t\r  –\t\r  r3n7{c1\t\r  .}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  7,\t\r  r2c6\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  r5n2{c6\t\r  c2}\t\r  –\t\r  r1n2{c2\t\r  c4}\t\r  –\t\r  b8n2{r9c4\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  b4n7{r6c2\t\r  r4c1}\t\r  –\t\r  r3n7{c1\t\r  c6}\t\r  –\t\r  b8n7{r7c6\t\r  .}\t\r  ==>\t\r  r6c5\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  r9c2{n1\t\r  n9}\t\r  –\t\r  r9c1{n9\t\r  n8}\t\r  –\t\r  r9c8{n8\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  1\t\r  \nwhip[3]:\t\r  r9c8{n8\t\r  n1}\t\r  –\t\r  r9c2{n1\t\r  n9}\t\r  –\t\r  r9c1{n9\t\r  .}\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  8\t\r  \nwhip[5]:\t\r  r4n2{c1\t\r  c6}\t\r  –\t\r  r4n7{c6\t\r  c5}\t\r  –\t\r  b8n7{r7c5\t\r  r7c6}\t\r  –\t\r  r3n7{c6\t\r  c1}\t\r  –\t\r  r6c1{n7\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  9\t\r  \nwhip[5]:\t\r  r4c8{n9\t\r  n5}\t\r  –\t\r  r4c5{n5\t\r  n7}\t\r  –\t\r  b8n7{r7c5\t\r  r7c6}\t\r  –\t\r  r3n7{c6\t\r  c1}\t\r  –\t\r  r6c1{n7\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r9c2{n9\t\r  n1}\t\r  –\t\r  c3n1{r7\t\r  r6}\t\r  –\t\r  c3n9{r6\t\r  .}\t\r  ==>\t\r  r2c2\t\r  ≠\t\r  9\t\r  \nwhip[6]:\t\r   b3n1{r2c7\t\r   r2c8}\t\r   –\t\r   r9c8{n1\t\r   n8}\t\r   –\t\r   r9c1{n8\t\r   n9}\t\r   –\t\r   r6c1{n9\t\r   n7}\t\r   –\t\r   b1n7{r3c1\t\r   r1c2}\t\r   –\t\r  \nc4n7{r1\t\r  .}\t\r  ==>\t\r  r2c7\t\r  ≠\t\r  7\t\r  \nwhip[7]:\t\r   c3n6{r2\t\r   r5}\t\r   –\t\r   c1n6{r5\t\r   r2}\t\r   –\t\r   c1n4{r2\t\r   r4}\t\r   –\t\r   c1n2{r4\t\r   r3}\t\r   –\t\r   b3n2{r3c9\t\r   r2c9}\t\r   –\t\r  \nc9n8{r2\t\r  r7}\t\r  –\t\r  c3n8{r7\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  4\t\r  \nwhip[7]:\t\r   r3n3{c1\t\r   c5}\t\r   –\t\r   c3n3{r3\t\r   r7}\t\r   –\t\r   b7n1{r7c3\t\r   r9c2}\t\r   –\t\r   b7n9{r9c2\t\r   r9c1}\t\r   –\t\r   r6c1{n9\t\r   n7}\t\r   –\t\r  \nr3n7{c1\t\r  c6}\t\r  –\t\r  c4n7{r1\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  3\t\r  \nwhip[7]:\t\r   r1n2{c5\t\r   c2}\t\r   –\t\r   c1n2{r2\t\r   r4}\t\r   –\t\r   c6n2{r4\t\r   r5}\t\r   –\t\r   r2n2{c6\t\r   c9}\t\r   –\t\r   r3c9{n2\t\r   n4}\t\r   –\t\r   c6n4{r3\t\r   r2}\t\r   –\t\r  \nc1n4{r2\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  2\t\r  \nwhip[7]:\t\r  r4n2{c1\t\r  c6}\t\r  –\t\r  r4n7{c6\t\r  c5}\t\r  –\t\r  b8n7{r7c5\t\r  r7c6}\t\r  –\t\r  r3n7{c6\t\r  c1}\t\r  –\t\r  c1n2{r3\t\r  r2}\t\r  –\t\r  r1c2{n2\t\r  n5}\t\r  –\t\r  \nr2c2{n5\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  4\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r4c3\t\r  =\t\r  4\t\r  \nwhip[4]:\t\r  b5n4{r5c6\t\r  r5c4}\t\r  –\t\r  r1n4{c4\t\r  c7}\t\r  –\t\r  c7n7{r1\t\r  r8}\t\r  –\t\r  c7n9{r8\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  9\t\r  \nwhip[4]:\t\r  r3c3{n9\t\r  n3}\t\r  –\t\r  r3c5{n3\t\r  n7}\t\r  –\t\r  c4n7{r1\t\r  r6}\t\r  –\t\r  r6c1{n7\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  9\t\r  \nwhip[5]:\t\r  b3n7{r1c7\t\r  r2c8}\t\r  –\t\r  c8n1{r2\t\r  r9}\t\r  –\t\r  r7c7{n1\t\r  n6}\t\r  –\t\r  r9c7{n6\t\r  n4}\t\r  –\t\r  r1n4{c7\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  7\t\r  \n;;; only now do we get the crucial elimination with a whip[2]: \nwhip[2]:\t\r  c4n7{r6\t\r  r2}\t\r  –\t\r  r3n7{c6\t\r  .}\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  7\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n3) Interestingly (anticipating on chapter 8), this puzzle can also be solved with \nSubset rules (of size 3), but it gets a higher rating (S=3) than with g-whips (gW=2); \ni.e. g-whips are better than Subsets in this case. \n \n*****\t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  gW+S\t\r  *****\t\r  \n;;; same path up to resolution stateRS1 \nhidden-­‐pairs-­‐in-­‐a-­‐row:\t\r  r5{n6\t\r  n8}{c1\t\r  c3}\t\r  ==>\t\r  r5c3\t\r  ≠\t\r  9,\t\r  r5c3\t\r  ≠\t\r  5,\t\r  r5c3\t\r  ≠\t\r  4,\t\r  r5c3\t\r  ≠\t\r  1,\t\r  r5c1\t\r  ≠\t\r  9,\t\r  r5c1\t\r  ≠4\t\r  \nwhip[1]\t\r  :\t\r  r5n4{c6\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  4\t\r  \nhidden-­‐pairs-­‐in-­‐a-­‐row:\t\r  r5{n6\t\r  n8}{c1\t\r  c3}\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  2\t\r  \n\n186 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n;;; same situation as RS2 (all the whips[2] in the W or gW resolution paths are \nhidden pairs) \nnaked-­‐triplets-­‐in-­‐a-­‐row:\t\r  r9{c1\t\r  c2\t\r  c8}{n8\t\r  n9\t\r  n1}\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  8,\t\r  r9c7\t\r  ≠\t\r  1\t\r  \nswordfish-­‐in-­‐rows:\t\r  n7{r3\t\r  r4\t\r  r7}{c6\t\r  c1\t\r  c5}\t\r  ==>\t\r  r6c5\t\r  ≠\t\r  7\t\r  \n;;; The crucial elimination is now obtained with a swordfish: \nswordfish-­‐in-­‐rows:\t\r  n7{r3\t\r  r4\t\r  r7}{c6\t\r  c1\t\r  c5}\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  7\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n7.7.2. gW2 ⊄ B2: a puzzle with W=3, B=3, gW=2, gB=2 \nOur second example (puzzle cb#1249 in Figure 7.2) proves that the obvious \ninclusion B2 ⊂ gW2 is not an equality in general (“obvious” because B2 = W2). \n1) The resolution path with g-whips gives gW(P) = 2: \n \n*****\t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  gW\t\r  *****\t\r  \n27\t\r  givens,\t\r  200\t\r  candidates,\t\r  1254\t\r  csp-­‐links\t\r  and\t\r  1254\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.58\t\r  \nsingles\t\r  ==>\t\r  r7c3\t\r  =\t\r  2,\t\r  r1c2\t\r  =\t\r  2,\t\r  r2c2\t\r  =\t\r  5,\t\r  r2c4\t\r  =\t\r  7,\t\r  r1c5\t\r  =\t\r  5,\t\r  r2c6\t\r  =\t\r  9,\t\r  r3c5\t\r  =\t\r  3,\t\r  r4c7\t\r  =\t\r  9,\t\r  r5c9\t\r  =\t\r  2\t\r  \nwhip[1]:\t\r  c9n1{r9\t\r  .}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  1,\t\r  r8c8\t\r  ≠\t\r  1,\t\r  r9c7\t\r  ≠\t\r  1,\t\r  r9c8\t\r  ≠\t\r  1\t\r  \nwhip[1]:\t\r  c2n1{r9\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  1,\t\r  r8c1\t\r  ≠\t\r  1,\t\r  r9c1\t\r  ≠\t\r  1\t\r  \nwhip[1]:\t\r  r4n6{c8\t\r  .}\t\r  ==>\t\r  r6c8\t\r  ≠\t\r  6,\t\r  r6c7\t\r  ≠\t\r  6\t\r  \nwhip[1]:\t\r  r4n8{c8\t\r  .}\t\r  ==>\t\r  r5c8\t\r  ≠\t\r  8,\t\r  r5c7\t\r  ≠\t\r  8\t\r  \nwhip[2]:\t\r  r4c6{n3\t\r  n5}\t\r  –\t\r  r4c4{n5\t\r  .}\t\r  ==>\t\r  r4c8\t\r  ≠\t\r  3\t\r  \nwhip[1]:\t\r  r4n3{c4\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  r4c6{n5\t\r  n3}\t\r  –\t\r  r4c4{n3\t\r  .}\t\r  ==>\t\r  r4c8\t\r  ≠\t\r  5,\t\r  r4c9\t\r  ≠\t\r  5\t\r  \nsingles\t\r  ==>\t\r  r6c8\t\r  =\t\r  5,\t\r  r6c4\t\r  =\t\r  2,\t\r  r9c5\t\r  =\t\r  2\t\r  \n;;; Resolution state RS1 \ng-­‐whip[2]:\t\r  c7n8{r1\t\r  r789}\t\r  –\t\r  r8n8{c9\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  8\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n \n \n  \n  3 4   6 \n \n \n9     1 2 3 4 5 6 7 8 9 \n \n \n  \n  8 \n \n  2 3     4 5 6 7 8 9 1 2 3 \n7   \n \n1   2 5 \n \n \n    7 8 9 1 3 2 5 4 6 \n2 7 1   4    \n  \n      2 7 1 3 4 5 9 6 8 \n5 \n \n  6 \n \n  \n \n  \n      5 8 4 6 9 7 3 1 2 \n \n3 \n \n  \n  8   \n  7     6 3 9 2 1 8 4 5 7 \n \n  \n   \n \n  \n \n9       3 6 2 5 7 1 8 9 4 \n  4 5 9 \n \n  2  \n      8 4 5 9 6 3 2 7 1 \n  \n \n7   \n  4 \n \n  \n \n    9 1 7 8 2 4 6 3 5 \nFigure 7.2. A puzzle P (cb #1249 ) with gW(P)=2 and W(P)=B(P)=3 \n2) The resolution path with whips gives W(P) = 3; the resolution path with \nbraids is exactly the same, i.e. no non-whip braid appears in it, and B(P) = 3: \n\n7. g-labels, g-candidates, g-whips and g-braids     \n187 \n*****\t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  W\t\r  *****\t\r  \n;;; same path up to resolution stateRS1 \nwhip[3]:\t\r  b1n1{r1c1\t\r  r2c1}\t\r  –\t\r  c1n4{r2\t\r  r6}\t\r  –\t\r  r6c7{n4\t\r  .}\t\r  ==>\t\r  r1c7\t\r  ≠\t\r  1\t\r  \nwhip[3]:\t\r  c7n6{r7\t\r  r2}\t\r  –\t\r  b3n1{r2c7\t\r  r1c8}\t\r  –\t\r  c8n7{r1\t\r  .}\t\r  ==>\t\r  r8c8\t\r  ≠\t\r  6\t\r  \nwhip[3]:\t\r  c1n4{r2\t\r  r6}\t\r  –\t\r  r6c7{n4\t\r  n1}\t\r  –\t\r  r2n1{c7\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  6\t\r  \nwhip[3]:\t\r  r2c3{n4\t\r  n6}\t\r  –\t\r  b4n6{r6c3\t\r  r6c1}\t\r  –\t\r  c1n4{r6\t\r  .}\t\r  ==>\t\r  r2c7\t\r  ≠\t\r  4\t\r  \nwhip[1]:\t\r  r2n4{c1\t\r  .}\t\r  ==>\t\r  r3c3\t\r  ≠\t\r  4\t\r  \nwhip[3]:\t\r  r2c7{n6\t\r  n1}\t\r  –\t\r  r6c7{n1\t\r  n4}\t\r  –\t\r  c8n4{r5\t\r  .}\t\r  ==>\t\r  r3c8\t\r  ≠\t\r  6\t\r  \nwhip[3]:\t\r  b6n8{r4c9\t\r  r4c8}\t\r  –\t\r  r3c8{n8\t\r  n4}\t\r  –\t\r  c9n4{r3\t\r  .}\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  r2c3{n4\t\r  n6}\t\r  –\t\r  r2c7{n6\t\r  n1}\t\r  –\t\r  r6c7{n1\t\r  .}\t\r  ==>\t\r  r6c3\t\r  ≠\t\r  4\t\r  \nwhip[3]:\t\r  b1n9{r3c2\t\r  r3c3}\t\r  –\t\r  b1n6{r3c3\t\r  r2c3}\t\r  –\t\r  r6c3{n6\t\r  .}\t\r  ==>\t\r  r3c2\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  b1n8{r1c1\t\r  r3c3}\t\r  –\t\r  b1n9{r3c3\t\r  r3c2}\t\r  –\t\r  b7n9{r9c2\t\r  .}\t\r  ==>\t\r  r9c1\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  c1n8{r8\t\r  r1}\t\r  –\t\r  c7n8{r1\t\r  r7}\t\r  –\t\r  r8n8{c9\t\r  .}\t\r  ==>\t\r  r9c2\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  b7n8{r7c1\t\r  r7c2}\t\r  –\t\r  c7n8{r7\t\r  r9}\t\r  –\t\r  r8n8{c8\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  8\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n7.7.3. gW2 ⊄ B∞: a puzzle not solvable by braids of any length but solvable in gW2 \nThe example in Figure 7.3 (a puzzle from Mauricio’s swordfish collection) \nallows to go much further: it proves that gW2 ⊄ B∞ and therefore gW∞ ⊄ B∞.  \n \n  \n  1 \n \n  2 \n \n \n3     6 4 1 5 9 2 8 7 3 \n \n \n  \n  1 \n \n  4       8 7 5 6 1 3 2 4 9 \n2   \n \n4   \n \n5 \n \n \n    2 3 9 4 7 8 5 6 1 \n \n  6   \n  7  \n  8     3 1 6 2 4 7 9 5 8 \n  5   \n \n \n  \n \n2       7 5 4 1 8 9 3 2 6 \n9   \n \n3   \n \n4   \n \n    9 8 2 3 5 6 4 1 7 \n \n  8  \n \n1 \n \n  5     4 2 8 7 3 1 6 9 5 \n  9   \n  6   \n   \n      5 9 7 8 6 4 1 3 2 \n1 \n \n \n9   \n \n7   \n \n    1 6 3 9 2 5 7 8 4 \nFigure 7.3. A puzzle P with B(P)=∞ but gW(P)=2 \nUsing the T&E procedure and the “T&E vs braids” theorem, it is easy to check \nthat this puzzle is not solvable by braids, let alone by whips. But it is in gT&E and it \ncan therefore be solved by g-braids. Let us try to do better and solve it by g-whips. \n \n*****\t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  gW\t\r  *****\t\r  \n24\t\r  givens,\t\r  214\t\r  candidates,\t\r  1289\t\r  csp-­‐links\t\r  and\t\r  1289\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.41\t\r  \ng-­‐whip[2]:\t\r  c3n4{r5\t\r  r789}\t\r  –\t\r  r7n4{c2\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  4\t\r  \ng-­‐whip[2]:\t\r  r1n9{c5\t\r  c789}\t\r  –\t\r  c9n9{r3\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  9\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \nAnticipating on chapter 8, this puzzle can also be solved by Subsets of size 3, \nmore precisely by Swordfish; actually, we find two Swordfish (for two different \n\n188 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nnumbers) in the same three columns, a very exceptional situation. This puzzle will \nalso count as a very rare example of a Swordfish not completely subsumed by \nwhips. \n \n*****\t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  B+S\t\r  *****\t\r  \n24\t\r  givens,\t\r  214\t\r  candidates,\t\r  1289\t\r  csp-­‐links\t\r  and\t\r  1289\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.41\t\r  \nswordfish-­‐in-­‐columns\t\r  n4{c3\t\r  c6\t\r  c9}{r9\t\r  r5\t\r  r8}\t\r  ==>\t\r  r9c5\t\r  ≠\t\r  4,\t\r  r9c2\t\r  ≠\t\r  4,\t\r  r8c1\t\r  ≠\t\r  4,\t\r  r5c5\t\r  ≠\t\r  4,\t\r  r5c1\t\r  ≠\t\r  4\t\r  \nswordfish-­‐in-­‐columns\t\r  n9{c3\t\r  c6\t\r  c9}{r3\t\r  r2\t\r  r5}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  9,\t\r  r5c5\t\r  ≠\t\r  9\t\r  \t\r  ;\t\r  singles\t\r  to\t\r  the\t\r  end\t\r  \n7.7.4. gW∞ ⊄ B∞: a puzzle not solvable by braids of any length but solvable in gW18 \nEven without invoking puzzles, as in section 7.7.3, involving the rare case of a \nSubset pattern that is not subsumed by whips or braids, there are examples that can \nbe solved by g-whips but not by braids. Consider the puzzle (created by Arto Inkala) \nshown in Figure 7.4 (and known as “AI Broken Brick”). \nUsing the T&E procedure and the “T&E vs braids” theorem, it is easy to check \nthat this puzzle is not solvable by T&E and it has therefore no chance of being \nsolvable by braids, let alone by whips. But it is solvable by gT&E and it can \ntherefore be solved by g-braids. Let us try to do better and solve it by g-whips. \n \n \n4 \n  \n  \n \n6   \n \n7 \n \n    4  5 1 8 6 3 9 7 2 \n \n \n  \n   \n \n6 \n \n      9 \n8 2 7 1 4 6 5 3 \n  \n3 \n \n \n  2   \n \n1      6 3 7 5 9 2 8 4 1 \n7 \n  \n  \n  \n  8 5   \n      7 \n9  6 3 2 8 5 1 4 \n  \n1 \n  4 \n \n  \n \n  \n      3 \n1 5 4 7 6 2 9 8 \n \n2 \n \n9 5 \n \n  \n  \n \n    8 \n2 4 9 5 1 3 6 7 \n \n  \n   \n \n  7   5     1 \n4 8 6 3 9 7 2 5 \n  \n \n9 1 \n \n  \n  3       2  7 \n9 1 8 5 4 3 6 \n  \n \n3   4 \n \n \n8 \n \n     5 6 3 2 4 7 1 8 9 \nFigure 7.4. Puzzle “AI Broken Brick” with B(P)=∞ and gW(P)=18 \n*****\t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  gW\t\r  *****\t\r  \n23\t\r  givens,\t\r  219\t\r  candidates,\t\r  1366\t\r  csp-­‐links\t\r  and\t\r  1366\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.43\t\r  \nhidden-­‐single-­‐in-­‐a-­‐column\t\r  ==>\t\r  r2c6\t\r  =\t\r  4\t\r  \nwhip[1]\t\r  :\t\r  c3n7{r3\t\r  .}\t\r  ==>\t\r  r2c2\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  b4n5{r5c3\t\r  r5c1}\t\r  –\t\r  b4n9{r5c1\t\r  r4c2}\t\r  –\t\r  r2c2{n9\t\r  n8}\t\r  –\t\r  r1c2{n8\t\r  .}\t\r  ==>\t\r  r3c3\t\r  ≠\t\r  5,\t\r  r2c3\t\r  ≠\t\r  5,\t\r  \nr1c3\t\r  ≠\t\r  5\t\r  \nhidden-­‐single-­‐in-­‐a-­‐column\t\r  ==>\t\r  r5c3\t\r  =\t\r  5\t\r  \nwhip[9]:\t\r   r6n7{c9\t\r   c6}\t\r   –\t\r   b5n1{r6c6\t\r   r4c5}\t\r   –\t\r   r4n3{c5\t\r   c4}\t\r   –\t\r   b5n6{r4c4\t\r   r5c6}\t\r   –\t\r   r8c6{n6\t\r   n5}\t\r   –\t\r  \nr9c6{n5\t\r  n9}\t\r  –\t\r  r7n9{c6\t\r  c8}\t\r  –\t\r  r5c8{n9\t\r  n2}\t\r  –\t\r  r4n2{c8\t\r  .}\t\r  ==>\t\r  r6c9\t\r  ≠\t\r  3\t\r  \nwhip[10]:\t\r   b1n6{r3c1\t\r   r3c3}\t\r   –\t\r   r4c3{n6\t\r   n4}\t\r   –\t\r   r6c3{n4\t\r   n8}\t\r   –\t\r   r6c1{n8\t\r   n3}\t\r   –\t\r   b4n6{r6c1\t\r   r4c2}\t\r   –\t\r  \nc4n6{r4\t\r  r7}\t\r  –\t\r  b9n6{r7c8\t\r  r8c9}\t\r  –\t\r  c9n4{r8\t\r  r6}\t\r  –\t\r  r6c7{n4\t\r  n1}\t\r  –\t\r  r9n1{c7\t\r  .}\t\r  ==>\t\r  r9c1\t\r  ≠\t\r  6\t\r  \n\n7. g-labels, g-candidates, g-whips and g-braids     \n189 \nwhip[13]:\t\r   b1n6{r3c1\t\r   r3c3}\t\r   –\t\r   r4c3{n6\t\r   n4}\t\r   –\t\r   r6c3{n4\t\r   n8}\t\r   –\t\r   r6c1{n8\t\r   n3}\t\r   –\t\r   b4n6{r6c1\t\r   r4c2}\t\r   –\t\r  \nc4n6{r4\t\r  r9}\t\r  –\t\r  r8n6{c6\t\r  c9}\t\r  –\t\r  c9n4{r8\t\r  r6}\t\r  –\t\r  r6c7{n4\t\r  n1}\t\r  –\t\r  c6n1{r6\t\r  r1}\t\r  –\t\r  r1c3{n1\t\r  n2}\t\r  –\t\r  r7c3{n2\t\r  n1}\t\r  –\t\r  \nr9n1{c1\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  6\t\r  \nwhip[13]:\t\r  c6n5{r8\t\r  r1}\t\r  –\t\r  r1n1{c6\t\r  c3}\t\r  –\t\r  r2n1{c1\t\r  c5}\t\r  –\t\r  b5n1{r4c5\t\r  r6c6}\t\r  –\t\r  c7n1{r6\t\r  r9}\t\r  –\t\r  r9c1{n1\t\r  n2}\t\r  –\t\r  \nb1n2{r2c1\t\r  r2c3}\t\r  –\t\r  b1n7{r2c3\t\r  r3c3}\t\r  –\t\r  b1n6{r3c3\t\r  r3c1}\t\r  –\t\r  r3n5{c1\t\r  c8}\t\r  –\t\r  r2c8{n5\t\r  n9}\t\r  –\t\r  c1n9{r2\t\r  r5}\t\r  –\t\r  \nc7n9{r5\t\r  .}\t\r  ==>\t\r  r9c4\t\r  ≠\t\r  5\t\r  \nwhip[1]:\t\r  c4n5{r1\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  5\t\r  \nwhip[15]:\t\r   r4c3{n6\t\r   n4}\t\r   –\t\r   r6c3{n4\t\r   n8}\t\r   –\t\r   r3c3{n8\t\r   n7}\t\r   –\t\r   b1n6{r3c3\t\r   r3c1}\t\r   –\t\r   b4n6{r5c1\t\r   r4c2}\t\r   –\t\r  \nc4n6{r4\t\r  r9}\t\r  –\t\r  r8n6{c6\t\r  c9}\t\r  –\t\r  c9n4{r8\t\r  r6}\t\r  –\t\r  r6n7{c9\t\r  c6}\t\r  –\t\r  r8c6{n7\t\r  n5}\t\r  –\t\r  r9c6{n5\t\r  n9}\t\r  –\t\r  r7n9{c6\t\r  c8}\t\r  –\t\r  \nb9n1{r7c8\t\r  r9c7}\t\r  –\t\r  r6n1{c7\t\r  c8}\t\r  –\t\r  r6n6{c8\t\r  .}\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  6\t\r  \ng-­‐whip[15]:\t\r  c7n1{r9\t\r  r6}\t\r  –\t\r  c6n1{r6\t\r  r1}\t\r  –\t\r  c5n1{r2\t\r  r4}\t\r  –\t\r  c8n1{r4\t\r  r7}\t\r  –\t\r  b9n9{r7c8\t\r  r9c9}\t\r  –\t\r  c6n9{r9\t\r  r7}\t\r  \n–\t\r   c6n3{r7\t\r   r456}\t\r   –\t\r   r4n3{c4\t\r   c9}\t\r   –\t\r   b3n3{r2c9\t\r   r1c7}\t\r   –\t\r   r1n9{c7\t\r   c2}\t\r   –\t\r   r4n9{c2\t\r   c8}\t\r   –\t\r   r2n9{c8\t\r   c5}\t\r   –\t\r  \nb2n3{r2c5\t\r  r2c4}\t\r  –\t\r  r2n7{c4\t\r  c3}\t\r  –\t\r  c3n1{r2\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  2\t\r  \ng-­‐whip[18]:\t\r  r4n1{c8\t\r  c5}\t\r  –\t\r  b2n1{r2c5\t\r  r1c6}\t\r  –\t\r  c6n9{r1\t\r  r789}\t\r  –\t\r  r7n9{c5\t\r  c6}\t\r  –\t\r  c6n3{r7\t\r  r456}\t\r  –\t\r  \nr4n3{c4\t\r  c9}\t\r  –\t\r  r4n2{c9\t\r  c4}\t\r  –\t\r  r5c5{n2\t\r  n7}\t\r  –\t\r  b6n7{r5c9\t\r  r6c9}\t\r  –\t\r  c9n4{r6\t\r  r8}\t\r  –\t\r  r8c7{n4\t\r  n2}\t\r  –\t\r  \nr8c5{n2\t\r   n8}\t\r   –\t\r   r3c5{n8\t\r   n9}\t\r   –\t\r   r2c5{n9\t\r   n3}\t\r   –\t\r   r1n3{c6\t\r   c7}\t\r   –\t\r   c7n9{r1\t\r   r9}\t\r   –\t\r   r9n1{c7\t\r   c1}\t\r   –\t\r  \nr9n2{c1\t\r  .}\t\r  ==>\t\r  r4c8\t\r  ≠\t\r  9\t\r  \nwhip[5]:\t\r  r4n9{c9\t\r  c2}\t\r  –\t\r  r1n9{c2\t\r  c6}\t\r  –\t\r  c6n1{r1\t\r  r6}\t\r  –\t\r  c7n1{r6\t\r  r9}\t\r  –\t\r  r9n9{c7\t\r  .}\t\r  ==>\t\r  r2c9\t\r  ≠\t\r  9\t\r  \ng-­‐whip[10]:\t\r   c5n1{r2\t\r   r4}\t\r   –\t\r   c6n1{r6\t\r   r1}\t\r   –\t\r   b2n3{r1c6\t\r   r123c4}\t\r   –\t\r   r4n3{c4\t\r   c9}\t\r   –\t\r   r4n9{c9\t\r   c2}\t\r   –\t\r  \nr2c2{n9\t\r  n5}\t\r  –\t\r  r1c2{n5\t\r  n8}\t\r  –\t\r  r1n9{c2\t\r  c789}\t\r  –\t\r  r2c8{n9\t\r  n2}\t\r  –\t\r  r2c9{n2\t\r  .}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  8\t\r  \ng-­‐whip[14]:\t\r  b9n1{r9c7\t\r  r7c8}\t\r  –\t\r  r4n1{c8\t\r  c5}\t\r  –\t\r  b2n1{r2c5\t\r  r1c6}\t\r  –\t\r  c6n9{r1\t\r  r7}\t\r  –\t\r  c6n3{r7\t\r  r456}\t\r  –\t\r  \nr4n3{c4\t\r  c9}\t\r  –\t\r  r4n9{c9\t\r  c2}\t\r  –\t\r  c2n4{r4\t\r  r789}\t\r  –\t\r  r7n4{c3\t\r  c2}\t\r  –\t\r  r7n6{c2\t\r  c4}\t\r  –\t\r  r4c4{n6\t\r  n2}\t\r  –\t\r  r9c4{n2\t\r  n7}\t\r  \n–\t\r  r9c6{n7\t\r  n5}\t\r  –\t\r  r8c6{n5\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  9\t\r  \nnaked-­‐single\t\r  ==>\t\r  r9c7\t\r  =\t\r  1\t\r  \nwhip[5]:\t\r  c6n5{r8\t\r  r9}\t\r  –\t\r  r9n9{c6\t\r  c9}\t\r  –\t\r  r4n9{c9\t\r  c2}\t\r  –\t\r  r1c2{n9\t\r  n8}\t\r  –\t\r  r2c2{n8\t\r  .}\t\r  ==>\t\r  r8c2\t\r  ≠\t\r  5\t\r  \nwhip[7]:\t\r   r4n9{c2\t\r   c9}\t\r   –\t\r   b9n9{r9c9\t\r   r7c8}\t\r   –\t\r   r2n9{c8\t\r   c5}\t\r   –\t\r   c5n1{r2\t\r   r4}\t\r   –\t\r   r4n3{c5\t\r   c4}\t\r   –\t\r  \nb2n3{r1c4\t\r  r1c6}\t\r  –\t\r  b2n1{r1c6\t\r  .}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  9\t\r  \nwhip[5]:\t\r   r1c2{n8\t\r   n5}\t\r   –\t\r   r2c2{n5\t\r   n9}\t\r   –\t\r   b4n9{r4c2\t\r   r5c1}\t\r   –\t\r   b4n3{r5c1\t\r   r6c1}\t\r   –\t\r   b4n8{r6c1\t\r   .}\t\r   ==>\t\r  \nr1c3\t\r  ≠\t\r  8,\t\r  r2c3\t\r  ≠\t\r  8,\t\r  r3c3\t\r  ≠\t\r  8\t\r  \nwhip[8]:\t\r   r1c2{n5\t\r   n8}\t\r   –\t\r   r2c2{n8\t\r   n9}\t\r   –\t\r   b4n9{r4c2\t\r   r5c1}\t\r   –\t\r   b4n3{r5c1\t\r   r6c1}\t\r   –\t\r   b4n8{r6c1\t\r   r6c3}\t\r   –\t\r  \nr6c7{n8\t\r  n4}\t\r  –\t\r  b3n4{r3c7\t\r  r3c8}\t\r  –\t\r  b3n5{r3c8\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  5\t\r  \nwhip[9]:\t\r   r1c2{n8\t\r   n5}\t\r   –\t\r   r2c2{n5\t\r   n9}\t\r   –\t\r   b4n9{r4c2\t\r   r5c1}\t\r   –\t\r   b4n3{r5c1\t\r   r6c1}\t\r   –\t\r   b4n8{r6c1\t\r   r6c3}\t\r   –\t\r  \nr6c7{n8\t\r  n4}\t\r  –\t\r  r3c7{n4\t\r  n9}\t\r  –\t\r  c8n9{r3\t\r  r7}\t\r  –\t\r  c5n9{r7\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  8\t\r  \nwhip[10]:\t\r   b7n5{r9c1\t\r   r9c2}\t\r   –\t\r   r1c2{n5\t\r   n8}\t\r   –\t\r   r2c2{n8\t\r   n9}\t\r   –\t\r   r4n9{c2\t\r   c9}\t\r   –\t\r   b9n9{r9c9\t\r   r7c8}\t\r   –\t\r  \nc5n9{r7\t\r  r3}\t\r  –\t\r  c6n9{r1\t\r  r9}\t\r  –\t\r  r9n7{c6\t\r  c4}\t\r  –\t\r  r3n7{c4\t\r  c3}\t\r  –\t\r  b1n6{r3c3\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  5\t\r  \nwhip[1]:\t\r  c1n5{r9\t\r  .}\t\r  ==>\t\r  r9c2\t\r  ≠\t\r  5\t\r  \t\r  \nwhip[3]:\t\r  c2n6{r7\t\r  r4}\t\r  –\t\r  c2n9{r4\t\r  r2}\t\r  –\t\r  r3c1{n9\t\r  .}\t\r  ==>\t\r  r8c1\t\r  ≠\t\r  6\t\r  \nwhip[1]:\t\r  b7n6{r9c2\t\r  .}\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  6\t\r  \t\r  \nwhip[5]:\t\r  b1n8{r2c1\t\r  r1c2}\t\r  –\t\r  b3n8{r1c9\t\r  r3c7}\t\r  –\t\r  b3n4{r3c7\t\r  r3c8}\t\r  –\t\r  b3n5{r3c8\t\r  r2c8}\t\r  –\t\r  c2n5{r2\t\r  .}\t\r  ==>\t\r  \nr2c4\t\r  ≠\t\r  8\t\r  \nwhip[8]:\t\r  r3c1{n9\t\r  n6}\t\r  –\t\r  r3c3{n6\t\r  n7}\t\r  –\t\r  r3c5{n7\t\r  n8}\t\r  –\t\r  b8n8{r8c5\t\r  r7c4}\t\r  –\t\r  c3n8{r7\t\r  r6}\t\r  –\t\r  r6c1{n8\t\r  n3}\t\r  –\t\r  \nr6c7{n3\t\r  n4}\t\r  –\t\r  b3n4{r3c7\t\r  .}\t\r  ==>\t\r  r3c8\t\r  ≠\t\r  9\t\r  \nwhip[10]:\t\r  r1c2{n8\t\r  n5}\t\r  –\t\r  r2c2{n5\t\r  n9}\t\r  –\t\r  b4n9{r4c2\t\r  r5c1}\t\r  –\t\r  b4n3{r5c1\t\r  r6c1}\t\r  –\t\r  b4n8{r6c1\t\r  r6c3}\t\r  –\t\r  \nr6c7{n8\t\r  n4}\t\r  –\t\r  r8n4{c7\t\r  c9}\t\r  –\t\r  r8n6{c9\t\r  c6}\t\r  –\t\r  c4n6{r9\t\r  r4}\t\r  –\t\r  b4n6{r4c3\t\r  .}\t\r  ==>\t\r  r8c2\t\r  ≠\t\r  8\t\r  \nwhip[9]:\t\r  r3c1{n9\t\r  n6}\t\r  –\t\r  r3c3{n6\t\r  n7}\t\r  –\t\r  r3c5{n7\t\r  n8}\t\r  –\t\r  r8n8{c5\t\r  c1}\t\r  –\t\r  r6c1{n8\t\r  n3}\t\r  –\t\r  r5c1{n3\t\r  n9}\t\r  –\t\r  \nb1n9{r2c1\t\r  r2c2}\t\r  –\t\r  c8n9{r2\t\r  r7}\t\r  –\t\r  c5n9{r7\t\r  .}\t\r  ==>\t\r  r3c7\t\r  ≠\t\r  9\t\r  \n\n190 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[8]:\t\r   r8c7{n2\t\r   n4}\t\r   –\t\r   r3c7{n4\t\r   n8}\t\r   –\t\r   c5n8{r3\t\r   r7}\t\r   –\t\r   c3n8{r7\t\r   r6}\t\r   –\t\r   b6n8{r6c9\t\r   r5c9}\t\r   –\t\r  \nb6n7{r5c9\t\r  r6c9}\t\r  –\t\r  c9n4{r6\t\r  r4}\t\r  –\t\r  r6n4{c8\t\r  .}\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  2\t\r  \nwhip[9]:\t\r  r1c2{n8\t\r  n5}\t\r  –\t\r  r1c4{n5\t\r  n3}\t\r  –\t\r  r2n3{c5\t\r  c9}\t\r  –\t\r  r4n3{c9\t\r  c5}\t\r  –\t\r  c5n1{r4\t\r  r2}\t\r  –\t\r  r1c6{n1\t\r  n9}\t\r  –\t\r  \nr1c7{n9\t\r  n2}\t\r  –\t\r  r8c7{n2\t\r  n4}\t\r  –\t\r  r3c7{n4\t\r  .}\t\r  ==>\t\r  r1c9\t\r  ≠\t\r  8\t\r  \nwhip[9]:\t\r  b3n3{r1c7\t\r  r2c9}\t\r  –\t\r  r4n3{c9\t\r  c5}\t\r  –\t\r  r4n1{c5\t\r  c8}\t\r  –\t\r  r6n1{c8\t\r  c6}\t\r  –\t\r  r1c6{n1\t\r  n9}\t\r  –\t\r  r1c9{n9\t\r  n2}\t\r  –\t\r  \nr4n2{c9\t\r  c4}\t\r  –\t\r  b8n2{r9c4\t\r  r7c5}\t\r  –\t\r  b8n9{r7c5\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  r1c2{n8\t\r  n5}\t\r  –\t\r  r1c4{n5\t\r  .}\t\r  ==>\t\r  r1c7\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  r1c4{n5\t\r  n8}\t\r  –\t\r  r3n8{c5\t\r  c7}\t\r  –\t\r  b3n4{r3c7\t\r  r3c8}\t\r  –\t\r  b3n5{r3c8\t\r  .}\t\r  ==>\t\r  r2c4\t\r  ≠\t\r  5\t\r  \nwhip[8]:\t\r  c7n9{r1\t\r  r5}\t\r  –\t\r  c1n9{r5\t\r  r3}\t\r  –\t\r  b1n6{r3c1\t\r  r3c3}\t\r  –\t\r  r4c3{n6\t\r  n4}\t\r  –\t\r  r6c3{n4\t\r  n8}\t\r  –\t\r  c7n8{r6\t\r  r3}\t\r  –\t\r  \nb3n4{r3c7\t\r  r3c8}\t\r  –\t\r  b3n5{r3c8\t\r  .}\t\r  ==>\t\r  r2c8\t\r  ≠\t\r  9\t\r  \nwhip[1]:\t\r  b3n9{r1c7\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  9\t\r  \t\r  \nwhip[1]:\t\r  c6n9{r9\t\r  .}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  9\t\r  \t\r  \nwhip[4]:\t\r  r1c3{n2\t\r  n1}\t\r  –\t\r  r2c3{n1\t\r  n7}\t\r  –\t\r  r2c4{n7\t\r  n3}\t\r  –\t\r  r1c6{n3\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  2\t\r  \nwhip[1]:\t\r  c1n2{r9\t\r  .}\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  2\t\r  \t\r  \nwhip[5]:\t\r  r6n1{c8\t\r  c6}\t\r  –\t\r  r1c6{n1\t\r  n3}\t\r  –\t\r  r2n3{c5\t\r  c9}\t\r  –\t\r  b3n8{r2c9\t\r  r3c7}\t\r  –\t\r  b3n4{r3c7\t\r  .}\t\r  ==>\t\r  r6c8\t\r  ≠\t\r  4\t\r  \nwhip[7]:\t\r   r6c8{n6\t\r   n1}\t\r   –\t\r   c6n1{r6\t\r   r1}\t\r   –\t\r   c5n1{r2\t\r   r4}\t\r   –\t\r   r4n3{c5\t\r   c4}\t\r   –\t\r   c6n3{r6\t\r   r7}\t\r   –\t\r   r7n9{c6\t\r   c8}\t\r   –\t\r  \nb9n6{r7c8\t\r  .}\t\r  ==>\t\r  r4c9\t\r  ≠\t\r  6\t\r  \nwhip[8]:\t\r  r8c7{n2\t\r  n4}\t\r  –\t\r  r8c9{n4\t\r  n6}\t\r  –\t\r  r8c2{n6\t\r  n7}\t\r  –\t\r  r9c2{n7\t\r  n6}\t\r  –\t\r  r9c4{n6\t\r  n7}\t\r  –\t\r  r2c4{n7\t\r  n3}\t\r  –\t\r  \nr2c9{n3\t\r  n8}\t\r  –\t\r  r3c7{n8\t\r  .}\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  2\t\r  \nwhip[8]:\t\r  c2n5{r2\t\r  r1}\t\r  –\t\r  b1n8{r1c2\t\r  r2c1}\t\r  –\t\r  c1n9{r2\t\r  r5}\t\r  –\t\r  c8n9{r5\t\r  r7}\t\r  –\t\r  r9n9{c9\t\r  c6}\t\r  –\t\r  r9n5{c6\t\r  c1}\t\r  –\t\r  \nr8c1{n5\t\r  n2}\t\r  –\t\r  b9n2{r8c7\t\r  .}\t\r  ==>\t\r  r2c2\t\r  ≠\t\r  9\t\r  \nhidden-­‐single-­‐in-­‐a-­‐column\t\r  ==>\t\r  r4c2\t\r  =\t\r  9\t\r  \nwhip[1]:\t\r  c2n4{r8\t\r  .}\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  4\t\r  \t\r  \nwhip[2]:\t\r  r1c2{n8\t\r  n5}\t\r  –\t\r  r2c2{n5\t\r  .}\t\r  ==>\t\r  r7c2\t\r  ≠\t\r  8\t\r  \nwhip[1]:\t\r  c2n8{r1\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  8\t\r  \t\r  \nwhip[5]:\t\r  r8c5{n8\t\r  n7}\t\r  –\t\r  r3c5{n7\t\r  n9}\t\r  –\t\r  c1n9{r3\t\r  r2}\t\r  –\t\r  c1n1{r2\t\r  r7}\t\r  –\t\r  r7c3{n1\t\r  .}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  b8n9{r7c6\t\r  r9c6}\t\r  –\t\r  r9n5{c6\t\r  c1}\t\r  –\t\r  r9n2{c1\t\r  c4}\t\r  –\t\r  r7c5{n2\t\r  .}\t\r  ==>\t\r  r7c6\t\r  ≠\t\r  3\t\r  \ng-­‐whip[2]:\t\r  r4n3{c9\t\r  c456}\t\r  –\t\r  c6n3{r5\t\r  .}\t\r  ==>\t\r  r1c9\t\r  ≠\t\r  3\t\r  \nwhip[3]:\t\r  b4n3{r5c1\t\r  r6c1}\t\r  –\t\r  c7n3{r6\t\r  r1}\t\r  –\t\r  c6n3{r1\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  3\t\r  \nwhip[3]:\t\r  b4n3{r5c1\t\r  r6c1}\t\r  –\t\r  c7n3{r6\t\r  r1}\t\r  –\t\r  c6n3{r1\t\r  .}\t\r  ==>\t\r  r5c9\t\r  ≠\t\r  3\t\r  \nwhip[3]:\t\r  c9n8{r6\t\r  r2}\t\r  –\t\r  b3n3{r2c9\t\r  r1c7}\t\r  –\t\r  c7n9{r1\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  c4n8{r3\t\r  r7}\t\r  –\t\r  c3n8{r7\t\r  r6}\t\r  –\t\r  c7n8{r6\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  8\t\r  \nhidden-­‐single-­‐in-­‐a-­‐column\t\r  ==>\t\r  r8c5\t\r  =\t\r  8\t\r  \nwhip[2]:\t\r  b2n5{r3c4\t\r  r1c4}\t\r  –\t\r  c4n8{r1\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  7\t\r  \nwhip[2]:\t\r  r7n1{c1\t\r  c3}\t\r  –\t\r  r7n8{c3\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  r9c2{n6\t\r  n7}\t\r  –\t\r  b8n7{r9c6\t\r  r8c6}\t\r  –\t\r  b8n5{r8c6\t\r  .}\t\r  ==>\t\r  r9c6\t\r  ≠\t\r  6\t\r  \nwhip[4]:\t\r  r9c9{n9\t\r  n6}\t\r  –\t\r  r9c2{n6\t\r  n7}\t\r  –\t\r  r9c4{n7\t\r  n2}\t\r  –\t\r  r7n2{c5\t\r  .}\t\r  ==>\t\r  r7c8\t\r  ≠\t\r  9\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n7.7.5. B∞ ⊄ gW∞: a puzzle P with gW(P) = ∞ but B(P) = 6 \nWith Figure 7.5, we now have the converse case of a puzzle P (of moderate \ndifficulty) not solvable by g-whips but solvable by braids: B(P) = gB(P) = 6 but \nW(P) = gW(P) = ∞.  \n\n7. g-labels, g-candidates, g-whips and g-braids     \n191 \nNot only is this puzzle not solvable by whips or g-whips, it allows no \nelimination at all by whips or g-whips at the start. Let us try with braids : \n \n \n  \n  \n  \n \n  1 \n \n \n2     8 9 4 6 5 1 3 7 2 \n \n1   \n  3 \n \n  4       7 1 6 8 3 2 9 4 5 \n  \n  5 4   \n \n6 \n \n \n    3 2 5 4 7 9 6 8 1 \n \n  3 5   \n \n7   \n      2 8 3 5 9 6 7 1 4 \n  4   \n \n \n  \n \n2       5 4 9 7 1 3 8 2 6 \n1   \n \n  \n  8   \n  9     1 6 7 2 4 8 5 3 9 \n \n  2 9 \n \n  1   \n      4 7 2 9 8 5 1 6 3 \n  3   \n  6   \n   \n7     9 3 8 1 6 4 2 5 7 \n6 \n \n \n  \n  7 \n \n9 \n \n    6 5 1 3 2 7 4 9 8 \nFigure 7.5. A puzzle P with B(P) = 6 but gW(P) = W(P) = ∞ \n*****\t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  B\t\r  *****\t\r  \n25\t\r  givens,\t\r  204\t\r  candidates,\t\r  1214\t\r  csp-­‐links\t\r  and\t\r  1214\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.47\t\r  \nbraid[5]:\t\r  b9n6{r7c9\t\r  r7c8}\t\r  –\t\r  r7n3{c8\t\r  c6}\t\r  –\t\r  r2c9{n8\t\r  n5}\t\r  –\t\r  c6n5{r2\t\r  r8}\t\r  –\t\r  r8c8{n8\t\r  .}\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  8\t\r  \nbraid[5]:\t\r  b9n2{r9c7\t\r  r8c7}\t\r  –\t\r  c7n4{r8\t\r  r6}\t\r  –\t\r  r8c8{n8\t\r  n5}\t\r  –\t\r  r6n5{c7\t\r  c2}\t\r  –\t\r  r9c2{n8\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  8\t\r  \nbraid[6]:\t\r  r9c2{n5\t\r  n8}\t\r  –\t\r  r8c8{n5\t\r  n8}\t\r  –\t\r  r2c9{n5\t\r  n8}\t\r  –\t\r  c7n8{r1\t\r  r5}\t\r  –\t\r  c3n8{r2\t\r  r1}\t\r  –\t\r  c4n8{r9\t\r  .}\t\r  ==>\t\r  \nr9c9\t\r  ≠\t\r  5\t\r  \nwhip[6]:\t\r   b4n5{r5c1\t\r   r6c2}\t\r   –\t\r   r9n5{c2\t\r   c5}\t\r   –\t\r   r1n5{c5\t\r   c8}\t\r   –\t\r   r2c9{n5\t\r   n8}\t\r   –\t\r   b6n8{r5c9\t\r   r4c8}\t\r   –\t\r  \nr8c8{n8\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  5\t\r  \nbraid[5]:\t\r  r5c7{n8\t\r  n3}\t\r  –\t\r  r8c8{n8\t\r  n5}\t\r  –\t\r  c6n3{r5\t\r  r7}\t\r  –\t\r  r7c8{n8\t\r  n6}\t\r  –\t\r  r6c8{n6\t\r  .}\t\r  ==>\t\r  r4c8\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  r5n5{c1\t\r  c9}\t\r  –\t\r  r2c9{n5\t\r  n8}\t\r  –\t\r  b6n8{r5c9\t\r  .}\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  8\t\r  \nbraid[5]:\t\r  r5c7{n8\t\r  n3}\t\r  –\t\r  r8c8{n8\t\r  n5}\t\r  –\t\r  c6n3{r5\t\r  r7}\t\r  –\t\r  r7c8{n8\t\r  n6}\t\r  –\t\r  r6c8{n6\t\r  .}\t\r  ==>\t\r  r8c7\t\r  ≠\t\r  8\t\r  \nwhip[6]:\t\r  b2n5{r1c5\t\r  r2c6}\t\r  –\t\r  c9n5{r2\t\r  r5}\t\r  –\t\r  c1n5{r5\t\r  r8}\t\r  –\t\r  r9c2{n5\t\r  n8}\t\r  –\t\r  b8n8{r9c5\t\r  r8c4}\t\r  –\t\r  r8c8{n8\t\r  .}\t\r  \n==>\t\r  r7c5\t\r  ≠\t\r  5\t\r  \nbraid[5]:\t\r  r7c5{n8\t\r  n4}\t\r  –\t\r  r8c8{n8\t\r  n5}\t\r  –\t\r  r6n4{c5\t\r  c7}\t\r  –\t\r  r8c7{n5\t\r  n2}\t\r  –\t\r  r8c6{n5\t\r  .}\t\r  ==>\t\r  r7c8\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  c5n5{r1\t\r  r9}\t\r  –\t\r  r9c2{n5\t\r  n8}\t\r  –\t\r  r7n8{c1\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  r7c5{n8\t\r  n4}\t\r  –\t\r  r6n4{c5\t\r  c7}\t\r  –\t\r  b9n4{r9c7\t\r  r9c9}\t\r  –\t\r  b9n8{r9c9\t\r  .}\t\r  ==>\t\r  r8c4\t\r  ≠\t\r  8\t\r  \nbraid[6]:\t\r  b8n5{r8c6\t\r  r9c5}\t\r  –\t\r  r2c9{n5\t\r  n8}\t\r  –\t\r  r9c2{n5\t\r  n8}\t\r  –\t\r  r4n8{c9\t\r  c1}\t\r  –\t\r  b8n8{r9c5\t\r  r7c5}\t\r  –\t\r  \nr3n8{c9\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  5\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r1c5\t\r  =\t\r  5\t\r  \nwhip[2]:\t\r  r9n5{c2\t\r  c7}\t\r  –\t\r  c8n5{r7\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  5\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r5c1\t\r  =\t\r  5\t\r  \nwhip[6]:\t\r   b8n3{r7c6\t\r   r9c4}\t\r   –\t\r   r6n3{c4\t\r   c7}\t\r   –\t\r   b6n4{r6c7\t\r   r4c9}\t\r   –\t\r   r9c9{n4\t\r   n8}\t\r   –\t\r   r8c8{n8\t\r   n5}\t\r   –\t\r  \nb6n5{r6c8\t\r  .}\t\r  ==>\t\r  r7c8\t\r  ≠\t\r  3\t\r  \nwhip[4]:\t\r  r4c8{n1\t\r  n6}\t\r  –\t\r  r7c8{n6\t\r  n5}\t\r  –\t\r  b6n5{r6c8\t\r  r6c7}\t\r  –\t\r  b6n4{r6c7\t\r  .}\t\r  ==>\t\r  r4c9\t\r  ≠\t\r  1\t\r  \nwhip[5]:\t\r  c8n3{r1\t\r  r6}\t\r  –\t\r  b6n5{r6c8\t\r  r6c7}\t\r  –\t\r  c7n3{r6\t\r  r9}\t\r  –\t\r  c7n4{r9\t\r  r8}\t\r  –\t\r  b9n2{r8c7\t\r  .}\t\r  ==>\t\r  r3c9\t\r  ≠\t\r  3\t\r  \nwhip[6]:\t\r  r6n4{c7\t\r  c5}\t\r  –\t\r  c6n4{r4\t\r  r7}\t\r  –\t\r  b8n3{r7c6\t\r  r9c4}\t\r  –\t\r  r9c9{n3\t\r  n8}\t\r  –\t\r  r8c8{n8\t\r  n5}\t\r  –\t\r  b8n5{r8c6\t\r  .}\t\r  \n==>\t\r  r8c7\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  r8c4{n1\t\r  n2}\t\r  –\t\r  r8c7{n2\t\r  n5}\t\r  –\t\r  b8n5{r8c6\t\r  r7c6}\t\r  –\t\r  b8n3{r7c6\t\r  .}\t\r  ==>\t\r  r9c4\t\r  ≠\t\r  1\t\r  \nwhip[4]:\t\r  b9n4{r9c9\t\r  r7c9}\t\r  –\t\r  r7n3{c9\t\r  c6}\t\r  –\t\r  b8n5{r7c6\t\r  r8c6}\t\r  –\t\r  b8n4{r8c6\t\r  .}\t\r  ==>\t\r  r9c3\t\r  ≠\t\r  4\t\r  \n\n192 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[6]:\t\r   b8n5{r8c6\t\r   r7c6}\t\r   –\t\r   b8n3{r7c6\t\r   r9c4}\t\r   –\t\r   r9n2{c4\t\r   c7}\t\r   –\t\r   c7n4{r9\t\r   r6}\t\r   –\t\r   b6n5{r6c7\t\r   r6c8}\t\r   –\t\r  \nr6n3{c8\t\r  .}\t\r  ==>\t\r  r8c6\t\r  ≠\t\r  2\t\r  \nwhip[6]:\t\r   c7n4{r9\t\r   r6}\t\r   –\t\r   b6n5{r6c7\t\r   r6c8}\t\r   –\t\r   r6n3{c8\t\r   c4}\t\r   –\t\r   b8n3{r9c4\t\r   r7c6}\t\r   –\t\r   b8n5{r7c6\t\r   r8c6}\t\r   –\t\r  \nr8c7{n5\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  2\t\r  \nsingles\t\r  ==>\t\r  r8c7\t\r  =\t\r  2,\t\r  r8c4\t\r  =\t\r  1,\t\r  r9c3\t\r  =\t\r  1\t\r  \nwhip[5]:\t\r  r2n7{c1\t\r  c4}\t\r  –\t\r  r5n7{c4\t\r  c5}\t\r  –\t\r  r3n7{c5\t\r  c8}\t\r  –\t\r  c8n1{r3\t\r  r4}\t\r  –\t\r  c5n1{r4\t\r  .}\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  7\t\r  \nwhip[5]:\t\r  r3c6{n2\t\r  n9}\t\r  –\t\r  r2c6{n9\t\r  n6}\t\r  –\t\r  r5c6{n6\t\r  n3}\t\r  –\t\r  b8n3{r7c6\t\r  r9c4}\t\r  –\t\r  b8n2{r9c4\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  2\t\r  \nwhip[5]:\t\r  c2n9{r1\t\r  r4}\t\r  –\t\r  c5n9{r4\t\r  r5}\t\r  –\t\r  r5n1{c5\t\r  c9}\t\r  –\t\r  b3n1{r3c9\t\r  r3c8}\t\r  –\t\r  r3n3{c8\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  9\t\r  \nwhip[6]:\t\r  b6n5{r6c8\t\r  r6c7}\t\r  –\t\r  r6n4{c7\t\r  c5}\t\r  –\t\r  r7c5{n4\t\r  n8}\t\r  –\t\r  r9c5{n8\t\r  n2}\t\r  –\t\r  r9c4{n2\t\r  n3}\t\r  –\t\r  r6n3{c4\t\r  .}\t\r  \n==>\t\r  r6c8\t\r  ≠\t\r  6\t\r  \nwhip[6]:\t\r  r3c9{n8\t\r  n1}\t\r  –\t\r  r5n1{c9\t\r  c5}\t\r  –\t\r  c5n9{r5\t\r  r4}\t\r  –\t\r  r5n9{c6\t\r  c3}\t\r  –\t\r  r5n7{c3\t\r  c4}\t\r  –\t\r  c5n7{r6\t\r  .}\t\r  ==>\t\r  \nr3c5\t\r  ≠\t\r  8\t\r  \nwhip[1]:\t\r  c5n8{r9\t\r  .}\t\r  ==>\t\r  r9c4\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  c4n8{r2\t\r  r1}\t\r  –\t\r  c7n8{r1\t\r  r5}\t\r  –\t\r  c3n8{r5\t\r  r8}\t\r  –\t\r  b9n8{r8c8\t\r  .}\t\r  ==>\t\r  r2c9\t\r  ≠\t\r  8\t\r  \nnaked-­‐single\t\r  ==>\t\r  r2c9\t\r  =\t\r  5\t\r  \nwhip[2]:\t\r  c7n4{r6\t\r  r9}\t\r  –\t\r  c7n5{r9\t\r  .}\t\r  ==>\t\r  r6c7\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  c7n4{r9\t\r  r6}\t\r  –\t\r  c7n5{r6\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  3\t\r  \nwhip[1]:\t\r  b9n3{r9c9\t\r  .}\t\r  ==>\t\r  r5c9\t\r  ≠\t\r  3\t\r  \nwhip[4]:\t\r  c7n4{r9\t\r  r6}\t\r  –\t\r  b6n5{r6c7\t\r  r6c8}\t\r  –\t\r  r6n3{c8\t\r  c4}\t\r  –\t\r  r9n3{c4\t\r  .}\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  r6n4{c5\t\r  c7}\t\r  –\t\r  c9n4{r4\t\r  .}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  4\t\r  \nnaked-­‐single\t\r  ==>\t\r  r7c5\t\r  =\t\r  8\t\r  \nwhip[2]:\t\r  b6n4{r4c9\t\r  r6c7}\t\r  –\t\r  r9n4{c7\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  4\t\r  \nwhip[3]:\t\r  r8c8{n5\t\r  n8}\t\r  –\t\r  r9n8{c9\t\r  c2}\t\r  –\t\r  b7n5{r9c2\t\r  .}\t\r  ==>\t\r  r7c8\t\r  ≠\t\r  5\t\r  \nsingles\t\r  ==>\t\r  r7c8\t\r  =\t\r  6,\t\r  r4c8\t\r  =\t\r  1,\t\r  r3c9\t\r  =\t\r  1,\t\r  r5c5\t\r  =\t\r  1\t\r  \nwhip[3]:\t\r  b5n4{r4c6\t\r  r6c5}\t\r  –\t\r  r9c5{n4\t\r  n2}\t\r  –\t\r  r4c5{n2\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  b9n4{r7c9\t\r  r9c7}\t\r  –\t\r  r9n5{c7\t\r  c2}\t\r  –\t\r  r7n5{c2\t\r  .}\t\r  ==>\t\r  r7c6\t\r  ≠\t\r  4\t\r  \nwhip[3]:\t\r  r5c7{n3\t\r  n8}\t\r  –\t\r  c9n8{r5\t\r  r9}\t\r  –\t\r  r9n3{c9\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  3\t\r  \nwhip[3]:\t\r  b4n7{r6c3\t\r  r5c3}\t\r  –\t\r  r5n9{c3\t\r  c6}\t\r  –\t\r  b5n3{r5c6\t\r  .}\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  r6n6{c2\t\r  c4}\t\r  –\t\r  b5n3{r6c4\t\r  r5c6}\t\r  –\t\r  r5n9{c6\t\r  .}\t\r  ==>\t\r  r5c3\t\r  ≠\t\r  6\t\r  \nwhip[4]:\t\r  c3n4{r1\t\r  r8}\t\r  –\t\r  r8c6{n4\t\r  n5}\t\r  –\t\r  r8c8{n5\t\r  n8}\t\r  –\t\r  r3n8{c8\t\r  .}\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  b9n8{r9c9\t\r  r8c8}\t\r  –\t\r  c3n8{r8\t\r  r2}\t\r  –\t\r  r3n8{c2\t\r  .}\t\r  ==>\t\r  r5c9\t\r  ≠\t\r  8\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n7.7.6. gB∞ ≠ gW∞: a puzzle solvable by g-braids but probably not by g-whips \nFinding a Sudoku puzzle solvable by g-braids but neither by braids nor by g-\nwhips is very hard: one can rely neither on random generators (all the puzzles we \nproduced with them – about ten millions – were solvable by whips) nor on Subset \nrules that would not be subsumed by g-whips but would be by g-braids (see chapter \n8 for comments on this). The following (Figure 7.6) gives the only such puzzle \n(#77) in the Magictour-top1465 collection. Using the “gT&E vs g-braids” and “T&E \nvs braids” theorems, it is easy to show that it can be solved by g-braids but not by \nbraids. And the following resolution path with g-whips shows that these are not \nenough either to make substantial advances in the solution. \n \n\n7. g-labels, g-candidates, g-whips and g-braids     \n193 \n \n7   \n  \n \n  \n  4 \n \n \n    7 9 8 6 3 5 4 2 1 \n \n2   \n  7 \n \n  8       1 2 6 9 7 4 5 8 3 \n  \n  3 \n \n  8   \n \n9     4 5 3 2 1 8 6 7 9 \n \n  \n  5   \n  3   \n      9 7 2 5 8 6 3 1 4 \n  6   \n \n2   \n \n9       5 6 4 1 2 3 8 9 7 \n \n  1   \n  7   \n  6     3 8 1 4 9 7 2 5 6 \n \n  \n  3 \n \n  9   \n      6 1 7 3 5 2 9 4 8 \n  3   \n  4   \n  6       8 3 5 7 4 9 1 6 2 \n  \n \n9   \n  1 \n \n  5     2 4 9 8 6 1 7 3 5 \nFigure 7.6. A puzzle (Magictour-top1465#77) solvable by g-braids but not by braids and \nprobably not by g-whips \n*****\t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  gW\t\r  *****\t\r  \n24\t\r  givens,\t\r  219\t\r  candidates,\t\r  1397\t\r  csp-­‐links\t\r  and\t\r  1397\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.46.\t\r  \nhidden-­‐single-­‐in-­‐a-­‐row\t\r  ==>\t\r  r9c8\t\r  =\t\r  3\t\r  \nwhip[1]:\t\r  r9n4{c2\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  4,\t\r  r7c2\t\r  ≠\t\r  4,\t\r  r7c3\t\r  ≠\t\r  4\t\r  \ng-­‐whip[8]:\t\r  c4n6{r2\t\r  r9}\t\r  –\t\r  r1n6{c4\t\r  c3}\t\r  –\t\r  b1n8{r1c3\t\r  r1c2}\t\r  –\t\r  b1n9{r1c2\t\r  r2c1}\t\r  –\t\r  b1n1{r2c1\t\r  r3c123}\t\r  –\t\r  \nr3c5{n1\t\r  n5}\t\r  –\t\r  r7c5{n5\t\r  n8}\t\r  –\t\r  r9c5{n8\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  6\t\r  \nwhip[11]:\t\r  c3n4{r4\t\r  r2}\t\r  –\t\r  c6n4{r2\t\r  r4}\t\r  –\t\r  b5n6{r4c6\t\r  r4c5}\t\r  –\t\r  r9c5{n6\t\r  n8}\t\r  –\t\r  r7c5{n8\t\r  n5}\t\r  –\t\r  r3c5{n5\t\r  n1}\t\r  \n–\t\r  c4n1{r3\t\r  r5}\t\r  –\t\r  b5n8{r5c4\t\r  r6c4}\t\r  –\t\r  b5n9{r6c4\t\r  r6c5}\t\r  –\t\r  r6c2{n9\t\r  n5}\t\r  –\t\r  r3c2{n5\t\r  .}\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  4\t\r  \nwhip[12]:\t\r  r9c5{n8\t\r  n6}\t\r  –\t\r  r7c5{n6\t\r  n5}\t\r  –\t\r  r3c5{n5\t\r  n1}\t\r  –\t\r  r4c5{n1\t\r  n9}\t\r  –\t\r  r6c4{n9\t\r  n4}\t\r  –\t\r  r5c6{n4\t\r  n3}\t\r  –\t\r  \nb4n3{r5c1\t\r  r6c1}\t\r  –\t\r  c1n9{r6\t\r  r2}\t\r  –\t\r  r2c4{n9\t\r  n6}\t\r  –\t\r  r1n6{c6\t\r  c3}\t\r  –\t\r  b1n8{r1c3\t\r  r1c2}\t\r  –\t\r  b1n1{r1c2\t\r  .}\t\r  ==>\t\r  \nr6c5\t\r  ≠\t\r  8\t\r  \ng-­‐whip[14]:\t\r   r3n4{c4\t\r   c123}\t\r   –\t\r   c3n4{r2\t\r   r4}\t\r   –\t\r   c6n4{r4\t\r   r2}\t\r   –\t\r   r5c6{n4\t\r   n3}\t\r   –\t\r   b4n3{r5c1\t\r   r6c1}\t\r   –\t\r  \nr6n4{c1\t\r  c8}\t\r   –\t\r   r6n2{c8\t\r   c7}\t\r   –\t\r   b4n2{r6c1\t\r   r4c1}\t\r   –\t\r   r9n2{c1\t\r   c4}\t\r   –\t\r   c6n2{r8\t\r   r1}\t\r   –\t\r   b2n3{r1c6\t\r   r1c5}\t\r   –\t\r  \nr1c9{n3\t\r  n1}\t\r  –\t\r  r5n1{c9\t\r  c7}\t\r  –\t\r  b6n5{r5c7\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  4\t\r  \nwhip[15]:\t\r   b3n6{r2c7\t\r   r3c7}\t\r   –\t\r   b3n7{r3c7\t\r   r3c8}\t\r   –\t\r   r3n2{c8\t\r   c4}\t\r   –\t\r   c4n4{r3\t\r   r6}\t\r   –\t\r   r5c6{n4\t\r   n3}\t\r   –\t\r  \nr6c5{n3\t\r  n9}\t\r   –\t\r   r4c6{n9\t\r   n6}\t\r   –\t\r   r1n6{c6\t\r   c3}\t\r   –\t\r   b1n8{r1c3\t\r   r1c2}\t\r   –\t\r   r6c2{n8\t\r   n5}\t\r   –\t\r   c8n5{r6\t\r   r1}\t\r   –\t\r  \nr1c6{n5\t\r  n9}\t\r  –\t\r  r1c4{n9\t\r  n1}\t\r  –\t\r  r5c4{n1\t\r  n8}\t\r  –\t\r  r5c1{n8\t\r  .}\t\r  ==>\t\r  r2c4\t\r  ≠\t\r  6\t\r  \nAfter this point, there is no whip or g-whip of length less than 18. While trying \ng-whips[18], the number of partial g-whips to be analysed suddenly gets so large \nthat SudoRules encounters memory overflow problems. Given the poor partial \nresults above (only 8 eliminations after the HS(row)), it is unlikely that a g-whip \nsolution can be obtained.  \nExercise for the reader: write a better implementation of g-whips (less greedy for \nmemory) and prove that there is indeed no g-whip solution. \n7.7.7. A puzzle with all the W, B and gW ratings finite, but very different \nIn section 5.10.4, we mentioned a puzzle P (Figure 5.6) with W(P) = 31 and \nB(P) = 19. We shall now show that gW(P) = 12. This will show that, even when all \nthe ratings are finite, they can, in extremely rare cases, be very different. The path \n\n194 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwith g-whips is radically different from the start from the paths with whips or \nbraids. It can also be shown that gB(P) = 11. \nTogether with all the previous ones, this example shows that “obstructions” to \nthe extension of partial whips into longer ones can sometimes be palliated by two \nvery different mild forms of branching: as in braids or as in g-whips. Moreover, \nmost of the time, the g-whip type is more powerful than the braid type, even though \nit does not subsume it. \n \n*****\t\r  \t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  gW\t\r  \t\r  \t\r  *****\t\r  \n24\t\r  givens,\t\r  220\t\r  candidates,\t\r  1433\t\r  csp-­‐links\t\r  and\t\r  1433\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.49\t\r  \ng-­‐whip[6]:\t\r   b2n4{r3c6\t\r   r1c4}\t\r   –\t\r   c3n4{r1\t\r   r456}\t\r   –\t\r   r6n4{c2\t\r   c3}\t\r   –\t\r   b4n8{r6c3\t\r   r4c1}\t\r   –\t\r   r3n8{c1\t\r   c5}\t\r   –\t\r  \nc6n8{r3\t\r  .}\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  6,\t\r  r3c6\t\r  ≠\t\r  9\t\r  \ng-­‐whip[6]:\t\r   b4n8{r6c3\t\r   r4c1}\t\r   –\t\r   r3n8{c1\t\r   c456}\t\r   –\t\r   c6n8{r2\t\r   r3}\t\r   –\t\r   b2n4{r3c6\t\r   r1c4}\t\r   –\t\r   c3n4{r1\t\r   r5}\t\r   –\t\r  \nr6n4{c3\t\r  .}\t\r  ==>\t\r  r6c3\t\r  ≠\t\r  6,\t\r  r6c3\t\r  ≠\t\r  1\t\r  \nwhip[11]:\t\r   c8n9{r1\t\r   r5}\t\r   –\t\r   r4c9{n9\t\r   n5}\t\r   –\t\r   r2n5{c9\t\r   c4}\t\r   –\t\r   b2n7{r2c4\t\r   r1c4}\t\r   –\t\r   b2n4{r1c4\t\r   r3c6}\t\r   –\t\r  \nr5c6{n4\t\r  n3}\t\r  –\t\r  c4n3{r5\t\r  r7}\t\r  –\t\r  b8n8{r7c4\t\r  r7c5}\t\r  –\t\r  b2n8{r3c5\t\r  r2c6}\t\r  –\t\r  r3n8{c6\t\r  c1}\t\r  –\t\r  r4n8{c1\t\r  .}\t\r  ==>\t\r  \nr2c7\t\r  ≠\t\r  9\t\r  \nwhip[11]:\t\r   r8n1{c1\t\r   c5}\t\r   –\t\r   r9c4{n1\t\r   n5}\t\r   –\t\r   c2n5{r9\t\r   r4}\t\r   –\t\r   b4n7{r4c2\t\r   r4c1}\t\r   –\t\r   b4n8{r4c1\t\r   r6c3}\t\r   –\t\r  \nr6c5{n8\t\r  n2}\t\r  –\t\r  r4n2{c6\t\r  c7}\t\r  –\t\r  b6n4{r4c7\t\r  r5c7}\t\r  –\t\r  b4n4{r5c3\t\r  r6c2}\t\r  –\t\r  c3n4{r6\t\r  r1}\t\r  –\t\r  c4n4{r1\t\r  .}\t\r  ==>\t\r  \nr7c2\t\r  ≠\t\r  1\t\r  \nwhip[12]:\t\r   r6n4{c2\t\r   c4}\t\r   –\t\r   r4n4{c6\t\r   c7}\t\r   –\t\r   b6n2{r4c7\t\r   r6c8}\t\r   –\t\r   r6n3{c8\t\r   c9}\t\r   –\t\r   r6n6{c9\t\r   c2}\t\r   –\t\r  \nr6n1{c2\t\r  c5}\t\r   –\t\r   r5c4{n1\t\r   n3}\t\r   –\t\r   r5c6{n3\t\r   n9}\t\r   –\t\r   r4n9{c6\t\r   c9}\t\r   –\t\r   r2n9{c9\t\r   c2}\t\r   –\t\r   c2n1{r2\t\r   r9}\t\r   –\t\r  \nr8n1{c1\t\r  .}\t\r  ==>\t\r  r5c3\t\r  ≠\t\r  4\t\r  \ng-­‐whip[5]:\t\r   c3n4{r1\t\r   r6}\t\r   –\t\r   b4n8{r6c3\t\r   r4c1}\t\r   –\t\r   r3n8{c1\t\r   c456}\t\r   –\t\r   c6n8{r2\t\r   r3}\t\r   –\t\r   b2n4{r3c6\t\r   .}\t\r   ==>\t\r  \nr1c2\t\r  ≠\t\r  4\t\r  \ng-­‐whip[5]:\t\r   c3n4{r1\t\r   r6}\t\r   –\t\r   b4n8{r6c3\t\r   r4c1}\t\r   –\t\r   r3n8{c1\t\r   c456}\t\r   –\t\r   c6n8{r2\t\r   r3}\t\r   –\t\r   b2n4{r3c6\t\r   .}\t\r   ==>\t\r  \nr1c1\t\r  ≠\t\r  4\t\r  \nwhip[10]:\t\r  c3n4{r1\t\r  r6}\t\r  –\t\r  b4n8{r6c3\t\r  r4c1}\t\r  –\t\r  b1n8{r1c1\t\r  r2c3}\t\r  –\t\r  b1n2{r2c3\t\r  r2c1}\t\r  –\t\r  c1n7{r2\t\r  r8}\t\r  –\t\r  \nc2n7{r9\t\r  r4}\t\r  –\t\r  b4n5{r4c2\t\r  r5c1}\t\r  –\t\r  c1n1{r5\t\r  r7}\t\r  –\t\r  b9n1{r7c9\t\r  r9c9}\t\r  –\t\r  b9n7{r9c9\t\r  .}\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  7\t\r  \nwhip[11]:\t\r   c3n7{r9\t\r   r2}\t\r   –\t\r   b1n2{r2c3\t\r   r2c1}\t\r   –\t\r   b1n1{r2c1\t\r   r2c2}\t\r   –\t\r   c2n7{r2\t\r   r4}\t\r   –\t\r   r9n7{c2\t\r   c9}\t\r   –\t\r  \nb9n1{r9c9\t\r  r7c9}\t\r  –\t\r  c1n1{r7\t\r  r5}\t\r  –\t\r  b4n5{r5c1\t\r  r4c1}\t\r  –\t\r  r4c9{n5\t\r  n9}\t\r  –\t\r  r5n9{c8\t\r  c6}\t\r  –\t\r  r2n9{c6\t\r  .}\t\r  ==>\t\r  \nr8c1\t\r  ≠\t\r  7\t\r  \ng-­‐whip[11]:\t\r   b1n2{r2c1\t\r   r2c3}\t\r   –\t\r   c3n8{r2\t\r   r6}\t\r   –\t\r   c3n4{r6\t\r   r1}\t\r   –\t\r   r3n4{c2\t\r   c6}\t\r   –\t\r   r3n8{c6\t\r   c5}\t\r   –\t\r  \nb8n8{r7c5\t\r   r7c4}\t\r   –\t\r   b8n3{r7c4\t\r   r8c6}\t\r   –\t\r   r5c6{n3\t\r   n9}\t\r   –\t\r   c8n9{r5\t\r   r123}\t\r   –\t\r   r2n9{c9\t\r   c2}\t\r   –\t\r  \nb1n1{r2c2\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  8\t\r  \nwhip[12]:\t\r  b9n1{r7c9\t\r  r9c9}\t\r  –\t\r  r9c4{n1\t\r  n5}\t\r  –\t\r  c2n5{r9\t\r  r4}\t\r  –\t\r  r4c9{n5\t\r  n9}\t\r  –\t\r  b5n9{r4c6\t\r  r5c6}\t\r  –\t\r  \nr2n9{c6\t\r  c2}\t\r  –\t\r  c2n1{r2\t\r  r6}\t\r  –\t\r  r5c3{n1\t\r  n6}\t\r  –\t\r  r5c1{n6\t\r  n4}\t\r  –\t\r  r5n1{c1\t\r  c4}\t\r  –\t\r  b5n3{r5c4\t\r  r6c4}\t\r  –\t\r  \nr6n4{c4\t\r  .}\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  5\t\r  \nwhip[12]:\t\r  r3c6{n8\t\r  n4}\t\r  –\t\r  b1n4{r3c2\t\r  r1c3}\t\r  –\t\r  r6c3{n4\t\r  n8}\t\r  –\t\r  c4n8{r6\t\r  r7}\t\r  –\t\r  b8n3{r7c4\t\r  r8c6}\t\r  –\t\r  \nr5c6{n3\t\r  n9}\t\r  –\t\r  r4c5{n9\t\r  n2}\t\r  –\t\r  r6c5{n2\t\r  n1}\t\r  –\t\r  b8n1{r8c5\t\r  r9c4}\t\r  –\t\r  c2n1{r9\t\r  r2}\t\r  –\t\r  r2n9{c2\t\r  c9}\t\r  –\t\r  \nc8n9{r3\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  c3n8{r1\t\r  r6}\t\r  –\t\r  c3n4{r6\t\r  r1}\t\r  –\t\r  r3n4{c2\t\r  c6}\t\r  –\t\r  r3n8{c6\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  8\t\r  \nwhip[10]:\t\r  r3n8{c1\t\r  c6}\t\r  –\t\r  b2n4{r3c6\t\r  r1c4}\t\r  –\t\r  b1n4{r1c3\t\r  r3c2}\t\r  –\t\r  b1n3{r3c2\t\r  r1c2}\t\r  –\t\r  r1n7{c2\t\r  c8}\t\r  –\t\r  \nr2n7{c9\t\r  c4}\t\r  –\t\r  b2n5{r2c4\t\r  r1c5}\t\r  –\t\r  r1n9{c5\t\r  c7}\t\r  –\t\r  b9n9{r9c7\t\r  r9c9}\t\r  –\t\r  b9n7{r9c9\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  7\t\r  \n\n7. g-labels, g-candidates, g-whips and g-braids     \n195 \nwhip[11]:\t\r   r3n7{c9\t\r   c2}\t\r   –\t\r   b1n3{r3c2\t\r   r1c2}\t\r   –\t\r   b1n9{r1c2\t\r   r2c2}\t\r   –\t\r   r2n7{c2\t\r   c4}\t\r   –\t\r   c9n7{r2\t\r   r9}\t\r   –\t\r  \nb9n9{r9c9\t\r  r9c7}\t\r  –\t\r  r1n9{c7\t\r  c5}\t\r  –\t\r  b2n5{r1c5\t\r  r1c4}\t\r  –\t\r  r9c4{n5\t\r  n1}\t\r  –\t\r  b5n1{r5c4\t\r  r6c5}\t\r  –\t\r  c2n1{r6\t\r  .}\t\r  \n==>\t\r  r1c8\t\r  ≠\t\r  7\t\r  \nwhip[12]:\t\r   b9n9{r9c7\t\r   r9c9}\t\r   –\t\r   r4c9{n9\t\r   n5}\t\r   –\t\r   r2n5{c9\t\r   c4}\t\r   –\t\r   r9c4{n5\t\r   n1}\t\r   –\t\r   c5n1{r8\t\r   r6}\t\r   –\t\r  \nc2n1{r6\t\r  r2}\t\r  –\t\r  r2n9{c2\t\r  c6}\t\r  –\t\r  r3c5{n9\t\r  n6}\t\r  –\t\r  r1c5{n6\t\r  n8}\t\r  –\t\r  c5n9{r1\t\r  r4}\t\r  –\t\r  b5n2{r4c5\t\r  r4c6}\t\r  –\t\r  \nc6n8{r4\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  5\t\r  \nwhip[12]:\t\r   r6c3{n4\t\r   n8}\t\r   –\t\r   c1n8{r4\t\r   r3}\t\r   –\t\r   r3c6{n8\t\r   n4}\t\r   –\t\r   r4n4{c6\t\r   c7}\t\r   –\t\r   b6n2{r4c7\t\r   r6c8}\t\r   –\t\r  \nr6c5{n2\t\r  n1}\t\r  –\t\r  r5c4{n1\t\r  n3}\t\r  –\t\r  r5c6{n3\t\r  n9}\t\r  –\t\r  b6n9{r5c8\t\r  r4c9}\t\r  –\t\r  r2n9{c9\t\r  c2}\t\r  –\t\r  c2n1{r2\t\r  r9}\t\r  –\t\r  \nr8n1{c1\t\r  .}\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  b4n5{r5c1\t\r  r4c2}\t\r  –\t\r  b4n7{r4c2\t\r  r4c1}\t\r  –\t\r  c1n8{r4\t\r  r3}\t\r  –\t\r  c1n4{r3\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  5\t\r  \ng-­‐whip[8]:\t\r  r4c9{n5\t\r  n9}\t\r  –\t\r  b5n9{r4c6\t\r  r5c6}\t\r  –\t\r  r5n4{c6\t\r  c4}\t\r  –\t\r  b5n3{r5c4\t\r  r6c4}\t\r  –\t\r  b5n1{r6c4\t\r  r6c5}\t\r  –\t\r  \nr8n1{c5\t\r  c123}\t\r  –\t\r  c2n1{r9\t\r  r2}\t\r  –\t\r  r2n9{c2\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  5\t\r  \nwhip[12]:\t\r  r5n5{c1\t\r  c8}\t\r  –\t\r  r4c9{n5\t\r  n9}\t\r  –\t\r  r5n9{c8\t\r  c6}\t\r  –\t\r  r2n9{c6\t\r  c2}\t\r  –\t\r  c2n1{r2\t\r  r9}\t\r  –\t\r  r8n1{c1\t\r  c5}\t\r  \n–\t\r  c4n1{r9\t\r  r6}\t\r  –\t\r  b5n3{r6c4\t\r  r5c4}\t\r  –\t\r  c4n4{r5\t\r  r1}\t\r  –\t\r  c3n4{r1\t\r  r6}\t\r  –\t\r  r6c2{n4\t\r  n6}\t\r  –\t\r  r5c3{n6\t\r  .}\t\r  ==>\t\r  \nr5c1\t\r  ≠\t\r  1\t\r  \nbiv-­‐chain[3]:\t\r  r5c1{n5\t\r  n6}\t\r  –\t\r  r1c1{n6\t\r  n7}\t\r  –\t\r  r4n7{c1\t\r  c2}\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  5\t\r  \nwhip[1]:\t\r  c2n5{r9\t\r  .}\t\r  ==>\t\r  r8c1\t\r  ≠\t\r  5\t\r  \nwhip[4]:\t\r  b7n4{r7c1\t\r  r7c2}\t\r  –\t\r  b7n5{r7c2\t\r  r9c2}\t\r  –\t\r  r9c4{n5\t\r  n1}\t\r  –\t\r  b9n1{r9c9\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  1\t\r  \nwhip[6]:\t\r   r6n2{c8\t\r   c5}\t\r   –\t\r   r7n2{c5\t\r   c1}\t\r   –\t\r   b7n4{r7c1\t\r   r7c2}\t\r   –\t\r   b7n5{r7c2\t\r   r9c2}\t\r   –\t\r   r9c4{n5\t\r   n1}\t\r   –\t\r  \nb5n1{r5c4\t\r  .}\t\r  ==>\t\r  r8c8\t\r  ≠\t\r  2\t\r  \nwhip[7]:\t\r   c1n1{r8\t\r   r2}\t\r   –\t\r   c1n2{r2\t\r   r7}\t\r   –\t\r   b7n4{r7c1\t\r   r7c2}\t\r   –\t\r   b7n5{r7c2\t\r   r9c2}\t\r   –\t\r   c2n1{r9\t\r   r6}\t\r   –\t\r  \nb5n1{r6c5\t\r  r5c4}\t\r  –\t\r  r9c4{n1\t\r  .}\t\r  ==>\t\r  r8c1\t\r  ≠\t\r  6\t\r  \nwhip[9]:\t\r   b7n5{r7c2\t\r   r9c2}\t\r   –\t\r   r9c4{n5\t\r   n1}\t\r   –\t\r   r5n1{c4\t\r   c3}\t\r   –\t\r   b4n6{r5c3\t\r   r5c1}\t\r   –\t\r   b4n5{r5c1\t\r   r4c1}\t\r   –\t\r  \nr4c9{n5\t\r  n9}\t\r  –\t\r  r5n9{c8\t\r  c6}\t\r  –\t\r  r2n9{c6\t\r  c2}\t\r  –\t\r  c2n1{r2\t\r  .}\t\r  ==>\t\r  r7c2\t\r  ≠\t\r  6\t\r  \ng-­‐whip[11]:\t\r   b7n4{r7c1\t\r   r7c2}\t\r   –\t\r   b7n5{r7c2\t\r   r9c2}\t\r   –\t\r   r9c4{n5\t\r   n1}\t\r   –\t\r   b5n1{r5c4\t\r   r6c5}\t\r   –\t\r  \nr6c2{n1\t\r  n6}\t\r   –\t\r   r6n4{c2\t\r   c4}\t\r   –\t\r   r5c4{n4\t\r   n3}\t\r   –\t\r   r5c6{n3\t\r   n9}\t\r   –\t\r   c8n9{r5\t\r   r123}\t\r   –\t\r   r2n9{c9\t\r   c2}\t\r   –\t\r  \nc2n1{r2\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  4\t\r  \nwhip[5]:\t\r  b2n7{r2c4\t\r  r1c4}\t\r  –\t\r  r1n4{c4\t\r  c3}\t\r  –\t\r  c1n4{r3\t\r  r7}\t\r  –\t\r  c1n2{r7\t\r  r8}\t\r  –\t\r  c1n1{r8\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  7\t\r  \nwhip[5]:\t\r   r7c2{n5\t\r   n4}\t\r   –\t\r   c1n4{r7\t\r   r3}\t\r   –\t\r   b2n4{r3c6\t\r   r1c4}\t\r   –\t\r   b2n7{r1c4\t\r   r2c4}\t\r   –\t\r   b2n5{r2c4\t\r   .}\t\r   ==>\t\r  \nr7c5\t\r  ≠\t\r  5\t\r  \nwhip[6]:\t\r  r7c2{n5\t\r  n4}\t\r  –\t\r  b4n4{r6c2\t\r  r6c3}\t\r  –\t\r  r1n4{c3\t\r  c4}\t\r  –\t\r  b2n7{r1c4\t\r  r2c4}\t\r  –\t\r  c4n5{r2\t\r  r9}\t\r  –\t\r  r8n5{c5\t\r  .}\t\r  \n==>\t\r  r7c8\t\r  ≠\t\r  5\t\r  \nwhip[6]:\t\r  b2n5{r1c5\t\r  r2c4}\t\r  –\t\r  r7n5{c4\t\r  c2}\t\r  –\t\r  r9n5{c2\t\r  c9}\t\r  –\t\r  r4n5{c9\t\r  c1}\t\r  –\t\r  c1n7{r4\t\r  r1}\t\r  –\t\r  b2n7{r1c4\t\r  .}\t\r  \n==>\t\r  r1c7\t\r  ≠\t\r  5\t\r  \nwhip[6]:\t\r  r7c2{n5\t\r  n4}\t\r  –\t\r  b4n4{r6c2\t\r  r6c3}\t\r  –\t\r  r1n4{c3\t\r  c4}\t\r  –\t\r  b2n7{r1c4\t\r  r2c4}\t\r  –\t\r  c4n5{r2\t\r  r9}\t\r  –\t\r  r8n5{c5\t\r  .}\t\r  \n==>\t\r  r7c7\t\r  ≠\t\r  5\t\r  \nwhip[5]:\t\r  b9n7{r9c9\t\r  r8c8}\t\r  –\t\r  b9n5{r8c8\t\r  r8c7}\t\r  –\t\r  c5n5{r8\t\r  r1}\t\r  –\t\r  r2n5{c4\t\r  c9}\t\r  –\t\r  r4c9{n5\t\r  .}\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  9\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r9c7\t\r  =\t\r  9\t\r  \nwhip[6]:\t\r  c6n3{r8\t\r  r5}\t\r  –\t\r  r5n9{c6\t\r  c8}\t\r  –\t\r  r4c9{n9\t\r  n5}\t\r  –\t\r  c8n5{r5\t\r  r1}\t\r  –\t\r  b9n5{r8c8\t\r  r8c7}\t\r  –\t\r  c5n5{r8\t\r  .}\t\r  ==>\t\r  \nr8c8\t\r  ≠\t\r  3\t\r  \nwhip[6]:\t\r  c1n1{r2\t\r  r8}\t\r  –\t\r  c1n2{r8\t\r  r7}\t\r  –\t\r  b9n2{r7c7\t\r  r8c7}\t\r  –\t\r  r8n3{c7\t\r  c6}\t\r  –\t\r  c6n6{r8\t\r  r9}\t\r  –\t\r  b8n2{r9c6\t\r  .}\t\r  \n==>\t\r  r2c1\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  r8c1{n2\t\r  n1}\t\r  –\t\r  r2c1{n1\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  2\t\r  \nwhip[7]:\t\r  c5n5{r1\t\r  r8}\t\r  –\t\r  r9c4{n5\t\r  n1}\t\r  –\t\r  r5n1{c4\t\r  c3}\t\r  –\t\r  c2n1{r6\t\r  r2}\t\r  –\t\r  r2n9{c2\t\r  c9}\t\r  –\t\r  r4c9{n9\t\r  n5}\t\r  –\t\r  \nb9n5{r9c9\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  9\t\r  \nbiv-­‐chain[2]:\t\r  c5n9{r3\t\r  r4}\t\r  –\t\r  r5n9{c6\t\r  c8}\t\r  ==>\t\r  r3c8\t\r  ≠\t\r  9\t\r  \nbiv-­‐chain[3]:\t\r  c5n9{r3\t\r  r4}\t\r  –\t\r  b6n9{r4c9\t\r  r5c8}\t\r  –\t\r  r1n9{c8\t\r  c2}\t\r  ==>\t\r  r3c2\t\r  ≠\t\r  9\t\r  \n\n196 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[4]:\t\r  c5n5{r1\t\r  r8}\t\r  –\t\r  c7n5{r8\t\r  r4}\t\r  –\t\r  r4c9{n5\t\r  n9}\t\r  –\t\r  c8n9{r5\t\r  .}\t\r  ==>\t\r  r1c8\t\r  ≠\t\r  5\t\r  \nwhip[1]:\t\r  b3n5{r2c9\t\r  .}\t\r  ==>\t\r  r2c4\t\r  ≠\t\r  5\t\r  \nwhip[4]:\t\r  r8n7{c3\t\r  c8}\t\r  –\t\r  c8n5{r8\t\r  r5}\t\r  –\t\r  r4n5{c7\t\r  c1}\t\r  –\t\r  b4n7{r4c1\t\r  .}\t\r  ==>\t\r  r9c2\t\r  ≠\t\r  7\t\r  \nwhip[1]:\t\r  b7n7{r9c3\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  r8n7{c3\t\r  c8}\t\r  –\t\r  c8n5{r8\t\r  r5}\t\r  –\t\r  r5c1{n5\t\r  n6}\t\r  –\t\r  r5c3{n6\t\r  .}\t\r  ==>\t\r  r8c3\t\r  ≠\t\r  1\t\r  \nwhip[4]:\t\r  c8n7{r3\t\r  r8}\t\r  –\t\r  c8n5{r8\t\r  r5}\t\r  –\t\r  r4n5{c7\t\r  c1}\t\r  –\t\r  b4n7{r4c1\t\r  .}\t\r  ==>\t\r  r3c2\t\r  ≠\t\r  7\t\r  \nwhip[1]:\t\r  r3n7{c9\t\r  .}\t\r  ==>\t\r  r2c9\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  c5n5{r1\t\r  r8}\t\r  –\t\r  c8n5{r8\t\r  r5}\t\r  –\t\r  c7n5{r4\t\r  r2}\t\r  –\t\r  b3n8{r2c7\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  8\t\r  \nwhip[6]:\t\r  r9c4{n5\t\r  n1}\t\r  –\t\r  r5n1{c4\t\r  c3}\t\r  –\t\r  c2n1{r6\t\r  r2}\t\r  –\t\r  b1n9{r2c2\t\r  r1c2}\t\r  –\t\r  c8n9{r1\t\r  r5}\t\r  –\t\r  r4c9{n9\t\r  .}\t\r  ==>\t\r  \nr9c9\t\r  ≠\t\r  5\t\r  \nwhip[1]:\t\r  b9n5{r8c7\t\r  .}\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  5\t\r  \nhidden-­‐single-­‐in-­‐a-­‐column\t\r  ==>\t\r  r1c5\t\r  =\t\r  5\t\r  \nbiv-­‐chain[2]:\t\r  b2n9{r2c6\t\r  r3c5}\t\r  –\t\r  b2n6{r3c5\t\r  r2c6}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  8\t\r  \nwhip[2]:\t\r  c1n8{r4\t\r  r3}\t\r  –\t\r  c6n8{r3\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  r9c6{n2\t\r  n6}\t\r  –\t\r  r8c5{n6\t\r  n1}\t\r  –\t\r  r8c1{n1\t\r  .}\t\r  ==>\t\r  r8c6\t\r  ≠\t\r  2\t\r  \nwhip[4]:\t\r  b9n2{r7c7\t\r  r8c7}\t\r  –\t\r  r8c1{n2\t\r  n1}\t\r  –\t\r  c5n1{r8\t\r  r6}\t\r  –\t\r  c5n8{r6\t\r  .}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  2\t\r  \nwhip[1]:\t\r  r7n2{c8\t\r  .}\t\r  ==>\t\r  r8c7\t\r  ≠\t\r  2\t\r  \nwhip[4]:\t\r  r2n5{c7\t\r  c9}\t\r  –\t\r  r4c9{n5\t\r  n9}\t\r  –\t\r  r5n9{c8\t\r  c6}\t\r  –\t\r  r2c6{n9\t\r  .}\t\r  ==>\t\r  r2c7\t\r  ≠\t\r  6\t\r  \nwhip[4]:\t\r  r2c6{n6\t\r  n9}\t\r  –\t\r  r2c9{n9\t\r  n5}\t\r  –\t\r  r4c9{n5\t\r  n9}\t\r  –\t\r  r5n9{c8\t\r  .}\t\r  ==>\t\r  r2c2\t\r  ≠\t\r  6,\t\r  r2c3\t\r  ≠\t\r  6\t\r  \nbiv-­‐chain[5]:\t\r  r6c9{n3\t\r  n6}\t\r  –\t\r  r2n6{c9\t\r  c6}\t\r  –\t\r  r3c5{n6\t\r  n9}\t\r  –\t\r  r4c5{n9\t\r  n2}\t\r  –\t\r  r6n2{c5\t\r  c8}\t\r  ==>\t\r  r6c8\t\r  ≠\t\r  3\t\r  \nwhip[5]:\t\r  r1n9{c8\t\r  c2}\t\r  –\t\r  b1n3{r1c2\t\r  r3c2}\t\r  –\t\r  b1n6{r3c2\t\r  r3c1}\t\r  –\t\r  r3n8{c1\t\r  c6}\t\r  –\t\r  r3n4{c6\t\r  .}\t\r  ==>\t\r  r1c8\t\r  ≠\t\r  6\t\r  \nbiv-­‐chain[6]:\t\r   c9n1{r7\t\r   r9}\t\r   –\t\r   b9n7{r9c9\t\r   r8c8}\t\r   –\t\r   c8n5{r8\t\r   r5}\t\r   –\t\r   c1n5{r5\t\r   r4}\t\r   –\t\r   r4n8{c1\t\r   c6}\t\r   –\t\r  \nc5n8{r6\t\r  r7}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  1\t\r  \nbiv-­‐chain[3]:\t\r  r5n1{c3\t\r  c4}\t\r  –\t\r  c5n1{r6\t\r  r8}\t\r  –\t\r  c1n1{r8\t\r  r2}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  1\t\r  \nwhip[4]:\t\r  r8n7{c3\t\r  c8}\t\r  –\t\r  r8n5{c8\t\r  c7}\t\r  –\t\r  r2c7{n5\t\r  n8}\t\r  –\t\r  r2c3{n8\t\r  .}\t\r  ==>\t\r  r8c3\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  r8n1{c5\t\r  c1}\t\r  –\t\r  r8n2{c1\t\r  .}\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  r2n6{c9\t\r  c6}\t\r  –\t\r  b8n6{r9c6\t\r  .}\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  6\t\r  \nwhip[3]:\t\r  r9n7{c9\t\r  c3}\t\r  –\t\r  b7n1{r9c3\t\r  r8c1}\t\r  –\t\r  b7n2{r8c1\t\r  .}\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  1\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r7c9\t\r  =\t\r  1\t\r  \nbiv-­‐chain[5]:\t\r   b3n8{r1c7\t\r   r2c7}\t\r   –\t\r   r2n5{c7\t\r   c9}\t\r   –\t\r   r2n6{c9\t\r   c6}\t\r   –\t\r   c5n6{r3\t\r   r7}\t\r   –\t\r   r7n8{c5\t\r   c4}\t\r   ==>\t\r  \nr1c4\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  r4c2{n7\t\r  n4}\t\r  –\t\r  c3n4{r6\t\r  r1}\t\r  –\t\r  r1c4{n4\t\r  .}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  b6n4{r5c7\t\r  r4c7}\t\r  –\t\r  r4c2{n4\t\r  n7}\t\r  –\t\r  r2n7{c2\t\r  c4}\t\r  –\t\r  r1c4{n7\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  c3n4{r6\t\r  r1}\t\r  –\t\r  c4n4{r1\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  r5c3{n6\t\r  n1}\t\r  –\t\r  r6c2{n1\t\r  .}\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  6\t\r  \nsingles\t\r  ==>\t\r  r5c1\t\r  =\t\r  5,\t\r  r8c8\t\r  =\t\r  5,\t\r  r9c9\t\r  =\t\r  7,\t\r  r3c8\t\r  =\t\r  7,\t\r  r8c3\t\r  =\t\r  7\t\r  \nwhip[2]:\t\r  r2n6{c9\t\r  c6}\t\r  –\t\r  r8n6{c6\t\r  .}\t\r  ==>\t\r  r1c7\t\r  ≠\t\r  6\t\r  \nwhip[1]:\t\r  b3n6{r3c9\t\r  .}\t\r  ==>\t\r  r6c9\t\r  ≠\t\r  6\t\r  \nsingles\t\r  ==>\t\r  r6c9\t\r  =\t\r  3,\t\r  r3c2\t\r  =\t\r  3\t\r  \nwhip[1]:\t\r  r1n6{c1\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  6\t\r  \nbiv-­‐chain[3]:\t\r  b4n6{r5c3\t\r  r6c2}\t\r  –\t\r  r1c2{n6\t\r  n9}\t\r  –\t\r  c8n9{r1\t\r  r5}\t\r  ==>\t\r  r5c8\t\r  ≠\t\r  6\t\r  \nsingles\t\r  ==>\t\r  r5c8\t\r  =\t\r  9,\t\r  r4c9\t\r  =\t\r  5,\t\r  r1c8\t\r  =\t\r  3,\t\r  r1c7\t\r  =\t\r  8,\t\r  r2c7\t\r  =\t\r  5,\t\r  r1c2\t\r  =\t\r  9\t\r  \nwhip[2]:\t\r  c2n6{r9\t\r  r6}\t\r  –\t\r  c8n6{r6\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  6\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n\n7. g-labels, g-candidates, g-whips and g-braids     \n197 \n7.8. g-labels and g-whips in N-Queens and in SudoQueens \nN-Queens provides an interesting example where g-labels are very different \nfrom those of Sudoku. See chapters 14 and 15 for still more different examples. \n7.8.1. g-labels in n-Queens \nWe have seen in section 5.11 that, in the n-Queens CSP, one can identify a label \nwith a cell in the grid. From the various examples of whip[1] we have already seen \nthere, we can understand that the g-labels of n-Queens are: \n– for variable Xr°:  \n- all the symmetric sets of horizontal triplets of cells in row r° that are \nseparated by k other cells, 0 ≤ k ≤ IP((n-3)/2), provided that: 1) either the second \ndiagonal passing though the leftmost cell, the first diagonal passing through the \nrightmost cell and the column passing through the inner cell meet in a cell above r° \nand inside the grid; 2) or the first diagonal passing through the leftmost cell, the \nsecond diagonal passing through the rightmost cell and the column passing through \nthe inner cell meet in a cell under r° and inside the grid. The labels l g-linked to such \na g-label correspond to the meeting points; (there are at most 2 such labels, \nsymmetric with respect to r°); \n- all the sets of horizontal pairs of cells in row r° that are separated by k other \ncells (0≤k≤n-2), provided that the column passing through one cell and one of the \ntwo diagonals passing through the other cell meet in a cell inside the grid, and \nprovided that they are not part of some of the previous g-labels (maximality \ncondition). The labels l g-linked to such a g-label correspond to the meeting points; \n(depending on r°, k and n, there are at most 2 or 4 such labels, symmetric with \nrespect to r° and the column containing l2); \n– for variable Xc°: similar g-labels obtained by 90° rotation. \nNotice that, contrary to the Sudoku case, any label l g-linked to a g-label <V, g> \nfor a CSP variable V must use at least two different types of constraints (row, \ncolumn, first diagonal or second diagonal) for its links with the various elements of \ng and at least one of these constraints is not defined by a CSP variable. \nA simple case of a g-whip[3] can already be seen in the example of Figure 5.11, \nsection 5.11.4. The first whip[4] elimination there can be replaced by a g-whip[3]: \n \ng-­‐whip[3]:\t\r  r8{c5\t\r  c1}\t\r  –\t\r  r2{c1\t\r  c58}\t\r  –\t\r  r4{c8\t\r  .}\t\r  ⇒\t\r  ¬r2c9\t\r  (G\t\r  eliminated)\t\r  \n7.8.2. A g-whip[3] example in 9-Queens \nAccepting the same solution grid as that in Figure 5.11, the puzzle in Figure 7.7 \nis based on the same first two givens, but a different third one (r3c3, r6c2 and r8c5). \n\n198 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n*****\t\r  Manual\t\r  solution\t\r  *****\t\r  \nwhip[2]:\t\r  c6{r1\t\r  r5}\t\r  –\t\r  c4{r5\t\r  .}\t\r  ⇒\t\r  ¬r1c9\t\r  (A\t\r  eliminated)\t\r  \ng-­‐whip[3]:\t\r  r4{c8\t\r  c67}\t\r  –\t\r  r5{c6\t\r  c9}\t\r  –\t\r  r7{c9\t\r  .}\t\r  ⇒\t\r  ¬r1c8\t\r  (B\t\r  eliminated)\t\r  \ng-­‐whip[3]:\t\r  r4{c8\t\r  c67}\t\r  –\t\r  r5{c6\t\r  c9}\t\r  –\t\r  r7{c9\t\r  .}\t\r  ⇒\t\r  ¬r9c8\t\r  (C\t\r  eliminated)\t\r  \nwhip[3]:\t\r  r9{c7\t\r  c1}\t\r  –\t\r  r2{c1\t\r  c7}-­‐\t\r  r4{c7\t\r  .}\t\r  ⇒\t\r  ¬r7c9\t\r  (D\t\r  eliminated)\t\r  \nsingle\t\r  in\t\r  r7:\t\r  r7c8\t\r  \nwhip[1]:\t\r  r4{c7\t\r  .}\t\r  ⇒\t\r  ¬r5c9\t\r  (E\t\r  eliminated)\t\r  \nwhip[2]:\t\r  r4{c6\t\r  c7}\t\r  –\t\r  r2{c7\t\r  .}\t\r  ⇒\t\r  ¬r9c1\t\r  (F\t\r  eliminated)\t\r  \nsingle\t\r  in\t\r  r9:\t\r  r9c7;\t\r  single\t\r  in\t\r  c1:\t\r  r2c1;\t\r  single\t\r  in\t\r  r4:\t\r  r4c6;\t\r  single\t\r  in\t\r  r1:\t\r  r1c4;\t\r  single\t\r  in\t\r  r5:\t\r  r5c9\t\r  \nSolution\t\r  found\t\r  in\t\r  gW3.\t\r  \n\t\r  \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \nr1 \n° \n° \n° \n+ \n° \n \n° \nB \nA \nr2 \n+ \n° \n° \n° \n°  ° \n \n \n \nr3 \n° \n° * \n° \n° \n° \n° \n° \n \n° \nr4  ° \n° \n° \n° \n° \n+ \n \n \n \n° \nr5 \n° \n \n° \n° \n \n° \n \nE  \n° \n+ \nr6 \n° * \n° \n° \n° \n° \n° \n° \n° \nr7  °  ° \n° \n° \n° \n° \n° \n+\n \nD \nr8 \n° \n° \n° \n° * \n° \n° \n° \n° \nr9 \nF \n° \n° \n° \n° \n° \n+ \nC \n° \nFigure 7.7. g-whips in a 9-Queens instance \n7.8.3. g-labels in n-SudoQueens \nn-SudoQueens was introduced in section 5.11.8. The g-labels of n-SudoQueens \nare both those of n-Sudoku (without their Number coordinate) and those of n-\nQueens. As a result, the set of labels of a g-label can be included in the set of labels \nof another g-label (for a different CSP variable). For instance, consider 9-\nSudoQueens and the following two g-labels:  \n- <Xb1, g1> associated with CSP variable Xb1: <Xb1, r3c123>, \n- <Xr3, g2> associated with CSP variable Xr3: <Xr3, r3c12>. \nLet l be a label with respective representatives (r, c) and [b, s] in the two \ncoordinate systems. Then: \n\n7. g-labels, g-candidates, g-whips and g-braids     \n199 \n- l is g-linked to <Xb1, g1> if and only if b = b1; \n- l is g-linked to <Xr3, g2> if and only if (r = r2 or r = r4) and (c = 1 or c = 2). \nThis example shows that, although the set of labels in g2 is included in the set of \nlabels in g1, none of the sets of labels linked to them is included in the other. This \njustifies our definition of a g-label, in which the CSP variable is kept as an explicit \ncomponent. \n7.8.4. A g-whip[4] example in 9-SudoQueens \nThe puzzle in Figure 7.8 shows an example of a g-whip[4] in 9-SudoQueens. \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \nr1 * \n° \n° \n° \n° \n° \n° \n° \n° \nr2 \n° \n° \n° \n° \n° \n° \n° * \n° \nr3 \n° \n° \n° \n° * \n° \n° \n° \n° \nr4 \n° \n-3 \n-0 \n° \n° \n° \n+3 \n° \n-2 \nr5 \n° \n-0 \n° \nA \n° \n-0 \n° \n° \n-0 \nr6 \n° \n° \n-0 \n° \n° \n° \n-2 \n° \n+2 \nr7 \n°  -0 \n° \n-0 \n° \n-0 \n° \n° \n° \nr8 \n° \n° \n \n-0 \n° \n+1 \n-0 \n° \n+2 \nr9 \n° \n \nB \n-0 \n° \n+1 \n-1 \n° \n° \nFigure 7.8. A partial grid for 9-SudoQueens \nWe shall also use this example to illustrate how one can find instances of a CSP \nmanually. When we introduced n-SudoQueens in section 5.11.8, we did not know \nfor sure whether this CSP was not too constrained to have instances, at least for \nsmall values of n. So we tried to find instances for increasing values of n. As \nmentioned in that section, there are no instances for n = 2 or n = 4. But we found the \ninstance in Figure 5.15 for n = 9, by a heuristic technique of adding queens \nprogressively in the cell that is linked to the fewest other cells, so that we destroy \nfewer possibilities for the next ones. We started by cells in the two main diagonals, \nas close as possible to a corner (lesser destruction). When we reached the situation \n\n200 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nin Figure 7.8 (three queens given, in cells r1c1, r2c8 and r3c5), block b5 had only \ntwo possibilities left; r5c4 is linked to 11 available cells and r5c6 to 12; so we chose \nto put a queen in r5c4; but we were unable to find a solution. We then tried to prove \nthat r5c4 was impossible; this is how we found the following g-whip[4] and a first \nresolution path showing that there is a unique solution.  \n \ng-­‐whip[4]:\t\r  c6{r7\t\r  r89}\t\r  –\t\r  b9{r9c7\t\r  r9c9}\t\r  –\t\r  b6{r4c9\t\r  r4c7}\t\r  –\t\r  r4{c2\t\r  .}\t\r  ⇒\t\r  ¬r5c4\t\r  (A\t\r  eliminated)\t\r  \nIn this g-whip: r5c6 and r7c6 are z-candidates for Xr6 (1st cell); r8c7 is both a z- \nand a t-candidate for Xb9 (2nd cell); r5c6 is both a z- and a t- candidate for Xb6; \nr6c7, r4c9 and r6c9 and t-candidates for Xb6 (3rd cell); r4c3 and r5c2 are t-\ncandidates for Xr4 (last cell). \nIn Figure 7.8, in addition to our previous conventions, the characters in bold in a \ncell mean the following: \n“-0” : the z-candidates of this g-whip;  \n“+n” the right-linking candidate or g-candidate for the n-th CSP variable; \n“-n” the candidates linked to the n-th previous right-linking pattern in the n-th cell; \nthey can be left-linking or t-candidates for the (n+1)-th CSP variables. \n \n[We keep this g-whip example here only for illustrative purposes. Later, we found a \nsimpler pattern, a whip[3], for the same elimination: \n \n*****\t\r  Manual\t\r  solution\t\r  *****\t\r  \nwhip[3]:\t\r  b4{r5c2\t\r  r4c2}\t\r  –\t\r  b9{r9c7\t\r  r8c9}\t\r  –\t\r  b6{r6c9\t\r  .}\t\r  ⇒\t\r  ¬r5c4\t\r  (A\t\r  eliminated)\t\r  \n;;;\t\r  the\t\r  sequel\t\r  has\t\r  nothing\t\r  noticeable:\t\r  \nsingle\t\r  in\t\r  block\t\r  b5:\t\r  r5c6\t\r  \nwhip[1]:\t\r  c4{r9\t\r  .}\t\r  ⇒\t\r  ¬r9c3\t\r  (B\t\r  eliminated)\t\r  \nsingle\t\r  in\t\r  block\t\r  b7:\t\r  r7c2;\t\r  single\t\r  in\t\r  column\t\r  c3:\t\r  r4c3;\t\r  single\t\r  in\t\r  column\t\r  c4:\t\r  r8c4;\t\r  single\t\r  in\t\r  row\t\r  r6:\t\r  r6c9;\t\r  \nsingle\t\r  in\t\r  row\t\r  r9:\t\r  r9c7\t\r  \nSolution\t\r  found\t\r  in\t\r  gW4\t\r  (The\t\r  solution\t\r  is\t\r  given\t\r  in\t\r  Figure\t\r  5.15.)\t\r  ]\t\r  \n\n \nPart Three \nBEYOND G-WHIPS AND G-BRAIDS \n \n\n\n \n8. Subset rules in a general CSP \nThis chapter has the two complementary goals of defining elementary Subset \nrules in any CSP and of showing that whips, g-whips, braids and g-braids subsume \n“almost all” the instances of these rules. This is not to mean that such elementary \nSubset rules (that are globally much weaker than whips) should not be preferred to \nchain rules when they can be applied; on the contrary, they may provide a shorter or \na better understandable solution. But, when merely added to them, they do not bring \nmuch more resolution power; things are different when they are combined, as they \nwill be in chapter 9, with the general “zt-ing” technique of whips and braids. \nPreparing the introduction of such combinations is the third goal of this chapter. \nFor the Subsets of size greater than two, we pay particular attention to the \ndefinitions: we want them to be comprehensive enough to get the broadest coverage \nbut restrictive enough to exclude degenerated cases: for us, two Singles do not make \na Pair, a Pair and a Single do not make a Triplet, a Triplet and a Single do not make \na Quad, two Pairs do not make a Quad, … This modelling choice is consistent with \nwhat has already been done in the Sudoku case in HLS1, but it is now also closely \nrelated to how these patterns can be assigned a well defined “size” and ranked with \nrespect to the Wn, Bn, gWn and gBn hierarchies; this will be essential in chapter 9 \nwhen we take them as building blocks of “Sp-whips” and “Sp-braids”. \nIn sections 8.2 to 8.4, we define an Sp-subset rule in the general CSP framework \n(for p = 2, p = 3 and p = 4 – corresponding respectively to Pairs, Triplets and Quads) \nand we illustrate it by the classical form it takes in Sudoku, depending on which \nfamilies of CSP variables one considers. For Sudoku, we write the Subsets in rows \nand leave it to the reader to write the corresponding Subsets in columns and in \nblocks (e.g. using meta-theorems 4.1 and 4.3 on symmetry and analogy). We give \nboth the English and the formal logic statements and we insist once more on the \nsymmetry and super-symmetry relationships between Naked, Hidden and Super-\nHidden Subsets of same size (see Figure 8.1). Subsets are the simplest example of \nhow the general CSP framework unifies, in a still stronger way than the mere \nsymmetry relationships already present in HLS1, patterns that would otherwise be \nconsidered as different: in the CSP framework, Naked, Hidden and Super-Hidden \nSubset rules are not only related by symmetry relationships (for Subsets of given \nsize), they are the very same rule. (Symmetry, super-symmetry and analogy of rules \nhave already been illustrated in this book by whips and braids, but in a different, \nmore powerful, way: they use only basic predicates having these properties.) \n\n204 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nThough they were not formulated in CSP terms, all the classical Subset rules of \nsections 8.2 to 8.4 (except the Special Quads) were present in HLS1, in their Sudoku \nspecific form. But our perspective here is different: we are less concerned with these \npatterns for themselves than with their relationship with whips and braids – whence \nthe general subsumption theorems of section 8.6 and the choice of examples in \nsection 8.7, mainly centred on showing rare cases not covered by subsumption. \n8.1. Transversality, Sp-labels and Sp-links \nIn the same way as, in chapter 7, we had to introduce a distinction between g-\nlabels (defined as maximal sets of labels) and g-candidates (that did not have to be \nmaximal), we must now introduce a distinction between: \n– Sp-labels, that can only refer to CSP variables and transversal sets of labels \n(which can be considered as a saturation or maximality condition for Sp-labels),  \n– and Sp-subsets, in which considerations about mandatory and optional \ncandidates will appear. \n8.1.1. Set of labels transversal to a set of CSP variables \nDefinition: for p>1, given a set of p different CSP variables {V1, V2, …, Vp}, we \nsay that a non-empty set S of at most p different labels is transversal with respect to \n{V1, V2, …, Vp} for constraint c if: \n–  none of these labels has a representative with two of these CSP variables; \n– all these labels are pairwise linked by c; \n– S is maximal, in the sense that no label pertaining to one of these CSP \nvariables could be added to it without contradicting the first two conditions.  \nRemarks:  \n– the first condition will always be true for pairwise strongly disjoint CSP \nvariables, i.e. CSP variables such that no two of them share a label; but we do not \nadopt this stronger condition on CSP variables; adopting it would not change the \ngeneral theory (for Subsets in the present chapter and for Reversible-Sp-chains, Sp-\nwhips and Sp-braids in chapter 9) and it would not restrict the applications to \nSudoku; but it may restrict the applications to others CSPs; moreover, the \ncorresponding definition for g-Subsets in chapter 10 would restrict the applications, \neven for Sudoku (see the example in section 10.3). \n– the second condition could be generalised by allowing labels in the transversal \nset to be pairwise linked by different constraints. In LatinSquare or Sudoku, due to \nthe theorems proven in chapter 11 of HLS1, such pairwise constraints can always be \nreplaced by a global constraint as in the present definition; this is also obviously true \nin N-Queens. In case a CSP had a transversal set that could not be defined via a \n\n8. Subset rules in a general CSP \n205 \nunique constraint, we think modelling choices should be investigated. Anyway, the \napparently more general condition would not change the theory developed in this \nchapter and in chapter 9 (it is nowhere used in the proofs) – although it may have a \nnoticeable negative impact on the complexity of any possible implementation. \nTypical examples of transversal sets of labels occur when the CSP can be \nrepresented on a k dimensional grid and two candidates differing by only one \ncoordinate are contradictory, as can be illustrated by the Sudoku or LatinSquare \nexamples: given CSP variables Xrc1 and Xrc2, {<Xrc1, n°>, <Xrc2, n°>} is a \ntransversal set of labels, for any fixed Number n°; given CSP variables Xrn1 and \nXrn2, {<Xrn1, c°>, <Xrn2, c°>} is also a transversal set of labels for any fixed \nColumn c°… But there is no reason to restrict the above definition to such cases of \n“geometrical transversality”. In particular, a transversal set of labels does not have \nto be associated with a “transversal” CSP variable (in the sense that, e.g. in Sudoku, \nvariable Xc°n° could be called transversal to variable Xr°n°): in N-Queens, given \ntwo CSP variables Xr1 and Xr2 corresponding to different rows, the set of \nintersections of any diagonal (which is not associated with any CSP variable) with \nthese rows defines a transversal set of labels (see section 8.8.1 for an example). \n8.1.2. Sp-labels and Sp-links \nDefinitions: for any integer p>1, an Sp-label is a couple of data: {CSPVars, \nTransvSets}, where CSPVars is a set of p different CSP variables and TransvSets is \na set of p different transversal sets of labels for these variables (each one for a well \ndefined constraint). An S-label is an Sp-label for some p >1.  \nDefinition: a label l is Sp-linked or simply S-linked to an Sp-label S = {CSPVars, \nTransvSets} if there is some k, 1≤k≤p, such that l is linked by the constraint ck of \nTransvSetsk to all the labels of TransvSetsk (where TransvSetsk is the k-th element \nof TransvSets). In these conditions, l is also called a potential target of the Sp-label. \nMiscellaneous remarks: \n– with this definition, a label and a g-label are not Sp-labels (due to the condition \np>1); for labels, this is a mere matter of convention, but this choice is more \nconvenient for the sequel; \n– as a result of this condition, there may be CSPs with no Sp-labels for some p; \n– different transversal sets in the Sp-label are not required to be disjoint; \n– in a sense, an Sp-label specifies the maximal extent of a possible Sp-subset (as \ndefined below), but it does not tackle non-degeneracy conditions. \nNotation: in the forthcoming definition of Subsets, we shall need a means of \nspecifying that, in some transversal sets, some labels must exist while others may \nexist or not. We shall write this as e.g. {<V1, v1>, <V2, v2>, …, (<Vk, vk>), ….}. \n\n206 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nThis should be understood as follows: a label not surrounded with parentheses must \nexist; a pseudo-label surrounded with parentheses may exist or not; if it exists, then \nit is named <Vk, vk>. \n8.2. Pairs \n \n8.2.1. Pairs in a general CSP \nDefinition: in any resolution state RS of any CSP, a Pair (or S2-subset) is an S2-\nlabel {CSPVars, TransvSets}, where: \n– CSPVars = {V1, V2}, \n– TransvSets is composed of the following transversal sets of labels:  \n{<V1, v11>, <V2, v21>} for constraint c1, \n{<V1, v12>, <V2, v22>} for constraint c2, \nsuch that: \n– in RS, V1 and V2 are disjoint, i.e. they share no candidate; \n– <V1, v11> ≠ <V1, v12> and <V2, v22> ≠ <V2, v21>; \n– in RS, V1 has the two mandatory candidates <V1, v11> and <V1, v12> and no \nother candidate; \n– in RS, V2 has the two mandatory candidates <V2, v22> and <V2, v21> and no \nother candidate. \nA target of a Pair is defined as a candidate S2-linked to the underlying S2-label. \nTheorem 8.1 (S2 rule): in any CSP, a target of a Pair can be eliminated. \nProof: as the two transversal sets play similar roles, we can suppose that Z is \nlinked to both <V1, v11> and <V2, v21>. If Z was True, these candidates would be \neliminated by ECP. As V1 and V2 have only two candidates each, their other \ncandidate (<V1, v12>, respectively <V2, v22>) would be asserted by S, which is \ncontradictory, as they are linked. Notice that the proof works only because V1 and \nV2 share no candidate in RS (and therefore in no posterior resolution state). \nThe rest of this section shows how, choosing pairs of variables in different sub-\nfamilies of CSP variables, the familiar Naked Pairs, Hidden Pairs and Super-Hidden \nPairs (X-Wing) of Sudoku (or LatinSquare) appear as mere Pairs in the above \ndefined sense. \n8.2.2. Naked Pairs in Sudoku \nFor the definition of Naked Pairs, there can be no ambiguity and we adopt the \nstandard formulation. Naked Pairs in a row, or NP(row), is the following rule:  \n\n8. Subset rules in a general CSP \n207 \nif there is a row r and there are two different columns c1 and c2 and two different \nnumbers n1 and n2, such that: \n- the candidates for cell (r, c1) are exactly the two numbers n1 and n2, \n- the candidates for cell (r, c2) are exactly the two numbers n1 and n2, \nthen eliminate the two numbers n1 and n2 from the candidates for any other rc-cell in \nrow r in rc-space. \nValidity is very easy to prove directly from this (almost) standard formulation of \nthe problem: in row r, each of the two cells defined by columns c1 and c2 must get a \nvalue and only two values (n1 and n2) are available for them, which entails that, \nwhatever distribution is made between them of these two values, none of these two \nvalues remains available for the other cells in the same row. \nThe logical formulation strictly parallels the English one (except that, as is often \nthe case, something which is formulated in natural language as “if there exists a row \n…”, which should apparently translate into an existential quantifier, must be written \nwith a universal quantifier):  \n \n∀r∀≠(c1,c2)∀≠(n1,n2) \n      { candidate(n1, r, c1) ∧ candidate(n2, r, c1) ∧ \n         candidate(n2, r, c2) ∧ candidate(n1, r, c2) ∧ \n         ∀c∈{c1, c2}∀n≠n1,n2 ¬candidate(n, r, c) \n    ⇒ \n         ∀c≠c1,c2 ∀n∈{n1, n2} ¬candidate(n, r, c) }. \nExercise: show that this is exactly what Pairs of the general definition give when \napplied to CSP variables Xrc1 and Xrc2, with transversal sets defined by CSP \nvariables (considered as constraints) Xrn1 and Xrn2. \n8.2.3. Hidden Pairs in Sudoku \nIf we apply meta-theorem 4.2 to Naked Pairs in a row, permuting the words \n“number” and “column”, we obtain the rule for Hidden Pairs in a row, or HP(row) \n(once transposed into rn-space, a Hidden Pairs in a row looks graphically like a \nNaked Pairs in a row would in rc-space): \nif there is a row r and there are two different numbers n1 and n2 and two different \ncolumns c1 and c2, such that: \n- the candidates (columns) of rn-cell (r, n1) (in rn-space) are exactly c1 and c2, \n- the candidates (columns) of rn-cell (r, n2) (in rn-space) are exactly c1 and c2, \nthen eliminate the two columns c1 and c2 from the candidates for any other rn-cell \n(r, n) in row r in rn-space. \n \n∀r∀≠(n1,n2)∀≠(c1,c2) \n      { candidate(n1, r, c1) ∧ candidate(n1, r, c2) ∧ \n         candidate(n2, r, c2) ∧ candidate(n2, r, c1) ∧ \n\n208 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n            ∀n∈{n1, n2}∀c≠c1,c2 ¬candidate(n, r, c) \n    ⇒ \n            ∀n≠n1,n2∀c∈{c1, c2} ¬candidate(n, r, c) }.  \nExercise: show that this is exactly what Pairs of the general definition give when \napplied to CSP variables Xrn1 and Xrn2, with transversal sets defined by CSP \nvariables (considered as constraints) Xrc1 and Xrc2.  \n8.2.4. Super Hidden Pairs in Sudoku (X-Wing) \nThis is not yet the full story: one can iterate the application of meta-theorem 4.2 \nand a rule SHP(row) can be obtained from rule HP(row) by permuting the words \n“row” and “number”. Let us first do this permutation formally, i.e. by applying the \nSrn transform to HP(row) = Scn(NP(row)). We get the logical formulation for Super \nHidden Pairs in rows, or SHP(row):  \n \n∀n∀≠(r1,r2)∀≠(c1,c2) \n      { candidate(n, r1, c1) ∧ candidate(n, r1, c2) ∧ \n         candidate(n, r2, c2) ∧ candidate(n, r2, c1) ∧ \n         ∀r∈{r1, r2}∀c≠c1,c2 ¬candidate(n, r, c) \n    ⇒ \n \n         ∀r≠r1,r2∀c∈{c1, c2} ¬candidate(n, r, c) }. \nLet us now try to understand the result, with a strict English transcription: \nif there is a number n and there are two different rows r1 and r2 and two different \ncolumns c1 and c2 such that: \n- the candidates (columns) of rn-cell (r1, n) (in rn-space) are c1 and c2 and no other \ncolumn, \n- the candidates (columns) of rn-cell (r2, n) (in rn-space) are c1 and c2 and no other \ncolumn, \nthen eliminate the two columns c1 and c2 from the candidates (columns) for any \nother rn-cell (r, n) in column n in rn-space. \nExercise: show that this is exactly what Pairs of the general definition give when \napplied to CSP variables Xr1n and Xr2n, with transversal sets defined by CSP \nvariables (considered as constraints) Xc1n and Xc2n. \nAs the meaning of this rule is not absolutely clear in rc-space, let us make it \nmore explicit with a new equivalent formulation based on rc-space: if there is a \nnumber n and there are two different rows r1 and r2, such that, in these rows, n \nappears as a candidate in and only in columns c1 and c2, then, in any of these two \ncolumns, eliminate n from the candidates for any row other than r1 and r2. We find \nthe usual formulation of X-Wing in rows. Finally, we have shown that the familiar \nX-Wing in rows is the super-hidden version of Naked Pairs in a row: SHP(row) ≡ \nSrn(HP(row)) ≡ Srn(Scn(NP(row))) = X-Wing(row). \n\n8. Subset rules in a general CSP \n209 \n8.3. Triplets \n8.3.1. Triplets in a general CSP \nThere may be several formulations of Triplets. Here, we adopt one (cyclic form) \nthat is neither too restrictive (the presence of some of the candidates potentially \ninvolved is not mandatory) nor too comprehensive (by making mandatory the \npresence of some of the candidates involved, it excludes degenerated cases). The \njustification was done in HLS1 for Sudoku, but it is valid for the general CSP. \nDefinition: in any resolution state RS of any CSP, a Triplet (or S3-subset) is an \nS3-label {CSPVars, TransvSets}, where: \n– CSPVars = {V1, V2, V3}, \n– TransvSets is composed of the following transversal sets of labels:  \n{<V1, v11>, (<V2, v21>), <V3, v31>} for constraint c1, \n{<V1, v12>, <V2, v22>, (<V3, v32>)} for constraint c2, \n{(<V1, v13>), <V2, v23>, <V3, v33>} for constraint c3,   \nsuch that: \n– in RS, V1, V2 and V3 are pairwise disjoint, i.e. no two of these variables share \na candidate; \n– <V1, v11> ≠ <V1, v12>, <V2, v22> ≠ <V2, v23> and <V3, v33> ≠ <V3, v31>; \n– in RS, V1 has the two mandatory candidates <V1, v11> and <V1, v12>, one \noptional candidate <V1, v13> (supposing this label exists) and no other candidate; \n– in RS, V2 has the two mandatory candidates <V2, v22> and <V2, v23>, one \noptional candidate <V2, v21> (supposing this label exists) and no other candidate; \n– in RS, V3 has the two mandatory candidates <V3, v33> and <V3, v31>, one \noptional candidate <V3, v32> (supposing this label exists) and no other candidate. \nA target of a Triplet is defined as a candidate S3-linked to the underlying S3-\nlabel. \nTheorem 8.2 (S3 rule): in any CSP, a target of a Triplet can be eliminated.  \nProof: as the three transversal sets play similar roles, we can suppose that Z is \nlinked to the first, i.e. to <V1, v11>, <V2, v21> (and <V3, v31> if it exists). If Z was \nTrue, these candidates (if they are present) would be eliminated by ECP. Each of V1, \nV2 and V3 would have at most two candidates left. Any choice for V1 would reduce \nto at most one the number of possibilities for each of V2 and V3 (due to the pairwise \ncontradictions between members of each transversal set). Finally, the unique choice \nfor V2, if any, would in turn reduce to zero the number of possibilities for V3. \nThe rest of this section shows how, choosing sets of three variables in different \nsub-families of CSP variables, the familiar Naked Triplets, Hidden Triplets and \n\n210 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nSuper-Hidden Triplets (Swordfish) of Sudoku all appear as mere Triplets of the \ngeneral CSP. \n8.3.2. Naked Triplets in Sudoku \nThere may be several definitions of Naked Triplets (see HLS1 for a discussion). \nHere, we adopt the same as in HLS1, neither too restrictive nor too comprehensive \n(i.e. it does not allow degenerated cases). Naked Triplets in a row or NT(row): \nif there is a row r and there are three different columns c1, c2 and c3 and three \ndifferent numbers n1, n2 and n3, such that: \n- cell (r, c1) has n1 and n2 among its candidates, \n- cell (r, c2) has n2 and n3 among its candidates, \n- cell (r, c3) has n3 and n1 among its candidates, \n- none of the cells (r, c1), (r, c2) and (r, c3) has any candidate other than n1, n2 or n3, \nthen eliminate the three numbers n1, n2 and n3 from the candidates for any other cell \nin row r in rc-space. \n \n∀r∀≠(c1,c2,c3)∀≠(n1,n2,n3) \n      { candidate(n1, r, c1) ∧ candidate(n2, r, c1) ∧ \n         candidate(n2, r, c2) ∧ candidate(n3, r, c2) ∧  \n         candidate(n3, r, c3) ∧ candidate(n1, r, c3) ∧ \n         ∀c∈{c1, c2, c3}∀n≠n1,n2,n3 ¬candidate(n, r, c) \n    ⇒ \n         ∀c≠c1,c2,c3 ∀n∈{n1, n2, n3} ¬candidate(n, r, c) }. \nExercise: show that this is exactly what Triplets of the general definition give \nwhen applied to CSP variables Xrc1, Xrc2 and Xrc3, with transversal sets defined by \nCSP variables (considered as constraints) Xrn1, Xrn2 and Xrn3.  \n8.3.3. Hidden Triplets in Sudoku  \nIf we apply meta-theorem 4.2 to Naked Triplets in a row, permuting the words \n“number” and “column”, we obtain the rule for Hidden Triplets in a row, or \nHT(row):  \nif there is a row r, and there are three different numbers n1, n2 and n3 and three \ndifferent columns c1, c2 and c3, such that: \n- rn-cell (r, n1) (in in rn-space) has c1 and c2 among its candidates (columns), \n- rn-cell (r, n2) (in in rn-space) has c2 and c3 among its candidates (columns), \n- rn-cell (r, n3) (in in rn-space) has c3 and c1 among its candidates (columns), \n- none of the rn-cells (r, n1), (r, n2) and (r, n3) (in in rn-space) has any remaining \ncandidate (column) other than c1, c2 and c3, \nthen eliminate the three columns c1, c2 and c3 from the candidates for any other rn-\ncell (r, n) in row r in rn-space. \n \n\n8. Subset rules in a general CSP \n211 \n∀r∀≠(n1,n2,n3)∀≠(c1,c2,c3) \n      { candidate(n1, r, c1) ∧ candidate(n1, r, c2) ∧ \n         candidate(n2, r, c2) ∧ candidate(n2, r, c3) ∧ \n         candidate(n3, r, c3) ∧ candidate(n3, r, c1) ∧ \n         ∀n∈{n1, n2, n3}∀c≠c1,c2,c3 ¬candidate(n, r, c) \n    ⇒ \n         ∀n≠n1,n2,n3∀c∈{c1, c2, c3} ¬candidate(n, r, c) }. \n \nExercise: show that this is exactly what Triplets of the general definition give \nwhen applied to CSP variables Xrn1, Xrn2 and Xrn3, with transversal sets defined by \nCSP variables (considered as constraints) Xrc1, Xrc2 and Xrc3.  \n8.3.4. Super Hidden Triplets in Sudoku (Swordfish) \nAs in the case of Pairs, one can iterate the application of meta-theorem 4.2 and a \nrule SHT(row) can be obtained from rule HT(row) by permuting the words “row” \nand “number”. If we apply the Srn transform to HT(row) = Scn(NT(row)), we get the \nlogical formulation of Super Hidden Triplets in rows, or SHT(row):  \n \n∀n∀≠(r1,r2,r3)∀≠(c1,c2,c3) \n      { candidate(n, r1, c1) ∧ candidate(n, r1, c2) ∧ \n         candidate(n, r2, c2) ∧ candidate(n, r2, c3) ∧ \n         candidate(n, r3, c3) ∧ candidate(n, r3, c1) ∧ \n         ∀r∈{r1, r2, r3}∀c≠c1,c2,c3 ¬candidate(n, r, c) \n    ⇒ \n \n         ∀r≠r1,r2,r3∀c∈{c1, c2, c3} ¬candidate(n, r, c) }. \nLet us now try to understand the result, first with a direct English transliteration: \nif there is a number n, and there are three different rows r1, r2 and r3 and three \ndifferent columns c1, c2 and c3, such that: \n- rn-cell (r1, n) (in rn-space) has c1 and c2 among its candidates (columns), \n- rn-cell (r2, n) (in rn-space) has c2 and c3 among its candidates (columns), \n- rn-cell (r3, n) (in rn-space) has c3 and c1 among its candidates (columns), \n- none of the rn-cells (r1, n), (r2, n) and (r3, n) (in rn-space) has any candidate \n(column) other than c1, c2 and c3, \nthen eliminate the three columns c1, c2 and c3 from the candidates (columns) for any \nother rn-cell (r, n) in column n in rn-space in rn-space . \nExercise: show that this is exactly what Triplets of the general definition give \nwhen applied to CSP variables Xr1n, Xr2n and Xr3n, with transversal sets defined by \nCSP variables (considered as constraints) Xc1n, Xc2n and Xc3n.  \nAs this is not yet very explicit, let us try to clarify it by expressing it in rc-space \nand by temporarily forgetting part of the conditions: if there is a number n and there \nare three different rows r1, r2 and r3 and three different columns c1, c2 and c3, such \n\n212 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nthat for each of the three rows the instance of number n that must be somewhere in \neach of these rows can actually be only in either of the three columns, then in any of \nthe three columns eliminate n from the candidates for any row different from the \ngiven three. \nWhat we find is the usual formulation of the rule for Swordfish in rows. There \nremains one point: the part of the conditions we have temporarily discarded. It is \nprecisely what prevents Swordfish in rows from reducing to X-Wing in rows. \n8.4. Quads \n8.4.1. Quads in a general CSP \nFinding the proper formulation for Quads, guaranteeing that it covers no \ndegenerated case, is less obvious than for Triplets. Indeed, the simplest way is to \nintroduce two types of Quads: Cyclic and Special. (In order to avoid technicalities, \nwe shall show that there can only be these two types for the Sudoku CSP, but the \nanalysis can be transposed to the general framework.) We choose to write the \nSpecial Quad in such a way that it does not cover any case already covered by the \nCyclic Quad. If we wanted to introduce larger Subsets, though one could always \nwrite a general formula expressing non-degeneracy (which would lead to \ncomputationally very inefficient implementations), it would get harder and harder to \nwrite an explicit (more efficient) list of non-degenerated subcases. [As we shall see \nsoon, in the 9×9 Sudoku case, this would be useless.] \nDefinition: in any resolution state RS of any CSP, a Cyclic Quad (or Cyclic S4-\nsubset) is an S4-label {CSPVars, TransvSets}, where: \n– CSPVars = {V1, V2, V3, V4}, \n– TransvSets is composed of the following transversal sets of labels:  \n{<V1, v11>, (<V2, v21>), (<V3, v31>), <V4, v41>} for constraint c1,  \n{<V1, v12>, <V2, v22>, (<V3, v32>), (<V4, v42>)} for constraint c2,  \n{(<V1, v13>), <V2, v23>, <V3, v33>, (<V4, v43>)} for constraint c3, \n{(<V1, v14>), (<V2, v24>), <V3, v34>, <V4, v44>} for constraint c4,  \nsuch that: \n– in RS, V1, V2, V3 and V4 are pairwise disjoint, i.e. no two of these variables \nshare a candidate; \n– <V1, v11> ≠ <V1, v12>, <V2, v22> ≠ <V2, v23>, <V3, v33> ≠ <V3, v34> and \n<V4, v44> ≠ <V4, v41>; \n– in RS, V1 has the two mandatory candidates <V1, v11> and <V1, v12>, two \noptional candidates <V1, v13> and <V1, v14> (supposing any of these labels exists) \nand no other candidate, \n\n8. Subset rules in a general CSP \n213 \n– in RS, V2 has the two mandatory candidates <V2, v22> and <V2, v23>, two \noptional candidates <V2, v24> and <V2, v21> (supposing any of these labels exists) \nand no other candidate, \n– in RS, V3 has the two mandatory candidates <V3, v33> and <V3, v34>, two \noptional candidates <V3, v31> and <V3, v32> (supposing any of these labels exists) \nand no other candidate, \n– in RS, V4 has the two mandatory candidates <V4, v44> and <V4, v41>, two \noptional candidates <V4, v42> and <V4, v43> (supposing any of these labels exists) \nand no other candidate. \nDefinition: in any resolution state RS of any CSP, a Special Quad (or Special S4-\nsubset) is an S4-label {CSPVars, TransvSets}, where: \n– CSPVars = {V1, V2, V3, V4}, \n– TransvSets is composed of the following transversal sets of labels:  \n{<V1, v11>, <V2, v21>, <V3, v31>, (<V4, v41>}) for constraint c1,  \n{<V1, v12>, (<V2, v22>), (<V3, v32>), <V4, v42>} for constraint c2,  \n{(<V1, v13>), <V2, v23>, (<V3, v33>), <V4, v43>} for constraint c3, \n{(<V1, v14>), (<V2, v24>), <V3, v34>, <V4, v44>} for constraint c4,  \nsuch that: \n– in RS, V1, V2, V3 and V4 are pairwise disjoint, i.e. no two of these variables \nshare a candidate; \n– <V1, v11> ≠ <V1, v12>, <V2, v21> ≠ <V2, v23> and <V3, v31> ≠ <V3, v34>; \nmoreover <V4, v42>, <V4, v43> and <V4, v44> are pairwise different; \n– in RS, V1 has the two mandatory candidates <V1, v11> and <V1, v12> and no \nother candidate; \n– in RS, V2 has the two mandatory candidates <V2, v21> and <V2, v23> and no \nother candidate; \n– in RS, V3 has the two mandatory candidates <V3, v31> and <V3, v34> and no \nother candidate; \n– in RS, V4 has the three mandatory candidates <V4, v42>, <V4, v43> and \n<V4, v44> and no other candidate. \nIn both cases, a target of a Quad is defined as a candidate S4-linked to the \nunderlying S4-label. \nTheorem 8.3 (S4 rule): in any CSP, a target of a Quad can be eliminated.  \nProof for the cyclic case: as the four transversal sets play similar roles, we can \nsuppose that Z is linked to all of <V1, v11>, <V2, v21>, (<V3, v31>) and (<V4, v41>). If \nZ was True, these candidates (if they are present) would be eliminated by ECP. Each \nof V1, V2, V3 and V4 would have at most three candidates left. Any choice for V1 \nwould reduce to at most two the number of possibilities for V2, V3 and V4. Any \n\n214 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nfurther choice among the remaining candidates for V2 would reduce to at most one \nthe number of possibilities for V3 and V4. Finally the unique choice left for V3, if \nany, would reduce to zero the number of possibilities for V4. \nProof for the special case: there are four subcases (the last two of which are \nsimilar to the second): \n- suppose Z is linked to all of <V1, v11>, <V2, v21>, <V3, v31> (and <V4, v41> if it \nexists). If Z was True, these candidates (if they are present) would be eliminated by \nECP. Each of V1, V2, V3, would have only one candidate left; choosing these as \nvalues would reduce to zero the number of possibilities for V4. \n- suppose Z is linked to all of <V1, v12> (, <V2, v22>), (<V3, v32>) and <V4, v42>. If Z \nwas True, <V1, v12> (, <V2, v22>), (<V3, v32>) and <V4, v42> would be eliminated by \nECP; <V1, v11> would then be asserted by S, which would eliminate <V2, v21> and \n<V3, v31>. Then <V2, v23> and <V3, v34> would be asserted. This would leave no \npossibility for V4. \nThe rest of this section shows how, choosing sets of four variables in different \nsub-families of CSP variables, the familiar Naked Quads, Hidden Quads and Super-\nHidden Quads (Jellyfish) of Sudoku appear as mere Quads of the general CSP. \n8.4.2. Naked Quads in Sudoku \nThe good formulation for Naked Quads is a little harder to find than for Triplets. \nNaked Quads in a row (first tentative formulation, sometimes called Strict Naked \nQuads or Complete Naked Quads): if there is a row and there are four numbers and \nfour cells in this row whose remaining candidates are exactly these four numbers, \nthen remove these four numbers from the candidates for the other cells in this row. \nBut there is a major problem: it is unnecessarily restrictive and situations where it \ncan be applied are extremely rare (actually, in 10,000,000 randomly generated \nminimal puzzles, we have found no example that would use this form of Quads if \nsimpler rules, i.e. Subsets and whips of size strictly less than four, are allowed). \nNaked Quads in a row (second tentative formulation, sometimes called \nComprehensive Naked Quads): if there is a row and there are four numbers and four \ncells in this row such that all their candidates are among these four numbers, then \nremove these four numbers from the candidates for all the other cells in this row. \nBut, again, it has a major problem: it includes Naked Triplets in a row, Naked Pairs \nin a row and even Naked Single in a row as special cases. \nSo, neither of the usual two formulations of the Naked Quads rule is correct \naccording to our guiding principles. How then can one formulate it so that it is \ncomprehensive but does not subsume any of the rules for Naked Subsets of smaller \nsize? It is enough to make certain that the four cells have no candidate other than the \nfour given numbers (say n1, n2, n3 and n4), that each of them has more than one \n\n8. Subset rules in a general CSP \n215 \ncandidate (it is not a Naked-Single), that no two of them have exactly the same two \ncandidates (which would make a Naked Pairs in a row) and that no three of them \nform a Naked Triplets in a row. There are only two ways to satisfy these conditions. \nThe first, most general way is to impose candidates n1 and n2 for cell 1, \ncandidates n2 and n3 for cell 2, candidates n3 and n4 for cell 3 and candidates n4 and \nn1 for cell 4. This is the “Cyclic Naked Quads”. We get the final formulation of this \nfirst case, more complex than usual but with its full natural scope: \nif there is a row r and there are four different columns c1, c2, c3 and c4, and four \ndifferent numbers n1, n2, n3 and n4, such that: \n- cell (r, c1) has n1 and n2 among its candidates, \n- cell (r, c2) has n2 and n3 among its candidates, \n- cell (r, c3) has n3 and n4 among its candidates, \n- cell (r, c4) has n4 and n1 among its candidates, \n- none of the cells (r, c1), (r, c2), (r, c3) and (r, c4) has any candidate other than n1, n2, \nn3 or n4, \nthen eliminate the four numbers n1, n2, n3 and n4 from the candidates for any other \ncell in row r in rc-space. \n \n∀r∀≠(c1,c2,c3,c4)∀≠(n1,n2,n3,n4) \n      { candidate(n1, r, c1) ∧ candidate(n2, r, c1) ∧ \n         candidate(n2, r, c2) ∧ candidate(n3, r, c2) ∧ \n         candidate(n3, r, c3) ∧ candidate(n4, r, c3) ∧ \n         candidate(n4, r, c4) ∧ candidate(n1, r, c4) ∧ \n         ∀c∈{c1, c2, c3, c4}∀n≠n1,n2,n3,n4 ¬candidate(n, r, c) \n    ⇒ \n \n         ∀c≠c1,c2,c3,c4∀n∈{n1, n2, n3, n4} ¬candidate(n, r, c) }. \nExercise: show that this is exactly what Cyclic Quads of the general definition \ngive when applied to CSP variables Xrc1, Xrc2, Xrc3 and Xrc4, with transversal sets \ndefined by CSP variables (considered as constraints) Xrn1, Xrn2, Xrn3 and Xrn4. \nThe second way will be called Special Naked Quads in a row, a very rare \npattern, with the following respective contents for its four cells: {n1 n2}, {n1 n3}, \n{n1 n4}, {n2 n3 n4}: \n \n∀r∀≠(c1,c2,c3,c4)∀≠(n1,n2,n3,n4) \n      { candidate(n1, r, c1) ∧ candidate(n2, r, c1) ∧ ∀n≠n1,n2 ¬candidate(n, r, c1) ∧ \n         candidate(n1, r, c2) ∧ candidate(n3, r, c2) ∧ ∀n≠n1,n3 ¬candidate(n, r, c2) ∧ \n         candidate(n1, r, c3) ∧ candidate(n4, r, c3) ∧ ∀n≠n1,n4 ¬candidate(n, r, c3) ∧ \n         candidate(n2, r, c4) ∧ candidate(n3, r, c4) ∧ candidate(n4, r, c4) \n   ∧ ∀n≠n2,n3,n4 ¬candidate(n, r, c4) \n    ⇒ \n        ∀c≠c1,c2,c3,c4∀n∈{n1, n2, n3, n4} ¬candidate(n, r, c) }. \n\n216 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nExercise: show that this is exactly what Special Quads of the general definition \ngive when applied to CSP variables Xrc1, Xrc2, Xrc3 and Xrc4, with transversal sets \ndefined by CSP variables (considered as constraints) Xrn1, Xrn2, Xrn3 and Xrn4.  \nExercise: Transpose the above justification for the two definitions of Quads in \nSudoku to the general CSP framework. (Show that there are no other possibilities \nthan the Cyclic and Special Quads.) \n8.4.3. Hidden Quads in Sudoku  \nThe proper formulation of rules for Hidden Quads would not be obvious if we \ncould not rely on super-symmetries and meta-theorem 4.2. But, if we apply meta-\ntheorem 4.2 to Cyclic Naked Quads in a row and to Special Naked Quads in a row, \npermuting the words “number” and “column”, we immediately obtain two rules, \ncorresponding to what is known as “Hidden Quads in a row” in the Sudoku world: \nCyclic Hidden Quads in a row, or Cyclic HQ(row): \nif there is a row r, and there are four different numbers n1, n2, n3 and n4 and four \ndifferent columns c1, c2, c3 and c4, such that: \n- rn-cell (r, n1) (in rn-space) has c1 and c2 among its candidates (columns), \n- rn-cell (r, n2) (in in rn-space) has c2 and c3 among its candidates (columns), \n- rn-cell (r, n3) (in in rn-space) has c3 and c4 among its candidates (columns), \n- rn-cell (r, n4) (in in rn-space) has c4 and c1 among its candidates (columns), \n- none of the rn-cells (r, n1), (r, n2), (r, n3) and (r, n4) (in in rn-space) has any \nremaining candidate (column) other than c1, c2, c3 and c4, \nthen eliminate the four columns c1, c2, c3 and c4 from the candidates for any other \nrn-cell (r, n) in row r in rn-space. \n \n∀r∀≠(n1,n2,n3,n4)∀≠(c1,c2,c3,c4) \n      { candidate(n1, r, c1) ∧ candidate(n1, r, c2) ∧ \n         candidate(n2, r, c2) ∧ candidate(n2, r, c3) ∧ \n         candidate(n3, r, c3) ∧ candidate(n3, r, c4) ∧ \n         candidate(n4, r, c4) ∧ candidate(n4, r, c1) ∧ \n         ∀n∈{n1, n2, n3, n4}∀c≠c1,c2,c3,c4 ¬candidate(n, r, c) \n    ⇒ \n         ∀n≠n1,n2,n3,n4∀c∈{ c1, c2, c3, c4} ¬candidate(n, r, c) }.  \nAnd Special Hidden Quads in a row, or Special HQ(row): \n \n∀r∀≠(n1,n2,n3,n4)∀≠(c1,c2,c3,c4) \n      { candidate(n1, r, c1) ∧ candidate(n1, r, c2) ∧ ∀c≠c1,c2 ¬candidate(n1, r, c) ∧ \n         candidate(n2, r, c1) ∧ candidate(n2, r, c3) ∧ ∀c≠c1,c3 ¬candidate(n2, r, c) ∧ \n        candidate(n3, r, c1) ∧ candidate(n3, r, c4) ∧∀n≠c1,c4 ¬candidate(n3, r, c) ∧ \n        candidate(n4, r, c2) ∧ candidate(n4, r, c3) ∧ candidate(n4, r, c4) ∧ \n  ∧ ∀c≠c2,c3,c4 ¬candidate(n4, r, c) \n\n8. Subset rules in a general CSP \n217 \n    ⇒ \n        ∀n≠n1,n2,n3,n4∀c∈{ c1, c2, c3, c4} ¬candidate(n, r, c) }.  \nExercise: show that this is exactly what Cyclic and Special Quads of the general \ndefinition give when applied to CSP variables Xrn1, Xrn2, Xrn3 and Xrn4, with \ntransversal sets defined by CSP variables (considered as constraints) Xrc1, Xrc2, \nXrc3 and Xrc4.  \n8.4.4. Super Hidden Quads in Sudoku (Jellyfish) \nFinally, there remains to consider a rule that should be called Cyclic Super \nHidden Quads in rows, or SHQ(row), obtained from Cyclic Hidden Quads in a row \nby permuting the words “row” and “number”, according to meta-theorem 4.2. Let us \nfirst do this formally, i.e. by applying the Srn transform to HQ(row) = Scn(NQ(row)):  \n \n∀n∀≠(r1,r2,r3,r4)∀≠(c1,c2,c3,c4) \n      { candidate(n, r1, c1) ∧ candidate(n, r1, c2) ∧ \n         candidate(n, r2, c2) ∧ candidate(n, r2, c3) ∧ \n         candidate(n, r3, c3) ∧ candidate(n, r3, c4) ∧ \n         candidate(n, r4, c4) ∧ candidate(n, r4, c1) ∧ \n         ∀r∈{r1, r2, r3, r4}∀c≠c1,c2,c3,c4  ¬candidate(n, r, c) \n    ⇒ \n \n         ∀r≠r1,r2,r3,r4∀c∈{c1, c2, c3, c4} ¬candidate(n, r, c) }. \nExercise: show that this is exactly what Cyclic Quads of the general definition \ngive when applied to CSP variables Xr1n, Xr2n, Xr3n and Xr4n, with transversal sets \ndefined by CSP variables (considered as constraints) Xc1n, Xc2n, Xc3n and Xc4n.  \nIn the same way as in the Triplets case, we can clarify this rule by temporarily \nforgetting part of the conditions: if there is a number n and there are four different \nrows r1, r2 , r3 and r4 and four different columns c1, c2 , c3 and c4, such that for each \nof the four rows the instance of number n that must be somewhere in each of these \nrows can actually only be in either of the four columns, then in any of the four \ncolumns eliminate n from the candidates for any row different from the given four. \nThis is the usual formulation of the rule for Jellyfish in rows. The part we have \ntemporarily discarded corresponds to the conditions we have added to \nComprehensive Cyclic Naked Quads in a row; it is just what prevents Jellyfish in \nrows from reducing to X-Wing in rows or to Swordfish in rows. Finally, we have \nnot only shown that the familiar Jellyfish in rows is the supersymmetric version of \nCyclic Naked Quads in a row, but we have also found the proper way to write this \nrule according to our guiding principles, in as comprehensive a way as possible. \nWe leave it to the reader to write the rule for Special Super Hidden Quads or  \nSpecial Jellyfish. \n\n218 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n8.5. Relations between Naked, Hidden and Super Hidden Subsets in Sudoku \nThe so-called “fishy patterns” (X-Wing, Swordfish, Jellyfish, …) are very \npopular in the Sudoku micro-world, even the non-existent ones (such as Squirmbag, \na would be Super Hidden Quintuplets in our vocabulary) and there are many very \nspecific extensions of these patterns (such as “finned fish”, “sashimi fish”, … See \nalso chapter 10 for another kind of extension). \nAs can be seen by looking at the logical formulæ in the previous sections, a \ngraph similar to that in Figure 4.2 for Singles would not be enough to describe all \nthe rules available for Subsets of size greater than one. Moreover, there is a major \ndifference between Singles and larger Subsets: in the latter, there are different \nnumbers of quantified variables of different sorts: Numbers, Rows and Columns. \nBuilding on these differences, the question now is, how far can one go in the \niteration of theorem 4.2 and in the definition of Subset rules: Naked, Hidden, Super-\nHidden, Super-Super-Hidden, …? \nAs for the Naked and Hidden Subsets, a well-known (and obvious) property of \nSubsets shows that we have found all of them: for any subset S of Numbers of size p \n(1≤p<9), there is a complementary subset Sc of size 9-p (with 1≤9-p<9). And S \nforms a Naked Subset of size p on p cells in a row [respectively a column, a block], \nif and only if Sc forms a Hidden Subset of size 9-p on the remaining 9-p cells in this \nrow [resp. this column, this block]. As a result, no Naked or Hidden Subset rule for \nsubsets of size greater than four is needed. For instance, Naked Quintuplets in a row \nis just Hidden Quads in the same row and Hidden Quintuplets in a row is just Naked \nQuads in the same row.  \nWhat was not known before HLS1, because super-symmetries had not been \nexplicited, the mythical Super Hidden Quintuplets in a row (alias Squirmbag) is just \nHidden Quads in a column (as shown by Figure 8.1 and the remarks above). This is \na very interesting example of a named thing that had no independent existence. \nIndeed, after the previous sections, several natural questions may arise, such as: \n– what if, instead of applying symmetry Scn to NP(row), we apply symmetry Srn? \n– what if we formulate a rule analogous to X-Wing in rows but in rn-space – i.e. \na rule that should be called Hidden X-Wing in rows or HXW(row) or HSHP(row)? \nDo we get new unknown rules? The answer is no; the previous set of rules is \nstrongly closed under symmetry and supersymmetry. More specifically, the full \nstory is to be found in Figure 8.1. The first practical consequence of this is that it \nexempts us from looking for new types of Subset rules (but see chapter 10 for g-\nSubset rules). Checking the assertions of Figure 8.1 is an easy exercise about the Src, \nSrn and Scn transforms (one must just be very careful with the indices). As a detailed \nproof is available in HLS, we do not reproduce it here. \n\n8. Subset rules in a general CSP \n219 \n \nFigure 8.1. Sudoku symmetries and supersymmetries (X = Pairs, Triplets or Quads – or \nSubsets of size ≤ IP(n/2) for Sudoku on n×n grids) \n[Historical note: after the first edition of HLS, we were informed that the idea of \n“another view of Fish” (i.e. of X-Wings, Swordfish and Jellyfish) had already been \nexpressed by “Arcilla” on the late Sudoku Player’s Forum, in the thread “a new (?) \nview of fish (naked or hidden)”, November 3rd, 2006. The same thread also shows \nthat similar ideas had been mentioned even before, still in informal ways or in \nprogrammers jargon (e.g. “the same program can be used to find Naked Subsets and \nFish”). All this was very smart, though it missed the mathematical notions of \nsymmetry and supersymmetry and the closely related idea (first presented in HLS1) \nof introducing the four 2D (rc, rn, cn and bn) spaces and cells as first class concepts, \nwith their associated representations in an Extended Sudoku Board. As a result, it \ndid not develop into a global framework and it led neither to the meta-theorems of \nchapter 4, nor to the systematic relationships displayed in Figure 8.1 (some of which \nare not obvious at all), nor to the idea of hidden chains introduced in HLS1.] \nHX(row) \nNX(row) \nSHX(row) \nNX(col) \nSHX(col) \nScn \nSrn \nSrn \nScn \n \n<\n⎯\n> c \nSrc \nSrc \nSrc \nHX(col) \nSrn \nScn \n\n220 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n8.6. Subset resolution theories in a general CSP; confluence \n8.6.1. Definition of the Subset resolution theories \nThe principle of the definitions for Pairs, Triplets and Quads can easily be \nextended to larger Subsets, although, as we mentioned above, the conditions for \nnon-degeneracy may be tedious to write explicitly. Given a non-degenerated Subset \npattern, we define its size to be the number of CSP variables (or transversal sets) in \nits definition: Pairs have size 2, Triplets size 3, Quads size 4, … As should now be \nexpected from what was done with our previous families of rules, we can define an \nincreasing sequence of resolution theories. \nDefinition: In any CSP, the Subset resolution theories are defined as follows: \n– S0 = BRT(CSP), \n– S1 = W1, \n– S2 = S1 ∪ {rules for non degenerated Pairs}, \n– S3 = S2 ∪ {rules for non degenerated Triplets}, \n– …. \n– Sn+1 = Sn ∪ {rules for non degenerated Subsets of size n+1}, \n– S∞ = ∪n≥0 Sn. \nNotice that, in this hierarchy of resolution theories, we put W1 before Pairs; this \nis not only a matter of convention: as already noticed, whips of length 1 (when they \nexist) are the most basic pattern after Singles and it would not make much sense to \ndefine any resolution theory, apart from BRT(CSP), without them. \nIn 9×9 Sudoku or Latin Squares, S∞ = S4. More generally, in n×n Sudoku or \nLatin Squares, S∞ = Sp, with p = IP(n/2) (where “IP” means the integer part). \nTheorem 8.4: in any CSP, each of the Sn resolution theories is stable for \nconfluence; therefore, it has the confluence property. \nProof: let S be an Sp-subset (p≤n), for CSP variables {V1, …, Vp} and transversal \nsets (some of the labels below may be missing): \n{<V1, v11>, <V2, v21>, …<Vp, vp1>} \n…. \n{<V1, v1p>, <V2, v2p>, …<Vp, vpp>} \nIf Z is a target for S, it is linked to all the elements in some of these sets. There \nmay happen two different events: \n- if some optional candidate is eliminated from the transversal sets, what remains is \nstill an Sp-subset and Z is still linked to it via the same transversal set; \n- if a mandatory candidate is eliminated from a transversal set, either what remains \nis still an Sp-subset (due to the presence of the remaining optional candidates) or \n\n8. Subset rules in a general CSP \n221 \nwhat remains can be split into two (or more) smaller Subsets or Singles and Z is still \nlinked to one of them. \nIn any case, Z can still be eliminated by rules in Sn. \n8.6.2. Complexity considerations (in Sudoku) \nWhen we increase the size p of Subsets (p goes up from 2 to 4 as we pass from \nPairs to Quads, via Triplets), the number of possible cases in each row (forgetting \nthe Special Quads) increases from (9×8)2 = 5184 to (9×8×7×6)2 = 9,144,576 (4 \ndifferent columns and 4 different numbers). Multiplying this by 9 rows and by 8 \npatterns (3 Naked, 3 Hidden and 2 Super-Hidden), i.e. by 72, gives an idea of the \nincrease in complexity (from 373,248 to 658,409,472). These figures can be \nsignificantly improved by ordering the columns and/or numbers (and this is essential \nfor an effective implementation), but the relative order of magnitude remains the \nsame. Programming Triplets and Quads as rules in a knowledge-based system is a \nvery good exercise for AI students: they can see the importance of having a precise \nlogical formulation before they start to code them in the specific formalism of their \ninference engine, they can be shown different techniques of rule optimisation and \nfinally they can see at work Newell’s famous distinction [Newell 1982] between the \n“knowledge level” (here a non-ambiguous English or MS-FOL formulation) and the \n“symbol level” (the rule in the syntax of the inference engine, where different \nlogical conditions may have to be ordered, control facts may have to be added, \ndifferent saliences, i.e. priorities of rules, may have to be introduced, ….). \n8.6.3. Definition of the Wn+Sn, gWn+Sn, Bn+Sn and gBn+Sn theories and ratings \nCombining whips and Subsets, one can define the increasing sequence (Wn+Sn, \nn≥0) of resolution theories: \n– W0+S0 = BRT(CSP), \n– W1+S1 = W1, \n– … \n– W n+1+Sn+1 = Wn+Sn ∪ Wn+1 ∪ Sn+1, \n– … \n– W∞+S∞ = ∪n≥0 Wn+Sn. \nCombining g-whips and Subsets, one can define in similar ways the increasing \nsequences (gWn+Sn, n≥0), (Bn+Sn, n≥0) and (gBn+Sn, n≥0) of resolution theories. \nAnd with each of these sequences, one can associate a rating. As a direct corollary \nto theorems 5.6 and 7.4 and to lemma 4.1, we get: \nTheorem 8.5: in any CSP, each of the Bn+Sn and gBn+Sn resolution theories is \nstable for confluence; therefore, it has the confluence property. \n\n222 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n8.7. Whip subsumption results for Subset rules \nAfter the previous definitions, this section describes the main relationships \nbetween Subsets and whips. In the Sudoku case, additional subsumption results can \nbe found on our website for extended Subset patterns (“finned fish” and “sashimi \nfish”). In our opinion, this is the main section of this chapter; it establishes a strong \nlink between the length of a whip or braid and the size of a Subset. For consistency \nreasons, patterns that can be seen either as whips [resp. g-whips, braids or g-braids] \nor as Subsets must be assigned the same W [resp. gW, B, gB] and S ratings. \nMoreover, the results proven here justify the a priori combinations (with the same \nn) of the Sn and Wn, gWn, Bn or gBn theories used in the definitions in section 8.6.3. \n8.7.1. Subsumption and almost-subsumption theorems in a general CSP \n8.7.1.1. Pairs \n \nTheorem 8.6: S2 ⊆ W2 (whips of length 2 subsume all the Pairs). \nProof: keeping the notations of theorem 8.1 and considering a target Z of the \nPair that is linked to the first transversal set, the following whip eliminates Z: \nwhip[2]: V1{v11 v12} – V2{v22 .} ⇒ ¬candidate(Z). \nThe converse of the above theorem is false: W2 ⊄ S2. For a deep understanding \nof whips, this is as interesting as the theorem itself. The Sudoku example in section \n8.8.1 has W(P) = 2 but S(P) = 3. It also has three very instructive examples of \nwhip[2] that cannot be considered as Pairs (or even as g-Pairs, see section 10.1.6.1.). \n8.7.1.2. Triplets \nTheorem 8.7: W3 subsumes “almost all” the Triplets. \nProof: keeping the notations of theorem 8.2 and considering a target Z of the \nTriplet that is linked to the first transversal set (the three of them play similar roles), \nthe following whip eliminates Z in any CSP:  \nwhip[3]: V1{v11 v12} – V2{v22 v23} – V3{v33 .} ⇒ ¬candidate(Z),  \nprovided that <V1, v13> is not a candidate for V1. \nThe optional candidates of the Triplet appear in the whip as z- or t- candidates. \nConsidering that, in the above situation, the three CSP variables play \nsymmetrical roles, there is only one case of a Triplet elimination that cannot be \nreplaced by a whip[3] elimination. It occurs when the optional candidates for \nvariables V1, V2 and V3 in the transversal set to which the target is S3-linked \ncorrespond to existing labels and are all effectively present in the resolution state.  \n\n8. Subset rules in a general CSP \n223 \nThis theorem is illustrated by the same Sudoku example as above (in section \n8.8.1), whereas a Sudoku example of non-subsumption is given in section 8.8.2; it \neven shows that S3 ⊄ B∞. \nReplacing whips by braids would not change the above results. \n8.7.1.3. Quads \n \nTheorem 8.8: W4 subsumes “almost all” the Cyclic Quads. \nKeeping the notations of theorem 8.3, the following whip eliminates a target Z \nof the Cyclic Quad in any CSP:  \nwhip[4]: V1{v11 v12} – V2{v22 v23} – V3{v33 v34} – V4{v41 .} ⇒ ¬candidate(Z), \nprovided that <V1, v13> and <V1, v14> (if they exist) are not candidates for V1 and \n<V2, v23> (if it exists) is not a candidate for V2. \nThe optional candidates of the Quad appear in the whip as z- or t- candidates. \nAn exceptional example of non-subsumption for a Naked Quad elimination is \ngiven in section 8.8.3.  \nTheorem 8.9: B4 subsumes all the Special Quads. \nKeeping the notations of theorem 8.3, let Z be a target of the Special Quad: \n- if Z is linked to the first transversal set, the following braid eliminates Z:  \nbraid[4]: V1{v11 v12} – V2{v21 v23} – V3{v31 v34} – V4{v44 .} ⇒ ¬candidate(Z), \nin which the first three left-linking candidates are linked to Z; \n- if Z is linked to another transversal set, say the second, the following whip \neliminates Z:  \nwhip[4]: V1{v12 v11} – V2{v21 v23} – V4{v43 v44} – V3{v34 .} ⇒ ¬candidate(Z), \nin which candidate <V4, v42> appears as a z candidate for the third CSP variable. \n8.7.2. Statistical almost-subsumption results in Sudoku \nThe theorems in the previous subsection show that, for n ≤ 4, “almost all” of the \neliminations done by Subsets can be done by whips or braids. Can this “almost all”, \nuntil now only specified by logical conditions, be given any numerical meaning? \nOne has W+S(P) ≤ W(P) for any instance P and the question can be reformulated as: \nhow frequently can the two ratings be different? Notice that this is not exactly an \nanswer to our initial question, because equality of the ratings does not mean that the \nsame eliminations were done; another resolution path may have been followed. \nAnyway, experiments with the first 10,000 random minimal puzzles in the \nSudogen0 collection show that the W+S and the W ratings differ in only 8 cases: \neither non-subsumption cases are statistically very rare (as suggested by the above \n“almost subsumption” theorems) or they are well compensated by other \neliminations. \n\n224 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n8.7.3. Comparison of the resolution power of whips and Subsets of same length \nSubsets are “almost” subsumed by whips of same length; but is there any \nreciprocal almost subsumption, so that both would have approximately the same \nresolution power? The answer is negative. The classification results in Table 8.1 \nshow that, even with W1 included in all the Sn theories, Subsets have a very weak \nresolution power compared to whips. The W line comes from the “ctr-bias” column \nof Table 6.4; the S line is based on a series of 275,867 puzzles from the controlled-\nbias generator. Only the part of the Table in bold is meaningful for this comparison. \n \nrating → \n0 (BRT) \n1 (S1=W1) \n2 \n3 \n4 \n4<n<∞ \nS \n35.08% \n9.82% \n5.44% \n0.36% \n0.011% \n0% \nW \n35.08% \n9.82% \n13.05% \n20.03% \n17.37% \nqsp 100% \nTable 8.1: non-cumulative S and W distributions for the controlled-bias generator  \nOne way of understanding these results is that the definition of Subsets is much \nmore restrictive than the definition of whips of same size. In Subsets, transversal \nsets are defined by a single constraint. In whips, the fact of being linked to the target \nor to a given previous right-linking candidate plays a role very similar to each of \nthese transversal sets. But being linked to a candidate is much less restrictive than \nbeing linked to it via a pre-assigned constraint. As shown by the almost subsumption \nresults, the few Subset cases not covered by whips because of the restrictions on \nthem related to sequentiality are too rarely met in practice to be able to compensate \nfor this.  \n8.8. Subsumption and non-subsumption examples from Sudoku \nThis final section illustrates both subsumption and non-subsumption cases. It \nalso shows concretely how Super Hidden Subsets can look like Naked ones in the \nappropriate 2D space. \n8.8.1. W2 ⊄ S2 ; also an example of Swordfish subsumption by a whip[3] \nLet us first prove that W2 ⊄ S2. For the puzzle P in Figure 8.2 (Royle17#18966), \nwe shall show that W(P) = 2 and S(P) = 3.  \nAfter an initial sequence of 36 Hidden Singles, leading to the puzzle in the \nmiddle of Figure 8.2, we consider two resolution paths.  \n\n8. Subset rules in a general CSP \n225 \n \n  5   4             \n    5 1 4   8   3 6   \n  7 5 1 4 2 8 9 3 6 \n        3   8       \n  6     1 3 5 8   4   \n  6 9 2 1 3 5 8 7 4 \n                1   \n  4 8 3   6   5   1   \n  4 8 3 7 6 9 5 2 1 \n3       8   7       \n  3   5 6 8 4 7 1     \n  3 2 5 6 8 4 7 1 9 \n  6           5     \n  8 6   3   1 4 5     \n  8 6 7 3 9 1 4 5 2 \n      2             \n    1 4 2 5   6 8 3   \n  9 1 4 2 5 7 6 8 3 \n      5   6   4     \n    3   5   6   4 8   \n  2 3 9 5 7 6 1 4 8 \n1   8       3       \n  1   8       3 6 5   \n  1 7 8 9 4 2 3 6 5 \n                    \n  5   6 8   3     7   \n  5 4 6 8 1 3 2 9 7 \nFigure 8.2. Puzzle Royle17#18966: 1) original, 2) after initial Singles, 3) solution \nIn the first path, using only the Subset theories, the simplest rule applicable is a \nSwordfish in columns (Figure 8.3); it allows four eliminations; after three have been \ndone, Singles and ECP are enough to solve the puzzle, showing that S(P) = 3. \n \n*****\t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  S\t\r  *****\t\r  \nswordfish-­‐in-­‐columns:\t\r  n7{c2\t\r  c4\t\r  c8}{r2\t\r  r3\t\r  r8}\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  7,\t\r  r8c5\t\r  ≠\t\r  7,\t\r  r8c6\t\r  ≠\t\r  7\t\r  \t\r  \n\t\r  singles\t\r  to\t\r  the\t\r  end\t\r  \nIn the second path, using only the whip theories, the simplest applicable rules are \nthree very instructive cases of whip[2] that cannot be considered as Pairs [or even \nas g-Pairs (see 10.1.6.1)], leading to eliminations unrelated to the above Swordfish; \nthese are enough to solve the puzzle with Singles and ECP, showing that W(P) = 2. \n \n*****\t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  W\t\r  *****\t\r  \nwhip[2]:\t\r  r1n7{c1\t\r  c5}\t\r  –\t\r  r5n7{c5\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  7\t\r  \nwhip[2]:\t\r  r1n7{c5\t\r  c1}\t\r  –\t\r  r6n7{c1\t\r  .}\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  7\t\r  \nwhip[2]:\t\r  b4n7{r5c3\t\r  r6c1}\t\r  –\t\r  r1n7{c1\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  7\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \nNow, forgetting the simple whip[2] eliminations, we can also use this example to \nshow how a Swordfish looks like in the proper 2D space. Spotting this Swordfish in \nthe standard representation (upper part of Figure 8.3) may be difficult because it \nseems to be very degenerated (three of the nine rc-cells on which it lies are even \ndecided). However, in the cn-representation (lower part of Figure 8.3), it looks like a \nvery incomplete Naked-Triplets, but still a non-degenerated one. Indeed, it is a \nhidden xy-chain[3] (defined in HLS1 as a kind of bivalue-chain[3], but in rn- instead \nof rc- space, and therefore a whip[3]). \nExercise: based on the proof of theorem 8.7, write the four whips[3] allowing the \neliminations of the four Swordfish targets. \n \n\n226 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nr1 \n     n2      \n \nn7     n9 n5 \nn1 \nn4 \n     n2      \n \nn7     n9 n8 \n     n2      \n \n         n9 n3 \nn6 \nr1 \nr2 n6 \n     n2      \n \nn7     n9 \n     n2      \n \nn7     n9 \nn1 \nn3 \nn5 \nn8 \n     n2      \n \nn7     n9 n4 \nr2 \nr3 n4 \nn8 \nn3 \n              \n \nn7     n9 n6 \n     n2      \n \nn7     n9 \nn5 \n     n2      \n \nn7     n9 n1 \nr3 \nr4 n3 \n     n2      \n \n         n9 n5 \nn6 \nn8 \nn4 \nn7 \nn1 \n     n2      \n \n         n9 r4 \nr5 n8 \nn6 \n     n2      \n \nn7     n9 \nn3 \n              \n \nn7     n9 n1 \nn4 \nn5 \n     n2      \n \n          n9 r5 \nr6 \n  \n  \nn7     n9 n1 \nn4 \nn2 \nn5 \n \n  \nn7     n9 \nn6 \nn8 \nn3 \nr6 \nr7 \n     n2      \n  \nn7     n9 n3 \n     n2      \n  \nn7     n9 \nn5 \nn1 n2      \n  \nn7     n9 n6 \nn1 n2      \n  \n         n9 n4 \nn8 \nr7 \nr8 n1 \n    n2     \nn4           \nn7      n9 n8 \n            \n              \nn7      n9 \n    n2     \nn4           \nn7      n9 \n    n2     \n              \nn7      n9 n3 \nn6 \nn5 \nr8 \nr9 n5 \n      n2      \nn4           \n         n9 n6 \nn8 \nn1 n2      \nn4           \n         n9 n3 \nn1 n2      \n              \n         n9 \n      n2      \n              \n          n9 n7 \nr9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nn1 \nr8 \nr6 \nr1 \nr2 \n \n \nr7      r9 \nr5 \n \n \nr7     r9 \nr4 \nr3 \nn1 \nn2 \nr1          \n  \nr7          \n r2  \nr4          \n r8  \n r2  \n r5  \nr7         \nr6 \nr1         \n \nr7 r8 r9 \n         r3 \n \n r8  \nr1          \n \nr7     r9 \n     r2 r3 \n \n         r9 \n \nr4 r5      \n \nn2 \nn3 \nr4 \nr7 \nr3 \nr5 \nr2 \nr9 \nr8 \nr1 \nr6 \nn3 \nn4 \nr3 \n \n \n    r8 r9 \nr6 \nr1 \n \n \n    r8 r9 \nr4 \nr5 \nr7 \nr2 \nn4 \nn5 \nr9 \nr1 \nr4 \nr7 \nr6 \nr2 \nr3 \nr5 \nr8 \nn5 \nn6 \nr2 \nr5 \nr9 \nr4 \nr3 \nr7 \nr6 \nr8 \nr1 \nn6 \nn7 \nr1          \n         r6 \nr7         \n    r2     \n  \n r8   \n r2   \n r5  \nr7         \n        r3 \n \n r8  \nr1         \n r5  \nr7 r8      \n         r3 \n         r6 \n r8 \nr4 \n     r2 r3 \n \n \nr9 \nn7 \nn8 \nr5 \nr3 \nr8 \nr9 \nr4 \nr1 \nr2 \nr6 \nr7 \nn8 \nn9 \nr1          \n         r6 \nr7         \n r2  \nr4          \n     r8 r9 \n r2  \n r5  \nr7         \n         r3 \n \n r8  \nr1         \n r5  \nr7 r8 r9 \n         r3 \n         r6 \n r8  \nr1          \n \nr7     r9 \n     r2 r3 \n \n         r9 \n \nr4 r5      \n \nn9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 8.3. Puzzle Royle17#18966, seen in rc and cn spaces, after initial Singles have been \napplied. The four eliminations allowed by the Swordfish (in grey cells) are underlined. \n\n8. Subset rules in a general CSP \n227 \n8.8.2. S3 ⊄ B∞ : a Swordfish not subsumed by whips or braids \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nr1 \n  \nn4 n5 n6 \nn7 n8      \n  \nn4      n6 \nn7 n8      n1 \n  \n     n5 n6 \nn7 n8      \n  \n     n5      \nn7 n8 n9 n2 \n  \n          n6 \n     n8 n9 \n  \n          n6 \nn7 n8 n9 n3 \nr1 \nr2 \n          n3 \n     n5 n6 \nn7 n8      \n          n3 \n          n6 \nn7 n8      \n          n3 \n     n5      \nn7      n9 \n \n     n5 n6 \nn7 n8      n1 \n          n3 \n     n5 n6 \n     n8 n9 \n     n2      \n          n6 \n     n8 n9 n4 \n     n2      \n          n6 \nn7      n9 r2 \nr3 \nn2 \n          n3 \n          n6 \nn7 n8      \n          n3 \n  \nn7      n9 n4 \n          n3 \n  \nn7 n8 n9 \n          n3 \n          n6 \n     n8 n9 n5 \nn1           \n          n6 \nn7 n8 n9 \nn1           \n          n6 \nn7      n9 r3 \nr4 \n          n3 \nn4           \n  \nn1 n2 n3 \nn4           \n \nn6 \nn1 n2      \n     n5      \n  \n     n2      \nn4 n5      \n          n9 n7 \nn1      n3 \n  \n          n9 \nn1      n3 \n     n5      \n          n9 n8 \nr4 \nr5 \n          n3 \nn4           \nn7 n8      n5 \n          n3 \nn4           \nn7           \nn1           \n          n6 \n     n8      \n  \nn4           \n     n8 n9 \n  \nn4      n6 \n     n8 n9 \nn1      n3 \n          n6 \n          n9 n2 \nn1           \n          n6 \nn7      n9 r5 \nr6 \nn9 \nn1 n2      \n  \nn7 n8      \n     n2      \n  \nn7           n3 \n     n2      \n     n5      \n     n8      \n  \n     n5 n6 \n     n8      n4 \nn1           \n     n5 n6 \nn7           \nn1           \n          n6 \nn7           r6 \nr7 \n          n3 \nn4      n6 \nn7           \n     n2 n3 \nn4      n6 \nn7           n8 \n     n2      \n  \nn7           \n     n2 n3 \nn4           \nn7           n1 \n     n2 n3 \n          n6 \n          n9 \n          n3 \n          n6 \n          n9 n5 \nr7 \nr8 \n          n3 \nn4 n5      \nn7           n9 \n     n2 n3 \nn4 n5      \nn7           \n     n2      \n     n5      \nn7 n8      n6 \n          n3 \nn4 n5      \n     n8      \nn1 n2 n3 \n  \n     n8      \nn1      n3 \n               \n     n8      \nn1 n2      \nn4           \n  \nr8 \nr9 \nn1 \n     n2 n3 \nn4      n6 \n               \n     n2 n3 \nn4 n5      \n               n9 \n     n2 n3 \nn4 n5       \n     n8       \n          n3 \nn4 n5      \n     n8      n7 \n          n3 \n          n6 \n     n8      \n     n2      \nn4      n6 \n  \nr9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nn1 \nr9 \n  \nr4      r6 \n  \nr1 \n  \nr4 r5      \n  \nr2 \nr7 \n  \nr4 r5      \n     r8      \n          r3 \nr4      r6 \n     r8      \n          r3 \n     r5 r6 \n     r8       n1 \nn2 \nr3 \n \nr4      r6 \nr7      r9 \n  \n          r6 \nr7      r9 \n  \nr4           \nr7 r8      \n  \nr4      r6 \nr7      r9 \nr1 \n     r2      \n  \nr7 r8      \nr5 \n     r2         \n  \n     r8 r9 n2 \nn3 \n     r2      \nr4 r5      \nr7 r8      \n     r2 r3 \nr4           \nr7      r9 \n     r2 r3 \n     r5          \n     r8 r9 \nr6 \n          r3 \n  \nr7      r9 \n     r2 r3 \n  \n     r8 r9 \n  \nr4 r5      \nr7 r8      \n  \nr4           \nr7 r8 r9 \nr1 \nn3 \nn4 \nr1           \nr4 r5      \nr7 r8      \nr1           \nr4           \nr7      r9 \n  \n     r5      \n     r8 r9 \nr3 \n  \nr4 r5      \nr7      r9 \n \n     r5      \n     r8 r9 \nr6 \nr2 \n \n               \n     r8 r9 n4 \nn5 \nr1 r2      \n  \n     r8         r5 \n     r2      \n  \n     r8 r9 \nr1 r2      \nr4           \n     r8      \nr1           \nr4           \nr7      r9 \n     r2      \n          r6 \n     r8 r9 \nr3 \n  \nr4      r6 \n  \nr7 \nn5 \nn6 \nr1 r2      \n  \nr7           \nr1 r2 r3 \n  \nr7      r9 \nr4 \nr1 r2      \nr4           \n  \nr8 \n     r2 r3 \n     r5 r6 \n  \nr1 r2      \n     r5      \nr7           \nr1      r3 \n          r6 \nr7           \n     r2 r3 \n     r5 r6 \n          r9 n6 \nn7 \nr1 r2     \n     r5        \nr7 r8      \nr1 r2 r3 \n          r6 \nr7           \n     r2 r3 \n     r5 r6 \n     r8      \nr1 r2      \n  \nr7 r8      \nr1      r3 \n  \nr7           \nr4 \nr9 \nr1      r3 \n          r6 \n               \n     r2 r3 \n     r5 r6 \n  \nn7 \nn8 \nr1 r2     \n     r5        \n  \nr1 r2 r3 \n          r6 \n  \nr7 \nr1 r2      \n     r5      \n     r8        \nr1      r3 \n     r5 r6 \n          r9 \n     r2 r3 \n     r5 r6 \n     r8 r9 \nr1 r2      \n  \n     r8      \nr1      r3 \n  \n     r8 r9 \nr4 \nn8 \nn9 \nr6 \nr8 \n     r2 r3 \n           \n  \nr9 \nr1      r3 \nr4 r5      \n  \n     r2 r3 \n     r5      \n \nr1 r2      \nr4 r5      \nr7           \nr1      r3 \nr4           \nr7           \n     r2 r3 \n     r5      \n \nn9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 8.4. Two Swordfish in columns at the same time, in rc and cn representations \n\n228 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nWe have already met in section 7.7.3 (Figure 7.3, reproduced as Figure 8.5) the \npuzzle we shall now use to illustrate a case of non-subsumption of a Swordfish in \ncolumns by whips. We already know from section 7.7.3 that this puzzle cannot be \nsolved by braids of any length, let alone by whips. However, it has a resolution path \nusing only Swordfish (besides rules in BSRT), which proves that at least one of the \nSwordfish eliminations cannot be replaced by a whip or a braid elimination. \n \n \n  \n  1 \n \n  2 \n \n \n3     6 4 1 5 9 2 8 7 3 \n \n \n  \n  1 \n \n  4       8 7 5 6 1 3 2 4 9 \n2   \n \n4   \n \n5 \n \n \n    2 3 9 4 7 8 5 6 1 \n \n  6   \n  7  \n  8     3 1 6 2 4 7 9 5 8 \n  5   \n \n \n  \n \n2       7 5 4 1 8 9 3 2 6 \n9   \n \n3   \n \n4   \n \n    9 8 2 3 5 6 4 1 7 \n \n  8  \n \n1 \n \n  5     4 2 8 7 3 1 6 9 5 \n  9   \n  6   \n   \n      5 9 7 8 6 4 1 3 2 \n1 \n \n \n9   \n \n7   \n \n    1 6 3 9 2 5 7 8 4 \nFigure 8.5. A puzzle P with W(P)=B(P)=∞ but S(P)=3 \n*****\t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  S\t\r  *****\t\r  \n24\t\r  givens,\t\r  214\t\r  candidates,\t\r  1289\t\r  csp-­‐links\t\r  and\t\r  1289\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.41\t\r  \nswordfish-­‐in-­‐columns:\t\r   n4{c3\t\r   c6\t\r   c9}{r5\t\r   r8\t\r   r9}\t\r   ==>\t\r   r9c5\t\r   ≠\t\r   4,\t\r   r9c2\t\r   ≠\t\r   4,\t\r   r8c1\t\r   ≠\t\r   4,\t\r   r5c5\t\r   ≠\t\r   4,\t\r  \nr5c1\t\r  ≠\t\r  4\t\r  \nswordfish-­‐in-­‐columns:\t\r  n9{c3\t\r  c6\t\r  c9}{r2\t\r  r3\t\r  r5}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  9,\t\r  r5c5\t\r  ≠\t\r  9\t\r  \n;;; this swordfish allows three more eliminations, but they are interrupted by singles \nsingles\t\r  to\t\r  the\t\r  end\t\r  \nAs for the advantages of considering the four 2D spaces, notice that in the upper \npart of Figure 8.4 (rc-space at the start of resolution), it is difficult to distinguish the  \ntwo Swordfish, because they are in the same columns and they have three rc-cells in \ncommon. In the lower part (cn-space), it is obvious: they lie in different rows (for n). \nExercise: use theorem 8.7 and its proof to show exactly which eliminations done \n(or allowed) by the two Swordfish are subsumed by whips and which are not. \nAs previously shown in section 7.7.3, this puzzle can be solved by g-whips[2], \nbut this is irrelevant to our present purposes, because these g-whips are unrelated to \nthe two Swordfish. \n8.8.3. A Jellyfish not subsumed by whips but solved by g-whips or (longer) braids \nAfter theorem 8.8, whips subsume most cases of Cyclic Quads. But there are \nrare examples in which this is not the case, such as the puzzle in Figure 8.6 \n\n8. Subset rules in a general CSP \n229 \n(#017#Mauricio-002#8#1). Not only is there a Quad elimination that cannot be done \nby whips or braids of length 4, but also there is no whip of length < 18 that could do \nit. We shall also use this puzzle to illustrate the fact that allowing/disallowing one \nmore resolution rule can occasionally have dramatic effects on the classification of a \npuzzle, although the statistical effects seem to be minor. \n \n \n  \n  \n  \n \n  \n  \n \n \n \n    4 9 5 7 8 6 3 1 2 \n \n \n  \n  1 \n \n  \n \n \n    3 7 6 5 1 2 8 9 4 \n  1 2 3   4 5 6  \n    8 1 2 3 9 4 5 6 7 \n \n  \n  \n  \n  \n   \n  \n \n    1 8 9 2 7 3 4 5 6 \n  2 3 \n \n \n  7 8 \n \n    6 2 3 4 5 1 7 8 9 \n \n4 7   6 \n \n1 2  \n    5 4 7 9 6 8 1 2 3 \n \n  \n   \n \n  \n \n  \n \n    2 6 4 1 3 5 9 7 8 \n  3 1 8 \n \n7 6 4       9 3 1 8 2 7 6 4 5 \n  5 8   \n  \n \n2 3  \n    9 5 8 6 4 9 2 3 1 \nFigure 8.6. Puzzle P with W+S(P)=4, B(P) = 10, W(P) >18 and gW(P) = 4 \n8.8.3.1. Solution with whips and subsets, W+S(P)=4 \nLet us first find a solution combining whips and Subsets: \n \n*****\t\r  \t\r  SudoRules\t\r  version\t\r  13.7wter2,\t\r  config:\t\r  W+S\t\r  \t\r  *****\t\r  \nnrc-­‐chain[2]:\t\r  c8n5{r4\t\r  r7}\t\r  –\t\r  r8n5{c9\t\r  c5}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  5\t\r  (a\t\r  special\t\r  case\t\r  of\t\r  whip[2])\t\r  \nxyz-­‐chain[3]:\t\r  r6c4{n9\t\r  n5}\t\r  –\t\r  r5c5{n5\t\r  n4}\t\r  –\t\r  r9c5{n4\t\r  n9}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  9\t\r  (a\t\r  special\t\r  case\t\r  of\t\r  whip[3])\t\r  \nnaked-­‐quads-­‐in-­‐a-­‐block:\t\r  b5{r5c4\t\r  r5c5\t\r  r5c6\t\r  r6c4}{\t\r  n1\t\r  n4\t\r  n5\t\r  n9}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  4,\t\r  r4c5\t\r  ≠\t\r  4\t\r  \t\r  \n \n;;; here , due to the simplest first strategy, the application of Naked Quad is \n“interrupted” by the availability of a simpler rule (this could be modified): \nwhip[1]:\t\r  b4n4{r5c4\t\r  .}\t\r  ==>\t\r  r5c9\t\r  ≠\t\r  4\t\r  \n;;; now the Quad continues: \nnaked-­‐quads-­‐in-­‐a-­‐block:\t\r   b5{r5c4\t\r   r5c5\t\r   r5c6\t\r   r6c4}{n1\t\r   n4\t\r   n5\t\r   n9}\t\r   ==>\t\r   r4c4\t\r   ≠\t\r   1,\t\r   r4c4\t\r   ≠\t\r   5,\t\r  \nr4c4\t\r  ≠\t\r  9,\t\r  r4c6\t\r  ≠\t\r  5,\t\r  r4c6\t\r  ≠\t\r  9,\t\r  r6c6\t\r  ≠\t\r  5,\t\r  r6c6\t\r  ≠\t\r  9\t\r  \n;;; Resolution state RS1 \nThe resolution state RS1 reached at this point is displayed in Figure 8.7; here, we \nhave artificially isolated the last elimination allowed by this Quad, for later \nreference, because the same resolution state will be reached by another resolution \npath using only braids. \n;;; let us now continue past resolution state RS1: \nnaked-­‐quads-­‐in-­‐a-­‐block:\t\r  b5{r5c4\t\r  r5c5\t\r  r5c6\t\r  r6c4}{n1\t\r  n4\t\r  n5\t\r  n9}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  1\t\r  \nhidden-­‐single-­‐in-­‐row\t\r  r4\t\r  ==>\t\r  r4c1\t\r  =\t\r  1\t\r  \n \n;;; we now reach a resolution state RS2 (Figure 8.8) in which there is a Jellyfish; \nnotice that this Jellyfish was already present in resolution state RS1. \n\n230 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nr1 \n          n3 \nn4 n5 n6 \nn7 n8 n9 \n  \n           n6 \nn7 n8 n9 \n  \nn4 n5 n6 \n         n9 \n  n2      \n     n5 n6 \nn7      n9 \n n2      \n n5      \nn7 n8 n9 \n n2      \n     n5 n6 \n    n8 n9 \n          n3 \nn4               \n     n8 n9 \nn1           \n  \nn7      n9 \nn1 n2 n3 \nn4           \nn7 n8 n9 r1 \nr2 \n          n3 \nn4 n5 n6 \nn7 n8 n9 \n \n           n6 \nn7 n8 n9 \n \nn4 n5 n6 \n         n9 \n n2      \n     n5 n6 \nn7      n9 n1 \n n2      \n     n5 n6 \n    n8 n9 \n          n3 \nn4               \n     n8 n9 \n  \n  \nn7      n9 \n     n2 n3 \nn4           \nn7 n8 n9 r2 \nr3 \n  \n  \nn7 n8 n9 n1 \nn2 \nn3 \n  \n  \nn7 n8 n9 n4 \nn5 \nn6 \n  \n  \nn7 n8 n9 r3 \nr4 \nn1           \n     n5 n6 \n     n8 n9 \n  \n          n6 \n     n8 n9 \n  \n     n5 n6 \n          n9 \nn1 n2      \nn4 n5          \nn7      n9 \n     n2 n3 \nn4           \nn7 n8      \nn1 n2 n3 \n   n5          \n     n8 n9 \n          n3 \nn4           \n          n9 \n  \n n5      \n          n9 \n          n3 \nn4 n5 n6 \n          n9 r4 \nr5 \nn1           \n     n5 n6 \n          n9 n2 \nn3 \nn1           \nn4 n5      \n          n9 \n  \nn4 n5          \n          n9 \nn1           \n     n5      \n          n9 n7 \nn8 \n  \n(n4)n5n6 \n          n9 r5 \nr6 \n  \n     n5  \n     n8 n9 n4 \nn7 \n  \n     n5      \n          n9 n6 \n          n3 \n     n5             \n     n8 n9 n1 \nn2 \n          n3 \n n5      \n          n9 r6 \nr7 \n n2      \nn4      n6 \nn7      n9 \n  \n          n6 \nn7      n9 \n  \nn4      n6 \n          n9 \nn1 n2      \nn4 n5 n6 \n          n9 \n     n2 n3 \nn4 n5      \n          n9 \nn1 n2 n3 \n     n5 n6 \n          n9 \n  \n  \n     n8 n9 \nn1           \n n5      \nn7      n9 \nn1           \n n5    \nn7 n8 n9 r7 \nr8 \n n2      \n  \n          n9 n3 \nn1 \nn8 \n n2      \n     n5      \n          n9 n7 \nn6 \nn4 \n  \n n5      \n          n9 r8 \nr9 \n  \nn4      n6 \nn7      n9 n5 \nn8 \nn1           \nn4      n6 \n          n9 \n  \nn4               \n          n9 \nn1           \n          n6 \n          n9 n2 \nn3 \nn1           \n           \nn7      n9 r9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 8.7. resolution state RS1: a Naked Quad in block b5 (in grey cells); the nine \ncandidates eliminated by the Quad just before resolution state RS1 is reached are barred; the \ncandidate (n4r5c9) eliminated by the whip[1] is between parentheses; the next candidate \n(n1r4c6) the Quad could eliminate is underlined; it is the target of no whip or braid. \n;;; let us now continue past RS2: \njellyfish-­‐in-­‐columns:\t\r  n9{c2\t\r  c3\t\r  c7\t\r  c8}{r1\t\r  r2\t\r  r4\t\r  r7}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  9,\t\r  r1c9\t\r  ≠\t\r  9,\t\r  r2c1\t\r  ≠\t\r  9,\t\r  r2c4\t\r  ≠\t\r  9,\t\r  \nr2c6\t\r  ≠\t\r  9,\t\r  r2c9\t\r  ≠\t\r  9,\t\r  r4c9\t\r  ≠\t\r  9,\t\r  r7c1\t\r  ≠\t\r  9,\t\r  r7c4\t\r  ≠\t\r  9,\t\r  r7c5\t\r  ≠\t\r  9,\t\r  r7c6\t\r  ≠\t\r  9,\t\r  r7c9\t\r  ≠\t\r  9\t\r  \nnrc-­‐chain[3]:\t\r  c6n9{r5\t\r  r9}\t\r  –\t\r  r9c5{n9\t\r  n4}\t\r  –\t\r  b5n4{r5c5\t\r  r5c4}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  9\t\r  (a\t\r  special\t\r  kind\t\r  of\t\r  whip[3])\t\r  \njellyfish-­‐in-­‐columns:\t\r  n9{c2\t\r  c3\t\r  c7\t\r  c8}{r1\t\r  r2\t\r  r4\t\r  r7}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  9,\t\r  r1c5\t\r  ≠\t\r  9\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n8.8.3.2. Using only braids, B(P)=10 \nSuppose we now want a pure braids solution and we do not allow Subset rules. \nThen we get B(P) = 10. \n \n*****\t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  B\t\r  *****\t\r  \n26\t\r  givens,\t\r  222\t\r  candidates,\t\r  1621\t\r  csp-­‐links\t\r  and\t\r  1621\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.65\t\r  \nwhip[2]:\t\r  c8n5{r4\t\r  r7}\t\r  –\t\r  r8n5{c9\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  r6c4{n9\t\r  n5}\t\r  –\t\r  r5c5{n5\t\r  n4}\t\r  –\t\r  r9c5{n4\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  9\t\r  \n \n\n8. Subset rules in a general CSP \n231 \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nr1 \n          n3 \nn4 n5 n6 \nn7 n8 n9 \n  \n           n6 \nn7 n8 n9 \n  \nn4 n5 n6 \n         n9 \n  n2      \n     n5 n6 \nn7      n9 \n n2      \n n5      \nn7 n8 n9 \n n2      \n     n5 n6 \n    n8 n9 \n          n3 \nn4               \n     n8 n9 \nn1           \n  \nn7      n9 \nn1 n2 n3 \nn4           \nn7 n8 n9 r1 \nr2 \n          n3 \nn4 n5 n6 \nn7 n8 n9 \n \n           n6 \nn7 n8 n9 \n \nn4 n5 n6 \n         n9 \n n2      \n     n5 n6 \nn7      n9 n1 \n n2      \n     n5 n6 \n    n8 n9 \n          n3 \nn4               \n     n8 n9 \n  \n  \nn7      n9 \n     n2 n3 \nn4           \nn7 n8 n9 r2 \nr3 \n  \n  \nn7 n8 n9 n1 \nn2 \nn3 \n  \n  \nn7 n8 n9 n4 \nn5 \nn6 \n  \n  \nn7 n8 n9 r3 \nr4 n1 \n  \n          n6 \n     n8 n9 \n  \n     n5 n6 \n          n9 \n     n2      \n           \nn7           \n     n2 n3 \n               \nn7 n8      \n     n2 n3 \n           \n     n8      \n          n3 \nn4           \n          n9 \n  \n n5      \n          n9 \n          n3 \nn4 n5 n6 \n          n9 r4 \nr5 \n              \n     n5 n6 \n          n9 n2 \nn3 \nn1           \nn4 n5      \n          n9 \n  \nn4 n5          \n          n9 \nn1           \n     n5      \n          n9 n7 \nn8 \n  \n     n5 n6 \n          n9 r5 \nr6 \n  \n     n5  \n     n8 n9 n4 \nn7 \n  \n     n5      \n          n9 n6 \n          n3 \n           \n     n8      n1 \nn2 \n          n3 \n n5      \n          n9 r6 \nr7 \n n2      \nn4      n6 \nn7      n9 \n  \n          n6 \nn7      n9 \n  \nn4      n6 \n          n9 \nn1 n2      \nn4 n5 n6 \n          n9 \n     n2 n3 \nn4 n5      \n          n9 \nn1 n2 n3 \n     n5 n6 \n          n9 \n  \n  \n     n8 n9 \nn1           \n n5      \nn7      n9 \nn1           \n n5    \nn7 n8 n9 r7 \nr8 \n n2      \n  \n          n9 n3 \nn1 \nn8 \n n2      \n     n5      \n          n9 n7 \nn6 \nn4 \n  \n n5      \n          n9 r8 \nr9 \n  \nn4      n6 \nn7      n9 n5 \nn8 \nn1           \nn4      n6 \n          n9 \n  \nn4               \n          n9 \nn1           \n          n6 \n          n9 n2 \nn3 \nn1           \n           \nn7      n9 r9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 8.8. Resolution state RS2: a Jellyfish not subsumed by whips or g-braids \n;;; the following whips[4] replace all but one of the eliminations allowed by the \nNaked Quad in the previous resolution path: \nwhip[4]:\t\r   b5n7{r4c4\t\r   r4c5}\t\r   –\t\r   b5n2{r4c5\t\r   r4c6}\t\r   –\t\r   b5n3{r4c6\t\r   r6c6}\t\r   –\t\r   b5n8{r6c6\t\r   .}\t\r   ==>\t\r   r4c4\t\r   ≠\t\r   1,\t\r  \nr4c4\t\r  ≠\t\r  4,\t\r  r4c4\t\r  ≠\t\r  5,\t\r  r4c4\t\r  ≠\t\r  9\t\r  \nwhip[4]:\t\r  b5n7{r4c5\t\r  r4c4}\t\r  –\t\r  b5n2{r4c4\t\r  r4c6}\t\r  –\t\r  b5n3{r4c6\t\r  r6c6}\t\r  –\t\r  b5n8{r6c6\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  4\t\r  \nwhip[1]:\t\r  b4n4{r5c4\t\r  .}\t\r  ==>\t\r  r5c9\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  r6c4{n5\t\r  n9}\t\r  –\t\r  r5c6{n9\t\r  n1}\t\r  –\t\r  r5c4{n1\t\r  n4}\t\r  –\t\r  r5c5{n4\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  5\t\r  \nwhip[4]:\t\r  r6c4{n9\t\r  n5}\t\r  –\t\r  r5c6{n5\t\r  n1}\t\r  –\t\r  r5c4{n1\t\r  n4}\t\r  –\t\r  r5c5{n4\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  9\t\r  \nwhip[4]:\t\r  r6c4{n5\t\r  n9}\t\r  –\t\r  r5c6{n9\t\r  n1}\t\r  –\t\r  r5c4{n1\t\r  n4}\t\r  –\t\r  r5c5{n4\t\r  .}\t\r  ==>\t\r  r6c6\t\r  ≠\t\r  5\t\r  \nwhip[4]:\t\r  r6c4{n9\t\r  n5}\t\r  –\t\r  r5c6{n5\t\r  n1}\t\r  –\t\r  r5c4{n1\t\r  n4}\t\r  –\t\r  r5c5{n4\t\r  .}\t\r  ==>\t\r  r6c6\t\r  ≠\t\r  9\t\r  \nHere, we have reached the same resolution state as RS1. But now, candidate \nn1r4c6 (underlined in Figure 8.7), which could be eliminated by the Naked Quad in \nthe previous resolution path, is the target of no whip or braid; it is a rare case of a \nQuad elimination not subsumed by whips, braids, g-whips or g-braids. As a \nconsequence of this missing elimination, r4c1 = 1 cannot be asserted. Nevertheless, \nthis does not prevent the Jellyfish from being present (it was already present in state \nRS1). But, what is really exceptional here is that none of the candidates that could \nbe eliminated by the Jellyfish can be eliminated by a whip[4]. \n\n232 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nThe resolution path with braids continues, much harder than with Subsets: \n \nwhip[5]:\t\r  b4n1{r4c1\t\r  r5c1}\t\r  –\t\r  r5n6{c1\t\r  c9}\t\r  –\t\r  b6n5{r5c9\t\r  r6c9}\t\r  –\t\r  r6c4{n5\t\r  n9}\t\r  –\t\r  r5n9{c4\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  5\t\r  \nwhip[5]:\t\r  b4n1{r4c1\t\r  r5c1}\t\r  –\t\r  r5n6{c1\t\r  c9}\t\r  –\t\r  b6n9{r5c9\t\r  r6c9}\t\r  –\t\r  r6c4{n9\t\r  n5}\t\r  –\t\r  r5n5{c4\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  9\t\r  \nwhip[5]:\t\r  r4n1{c1\t\r  c6}\t\r  –\t\r  b5n8{r4c6\t\r  r6c6}\t\r  –\t\r  b5n3{r6c6\t\r  r4c5}\t\r  –\t\r  b5n2{r4c5\t\r  r4c4}\t\r  –\t\r  b5n7{r4c4\t\r  .}\t\r  ==>\t\r  \nr4c1\t\r  ≠\t\r  8\t\r  \nwhip[6]:\t\r  r8c9{n9\t\r  n5}\t\r  –\t\r  c8n5{r7\t\r  r4}\t\r  –\t\r  c8n9{r4\t\r  r7}\t\r  –\t\r  c7n9{r7\t\r  r4}\t\r  –\t\r  c3n9{r4\t\r  r1}\t\r  –\t\r  c2n9{r2\t\r  .}\t\r  ==>\t\r  \nr2c9\t\r  ≠\t\r  9\t\r  \nwhip[6]:\t\r  r8c9{n9\t\r  n5}\t\r  –\t\r  c8n5{r7\t\r  r4}\t\r  –\t\r  c8n9{r4\t\r  r7}\t\r  –\t\r  c7n9{r7\t\r  r4}\t\r  –\t\r  c3n9{r4\t\r  r2}\t\r  –\t\r  c2n9{r1\t\r  .}\t\r  ==>\t\r  \nr1c9\t\r  ≠\t\r  9\t\r  \nwhip[6]:\t\r   r9c5{n9\t\r   n4}\t\r   –\t\r   r5c5{n4\t\r   n5}\t\r   –\t\r   r8n5{c5\t\r   c9}\t\r   –\t\r   b9n9{r8c9\t\r   r9c9}\t\r   –\t\r   b7n9{r9c1\t\r   r8c1}\t\r   –\t\r  \nr3n9{c1\t\r  .}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  9\t\r  \nbraid[6]:\t\r  b5n5{r5c4\t\r  r6c4}\t\r  –\t\r  r8c9{n5\t\r  n9}\t\r  –\t\r  r6n9{c4\t\r  c1}\t\r  –\t\r  r3n9{c1\t\r  c5}\t\r  –\t\r  r5c5{n5\t\r  n4}\t\r  –\t\r  r9c5{n9\t\r  .}\t\r  \n==>\t\r  r5c9\t\r  ≠\t\r  5\t\r  \nwhip[7]:\t\r  r9c5{n4\t\r  n9}\t\r  –\t\r  r5c5{n9\t\r  n5}\t\r  –\t\r  r8n5{c5\t\r  c9}\t\r  –\t\r  r8n9{c9\t\r  c1}\t\r  –\t\r  r3n9{c1\t\r  c9}\t\r  –\t\r  r6n9{c9\t\r  c4}\t\r  –\t\r  \nr5n9{c4\t\r  .}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  4\t\r  \nwhip[7]:\t\r  r9c5{n9\t\r  n4}\t\r  –\t\r  r5c5{n4\t\r  n5}\t\r  –\t\r  r8n5{c5\t\r  c9}\t\r  –\t\r  r8n9{c9\t\r  c1}\t\r  –\t\r  r3n9{c1\t\r  c9}\t\r  –\t\r  r6n9{c9\t\r  c4}\t\r  –\t\r  \nr5n9{c4\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  9\t\r  \nbraid[7]:\t\r  r2c8{n7\t\r  n9}\t\r  –\t\r  r3c9{n9\t\r  n8}\t\r  –\t\r  c7n8{r2\t\r  r7}\t\r  –\t\r  c7n9{r7\t\r  r4}\t\r  –\t\r  r9n7{c9\t\r  c1}\t\r  –\t\r  r3c1{n7\t\r  n9}\t\r  –\t\r  \nb4n9{r6c1\t\r  .}\t\r  ==>\t\r  r1c9\t\r  ≠\t\r  7\t\r  \nbraid[7]:\t\r  r2c8{n7\t\r  n9}\t\r  –\t\r  r3c9{n9\t\r  n8}\t\r  –\t\r  c7n8{r2\t\r  r7}\t\r  –\t\r  c7n9{r7\t\r  r4}\t\r  –\t\r  r9n7{c9\t\r  c1}\t\r  –\t\r  r3c1{n7\t\r  n9}\t\r  –\t\r  \nb4n9{r6c1\t\r  .}\t\r  ==>\t\r  r2c9\t\r  ≠\t\r  7\t\r  \nbraid[7]:\t\r  r2c8{n7\t\r  n9}\t\r  –\t\r  r9n7{c1\t\r  c9}\t\r  –\t\r  r3c9{n7\t\r  n8}\t\r  –\t\r  c7n8{r1\t\r  r7}\t\r  –\t\r  c7n9{r1\t\r  r4}\t\r  –\t\r  r3c1{n7\t\r  n9}\t\r  –\t\r  \nb4n9{r6c1\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  7\t\r  \nbraid[7]:\t\r  r6c4{n5\t\r  n9}\t\r  –\t\r  r8c9{n5\t\r  n9}\t\r  –\t\r  r5n9{c4\t\r  c1}\t\r  –\t\r  r3n9{c1\t\r  c5}\t\r  –\t\r  r8n5{c9\t\r  c5}\t\r  –\t\r  r5c5{n5\t\r  n4}\t\r  –\t\r  \nr9c5{n9\t\r  .}\t\r  ==>\t\r  r6c9\t\r  ≠\t\r  5\t\r  \nwhip[1]:\t\r  b6n5{r4c8\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  5\t\r  \nwhip[1]:\t\r  c3n5{r1\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  5,\t\r  r2c1\t\r  ≠\t\r  5\t\r  \nwhip[4]:\t\r  c1n5{r5\t\r  r6}\t\r  –\t\r  r6c4{n5\t\r  n9}\t\r  –\t\r  r5n9{c4\t\r  c9}\t\r  –\t\r  r5n6{c9\t\r  .}\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  1\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r4c1\t\r  =\t\r  1\t\r  \nbraid[10]:\t\r   b4n8{r4c2\t\r   r6c1}\t\r   –\t\r   r6n5{c1\t\r   c4}\t\r   –\t\r   c5n3{r4\t\r   r7}\t\r   –\t\r   r6n9{c4\t\r   c9}\t\r   –\t\r   r8c9{n9\t\r   n5}\t\r   –\t\r  \nc5n5{r8\t\r  r1}\t\r  –\t\r  c5n2{r1\t\r  r8}\t\r  –\t\r  c5n7{r1\t\r  r3}\t\r  –\t\r  r3c1{n7\t\r  n9}\t\r  –\t\r  r8n9{c9\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  8\t\r  \nwhip[1]:\t\r  c5n8{r1\t\r  .}2\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  8,\t\r  r2c6\t\r  ≠\t\r  8\t\r  \nwhip[7]:\t\r  b2n8{r1c5\t\r  r3c5}\t\r  –\t\r  c1n8{r3\t\r  r6}\t\r  –\t\r  r6n5{c1\t\r  c4}\t\r  –\t\r  r6n9{c4\t\r  c9}\t\r  –\t\r  r3n9{c9\t\r  c1}\t\r  –\t\r  r8n9{c1\t\r  c5}\t\r  –\t\r  \nr9n9{c6\t\r  .}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  8\t\r  \nwhip[8]:\t\r  b2n8{r1c5\t\r  r3c5}\t\r  –\t\r  c5n7{r3\t\r  r4}\t\r  –\t\r  c5n3{r4\t\r  r7}\t\r  –\t\r  c5n2{r7\t\r  r8}\t\r  –\t\r  r8c1{n2\t\r  n9}\t\r  –\t\r  r3n9{c1\t\r  c9}\t\r  –\t\r  \nr6n9{c9\t\r  c4}\t\r  –\t\r  r5n9{c4\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  5\t\r  \nbraid[5]:\t\r  r6n3{c9\t\r  c6}\t\r  –\t\r  c5n3{r4\t\r  r7}\t\r  –\t\r  r6c4{n9\t\r  n5}\t\r  –\t\r  r8c9{n9\t\r  n5}\t\r  –\t\r  c5n5{r8\t\r  .}\t\r  ==>\t\r  r6c9\t\r  ≠\t\r  9\t\r  \nsingles\t\r  ==>\t\r  r6c9\t\r  =\t\r  3,\t\r  r6c6\t\r  =\t\r  8,\t\r  r4c2\t\r  =\t\r  8\t\r  \nwhip[2]:\t\r  r6n9{c4\t\r  c1}\t\r  –\t\r  b7n9{r9c1\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r6n9{c4\t\r  c1}\t\r  –\t\r  r8n9{c1\t\r  c9}\t\r  –\t\r  r3n9{c9\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r9c5{n9\t\r  n4}\t\r  –\t\r  r5c5{n4\t\r  n5}\t\r  –\t\r  r6c4{n5\t\r  .}\t\r  ==>\t\r  r9c4\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r6n9{c1\t\r  c4}\t\r  –\t\r  r5n9{c4\t\r  c9}\t\r  –\t\r  b9n9{r9c9\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  9\t\r  \nwhip[4]:\t\r  b4n9{r6c1\t\r  r4c3}\t\r  –\t\r  b6n9{r4c9\t\r  r5c9}\t\r  –\t\r  r8n9{c9\t\r  c5}\t\r  –\t\r  r3n9{c5\t\r  .}\t\r  ==>\t\r  r9c1\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  b7n9{r7c2\t\r  r8c1}\t\r  –\t\r  b4n9{r5c1\t\r  r4c3}\t\r  –\t\r  b6n9{r4c9\t\r  .}\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  9\t\r  \nwhip[4]:\t\r  r9n9{c6\t\r  c9}\t\r  –\t\r  r8n9{c9\t\r  c1}\t\r  –\t\r  r5n9{c1\t\r  c4}\t\r  –\t\r  r6n9{c4\t\r  .}\t\r  ==>\t\r  r7c6\t\r  ≠\t\r  9\t\r  \nwhip[4]:\t\r  b8n9{r9c6\t\r  r8c5}\t\r  –\t\r  r3n9{c5\t\r  c1}\t\r  –\t\r  r6n9{c1\t\r  c4}\t\r  –\t\r  r5n9{c4\t\r  .}\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  9\t\r  \n\n8. Subset rules in a general CSP \n233 \nwhip[1]:\t\r  r9n9{c5\t\r  .}\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  9\t\r  \nwhip[2]:\t\r  r8n9{c9\t\r  c1}\t\r  –\t\r  b4n9{r5c1\t\r  .}\t\r  ==>\t\r  r4c9\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r6n9{c4\t\r  c1}\t\r  –\t\r  r3n9{c1\t\r  c9}\t\r  –\t\r  r8n9{c9\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  9,\t\r  r2c4\t\r  ≠\t\r  9\t\r  \nwhip[1]:\t\r  c4n9{r6\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r6n9{c1\t\r  c4}\t\r  –\t\r  r5n9{c4\t\r  c9}\t\r  –\t\r  r8n9{c9\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  9,\t\r  r2c1\t\r  ≠\t\r  9,\t\r  r3c1\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r8n9{c9\t\r  c1}\t\r  –\t\r  r5n9{c1\t\r  c4}\t\r  –\t\r  r6n9{c4\t\r  .}\t\r  ==>\t\r  r3c9\t\r  ≠\t\r  9\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n8.8.3.3. Using only whips, W(P)>18 \nSuppose now we wanted a solution with only whips. If a resolution path could \nbe obtained with whips, some of them would have to be of length > 18, i.e. one has \nW(P) > 18. Actually, we did not try longer ones because of memory overflow \nproblems and we did not insist because it did not seem interesting to go further.  \n8.8.3.4. Using g-whips, gW(P)=4 \nIf we now use g-whips, we get gW(P) = 4, with a completely different resolution \npath (unrelated to the Quads in the first path): \n \n*****\t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  gW\t\r  *****\t\r  \n26\t\r  givens,\t\r  222\t\r  candidates\t\r  and\t\r  1621\t\r  nrc-­‐links\t\r  \nwhip[2]:\t\r  c8n5{r4\t\r  r7}\t\r  –\t\r  r8n5{c9\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  r6c4{n9\t\r  n5}\t\r  –\t\r  r5c5{n5\t\r  n4}\t\r  –\t\r  r9c5{n4\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  9\t\r  \n \n;;; after this point, the resolution path diverges completely with respect to the \nprevious ones : \ng-­‐whip[3]:\t\r  b6n9{r4c7\t\r  r456c9}\t\r  –\t\r  r3n9{c9\t\r  c5}\t\r  –\t\r  r8n9{c5\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  9\t\r  \ng-­‐whip[3]:\t\r  b4n9{r4c3\t\r  r456c1}\t\r  –\t\r  r3n9{c1\t\r  c5}\t\r  –\t\r  r8n9{c5\t\r  .}\t\r  ==>\t\r  r4c9\t\r  ≠\t\r  9\t\r  \ng-­‐whip[3]:\t\r  b7n9{r7c3\t\r  r789c1}\t\r  –\t\r  r3n9{c1\t\r  c9}\t\r  –\t\r  b9n9{r9c9\t\r  .}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  9\t\r  \ng-­‐whip[3]:\t\r  b4n9{r6c1\t\r  r4c123}\t\r  –\t\r  b6n9{r4c7\t\r  r456c9}\t\r  –\t\r  b9n9{r9c9\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  9\t\r  \ng-­‐whip[3]:\t\r  b7n9{r7c3\t\r  r789c1}\t\r  –\t\r  r5n9{c1\t\r  c456}\t\r  –\t\r  r6n9{c6\t\r  .}\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  9\t\r  \nwhip[4]:\t\r   b5n7{r4c4\t\r   r4c5}\t\r   –\t\r   b5n2{r4c5\t\r   r4c6}\t\r   –\t\r   b5n3{r4c6\t\r   r6c6}\t\r   –\t\r   b5n8{r6c6\t\r   .}\t\r   ==>\t\r   r4c4\t\r   ≠\t\r   5,\t\r  \nr4c4\t\r  ≠\t\r  4,\t\r  r4c4\t\r  ≠\t\r  1,\t\r  r4c4\t\r  ≠\t\r  9\t\r  \nwhip[4]:\t\r  b5n7{r4c5\t\r  r4c4}\t\r  –\t\r  b5n2{r4c4\t\r  r4c6}\t\r  –\t\r  b5n3{r4c6\t\r  r6c6}\t\r  –\t\r  b5n8{r6c6\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  4\t\r  \nwhip[1]\t\r  :\t\r  r4n4{c9\t\r  .}\t\r  ==>\t\r  r5c9\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  r6c4{n5\t\r  n9}\t\r  –\t\r  r5c6{n9\t\r  n1}\t\r  –\t\r  r5c4{n1\t\r  n4}\t\r  –\t\r  r5c5{n4\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  5,\t\r  r6c6\t\r  ≠\t\r  5\t\r  \nwhip[4]:\t\r  r6c4{n9\t\r  n5}\t\r  –\t\r  r5c6{n5\t\r  n1}\t\r  –\t\r  r5c4{n1\t\r  n4}\t\r  –\t\r  r5c5{n4\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  9,\t\r  r6c6\t\r  ≠\t\r  9\t\r  \ng-­‐whip[3]:\t\r  b9n9{r7c7\t\r  r789c9}\t\r  –\t\r  r6n9{c9\t\r  c1}\t\r  –\t\r  b7n9{r9c1\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  9\t\r  \ng-­‐whip[4]:\t\r  b4n9{r5c1\t\r  r4c123}\t\r  –\t\r  b6n9{r4c7\t\r  r456c9}\t\r  –\t\r  r8n9{c9\t\r  c5}\t\r  –\t\r  r9n9{c6\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r3n9{c5\t\r  c9}\t\r  –\t\r  r8n9{c9\t\r  c1}\t\r  –\t\r  r6n9{c1\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r9c5{n9\t\r  n4}\t\r  –\t\r  r5c5{n4\t\r  n5}\t\r  –\t\r  r6c4{n5\t\r  .}\t\r  ==>\t\r  r9c4\t\r  ≠\t\r  9\t\r  \nwhip[4]:\t\r  r9n7{c9\t\r  c1}\t\r  –\t\r  r3c1{n7\t\r  n8}\t\r  –\t\r  r3c9{n8\t\r  n9}\t\r  –\t\r  r2c8{n9\t\r  .}\t\r  ==>\t\r  r2c9\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  r9n7{c9\t\r  c1}\t\r  –\t\r  r3c1{n7\t\r  n8}\t\r  –\t\r  r3c9{n8\t\r  n9}\t\r  –\t\r  r2c8{n9\t\r  .}\t\r  ==>\t\r  r1c9\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  r2c8{n7\t\r  n9}\t\r  –\t\r  r3n9{c9\t\r  c5}\t\r  –\t\r  r3n7{c5\t\r  c9}\t\r  –\t\r  r9n7{c9\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  r8c9{n5\t\r  n9}\t\r  –\t\r  r3n9{c9\t\r  c5}\t\r  –\t\r  r9c5{n9\t\r  n4}\t\r  –\t\r  r5c5{n4\t\r  .}\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  5\t\r  \nsingles\t\r  ==>\t\r  r8c9\t\r  =\t\r  5,\t\r  r4c8\t\r  =\t\r  5\t\r  \nwhip[1]:\t\r  c3n5{r1\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  5,\t\r  r2c1\t\r  ≠\t\r  5\t\r  \n\n234 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[3]:\t\r  r8n9{c1\t\r  c5}\t\r  –\t\r  r9n9{c6\t\r  c9}\t\r  –\t\r  r3n9{c9\t\r  .}\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  9,\t\r  r7c2\t\r  ≠\t\r  9\t\r  \nwhip[1]:\t\r  b7n9{r9c1\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  9,\t\r  r2c1\t\r  ≠\t\r  9,\t\r  r5c1\t\r  ≠\t\r  9,\t\r  r6c1\t\r  ≠\t\r  9\t\r  \nwhip[1]:\t\r  b4n9{r4c2\t\r  .}\t\r  ==>\t\r  r4c7\t\r  ≠\t\r  9\t\r  \nwhip[1]:\t\r  b6n9{r6c9\t\r  .}\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  9\t\r  \nwhip[1]:\t\r  b9n9{r7c7\t\r  .}\t\r  ==>\t\r  r7c6\t\r  ≠\t\r  9\t\r  \nwhip[1]:\t\r  b6n9{r6c9\t\r  .}\t\r  ==>\t\r  r1c9\t\r  ≠\t\r  9,\t\r  r2c9\t\r  ≠\t\r  9,\t\r  r3c9\t\r  ≠\t\r  9\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n8.9. Subsets in N-Queens \nRecalling that, in N-Queens, a label corresponds to a cell, we shall represent \neach transversal set in an Sp-subset pattern by p grey cells with the same shade of \ngrey. \n8.9.1. A Pair in 7-Queens with a transversal set not associated with a CSP variable \nThe instance of 7-Queens in Figure 8.9, with two queens already placed in r2c1 \nand r6c4 has a Pair for CSP variables Xr4 and Xr7, with transversal sets {r4c5, \nr7c2} and {r4c7, r7c7}. These sets are defined as the intersections of the two rows \nwith respectively a diagonal and a column. The first thus provides an example of a \ntransversal set not defined via a “transversal” CSP variable.  \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 c6 \nc7 \nr1 \n° \n° \n \n° \n \n \nB \nr2 * \n° \n° \n° \n° \n° \n° \nr3 \n° \n° \n \n° \n \nA \n° \nr4 \n° \n° \n° \n° \n \n° \n \nr5 \n° \n \n° \n° \n° \n \nC \nr6 \n° \n° \n° * \n° \n° \n° \nr7 \n° \n \n° \n° \n° \n° \n \nFigure 8.9. A 7-Queens instance, with a Pair \n*****\t\r  Manual\t\r  solution\t\r  *****\t\r  \nwhip[1]:\t\r  r4{c5\t\r  .}\t\r  ⇒\t\r  ¬r3c6\t\r  (A\t\r  eliminated)\t\r  \npair:\t\r  {{Xr4,\t\r  Xr7},\t\r  {{r4c5,\t\r  r7c2},\t\r  {r4c7,\t\r  r7c7}}}\t\r  ⇒\t\r  ¬r1c7,\t\r  ¬r5c7\t\r  (B\t\r  and\t\r  C\t\r  eliminated)\t\r  \n\n8. Subset rules in a general CSP \n235 \nNotice that A could have been eliminated by the Pair, because it is also linked to \nthe first transversal set, but the whip[1] is applied before, because it is considered \nsimpler. Both B and C are linked to the second transversal set. \nRemember that the disjointness conditions of the definition bear on the \ncandidates of the different CSP variables in the current resolution state and not on \nthe transversal sets, let alone on the global transversal constraints (or transversal \nCSP variables) defining them, if any: here r2c7 is common to both constraints. \nFinally, notice that, in conformance with the general theory, the Pair can be seen \nas a whip[2]: \n \nwhip[2]:\t\r  ⇒\t\r  r4{c7\t\r  c5}\t\r  –\t\r  r7{c2\t\r  .}\t\r  ⇒\t\r  ¬r1c7,\t\r  ¬r5c7\t\r  \n8.9.2. A Pair in 10-Queens with transversal sets defined via transversal variables \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 c10 \nr1 \n° \n° \n° \n° \n° \n° * \n° \n°  ° \nr2 \n°  ° \n° \n° \n°  °  ° \n°  °  * \nr3  \n° \n° \n° \n° \n+ \n° \n° \n°  ° \nr4 \n° \n° * \n° \n° \n° \n° \n°  °  ° \nr5 \n+ \n° \n° \n° \n° \n \n° \n°  °  ° \nr6 \n°  ° \n°  ° \n° \n°  °  *  °  ° \nr7 \n° \n \n° \n+ \n° \n°  ° \n°  °  ° \nr8 \nB \n+ \n° \n° \n \n° \n° \n° \n°  ° \nr9 \n° \n° \n° \n° \n° \n° \n° \n°  *  ° \nr10 \nC \n° \n°  ° \n+ \nA \n° \n° \n°  ° \nFigure 8.10. A 10-Queens instance, with a Pair \nConsider again the 10-Queens instance in Figure 5.10 (section 5.11.2), \nreproduced below as Figure 8.10. Suppose we do not see the second and the third \nlong distance interaction whips. We can still eliminate B and C, based on Pairs in \nrows (CSP variables Xr3, Xr5), in which the transversal sets correspond to the \nintersections with columns (“transversal CSP variables” Xc1, Xc6). \n\n236 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n*****\t\r  Manual\t\r  solution\t\r  *****\t\r  \nwhip[1]:\t\r  r3{c1\t\r  .}\t\r  ⇒\t\r  ¬r10c6\t\r  (A\t\r  eliminated)\t\r  \npairs:\t\r  {{Xr3,\t\r  Xr5},\t\r  {c1{r3,\t\r  r5},\t\r  c6{r3,\t\r  r5}}}\t\r  ⇒\t\r  ¬r8c1,\t\r  ¬r10c1\t\r  \t\r  \t\r  (B,\t\r  C\t\r  eliminated)\t\r  \nsingle\t\r  in\t\r  r10:\t\r  r10c5;\t\r  single\t\r  in\t\r  r8:\t\r  r8c2;\t\r  single\t\r  in\t\r  r7:\t\r  r7c4;\t\r  single\t\r  in\t\r  r5:\t\r  r5c1;\t\r  single\t\r  in\t\r  r3:\t\r  r3c6\t\r  \nSolution\t\r  found\t\r  in\t\r  W2.\t\r  \n \n8.9.3. Triplets in 9-Queens not subsumed by whip[3] \nThe instance of 9-Queens in Figure 8.11 has a complete Triplet (three candidates \nfor the three CSP variables, i.e. all the optional candidates are present). The (unique) \nelimination (A) allowed by the Triplet cannot be replaced by a whip[3]. \nHere, the method is used to provide a simple proof that this instance has no \nsolution. \n \n*****\t\r  Manual\t\r  solution\t\r  *****\t\r  \ntriplets:\t\r  {{Xr1,\t\r  Xr3,\t\r  Xr7},\t\r  {c1{r1,\t\r  r3,\t\r  r7},\t\r  c5{r1,\t\r  r3,\t\r  r7},\t\r  c7{r1,\t\r  r3,\t\r  r7}}}\t\r  ⇒\t\r  ¬r6c1\t\r  (A\t\r  eliminated)\t\r  \nwhip[3]:\t\r  r6{c2\t\r  c8}\t\r  –\t\r  r7{c7\t\r  c5}\t\r  –\t\r  r3{c5\t\r  .}\t\r  \t\r  ⇒\t\r  ¬r8c2\t\r  (B\t\r  eliminated)\t\r  \nsingle\t\r  in\t\r  r8\t\r  ⇒\t\r  r8c8\t\r  \nwhip[1]:\t\r  c1{r7\t\r  .}\t\r  \t\r  ⇒\t\r  ¬r7c5\t\r  (C\t\r  eliminated)\t\r  \nsingle\t\r  in\t\r  r7\t\r  ⇒\t\r  r7c1\t\r  \nThis\t\r  puzzle\t\r  has\t\r  no\t\r  solution:\t\r  no\t\r  value\t\r  for\t\r  Xc2\t\r  \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \nr1  \n° \n° \n° \n \n° \n \n° \n ° \nr2 \n° \n° * \n° \n° \n° \n° \n° \n ° \nr3 \n \n° \n° \n° \n \n° \n \n° \n ° \nr4 \n°  ° \n° \n° \n°  °  °  ° * \nr5 \n° \n° \n° * \n° \n° \n° \n° \n° \nr6 \nA  \n° \n° \n° \n° \n° \n \n ° \nr7 \n+ \n° \n° \n° \nC \n° \n \n° \n ° \nr8 \n° \nB \n° \n° \n° \n° \n° \n+ \n° \nr9 \n° \n° \n° \n° \n° * \n° \n° \n ° \nFigure 8.11. A 9-Queens instance, with a complete Triplet \n\n \n09. Reversible-Sp-chains, Sp-whips and Sp-braids \nIn this chapter, we define more complex types of chains than the whips, g-whips \nand corresponding braids introduced until now8. At least for the Sudoku CSP, this \nentails that we are dealing with exceptional instances, either because they cannot be \nsolved by the previous patterns or because the new ones give them a smaller rating. \nThe main idea is that there are patterns that can be considered as elementary or \n“atomic” and there are ways to combine them into more complex ones. Until now, \ntypical “atomic” patterns have been single candidates in chapter 5 and g-candidates \nin chapter 7. And the typical way of combining them has been to assemble them into \nchains, whips, g-whips, braids and g-braids via what we shall now call the “zt-ing \nprinciple”: in the context of these chains, i.e. “modulo the target (z) and the previous \nright-linking candidates (t)”, they appear as single candidates or as g-candidates.  \nWe shall now show that this principle can be extended to the Sp-subset patterns \nof chapter 8, more precisely: given any Subset resolution theory Sp (0≤p≤∞) for any \nCSP, one can define Sp-whips and Sp-braids as generalised whips or braids that \naccept patterns from this family of rules (i.e. Sp’-subsets for any p’≤p), in addition to \ncandidates and g-candidates, for their right-linking elements – whereas their left-\nlinking elements remain mere candidates, as in the case of whips and g-whips. In a \nsense, allowing the inclusion of such patterns introduces a restricted kind of look-\nahead with respect to the original non-anticipating (no look-ahead) whips and g-\nwhips, because each Sp’-subset is inserted into the chain as a whole and it increases \nits length by p’ (its size) instead of 1; but this form of look-ahead is strictly \ncontrolled by the p parameter and by the very specific type of pattern the Sp’-subsets \nare.  \nIf we consider that, in the context of a whip or a g-whip, the left-linking \ncandidates have negative valence and the right-linking candidates or g-candidates \nhave positive valence, then in the context of the new Sp-whips and Sp-braids, the \nright-linking Sp-subsets have positive valence, in the sense that, if the target was \nTrue in some resolution state RS, there would be some posterior resolution state in \nwhich they would appear as autonomous Sp-subsets. \n                               \n8 In the Sudoku context, we first introduced these extended whips and braids (with a different \nterminology) in the “Fully Supersymmetric Chains” thread of the late Sudoku Player’s Forum \n(p. 14, October 17th, 2008).  \n\n238 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nIn the next chapters, we shall see that one can go still further, but we think the \nintermediate step developed here is sufficiently interesting in its own. Moreover, it \nwill be easier to justify certain choices we shall have to make later, after we have \nanalysed the simpler case of Sp-whips (simpler mainly because, contrary to whips or \nbraids, the Sp-subset patterns can be defined without any reference to their target). \nEverything goes for Sp-whips as for g-whips (except that a few additional \ntechnicalities have to be faced). The main point to be noticed is that, when it comes \nto defining the concepts of Sp-links and Sp-compatibility, we always consider the Sp-\nlabels underlying the Sp-subsets instead of the Sp-subsets themselves, in exactly the \nsame way as we considered the full g-labels underlying the g-candidates when we \ndefined g-links. The main reason for this choice is the same as that for g-links: we \nwant all the notions related to linking and compatibility to be purely structural, i.e. \nwe do not want them to depend on any particular resolution state; this will be \nessential for the confluence property of Sp-braid resolution theories (in section 9.4) \nand for the “T&E(Sp) vs Sp-braids” theorem (in section 9.5). But there are also \nimportant computational benefits in doing so (such as the possibility of pre-\ncomputing all the Sp-labels and Sp-links – but we shall not dwell on implementation \nmatters here). \n9.1. Sp-links; Sp-subsets modulo other Subsets; Sp-regular sequences \n9.1.1. Sp-links, Sp-compatibility \nDefinition: a label l is compatible with an Sp-label S if l is not Sp-linked to S (i.e. \nif, for each transversal set TS of S, there is at least one label l’ in TS such that l is \nnot linked to l’). \nDefinition: a label l is compatible with a set R of labels, g-labels and S-labels if l \nis compatible with each element of R (in the senses of “compatible” already defined \nseparately for labels, g-labels and Sp-labels). \nDefinitions: a label l is Sp-linked to an Sp-subset S if l is Sp-linked to the Sp-label \nunderlying S; a label l is compatible with an Sp-subset if l is not Sp-linked to it; a \nlabel l is compatible with a set R of candidates, g-candidates and Subsets if l is \ncompatible with each element of R (in the senses of “compatible” already defined \nseparately for candidates, g-candidates and Sp-subsets). \nNotice that, in conformance with what we mentioned in the introduction to this \nchapter, according to the definition of “Sp-linked to an Sp-subset”, it is not enough \nfor label l to be linked to all the actual candidates of one of its transversal sets: it \nmust be linked to all the labels of one of its transversal sets. \n\n9. Reversible-Sp-chains, Sp-whips and Sp-braids    \n239 \n9.1.2. Sp-subsets modulo a set of labels, g-labels and S-labels \nAll our forthcoming definitions (Reversible-Sp-chains, Sp-whips and Sp-braids) \nwill be based on that of an Sp-subset modulo a set R of labels, g-labels and S-labels; \nin practice, R will be either the previous right-linking pattern or the set consisting of \nthe target plus all the previous right-linking patterns (i.e. candidates, g-candidates \nand Sk-subsets). \nDefinition: in any resolution state of any CSP, given a set R of labels, g-labels \nand S-labels [or a set R of candidates, g-candidates and Subsets], a Pair (or S2-\nsubset) modulo R is an S2-label {CSPVars, TransvSets}, where: \n– CSPVars = {V1, V2}, \n– TransvSets is composed of the following transversal sets of labels:  \n{<V1, v11>, <V2, v21>} for constraint c1, \n{<V1, v12>, <V2, v22>} for constraint c2, \nsuch that: \n– in RS, V1 and V2 are disjoint, i.e. they share no candidate; \n– <V1, v11> ≠ <V1, v12> and <V2, v22> ≠ <V2, v21>; \n– in RS, V1 has the two mandatory candidates <V1, v11> and <V1, v12> \ncompatible with R and no other candidate compatible with R; \n– in RS, V2 has the two mandatory candidates <V2, v21> and <V2, v22> \ncompatible with R and no other candidate compatible with R. \n \nDefinition: in any resolution state of any CSP, given a set R of labels, g-labels \nand S-labels [or a set R of candidates, g-candidates and Subsets], a Triplet (or S3-\nsubset) modulo R is an S3-label {CSPVars, TransvSets}, where: \n– CSPVars = {V1, V2, V3}, \n– TransvSets is composed of the following transversal sets of labels:  \n– {<V1, v11>, (<V2, v21>), <V3, v31>} for constraint c1, \n– {<V1, v12>, <V2, v22>, (<V3, v32>)} for constraint c2, \n– {(<V1, v13>), <V2, v23>, <V3, v33>} for constraint c3,  \nsuch that: \n– in RS, V1, V2 and V3 are pairwise disjoint, i.e. no two of these variables share \na candidate; \n– <V1, v11> ≠ <V1, v12>, <V2, v22> ≠ <V2, v23> and <V3, v33> ≠ <V3, v31>; \n– in RS, V1 has the two mandatory candidates <V1, v11> and <V1, v12> \ncompatible with R, one optional candidate <V1, v13> compatible with R (supposing \nthis label exists) and no other candidate compatible with R; \n\n240 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– in RS, V2 has the two mandatory candidates <V2, v22> and <V2, v23> \ncompatible with R, one optional candidate <V2, v21> compatible with R (supposing \nthis label exists) and no other candidate compatible with R; \n– in RS, V3 has the two mandatory candidates <V3, v33> and <V3, v31> \ncompatible with R, one optional candidate <V3, v32> compatible with R (supposing \nthis label exists) and no other candidate compatible with R. \n \nWe leave it to the reader to write the definitions of Subsets of larger sizes \nmodulo R (Sp-subsets modulo R). The general idea is that, when one looks in RS at \nsome Sp-label “modulo R”, i.e. when all the candidates in RS incompatible with R \nare “forgotten”, what remains in RS satisfies the conditions of a non degenerated \nSubset of size p based on this Sp-label. \nDefinition: in all the above cases, a target of the Sp-subset modulo R is defined \nas a target of the Sp-subset itself (i.e. as a candidate Sp-linked to its underlying Sp-\nlabel). The idea is that, in any context (e.g. in a chain) in which all the elements in R \nhave positive valence, the Sp-subset itself will have positive valence and any of its \ntargets will have negative valence. \n9.1.3. Sp-regular sequences \nAs in the case of chains built on mere candidates, it is convenient to introduce an \nauxiliary notion before we define Reversible-Sp-chains, Sp-whips and Sp-braids. \nDefinition: let there be given an integer 1≤p≤∞, an integer m≥1, a sequence (q1, \n…, qm) of integers, with 1≤qk≤p for all 1≤k≤m, and let n = ∑1≤k≤m qk; let there also \nbe given a sequence (W1, …, Wm) of different sets of CSP variables of respective \ncardinalities qk and a sequence (V1, …, Vm) of CSP variables such that Vk ∈ Wk for \nall 1≤k≤m. We define an Sp-regular sequence of length n associated with (W1, … \nWm) and (V1, … Vm) to be a sequence of length 2m [or 2m-1] (L1, R1, L2, R2, …. Lm, \n[Rm]), such that: \n– qm=1 and Wm = {Vm}; \n– for 1≤k≤ m, Lk is a candidate; \n– for 1≤k≤ m [or 1≤k<m], Rk is a candidate or a g-candidate if qk=1 and it is a \n(non degenerated) Sqk-subset if qk>1; \n– for each 1≤k≤m [or 1≤k<m], one has “strong continuity”, “strong g-\ncontinuity” or “strong Sqk-continuity” from Lk to Rk, namely: \n- if Rk is a candidate (qk=1 and Wk={Vk}), Lk and Rk have a representative \nwith Vk: <Vk, lk> and <Vk, rk>, \n- if Rk is a g-candidate (qk=1 and Wk={Vk}), Lk is a candidate <Vk, lk> for Vk \nand Rk is a g-candidate <Vk, rk> for Vk (rk being its set of values), \n\n9. Reversible-Sp-chains, Sp-whips and Sp-braids    \n241 \n- if Rk is an Sqk-subset (qk>1), then Wk is its set of CSP variables and Lk has a \nrepresentative <Vk, lk> with Vk. \nThe Lk’s are called the left-linking candidates of the sequence and the Rk’s the \nright-linking objects (or elements or patterns or Subsets).  \nRemarks: \n– Notice the natural expression chosen for Lk to Rk continuity in case Rk is a \nSubset. \n– The definition of Subsets implies a disjointness condition on the sets of \ncandidates for the CSP variables inside each Wk, but the present definition puts no a \npriori condition on the intersections of different Wk’s. In particular, Wk+i may be a \nstrict subset of Wk, if the right-linking elements in between give negative valence in \nWk+i to some candidates that had no individual valence assigned in Wk. This is not \nconsidered as an inner loop of the sequence. \nExercise: after reading all this chapter, comment on the condition qm=1 and \nshow that it entails no restriction in the sequel. \n9.2. Reversible-Sp-chains  \nReversible-Sp-chains are an extension of g-bivalue chains in which right-linking \ncandidates may be replaced by g-candidates or Sp’-subsets (p’≤p). [One could \nimagine introducing an intermediate, restricted notion, in which g-candidates would \nnot be not allowed; with the proper definition, extending that of bivalue chains, they \nwould be reversible and give rise to resolution theories with the confluence \nproperty; but, for the same reasons as invoked in the definition of the Subset \nresolution theories, this would not make much sense in practice.] \n9.2.1. Definition of Reversible-Sp-chains \nDefinition: given an integer 1≤p≤∞ and a candidate Z (which will be a target), a \nReversible-Sp-chain of length n (n ≥ 1) built on Z, noted RSpC[n], is an Sp-regular \nsequence (L1, R1, L2, R2, …. Lm, Rm) of length n associated with a sequence (W1, … \nWm) of sets of CSP variables and a sequence (V1, … Vm) of CSP variables (with \nVk ∈ Wk for all 1≤k≤m and Wm = {Vm}), such that: \n– Z is neither equal to any candidate in {L1, R1, L2, R2, …. Lm, Rm}, nor a \nmember of any g-candidate in this set, nor equal to any label in the Sqk-label of Rk \nwhen Rk is an Sqk-subset, for any 1≤k<m; \n– Z is linked to L1; \n– for each 1 < k ≤ m, Lk is linked or g-linked or Sqk-1-linked to Rk-1; this is the \nnatural way of defining “continuity” from Rk-1 to Lk; \n\n242 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– R1 is a candidate or a g-candidate or an Sq1-subset modulo Z: R1 is the only \ncandidate or g-candidate or is the unique Sq1-subset composed of all the candidates \nC for the CSP variables in W1 such that C is compatible with Z; \n– for any 1 < k ≤ m, Rk is a candidate or a g-candidate or an Sqk-subset modulo \nRk-1: Rk is the only candidate or g-candidate or (if k≠m) is the unique Sqk-subset \ncomposed of all the candidates C for the CSP variables in Wk such that C is \ncompatible with Rk-1; \n– Z is not a label for Vm; \n– Z is linked or g-linked to Rm. \nTheorem 9.1 (Reversible-Sp-chain rule for a general CSP): in any resolution \nstate of any CSP, if Z is the target of a Reversible-Sp-chain, then it can be \neliminated (formally, this rule concludes ¬candidate(Z)). \nProof: if Z was True, then L1 would be eliminated by ECP and R1 would be \nasserted by S (if it is a candidate) or it would be a g-candidate or an Sq1-subset; in \nany case, L2 would be eliminated by ECP or W1 or Sq1. After iteration: Rm would be \nasserted by S or it would be a g-candidate – which would contradict Z being True. \n9.2.2. Reversibility of Reversible-Sp-chains in the general CSP \nThe following theorem justifies the name we have given these chains. Notice \nthat it does in no way depend on the fact that the transversal sets defining the \nSubsets would be defined by “transversal” CSP variables. \nTheorem 9.2: a Reversible-Sp-chain is reversible. \nProof: the main point of the proof is the construction of the reversed chain (a \ngeneralisation of the construction for g-bivalue-chains in section 7.2).  \nThis construction can be followed in part using Figure 9.1. This Figure gives a \nsymbolic representation of the end of a Reversible-S2-chain and the start of the \nassociated reversed chain. Horizontal solid lines represent CSP variables (both \nchains use the same global set of CSP variables); vertical dotted lines represent \ntransversal sets: on horizontal lines, candidates can only exist at the intersections \nwith dotted lines (here “horizontal” and “vertical” are in no way related to an \nunderlying grid on which the CSP would have to be defined). Octagons are \nsymbolic containers for the candidates in the right-linking S2-subsets (solid lines for \nthe initial chain, dotted lines for the reversed chain); they also show how CSP \nvariables are grouped (differently) in each chain to define their respective Subsets. \nGiven a Reversible-Sp-chain (L1, R1, L2, R2, …. Lm, Rm) of length n built on Z \nand associated with the sequence (W1, … Wm) of sets of CSP variables and the \nsequence (V1, … Vm) of CSP variables, let us define a reversed Sp-chain of same \n\n9. Reversible-Sp-chains, Sp-whips and Sp-braids    \n243 \nlength, with the same target Z and associated with a sequence (W’1, …, W’m) of sets \nof CSP variables and a sequence (V’1, …, V’m) of CSP variables that are closely \nrelated, but not identical, to the reversed sequences of (W1, …, Wm) and (V1, …, \nVm) respectively, and with a sequence of sizes (q’1, …, q’m) such that its first m-1 \nelements are those of (q1, …, qm-1) in reversed order and q’m=1. Let L’1 = Rm.  \n \n \n \nFigure 9.1. A symbolic representation of the end of a Reversible-S2-chain and the start of the \nassociated reversed chain. \nWe can now define W’1, V’1, R’1 and L’2, depending on what Rm-1 is: \n– if qm-1=1 and Rm-1 is a candidate or a g-candidate and it is linked or g-linked to \nonly one candidate for Vm (which implies that this candidate can only be Lm), then \nlet W’1 = {Vm}, V’1 = Vm, q’1=1 and R’1 = Lm (R’1 is a candidate); let L’2 = Rm-1 if \nRm-1 is a candidate and L’2 = any candidate in Rm-1 if Rm-1 is a g-candidate; \n– if qm-1=1 and Rm-1 is a candidate or a g-candidate and it is linked or g-linked to \nseveral candidates for Vm (which implies that these candidates can only be elements \nof a g-label for Vm, say g), let W’1 = {Vm}, V’1 = Vm, q’1=1 and let R’1 be the subset \nof g consisting of these candidates (R’1 is a thus g-candidate); as before, let L’2 = \nRm-1 if Rm-1 is a candidate and L’2 = any candidate in Rm-1 if Rm-1 is a g-candidate; \nVm-1,V’2 \nL’2 \nRm  \nL’1 \nRm-1 \nR’1 \nLm \nVm-2,V’3 \nRm-2 \nR’2 \nLm-1 \nL’3 \nVm \n\n244 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– if qm-1>1, then Rm-1 is an Sqm-1-subset; let W’1 = Wm-1 ∪ {Vm} − {Vm-1}; let \nV’1 = Vm; and let R’1 be the set of all the candidates for variables in W’1. Because \nRm is the only candidate for Vm modulo Rm-1, all the candidates for Vm other than \nL’1 = Rm can only be in the transversal sets of Rm-1. Thus, forgetting L’1, R’1 \ntogether with the same transversal sets as Rm-1 is an Sqm-1-subset and it has all the \ncandidates for Vm-1 in Rm-1 as targets (and we take any of these as L’2). As a result, \nall the other candidates for Vm-1 (i.e. all those that are compatible with R’1) can only \nbe in the transversal sets of Rm-2. \nWe are now in a situation in which L’2 is defined and the above construction can \nbe iterated, using L’2 instead of L’1, Rm-2 instead of Rm-1, Wm-1 instead of Wm and \nVm-1 instead of Vm (once L’1 was defined, the fact that qm=1, i.e. that Rm was a \ncandidate or a g-candidate played no role in the above construction). \nAll this can be iterated until we can define the final W’m ={V’m} with V’m = V1; \nL1 or the g-candidate consisting of L1 and the other candidates for V1 linked to Z can \nbe taken as R’m. qed. \nNotice that, in this construction: even though qm=1, one can have q’1≠1; and \neven if q1≠1, one always has q’m=1, as in the definition of a Reversible-Sp-chain.  \nExercise: check that this reversed chain does satisfy all the conditions in the \ndefinition of a Reversible-Sp-chain. \n9.2.3. RSpCn resolution theories and the RSpC ratings \nAs is now usual after introducing new rules, we can define a new increasing \nfamily of resolution theories. Here, we can do it for each p. \nDefinition: for each p, 1≤p≤∞, one can define an increasing sequence (RSpCn, \nn ≥ 0) of resolution theories: \n– RSpC0 = BRT(CSP), \n– RSpC1 = RSpC0 ∪ {rules for Reversible-Sp-chains of length 1} = W1, \n– RSpC2 = RSpC1 ∪ S2 (if p≥2) ∪ {rules for Reversible-Sp-chains of length 2}, \n– ....  \n– RSpCn = RSpCn-1 ∪ Sn (if p≥n) ∪ {rules for Reversible-Sp-chains of length n}, \n– RSpC∞ = ∪n≥0 RSpCn. \nFor p=1, S1Wn = gWn. For p=∞, i.e. for Reversible-Sp-chains built on Subsets of  \na priori unrestricted size, we also write RSCn instead of RS∞Cn.  \nDefinition: for any 1≤p≤∞, the RSpC-rating of an instance P, noted RSpC(P), is \nthe smallest n ≤ ∞ such that P can be solved within RSpCn, i.e. with Resersible Sp-\nChains of total length not greater than n. \n\n9. Reversible-Sp-chains, Sp-whips and Sp-braids    \n245 \nTheorem 9.3: all the RSpCn resolution theories (for 1≤p≤∞ and n ≥ 0) are \nstable for confluence; therefore, they have the confluence property. \nProof: we leave it as an exercise for the reader. (Using reversibility to propagate \nthe consequences of value assertions and candidate deletions, it can be obtained via \na drastic simplification of the proof for the Sp-braids case, theorem 9.9.) \n9.2.4. Reversible-Subset-chains in Sudoku: grouped ALS chains and AICs \nNon Sudoku experts can skip this sub-section or see the classical definitions of \nALS chains (chains of Almost Locked Set) and AICs (Alternating Inference Chains \n/ Nice Loops) in the over-abundant Sudoku literature, e.g. at www.sudopedia.org. \nOur main purpose here is to notice that the above Reversible-Subset-chains, defined \nfor any CSP, correspond in Sudoku to these well-known patterns (though the above \npresentation provides a very unusual perspective of them). \nIn Sudoku, if one considers only the Xrc CSP variables, Reversible-Subset-chains \ncorrespond to the classical grouped ALS-chains (“grouped” because we allow g-\ncandidates as right-linking patterns). The only difference is, we never mention \n“Almost Locked Sets” (ALSs) or “Restricted Commons”, we deal only with Subsets \n(“Locked Sets”) modulo something. \nIf one uses all the Xrc, Xrn, Xcn and Xbn CSP variables, Reversible-Subset-chains \ncorrespond to the grouped AICs (Alternating Inference Chains).  \n[Historical note: what an AIC is has never been very clear in the Sudoku \nliterature. (In what it differs from “Nice Loops”, apart from being written in a \ndifferent notation has never been very clear either; it seems to be more a matter of \ncompetition between different people than anything else). On the one hand, the \ndefinition of AICs is so vague that, transposed into our vocabulary, almost anything \ncould be used as a right-linking pattern.  \nOn the other hand, i.e. on the concrete side of things, the fact that “Fish” (our \nSuper-Hidden Subsets) could be included in AICs has been mentioned only long \nafter we introduced the more general Sp-whips and Sp-braids (in a different \nterminology); as the definition of the latter was fully supersymmetric and included \nall types of Subsets from the start, there was no need to make a special mention of \nFish Subsets; in particular, all our classification results with Subsets in HLS, or \nthose with Sp-braids mentioned in section 9.6 below, included Fish. \nFrom an epistemological point of view, it is interesting to explore the reasons of \nthis late recognition. In our opinion, there are four:  \n– the various notions involved lacked being formalised; \n– in particular, there was an incomplete view of all the logical symmetries; \n\n246 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– the notions of an Almost Locked Set and of a Restricted Common, at the basis \nof ALS chains, are much more complicated than the notion of a Locked Set modulo \nsomething; they are difficult to deal with; in particular, their correct transposition to \nAICs, i.e. their extension to the rn, cn and bn spaces, seems to be difficult to do \nwithout having a complete logical formalisation; they also lead to the introduction of \nseveral levels of “almosting”: AALSs, AAALSs (all of which are taken care of by \nthe more general zt-ing principle); \n– there was a strong insistence on chains having to be “reversible” (without any \ndefinition of this property); even for chains effectively reversible according to our \ndefinition, this blocked any view of them, such as the one exposed here, that would \nhave allowed to shortcut the notion of a Restricted Common.] \n9.3. Sp-whips and Sp-braids \nSp-whips and Sp-braids are an extension of g-whips and g-braids in which Sp’-\nsubsets (p’≤p) may appear as right-linking patterns. They can also be seen as \nextensions of the Reversible-Sp-chains: starting from the same Sp-subset bricks, the \n“almosting-principle” used to assemble Reversible-Sp-chains (a principle that only \nallows to “forget” candidates linked to the previous right-linking pattern) has to be \nreplaced by the much more powerful “zt-ing principle” (a principle that allows to \n“forget” candidates linked to any of the previous right-linking patterns or to the \ntarget). In this replacement, reversibility is lost, but the most important property, \nnon-anticipativeness, is preserved (with the above-mentioned remarks on the \nrestricted form of look-ahead that corresponds to inner Subsets). \n9.3.1. Definition of Sp-whips \nDefinition: given an integer 1≤p≤∞ and a candidate Z (which will be the target), \nan Sp-whip of length n (n ≥ 1) built on Z is an Sp-regular sequence (L1, R1, L2, R2, \n…. Lm) [notice that there is no Rm] of length n, associated with a sequence (W1, … \nWm) of sets of CSP variables and a sequence (V1, … Vm) of CSP variables (with \nVk ∈ Wk for all 1≤k<m and Wm = {Vm}), such that: \n– Z is neither equal to any candidate in {L1, R1, L2, R2, …. Lm} nor a member of \nany g-candidate in this set nor equal to any element in the Sqk-label of Rk when Rk is \nan Sqk-subset, for any 1≤k≤m; \n– L1 is linked to Z; \n– for each 1 < k ≤ m, Lk is linked or g-linked or Sqk-1-linked to Rk-1; this is the \nnatural way of defining “continuity” from Rk-1 to Lk; \n– for any 1 ≤ k < m, Rk is a candidate or a g-candidate or an Sqk-subset modulo \nZ and all the previous right-linking patterns: either Rk is the only candidate or g-\ncandidate compatible with Z and with all the Ri with 1≤ i< k, or Rk is the unique \n\n9. Reversible-Sp-chains, Sp-whips and Sp-braids    \n247 \nSqk-subset composed of all the candidates C for some of the CSP variables in Wk \nsuch that C is compatible with Z and with all the Ri with 1≤ i< k; \n– Z is not a label for Vm; \n– Vm has no candidate compatible with the target and with all the previous right-\nlinking objects (but Vm has more than one candidate). \nTheorem 9.4 (Sp-whip rule for a general CSP): in any resolution state of any \nCSP, if Z is a target of an Sp-whip, then it can be eliminated (formally, this rule \nconcludes ¬candidate(Z)). \nProof: the proof is an easy adaptation of that for g-whips.  \nIf Z was True, all the z-candidates would be eliminated by ECP and, iterating \nupwards from k=2: Rk-1 would be asserted by S or it would be a g-candidate or an \nSqk-1-subset; Rk-1 to Lk continuity ensures that Lk would be eliminated by ECP, W1 \nor Sqk-1; and the t- candidates would be eliminated by these rules. When m-1 is \nreached, Rm-1 would be asserted by S or it would be a whip[1] (a g-candidate) or a \nSubset with target Lm; finally, there would be no value left for Vm (because Z itself \nis not a label for Vm). \n9.3.2. Definition of Sp-braids \nDefinition: given an integer 1≤p≤∞ and a candidate Z (which will be the target), \nan Sp-braid of length n (n ≥ 1) built on Z is an Sp-regular sequence (L1, R1, L2, R2, \n…. Lm) [notice that there is no Rm] of length n, associated with a sequence (W1, … \nWm) of sets of CSP variables and a sequence (V1, … Vm) of CSP variables (with \nVk ∈ Wk for all 1≤k<m and Wm = {Vm}), such that: \n– Z is neither equal to any candidate in {L1, R1, L2, R2, …. Lm} nor a member of \nany g-candidate in this set nor equal to any element in the Sqk-label of Rk when Rk is \nan Sqk-subset, for any 1≤k≤m; \n– L1 is linked to Z; \n– for each 1 < k ≤ m, Lk is linked or g-linked or S-linked to Z or to some of the \nRi, i<k; this is the only difference with Sp-whips; \n– for any 1 ≤ k < m, Rk is a candidate or a g-candidate or an Sqk-subset modulo \nZ and all the previous right-linking patterns: either Rk is the only candidate or g-\ncandidate compatible with Z and with all the Ri with 1≤ i< k, or Rk is the unique \nSqk-subset composed of all the candidates C for some of the CSP variables in Wk \nsuch that C is compatible with Z and with all the Ri with 1≤ i< k; \n– Z is not a label for Vm; \n– Vm has no candidate compatible with the target and with all the previous right-\nlinking objects (but Vm has more than one candidate). \n\n248 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nTheorem 9.5 (Sp-braid rule for a general CSP): in any resolution state of any \nCSP, if Z is a target of an Sp-braid, then it can be eliminated (formally, this rule \nconcludes ¬candidate(Z)). \nProof: almost the same as in the Sp-whips case. The Z or Ri (i<k) to Lk condition \nreplacing the Rk-1 to Lk continuity condition allows the same intermediate \nconclusion for Lk. \n \nDefinition: in any of the above defined Reversible-Sp-chains, Sp-whips [and their \nobvious reversible Sp-z-whips specialisation, with no t- candidates (see section \n9.3.4)] or Sp-braids, a candidate other than Lk for any of the CSP variables (“global” \nvariable Vk or inner variables Vk,i if Rk is an inner Subset), is called a t- \n[respectively a z-] candidate if it is incompatible with a previous right-linking \npattern [resp. with the target]. Notice that a candidate can be z- and t- at the same \ntime and that the t- and z- candidates are not considered as being part of the pattern. \n9.3.3. Sp-whip and Sp-braid resolution theories; SpW and SpB ratings \nIn exactly the same way as in the cases of whips, g-whips, braids and g-braids, \none can now, for each p, define an increasing sequence of resolution theories. They \nnow have two parameters, one (n) for the total length of the chain and one (p) for the \nmaximum size of its inner Subsets. By convention, p=1 means no Subset, only \ncandidates and g-candidates. \nDefinition: for each 1≤p≤∞, one can define an increasing sequence (SpWn, n ≥ 0) \nof resolution theories (similar definitions can be given for Sp-braids, merely by \nreplacing everywhere “whip” by “braid” and “W” by “B”): \n– SpW0 = BRT(CSP), \n– SpW1 = SpW0 ∪ {rules for Sp-whips of length 1} = W1, \n– SpW2 = SpW1 ∪ S2 (if p≥2) ∪ {rules for Sp-whips of length 2}, \n– ....  \n– SpWn = SpWn-1 ∪ Sn (if p≥n) ∪ {rules for Sp-whips of length n}, \n– SpW∞ = ∪n≥0 SpWn. \nFor p=1, S1Wn = gWn. For p=∞, i.e. for S-whips built on Subsets of a priori \nunrestricted size (but, in practice, p < n), we also write SWn instead of S∞Wn.  \nDefinition: for any 1≤p≤∞, the SpW-rating of an instance P, noted SpW(P), is the \nsmallest n ≤ ∞ such that P can be solved within SpWn, i.e. by Sp-whips of maximal \ntotal length n. By convention, SpW(P) = ∞ means that P cannot be solved by Sp-\nwhips of any length; SW(P) = ∞ means that P cannot be solved by S-whips of any \nlength including Subsets of any size. \n\n9. Reversible-Sp-chains, Sp-whips and Sp-braids    \n249 \nDefinition: similarly, for any 1≤p≤∞, the SpB-rating of an instance P, noted \nSpB(P), is the smallest n ≤ ∞ such that P can be solved within SpBn. By convention, \nSpB(P) = ∞ means that P cannot be solved by Sp-braids of any length. \nFor any 1≤p≤∞, the SpW and SpB ratings are defined in a purely logical way, \nindependent of any implementation; the SpW and SpB ratings of an instance are \nintrinsic properties of this instance; moreover, as will be shown in the next section, \nfor any fixed p (1≤p≤∞), the SpB rating is based on an increasing sequence of \ntheories (SpBn, n≥0) with the confluence property and it can therefore be computed \nwith a simplest first strategy based on the global length of the Sp-braids involved. \nFor any puzzle P, one has obviously W(P) ≥ gW(P) = S1W(P) ≥ S2W(P) ≥ \nSpW(P) ≥ Sp+1W(P) ≥ … ≥ S∞W(P) and similar inequalities for the SpB(P). \nBeware of not confusing the definitions in this section with those in section \n8.6.3. In the latter case, whips and Subsets of same size are merely put together in \nthe same set of rules; in the present section, whips and Subsets are fused into more \ncomplex structures. The respective notations can be remembered with the following \nmnemonic (and a similar one for braids): the “+” sign (and the repetition of size n) \nin W+S (and in Wn+Sn) indicate(s) the juxtaposition of two different things; the \nabsence of a space between W and S in WS and in WSn indicates their fusion into \nnew patterns. \nNotice that consistent definitions of length for Sp-whips or Sp-braids and of the \nassociated SpW and SpB ratings are highly constrained: \n– by the fact that they are generalisations of the RSpC chains; \n– by the subsumption theorems of section 8.7 and their obvious generalisations \nto Subsets of any size: in “many” cases of inclusion of such Subsets in an Sp-whip or \nSp-braid, it will be possible to replace them by equivalent g-whips or g-braids and to \ntransform the original Sp-whip or Sp-braid into an equivalent Wp-whip or Bp-braid \n(chapter 11). It seems natural to impose that, in such cases, the two visions of the \n“same” pattern lead to the same length (especially as length is taken as the measure \nof complexity of instances). \nFinally, the confluence property of all the SpBn resolution theories for each p, \n1 ≤ p ≤ ∞, (proven in section 9.4 below), allows to superimpose on SpBn a “simplest \nfirst” strategy compatible with the SpB rating. \n9.3.4. Sp-z-whips and how they subsume Sp+1-subsets \n9.3.4.1. Definition of Sp-z-whips \nIn simple terms, an Sp-z-whip is a particular kind of Sp-whip (as such, it allows \nthe elimination of its target): it has no t-candidate (more precisely, no t-candidate \n\n250 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nthat cannot also be considered as a z-candidate). It is easy to define the Sp-z-whip[n] \nresolution theories and to prove that they have the confluence property. \nDefinition: given an integer 1≤p≤∞ and a candidate Z (which will be the target), \nan Sp-z-whip of length n (n ≥ 1) built on Z is an Sp-regular sequence (L1, R1, L2, R2, \n…. Lm) [notice that there is no Rm] of length n, associated with a sequence (W1, … \nWm) of sets of CSP variables and a sequence (V1, … Vm) of CSP variables (with \nVk ∈ Wk for all 1≤k<m and Wm = {Vm}), such that: \n– Z is neither equal to any candidate in {L1, R1, L2, R2, …. Lm} nor a member of \nany g-candidate in this set nor equal to any element in the Sqk-label of Rk when Rk is \nan Sqk-subset, for any 1≤k≤m; \n– L1 is linked to Z; \n– for each 1 < k ≤ m, Lk is linked or g-linked or Sqk-1-linked to Rk-1; this is the \nnatural way of defining “continuity” from Rk-1 to Lk; \n– for any 1 ≤ k < m, Rk is a candidate or a g-candidate or an Sqk-subset modulo \nZ: either Rk is the only candidate or g-candidate compatible with Z, or Rk is the \nunique Sqk-subset composed of all the candidates C for some of the CSP variables in \nWk such that C is compatible with Z; \n– Z is not a label for Vm; \n– Vm has no candidate compatible with Z (but Vm has more than one candidate). \n9.3.4.2. Targets of Sp-subsets are targets of Sp-1-z-whips[p] \nTheorem 9.6: a target of an Sp-subset is always also a target of an Sp-1-z-whip \nof length p. \nProof: almost obvious. After renumbering the CSP variables, one can always \nsuppose that Z is Sp-linked to transversal set TS1 and that V1 has a candidate L1 = \n<V1, l1> to which Z is linked. Let Lp = <Vp, lp> be a candidate for Vp not in TS1 \n(there must be one if the Sp-subset is not degenerated). Let R2 be the Sp-1-subset: \n{{V1,…, Vp-1}, {TS2, …, TSp}}. Then Z is a normal target of the following whip:  \nSp-1-z-whip[p]: {L1 R2} – Vp{lp .} ⇒ ¬candidate(Z). \n9.3.5. Type-2 targets of Sp-subsets \nIt appears that an Sp-subset that has transversal sets with non-void intersections \nallows more eliminations than the “standard” ones defined in chapter 8. (This can \nhappen only for p>2.) \nDefinition: a type-2 target of an Sp-subset is a candidate belonging to (at least) \ntwo of its transversal sets. \nTheorem 9.7: a type-2 target of an Sp-subset can be eliminated. \n\n9. Reversible-Sp-chains, Sp-whips and Sp-braids    \n251 \nProof: suppose the type-2 target Z is a candidate for variable V1 and it belongs to \ntransversal sets TS1 and TS2. If Z was True, then all the other candidates in TS1 or \nTS2 or in a g-candidate in TS1 or TS2 would be eliminated by ECP. This would \nleave at most p-2 possibilities for the remaining p-1 CSP variables – which is \ncontradictory, in exactly the same way as in the case of a normal target.  \nNotice however that this is a very unusual kind of elimination. Until now, for all \nthe rules we have met, the target did not belong to the pattern. The following \ntheorem shows that this “cannibalistic” abnormality can be palliated. It also justifies \nthat we did not consider type-2 targets of Sp-subsets in chapter 8: these abnormal \ntargets can always be eliminated by a simpler pattern. An illustration of this theorem \nwill appear in section 10.3 for the more general case of gSp-subsets. \nTheorem 9.8: A type-2 target of an Sp-subset is always the (normal) target of a \nshorter Sp-2-z-whip of length p-1. \nProof: in a resolution state RS, let Z be a type-2 target of an Sp-subset with CSP \nvariables V1, … Vp and transversal sets TS1, … TSp. One can always suppose that \nV1 is the CSP variable for which Z is a candidate (there can be only one in RS) and \nthat TS1 and TS2 are the two transversal sets to which Z belongs.  \nFirstly, each of the CSP variables V2, V3, … Vp must have at least one candidate \nbelonging neither to TS1 nor to TS2 (if it has several, choose one arbitrarily and \nname it <V2, c2>, … <Vp, cp>, respectively). Otherwise, the initial Sp-subset would \nbe degenerated; more precisely, Z could be eliminated by a whip[1] (or even by \nECP after a Single) associated with (any of) the CSP variable(s) that has no such \ncandidate. \nSecondly, in TS1 or TS2, there must be at least one candidate for at least one of \nthe CSP variables V2, … Vp. Otherwise, the initial Sp-subset would be degenerated; \nmore precisely, it would contain, among others, the Sp-2-subset {{V3, …, Vp}, {TS3, \n…, TSp}}; this would allow to eliminate all the candidates for V1 and V2 that are not \nin TS1 or TS2; Z could then be eliminated by a whip[1] associated with V2; and V1 \nwould have no candidate left. One can always suppose that there exists such a \ncandidate L2 for V2, i.e. L2 = <V2, l2>. \nModulo Z, we therefore have an Sp-2 subset R2 with CSP variables V2, … Vp-1 \nand transversal sets TS3, … TSp. Then, Z is a (normal) target of the following Sp-2-z-\nwhip of length p-1: \nSp-2-z-whip[p-1]: V2{l2 R2} – Vp{cp .} ⇒ ¬candidate(Z). \n\n252 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n9.3.6. Accepting type-2 targets of Sp-subsets in SpW and SpB? \nTheorem 9.8 alone does not guarantee that type-2 targets of Sp-subsets, if \nallowed to be used as left-linking candidates in the definitions of Sp-whips or Sp-\nbraids, could not lead to (slightly) more general patterns than those in our current \ndefinitions. The following, if true, would provide a negative answer and it would \ncomplete the justification for not accepting type-2 targets in Sp-subsets: “for any Sp-\nwhip or Sp-braid, according to an extended definition that would allow using type-2 \ntargets of Sp’-subsets as left-linking candidates, there is an equivalent standard (i.e. \nsatisfying the definitions of this chapter) Sp-whip or Sp-braid, respectively, of same \nor shorter length and with the same target”. But, although we have no counter-\nexample, this does not seem to be true in general. \nIn order to understand why it may not be true, consider the following tentative \nproof, using the notations of the definitions. If the situation occurs several times in \nthe chain, the same kind of actions as defined below could be repeated. \nIf left-linking candidate Lk+1 is a type-2 target of Subset Sk, then consider CSP \nvariable Vk+1 (notice that it cannot be the unique CSP variable of Sk for which Lk+1 \nis a candidate) Z and all the previous right-linking objects: \n– either it has another candidate, say L’k, linked to all the candidates in some of \nthe transversal sets of Sk to which Lk+1 does not belong; then, one can replace Lk+1 \nwith L’k+1 in the original chain; \n– or it has no such candidate but it has a candidate linked to Z or to a previous \nright-linking object; then, in the Sp-braid cases but a priori not in the Sp-whip case, \none can replace Lk+1 with this candidate in the original chain; \n– or it has no such candidate and no candidate linked to Z or to a previous right-\nlinking object; then no possibility seems to be available. \nWe think that the cases in which this construction does not work and there are no \nalternative resolution paths are extremely rare and that allowing type-2 targets of \nSp’-subsets inside Sp-whips or Sp-braids is not worth until experimental results show \nthe contrary. Until then, we shall stick to our original definitions.  \nSee Theorem 10.17 for complementary aspects of this question in case g-Subsets \ninstead of Subsets are involved. \nRemark: the main interest of the above tentative proof may be that it can be \ntransposed to other situations; e.g. it can explain why, given an Sp’-subset S allowing \nthe elimination of a target L that could be replaced by a whip elimination (according \nto the subsumption theorems), if the same S appears inside an Sp-whip or Sp-braid \nmodulo the target and the previous right-linking patterns of this Sp-whip or Sp-braid \nand if L is used in this Sp-whip or Sp-braid as the next left-linking candidate, S can \nnevertheless not always be considered as an ordinary sub-whip of this global Sp-\n\n9. Reversible-Sp-chains, Sp-whips and Sp-braids    \n253 \nwhip or Sp-braid. In particular, given that W2 subsumes S2, this gives an idea why \nS2Wn is not equal to gWn for n>2 (or why S2W5 ⊄ gW5, as shown by the example in \nsection 9.7.1; or why S2B is not equal to gB in table 9.1). \n9.4. The confluence property of the SpBn resolution theories \n \nTheorem 9.9: each of the SpBn resolution theories (for 1 ≤ p ≤ ∞, 0 ≤ n ≤ ∞) is \nstable for confluence; therefore, it has the confluence property.  \nProof: in order to keep the same notations as in the proof for the g-braid \nresolution theories (section 7.6), we prove the result for SrBn, r and n fixed. The \nproof follows the same general lines as that for g-braids in section 7.5. We keep the \nsame numbering of the various cases to be considered. However, some new sub-\ncases appear and some cases have to be split into three, in order to take into account \nthe different kinds of right-linking patterns. Marks now extend from case f to case d. \nWe must show that, if an elimination of a candidate Z could have been done in a \nresolution state RS1 by an Sr-braid B of length n’ ≤ n and with target Z, it will \nalways still be possible, starting from any further state RS2 obtained from RS1 by \nconsistency preserving assertions and eliminations, if we use a sequence of rules \nfrom SrBn. Let B be: {L1 R1} – {L2 R2} – …. – {Lp Rp} – {Lp+1 Rp+1} – … – {Lm .}, \nwith target Z, where the Rk’s are now candidates or g-candidates or Subsets from Sr \nmodulo Z and the previous Ri’s. \nConsider first the state RS3 obtained from RS2 by applying repeatedly the rules \nin Sr until quiescence. As Sr has the confluence property (by theorem 8.4), this state \nis uniquely defined.  \nIf, in RS3, target Z has been eliminated, there remains nothing to prove. If target \nZ has been asserted, then the instance of the CSP is contradictory; if not yet detected \nin RS3, this contradiction can be detected by CD in a state posterior to RS3, reached \nby a series of applications of rules from Sr, following the Sr-braid structure of B. \nOtherwise, we must consider all the elementary events related to B that can have \nhappened between RS1 and RS3 as well as those we must provoke in posterior \nresolution states RS. For this, we start from B’ = what remains of B in RS3 and we \nlet RS = RS3. At this point, B’ may not be an Sr-braid in RS. We progressively \nupdate RS and B’ by repeating the following procedure, for p = 1 to p = m, until it \nproduces a new (possibly shorter) Sr-braid B’ with target Z in resolution state RS – a \nsituation that is bound to happen. (As in the g-braids case, and because we have \nincluded W1 in Sr, we have to consider a state RS posterior to RS3). Return from this \nprocedure as soon as B’ is a g-braid in RS. All the references below are to the \ncurrent RS and B’. \n\n254 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \na) If, in RS, any candidate that had negative valence in B – i.e. the left-linking \ncandidate, or any t- or z- candidate, of CSP variable Vp, or any t- or z- candidate of \nRp in case Rp is an inner Subset –  has been asserted (this can only be between RS1 \nand RS3), then all the candidates linked to it have been eliminated by relevant rules \nfrom Sr in RS3, in particular: Z and/or all the candidate(s) Rk (k<p) to which it is \nlinked, and/or all the elements of the g-candidate(s) Rk (k<p) to which it is g-linked, \nand/or all the candidates of the CSP variable in Wk to which it belongs and/or all the \ncandidates in the transversal set(s) of the Rk’s (k<p) to which it is S-linked (by the \ndefinition of an Sr-braid); if Z is among them, there remains nothing to prove; \notherwise, the procedure has already either been successfully terminated by case f1 \nor f2α or dealt with by case d2 of the first previous such k. \nb) If, in RS, left-linking candidate Lp has been eliminated (but not asserted), it \ncan no longer be used as a left-linking candidate in an Sr-braid. Suppose that either \nCSP variable Vp still has a z- or a t- candidate Cp, or Rp is an inner Subset and there \nis another CSP variable Vp’ in its Wp such that Vp’ still has a z- or a t- candidate Cp; \nthen replace Lp by Cp and (in the latter case) Vp by Vp’. Now, up to Cp, B’ is a \npartial Sr-braid in RS with target Z. Notice that, even if Lp was linked or g-linked or \nSr-linked to Rp-1 (e.g. if B was an Sr-whip) this may not be the case for Cp; therefore \ntrying to prove a similar theorem for Sr-whips would fail here. \nc) If, in RS, any t- or z- candidate of Vp or of the inner Subset Sp has been \neliminated (but not asserted), this has not changed the basic structure of B (at stage \np). Continue with the same B’. \n \nd) Consider now assertions occurring in right-linking objects. There are two \ncases instead of one for g-braids. \nd1) If, in RS, right-linking candidate Rp or a candidate Rp’ in right-linking g-\ncandidate Rp has been asserted (p can therefore not be the last index of B’), Rp can \nno longer be used as an element of an Sr-braid, because it is no longer a candidate or \na g-candidate. As in the proof for g-braids, and only because of this d1 case, we \ncannot be sure that this assertion occurred in RS3. We must palliate this. First \neliminate by ECP or W1 any left-linking or t- candidate for any CSP variable of B’ \nafter p, including those in the inner Subsets, that is incompatible with Rp, i.e. linked \nor g-linked to it, if it is still present in RS. Now, considering the Sr-braid structure of \nB upwards from p, more eliminations and assertions can been done by rules from Sr. \n(Notice that, as in the g-braids case, we are not trying to do more eliminations or \nassertions than needed to get a g-braid in RS; in particular, we continue to consider \nRp, not Rp’; in any case, it will be excised from B’; but, most of all, we do not have \nto find the shortest possible Sr-braid!) \nLet q be the smallest number strictly greater than p such that CSP variable Vq or \nsome CSP variable Vq’ in Wq still has a left-linking, t- or z- candidate Cq that is not \n\n9. Reversible-Sp-chains, Sp-whips and Sp-braids    \n255 \nlinked, g-linked or S-linked to any of the Ri for p ≤ i < q (Cq is therefore linked, g-\nlinked or S-linked to Z or to some Ri with i < p). (For index q, there is thus a Vq’ in \nWq and a candidate Cq for Vq’ such that Cq is linked, g-linked or S-linked to Z or to \nsome Ri with i < p.) \nApply the following rules from Sr (if they have not yet been applied between \nRS2 and RS) for each of the CSP variables Vu (and all the Vu,i in Wu if Ru is an inner \nSubset) with index (or first index) u increasing from p+1 to q-1 included: \n- eliminate its left-linking candidate (Lu) by ECP or W1 or some Sr’ (r’≤r); \n- at this stage, CSP variable Vu has no left-linking candidate and there remains no t- \nor z- candidate in Wu if Ru is an inner Subset; \n- if Ru is a candidate, assert it by S and eliminate by ECP all the candidates for CSP \nvariables after u, including those in the inner Subsets, that are incompatible with Ru \nin the current RS; \n- if Ru is a g-candidate, it cannot be asserted; eliminate by W1 all the candidates for \nCSP variables after u, including those in the inner Subsets, that are incompatible \nwith Ru in the current RS; \n- if Ru is an Squ-subset, it cannot be asserted by Squ; eliminate by Squ all the \ncandidates for CSP variables after u, including those in the inner Subsets, that are \nincompatible with Ru in the current RS. \nIn the new RS thus obtained, excise from B’ the part related to CSP variables \nand inner Subsets p to q-1 (included); if Lq has been eliminated in the passage from \nRS2 to RS, replace it by Cq (and, if necessary, replace Vq by Vq’); for each integer \ns ≥ p, decrease by q-p the index of CSP variable Vs, of its candidates and inner right-\nlinking pattern (g-candidate or Sr’-subset) and of the set Ws, in the new B’. In RS, B’ \nis now, up to p (the ex q), a partial Sr-braid in SrBn with target Z. \nd2) If, in RS, a candidate Cp in a right-linking Sqp-subset Rp has been asserted or \neliminated or marked in a previous step, Rp can no longer be used as such as a right-\nlinking Subset of an Sr-braid, because it may no longer be a (conditional) Sqp-\nsubset. Moreover, there may be several such candidates in Rp; consider them all at \nonce. Notice that candidates can only have been asserted as values in the transition \nfrom RS1 to RS3 (the candidates asserted in case d1 are all excised from B’) and that \nall the candidates for their CSP variables or in their transversal sets have also been \neliminated in this transition. Delete from Rp the CSP variables and the transversal \nsets corresponding to these asserted candidates (as we do not have type-2 targets, \nthere is the same number of each). Call Rp’ what remains of Rp and replace Rp by \nRp’ in B’. A few more questions must be dealt with:  \n- is there still a candidate for one of the CSP variables of Rp’ that could play the role \nof a left-linking candidate for Rp’? If not, Rp’ has already become an autonomous \nSubset in RS3; excise it from B’, together with a whole part of B’ after it, along the \nsame lines as in case d1; \n\n256 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n- is Rp’ still linked to the next part of B’? If not, excise it from B’, together with a \nwhole part of B’ after it, as in the previous case; \n- is Rp’ degenerated (modulo Z and the previous Rk’s)? If so, this can easily be fixed \nby replacing Rp’ with the corresponding Reversible-Subset-chain (modulo Z and the \nprevious Rk’s); \n- does Rp’ or the Reversible-Subset-chain (modulo Z and the previous Rk’s) \nreplacing it have more targets than Rp? If so, if any of these is a right-linking \ncandidate or an element of a right-linking g-candidate or of an Sr’-subset of B’ for an \nindex after p, then mark it so that the information can be used in cases d2, f1, f2 or \nf3 of later steps. \nIn RS, B’ is now, up to p (the ex q), a partial Sr-braid in SrBn with target Z. \n \ne) If, in RS, a left-linking candidate Lp has been eliminated (but not asserted) and \nCSP variable Vp has no t- or z- candidate in RS2 (complementary to case b), we now \nhave to consider three cases instead of the two we had for g-braids.  \ne1) If Rp is a candidate, then Vp has only one possible value, namely Rp; if Rp \nhas not yet been asserted by S somewhere between RS2 and RS, do it now; this case \nis now reducible to case d1 (because the assertion of Rp also entails the elimination \nof Lp); go back to case d1 for the same value of p (in order to prevent an infinite \nloop, mark this case as already dealt with for the current step). \ne2) If Rp is a g-candidate, then Rp cannot be asserted by S; however, it can still \nbe used, for any CSP variable after p, to eliminate by W1 any of its t-candidates that \nis g-linked to Rp. Let q be the smallest number strictly greater than p such that, in \nRS, CSP variable Vq still has a left-linking, t- or z- candidate Cq that is not linked or \ng-linked or S-linked to any of the Ri for p ≤ i < q. Replace RS by the state obtained \nafter all the assertions and eliminations similar to those in case d1 above have been \ndone. Then, in RS, excise the part of B’ related to CSP variables p to q-1 (included), \nreplace Lq by Cq (if Lq has been eliminated in the passage from RS2 to RS) and re-\nnumber the posterior elements of B’, as in case d1. In RS, B’ is now, up to p (the ex \nq), a partial Sr-braid in SrBn with target Z. \ne3) If Rp is an Sqp-subset, then Rp is no longer linked via Lp to a previous right-\nlinking element of the braid. If none of the CSP variables Vp’ in Wp has a z- or t- \ncandidate Cp that can be linked, g-linked or S-linked to Z or to a previous Ri, \n(situation complementary to case b), it means that the elimination of Lp has turned \nRp into an unconditional Sqp-subset. Let q be the smallest number strictly greater \nthan p such that, in RS, CSP variable Vq has a left-linking, t- or z- candidate Cq that \nis not linked or g-linked or S-linked to any of the Ri for p ≤ i < q. Replace RS by the \nstate obtained after all the assertions and eliminations similar to those in case d1 \nabove have been done. Then, in RS, excise the part of B’ related to CSP variables p \nto q-1 (included), replace Lq by Cq (if Lq has been eliminated in the passage from \n\n9. Reversible-Sp-chains, Sp-whips and Sp-braids    \n257 \nRS2 to RS) and re-number the posterior elements of B’, as in case d1. In RS, B’ is \nnow, up to p (the ex q), a partial Sr-braid in SrBn with target Z. \n \nf) Finally, consider eliminations occurring in a right-linking object Rp. This \nimplies that p cannot be the last index of B’. There are three cases. \nf1) If, in RS, right-linking candidate Rp of B has been eliminated (but not \nasserted) or marked, then replace B’ by its initial part:  \n{L1 R1} – {L2 R2} – …. – {Lp .}. At this stage, B’ is in RS a (possibly shorter) Sr-\nbraid with target Z. Return B’ and stop. \nf2) If, in RS, a candidate in right-linking g-candidate Rp has been eliminated (but \nnot asserted) or marked, then: \nf2α) either there remains no unmarked candidate of Rp in RS; then replace B’ by \nits initial part: {L1 R1} – {L2 R2} – …. – {Lp .}; at this stage, B’ is in RS a (possibly \nshorter) Sr-braid with target Z; return B’ and stop; \nf2β) or the remaining unmarked candidates of Rp in RS still make a g-candidate \nand B’ does not have to be changed; \nf2γ) or there remains only one unmarked candidate Cp of Rp; replace Rp by Cp in \nB’. We must also prepare the next steps by putting marks. Any t-candidate of B that \nwas g-linked to Rp, if it is still present in RS, can still be considered as a t-candidate \nin B’, where it is now linked to Cp instead of g-linked to Rp; this does not raise any \nproblem. However, this substitution may entail that candidates that were not t-\ncandidates in B become t-candidates in B’; if they are left-linking candidates of B’, \nthis is not a problem either; but if any of them is a right-linking candidate or an \nelement of a right-linking g-candidate or of an Sr’-subset of B’, then mark it so that \nthe same procedure (i.e. f1, f2 or f3) can be applied to it in a later step. \nf3) If, in RS, a candidate Cp in right-linking Sqp-subset Rp has been eliminated \n(but not asserted) or marked, this has been dealt with in case d2. \nNotice that, as was the case for braids and g-braids, this proof works only \nbecause the notions of being linked, g-linked or S-linked do not depend on the \nresolution state. \n9.5. The “T&E(Sp) vs Sp-braids” theorem, 1≤p≤∞ \nAny resolution theory T stable for confluence has the confluence property and \nthe procedure T&E(T) can therefore be defined (see section 5.6.1). Taking T = Sp, it \nis obvious that any elimination done by an Sp-braid can be done by T&E(Sp). As \nwas the case for braids and for g-braids, the converse is true: \n\n258 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nTheorem 9.10: for any 1≤p≤∞, any elimination done by T&E(Sp) can be done \nby an Sp-braid.  \nThe proof is very similar to the g-braids case. \nProof: Let RS be a resolution state and let Z be a candidate eliminated by \nT&E(Sp, Z, RS) using some auxiliary resolution state RS’. Following the steps of \nresolution theory Sp in RS’, we progressively build an Sp-braid in RS with target Z. \nFirst, remember that Sp contains only five types of rules: ECP (which eliminates \ncandidates), W1 (whips of length 1, which eliminates candidates), Sp’ (which \neliminates targets of Sp’-subsets, p’≤p), S (which asserts a value for a CSP variable) \nand CD (which detects a contradiction on a CSP variable).  \nConsider the sequence (P1, P2, …, Pk, …Pm) of rule applications in RS’ based on \nrules from Sp different from ECP and suppose that Pm is the first occurrence of CD \n(there must be at least one occurrence of CD if Z is eliminated by T&E(Sp, Z, RS)). \nWe first define the Rk, Vk, Wk and qk sequences, for k < m: \n- if Pk is of type S, then it asserts a value Rk for some CSP variable Vk; let Wk = \n{Vk} and qk=1; \n- if Pk is of type whip[1]: {Mk .} ⇒ ¬candidate(Ck) for some CSP variable Vk, then \ndefine Rk as the g-candidate of Vk that contains Mk and is g-linked to Ck; (notice that \nCk will not necessarily be Lk+1); let Wk = {Vk} and qk=1; \n- if Pk is of type Sp’, then define Rk as the non degenerated Sp’-subset used by the \ncondition part of Pk, as it appears at the time when Pk is applied; let Wk be the set of \nCSP variables of Rk and qk=p’; in this case, Vk will be defined later. \nWe shall build an Sp-braid[n] in RS with target Z, with the Rk’s as its sequence \nof right-linking candidates or g-candidates or Sqk-subsets, with the Wk’s as its \nsequence of sets of CSP variables, with the qk’s as its sequence of sizes and with \nn = ∑1≤k≤m qk (setting qm = 1). We only have to define properly the Lk’s, qk’s and \nVk’s with Vk ∈ Wk. We do this by recursion, successively for k = 1 to k = m. As the \nproofs for k = 1 and for the passage from k to k+1 are almost identical, we skip the \ncase k = 1. Suppose we have done it until k and consider the set Wk+1 of CSP \nvariables.  \nWhatever rule Pk+1 is (S or whip[1] or Sp’), the fact that it can be applied means \nthat, apart from Rk+1 (if it is a candidate) or the candidates contained in Rk+1 (if it is a \ng-candidate or an Sp’-subset), all the other candidates for all the CSP variables in \nWk+1 that were still present in RS (and there must be at least one, say Lk+1, for some \nCSP variable Vk+1 ∈ Wk+1) have been eliminated in RS’ by the assertion of Z and \nthe previous rule applications. But these previous eliminations can only result from \nbeing linked or g-linked or S-linked to Z or to some Ri, i≤k. The data Lk+1, Rk+1 and \nVk+1 ∈ Wk+1 therefore define a legitimate extension for our partial Sp-braid. \n\n9. Reversible-Sp-chains, Sp-whips and Sp-braids    \n259 \nEnd of the procedure: at step m, a contradiction is obtained by CD for a CSP \nvariable Vm. It means that all the candidates for Vm that were still candidates for Vm \nin RS (and there must be at least one, say Lm) have been eliminated in RS’ by the \nassertion of Z and the previous rule applications. But these previous eliminations \ncan only result from being linked or g-linked or S-linked to Z or to some Ri, i<m. Lm \nis thus the last left-linking candidate of the Sp-braid we were looking for in RS and \nwe can take Wm={Vm}. qed. \nRemarks:  \n– here again, this proof works only because the existence of a link, g-link or Sp-\nlink between a candidate and a pattern does not depend on the resolution state; \n– as in the previous cases of braids and g-braids, it is very unlikely that \nfollowing the T&E(Sp) procedure to produce an Sp-braid, as in the construction in \nthis proof, would provide the shortest available one in resolution state RS (and this \nintuition is confirmed by experience). \n9.6. The scope of Sp-braids (in Sudoku) \nThe “T&E(Sp) vs Sp-braids” theorem can be used to estimate with simple \ncalculations the scope of Sp-braids (which is also an upper boundary for the scope of \nSp-whips) for any p, without having to find effectively the resolution paths.  \nSeveral times in this book, we mentioned that all the Sudoku puzzles in a set of \nrandom collections of about 10,000,000 minimal puzzles generated according to \ndifferent methods (several independent implementations of the bottom-up, top-down \nand controlled-bias algorithms) could be solved by T&E or (equivalently) by braids \n(indeed, we also mentioned that they can all be solved by whips).  \nAs a result, Sudoku puzzles that are not in the scope of braids are extremely rare \nand if one wants to compare the scopes of several types of more complex Sp-braids, \none can only do this on a collection of exceptionally hard puzzles. The natural \nchoice for this is Glenn Fowler’s (alias gsf) highly non random, manually selected \ncollection of 8152 puzzles [gsf’s www]; it contains puzzles of varying levels of \ndifficulty, with a very strong bias for the hardest ones (and a tendency for repetition \nof puzzles with similar patterns of givens, i.e. obtained by variations from a previous \npattern); although this is no longer true, its top level part has long been considered \nas containing the hardest known puzzles. \nIn Table 9.19, the first column defines the sets of puzzles under consideration: \ngsf's list is decomposed into slices of 500 puzzles each (but the last ones), starting \n                               \n9 We first published these results on the late Sudoku Player’s Forum, “Abominable T&E and \nLovely Braids” thread, p. 3, October 2008. \n\n260 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nfrom the top (i.e. from the hardest in his classification). The next columns show how \nmany puzzles of each slice can be solved using the Sp-braids mentioned in the first \nrow (each column includes the results of the previous columns). \n \n \nResolution theory → \n↓ slice of puzzles \nB∞ \ngB∞ \nS2B∞ \nS3B∞ \nS4B∞ \nS4FinB∞ +x2y2 \n1-500 \n0 \n187 \n336 \n414 \n443 \n466 \n489 \n500-1000 \n0 \n178 \n335 \n415 \n460 \n480 \n497 \n1001-1500 \n0 \n163 \n382 \n451 \n486 \n494 \n500 \n1501-2000 \n0 \n168 \n397 \n476 \n490 \n496 \n499 \n2001-2500 \n0 \n135 \n367 \n434 \n474 \n489 \n497 \n2501-3000 \n0 \n116 \n334 \n443 \n479 \n493 \n499 \n3001-3500 \n1 \n120 \n335 \n424 \n473 \n486 \n498 \n3501-4000 \n0 \n113 \n325 \n426 \n472 \n493 \n499 \n4001-4500 \n1 \n104 \n298 \n395 \n448 \n471 \n497 \n4501-5000 \n0 \n231 \n399 \n450 \n482 \n494 \n499 \n5001-5500 \n47 \n348 \n487 \n500 \n \n \n \n5501-6000 \n434 \n490 \n500 \n \n \n \n \n6001-6500 \n487 \n500 \n \n \n \n \n \n6501-7000 \n494 \n500 \n \n \n \n \n \n7001-8152 \n1152 \n \n \n \n \n \n \nTotal solved \n2616 \n4505 \n6647 \n7480 \n7859 \n8014 \n8126 \nTotal unsolved \n5536 \n3647 \n1505 \n672 \n293 \n136 \n26 \nTable 9.1. Cumulated number of puzzles solved by Sp’-braids with p’ ≤ p, for each slice of 500 \npuzzles in gsf’s list. Missing cells in a row are intended to make it easier to see when a slice is \ncompletely solved. \nThis table shows that almost all the hardest puzzles, known at the time when \ngsf’s list was published, can be solved with braids (of unspecified total length) built \non (Naked, Hidden and Super-Hidden) Subsets, on Finned Fish (a variant of Fish \nwith additional candidates linked to the target, i.e. a z-Fish) and on x2y2-belts10. \n                               \n10 x2y2 belts are our formal interpretation of a pattern known as a “hidden-pairs loop” or “sk-\nloop”. This extremely symmetric pattern originated in the famous EasterMonster puzzle \ncreated by “jpf” and was discovered by Steven Kurzhals [see chapter 13 for details]. \nEasterMonster has long been considered as the hardest known puzzle and it has given rise to \nmany variants, in the hope of finding still harder ones; as a result, it is over-represented in \ngsf’s list. \n\n9. Reversible-Sp-chains, Sp-whips and Sp-braids    \n261 \nHowever, “Eleven” recently reported [Eleven www] that he generated more than \nfifteen million “potentially hardest” minimal puzzles (including 90% of the known \npuzzles with SER > 11) that, in the vocabulary of the present book, cannot be solved \nby T&E. He used a kind of genetic programming algorithm (an innovative idea in \nthe search of hard Sudoku puzzles), starting with a random collection of minimal \npuzzles as the seed and mutating them by withdrawal and addition of clues. Later, \nusing T&E(S4) together with other filters (whose precise description would be \nirrelevant here) for cropping the current population, and taking the widely used SER \nrating11 of puzzles as the selection function, he published a sub-collection of 26,370 \nminimal puzzles [Eleven 2011] that cannot be solved by T&E(S4). The question of a \nresolution theory T such that T&E(T), or associated T-braids, could solve all the \nknown Sudoku puzzles is thus more open (although these are extremely exceptional \ninstances, in proportion: even fifteen millions in approximately 2.5×1025 non \nessentially equivalent minimal puzzles, as estimated in section 6.3.2, would not be \nmuch). The new non-T&E(S4) sub-collection makes it very unlikely that such a \n“universal” T-braids resolution theory could be based mainly on S-braids or braids \nwith variants of Subsets as inner patterns. This point will be re-examined in section \n11.3 after we have introduced the more powerful notion of a B-braid. \n9.7. Examples \nAs examples of Reversible-Subset-chains abound in the Sudoku web forums, we \nshall not give any here. They can be found under the names of Alternating Inference \nChains (AICs) or Nice Loops, as explained in section 9.2.4. Still more examples of a \nvery special case, ALS chains (chains of Almost Locked Sets), can also be found; \nthey are AICs (in the broad sense we have given them here) restricted to rc-space. \n9.7.1. S2W5 ⊄ gW5: an S2-whip[5] not subsumed by a g-whip[5] (+ S2W5 ⊄ gW13) \n \n7   8 \n \n  \n  3 \n \n \n    7 2 8 9 4 6 3 1 5 \n \n \n  2  \n1   \n \n      9 3 4 2 5 1 6 7 8 \n5   \n \n \n  \n \n  \n \n \n    5 1 6 7 3 8 2 4 9 \n \n4   \n  \n  \n  8 2 6     1 4 7 5 9 3 8 2 6 \n3 \n \n  \n \n8   \n \n  \n      3 6 9 4 8 2 1 5 7 \n \n  \n \n1   \n \n  9 3     8 5 2 1 6 7 4 9 3 \n \n9   6 \n \n  \n \n  4     2 9 3 6 1 5 7 8 4 \n   \n  \n  7   5  \n      4 8 1 3 7 9 5 6 2 \n  \n \n \n  \n  \n \n \n  \n \n    6 7 5 8 2 4 9 3 1 \nFigure 9.2. A puzzle P with W(P) = 13 \n                               \n11 See the first note of chapter 6. \n\n262 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nThe puzzle P in Figure 9.2 provides an example of an S2-whip[5] that is not \nequivalent to a whip or a g-whip of same length. This puzzle has moderate \ncomplexity (though it is on the high side of the fuzzy boundary of puzzles solvable \nby humans): W(P) = gW(P) = 13. \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nr1 \n7 \nn1 n2      \n          n6 \n  \n8 \n  \nn4 n5      \n          n9 \n  \nn4 n5 n6 \n          n9 \n \nn4 n5 n6 \n          n9 3 \nn1           \nn4 n5 n6 \n  \nn1 n2        \n     n5         \n          n9 r1 \nr2 \n  \nn4      n6 \n          n9 \n          n3 \n          n6 \n  \n          n3 \nn4      n6 \n          n9 \n2 \n          n3 \nn4 n5 n6 \n          n9 1 \n  \nn4      n6 \nn7      n9 \n  \nn4 n5 n6 \nn7 n8      \n  \n     n5      \nn7 n8      r2 \nr3 \n5 \nn1 n2 n3 \n          n6 \n  \nn1 n2 n3 \nn4      n6 \n          n9 \n               \n               \nn7 n8      \n          n3 \nn4      n6 \n          n9 \n           \n      \nn7 n8      \nn1 n2      \nn4      n6 \n          n9 \nn1           \nn4      n6 \n       \nn1 n2      \n  \n          n9 r3 \nr4 \nn1           \n  \n          n9 4 \nn1           \n     n5      \nn7      n9 \n          n3 \n     n5      \nn7      n9 \n           \n     n5      \n          n9 \n          n3 \n     n5      \nn7      n9 8 \n2 \n6 \nr4 \nr5 \n3 \n     n2      \n          n6 \nn7           \n     n2      \n          n6 \nn7      n9 \n  \nn4           \nn7      n9 8 \n     n2      \nn4      n6 \n          n9 \nn1           \nn4           \nn7           \nn1           \nn4 n5      \nn7           \nn1           \n     n5      \nn7           r5 \nr6 \n     n2      \n          n6 \n     n8      \n     n2      \n     n5 n6 \nn7 n8      \n     n2      \n     n5 n6 \nn7           \n1 \n     n2      \nn4 n5 n6 \n  \n     n2      \nn4 n5 n6 \nn7           \n               \nn4           \nn7           9 \n3 \nr6 \nr7 \nn1 n2      \n               \n     n8      9 \nn1 n2 n3 \n     n5      \nn7           \n6 \nn1 n2      \n     n5      \n  \n     n2 n3 \n     n5      \n     n8      \nn1 n2      \n  \nn7           \nn1      n3 \n  \nn7 n8      4 \nr7 \nr8 \nn1 n2      \nn4      n6 \n     n8      \nn1 n2 n3 \n          n6 \n     n8      \nn1 n2 n3 \nn4      n6 \n  \n          n3 \nn4           \n     n8 n9 7 \n     n2 n3 \nn4           \n     n8 n9 5 \nn1      n3 \n          n6 \n     n8      \nn1 n2      \n  \n     n8 n9 r8 \nr9 \nn1 n2      \nn4      n6 \n     n8      \nn1      n3 \n     n5 n6 \nn7 n8      \nn1 n2 n3 \nn4 n5 n6 \nn7           \n          n3 \nn4 n5      \n     n8 n9 \nn1 n2      \nn4 n5      \n          n9 \n     n2 n3 \nn4 n5      \n     n8 n9 \nn1 n2      \n          n6 \nn7      n9 \nn1      n3 \n          n6 \nn7 n8      \nn1 n2      \n  \nn7 n8 n9 r9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 9.3. Resolution state RS1 of puzzle P in Figure 9.2 \nThe first (easy) steps of the resolution paths with whips or g-whips are identical. \n \n*****\t\r  \t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  W\t\r  \t\r  *****\t\r  \n20\t\r  givens,\t\r  267\t\r  candidates,\t\r  2000\t\r  csp-­‐links\t\r  and\t\r  2000\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.41\t\r  \nwhip[1]:\t\r  r4n1{c1\t\r  .}\t\r  ==>\t\r  r5c3\t\r  ≠\t\r  1,\t\r  r5c2\t\r  ≠\t\r  1\t\r  \nwhip[1]:\t\r  r2n8{c8\t\r  .}\t\r  ==>\t\r  r3c9\t\r  ≠\t\r  8,\t\r  r3c8\t\r  ≠\t\r  8\t\r  \nwhip[1]:\t\r  r2n7{c7\t\r  .}\t\r  ==>\t\r  r3c9\t\r  ≠\t\r  7,\t\r  r3c8\t\r  ≠\t\r  7,\t\r  r3c7\t\r  ≠\t\r  7\t\r  \nwhip[1]:\t\r  b6n5{r5c9\t\r  .}\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  5,\t\r  r5c3\t\r  ≠\t\r  5,\t\r  r5c4\t\r  ≠\t\r  5,\t\r  r5c6\t\r  ≠\t\r  5\t\r  \nwhip[2]:\t\r  b2n7{r3c4\t\r  r3c6}\t\r  –\t\r  b2n8{r3c6\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  4,\t\r  r3c4\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  b2n8{r3c4\t\r  r3c6}\t\r  –\t\r  b2n7{r3c6\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  9\t\r  \nwhip[2]:\t\r  b2n7{r3c6\t\r  r3c4}\t\r  –\t\r  b2n8{r3c4\t\r  .}\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  6,\t\r  r3c6\t\r  ≠\t\r  4,\t\r  r3c6\t\r  ≠\t\r  3\t\r  \nwhip[1]:\t\r  b2n3{r2c5\t\r  .}\t\r  ==>\t\r  r9c5\t\r  ≠\t\r  3,\t\r  r7c5\t\r  ≠\t\r  3,\t\r  r4c5\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  b2n8{r3c6\t\r  r3c4}\t\r  –\t\r  b2n7{r3c4\t\r  .}\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  c1n2{r9\t\r  r6}\t\r  –\t\r  b4n8{r6c1\t\r  r6c2}\t\r  –\t\r  c2n5{r6\t\r  .}\t\r  ==>\t\r  r9c2\t\r  ≠\t\r  2\t\r  \n\n9. Reversible-Sp-chains, Sp-whips and Sp-braids    \n263 \nwhip[4]:\t\r  b3n8{r2c9\t\r  r2c8}\t\r  –\t\r  r2n5{c8\t\r  c5}\t\r  –\t\r  r4c5{n5\t\r  n9}\t\r  –\t\r  c1n9{r4\t\r  .}\t\r  ==>\t\r  r2c9\t\r  ≠\t\r  9\t\r  \nwhip[5]:\t\r  r4n7{c6\t\r  c3}\t\r  –\t\r  b4n1{r4c3\t\r  r4c1}\t\r  –\t\r  b4n9{r4c1\t\r  r5c3}\t\r  –\t\r  r5n6{c3\t\r  c2}\t\r  –\t\r  r5n2{c2\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  7\t\r  \nThe resolution state RS1 reached at this point is displayed in Figure 9.3.  \nAfter RS1, both resolution paths with whips or g-whips continue with a whip[6] \nand a whip[8]:  \n \nwhip[6]:\t\r  c2n7{r5\t\r  r9}\t\r  –\t\r  c9n7{r9\t\r  r2}\t\r  –\t\r  b3n8{r2c9\t\r  r2c8}\t\r  –\t\r  r2n5{c8\t\r  c5}\t\r  –\t\r  r4c5{n5\t\r  n9}\t\r  –\t\r  r5n9{c6\t\r  .}\t\r  ==>\t\r  \nr5c3\t\r  ≠\t\r  7\t\r  \nwhip[8]:\t\r   c1n2{r7\t\r   r6}\t\r   –\t\r   b4n8{r6c1\t\r   r6c2}\t\r   –\t\r   c2n5{r6\t\r   r9}\t\r   –\t\r   c2n7{r9\t\r   r5}\t\r   –\t\r   b6n7{r5c7\t\r   r6c7}\t\r   –\t\r  \nr7c7{n7\t\r  n1}\t\r  –\t\r  b8n1{r7c5\t\r  r9c5}\t\r  –\t\r  c5n2{r9\t\r  .}\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  2\t\r  \nAfter these two whips, the two resolution paths diverge (one has either a \nwhip[12] or a g-whip[8]), but they finally both give a rating of 13: \nW(P)=gW(P)=13. As they have nothing noticeable, we skip them. \nWhat is interesting in the context of this chapter is that, in state RS1, there \nappears a shorter pattern than those provided by whips or g-whips, an S2-whip[5] \n(Although, in row r2, n7 appears in column c7, i.e. outside the two cells of the \nhidden pair, n7r2c7 is a z-candidate and can be “forgotten”: we have a hidden pair \nmodulo the target.): \n \nS2-­‐whip[5]:\t\r  c1n9{r2\t\r  r4}\t\r  –\t\r  r4c5{n9\t\r  n5}\t\r  –\t\r  r2{c5n5\t\r  HP:[c8\t\r  c9][n7\t\r  n8]}\t\r  –r2n7{c8\t\r  .}\t\r  =>\t\r  r2c7\t\r  ≠\t\r  9\t\r  \nIndeed, the two full resolution paths with whips and g-whips show more: as the \nelimination r2c7≠9 appears only after a whip[13], it shows that the above S2-\nwhip[5] cannot be replaced by a g-whip, even longer, with length less than 13. \n \nFor a more complex example of an S2-braid (one of total length 14), see Figure \n13.6 and section 13.5.1. \n\n\n \n10. g-Subsets, Reversible-gSp-chains, gSp-whips and gSp-\nbraids \nThis chapter extends the definitions and results of chapters 8 and 9 by allowing \nthe basic elements of Subsets (the “intersections” between the CSP variables and the \ntransversal sets) to be g-candidates instead of candidates. While gSp-subsets are an \nextension of Sp-subsets in which g-transversal sets of candidates or g-candidates \nreplace transversal sets of candidates, gSp-whips (respectively gSp-braids) are an \nextension of Sp-whips (resp. Sp-braids) in which gSp-subsets replace Sp-subsets. The \nsituation is similar to that in chapter 7, when we extended all the definitions and \nresults from whips (resp. braids) to g-whips (resp. g-braids). For this reason and the \nfollowing additional ones, we shall give precise definitions and theorems (at the risk \nof some apparent redundancy) but we shall be rather sketchy for their proofs:  \n– the first two parts of this chapter strictly parallel chapters 8 and 9 respectively; \n– it seems that exploiting all the possibilities of these new g-Subsets is rather \ndifficult in practice; in Sudoku, g-Subsets appear either as “Franken Fish” or as \n“Mutant Fish” (see section 10.1.6); as far as we know, these exotic Fish patterns \nhave never before been considered as g-Subsets, i.e. as the “grouped” version of \nSubsets (for the reason that Subsets themselves have never been considered in the \nfull generality allowed by the CSP point of view developed in chapter 8); \n– our personal opinion is that, most of the time, it is often easier to find and \nunderstand a solution with whips or g-whips, when it exists (see the subsumption \nresults in section 10.1.5), than with such patterns; but we acknowledge that some \nSudoku Fishermen may have a different opinion; the main advantage of a g-Subset \nis that, like a Subset, it often allows several eliminations at once (see section 10.3); \n– although this is not a problem for their general theory, finding explicitly all the \nnon degenerated subcases of gSp-subsets is very difficult for p>3;  \n– as for the gSp-whips and gSp-braids obtained by allowing these new g-Subsets \nas right-linking objects, even if their theories can easily be developed in a strict \nparallel to those of Sp-whips and Sp-braids (as shown in section 10.2), they seem to \nbe rather complex structures; in Sudoku, they include the “Fishy Cycles” (which are \nalready “almost” subsumed by the simpler Sp-whips and Sp-braids). \nFor a better understanding of the concepts involved, it may be a good idea to \nread the detailed example in section 10.3 in parallel with the first two sections. \n\n266 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n10.1. g-Subsets \n10.1.1. g-transversality, gSp-labels and gSp-links \nIn the same way as, in chapters 7 and 8, we had to introduce a distinction \nbetween g-labels or Sp-labels (defined as maximal sets of labels) and g-candidates or \nSp-subsets (that did not have to be maximal), we must now introduce a distinction \nbetween gSp-labels that can only refer to CSP variables and to g-transversal sets of \nlabels and g-labels (which can be considered as a kind of saturation or maximality \ncondition on gSp-labels), and gSp-subsets in which considerations about mandatory \nand optional candidates or g-candidates will appear. \n10.1.1.1. Set of labels and g-labels g-transversal to a set of disjoint CSP variables \nDefinition: for p>1, given a set of p different CSP variables {V1, V2, …, Vp}, we \nsay that a set S of at most p different labels and g-labels is g-transversal with respect \nto {V1, V2, …, Vp} for constraint c if: \n– 1) none of the labels in S or contained in a g-label in S has a representative for \ntwo of these CSP variables; \n– 2) all the labels in S or contained in a g-label in S are pairwise linked by some \nconstraint; \n– 3) all the labels in S are pairwise linked by constraint c; \n– 4) each g-label in S contains a “distinguished” label that is linked by constraint \nc to all the labels in S and to all the other distinguished labels of all the g-labels of S; \n– 5) S is maximal, in the sense that no label or g-label pertaining to one of these \nCSP variables could be added to it without contradicting the first two conditions.  \nRemarks: \n– as in the definition of transversal sets, the first condition will always be true \nfor pairwise strongly disjoint CSP variables, but, for the same reasons as before, we \ndo not take this as a necessary condition; \n– conditions 2, 3 and 4 together express that constraint c plays a role for the \nwhole transversal set; forgetting the idea of such a global constraint and adopting \nonly condition 2 would not change the general theory developed in this chapter (but \nthe totality of the second remark in section 8.1.1 after the definition of a transversal \nset applies here also); \n– conversely, one could imagine replacing conditions 2, 3 and 4 by the stronger \none: all the labels in S or contained in a g-label in S are pairwise linked by \nconstraint c; in Sudoku, it is obvious that this would not change anything (because \nall the g-labels involve blocks); but for the general CSP, this may be too restrictive. \n\n10. g-Subsets, Reversible-gSp-chains, gSp-whips and gSp-braids    \n267 \n10.1.1.2. gSp-labels and gSp-links \nDefinitions: for any integer p>1, a gSp-label is a couple of data: {CSPVars, \nTransvSets}, where CSPVars is a set of p different CSP variables and TransvSets is \na set of p different g-transversal sets of labels and g-labels for these variables (each \none for a well defined constraint). A gS-label is a gSp-label for some p > 1.  \nDefinition: a label l is gSp-linked or simply gS-linked to a gSp-label \nS = {CSPVars, TransvSets} if there is some k with 1 ≤ k ≤ p and such that: \n– l is linked or g-linked to all the labels and g-labels in the k-th element \nTransvSetsk of TransvSets, \n– l is linked by the constraint ck of TransvSetsk to all the labels and all the \ndistinguished labels contained in all the g-labels in TransvSetsk. \nIn these conditions, l is also called a potential target of the gSp-label. \nDefinition: Two sets of labels or g-labels are said to be “strongly transitively \ndisjoint” if no label appearing in one of them (even as an element of a g-label) can \nappear in the other (even as an element of a g-label). This is much stronger than \nsaying that these two sets are disjoint (in the usual set-theoretic sense of “disjoint”); \nif these sets are only disjoint, two g-labels, one in each of the sets, can be different \nbut share a label (in Sudoku, <Xr1n1, r1n1c123> and <Xc1n1, c1n1r123> share the \nlabel with representative <r1c1, n1>); or a label in one set can be contained in a g-\nlabel in the other (e.g. <r1n1, c1> in <Xc1n1, c1n1r123>). \nDefinition: In a resolution state RS, two sets of candidates or g-candidates are \nsaid to be “transitively disjoint” if no candidate effectively present in one of them \n(even as an element of a g-candidate) is effectively present in the other (even as a \ncandidate in a g-candidate); again this is much stronger than saying that these two \nsets are disjoint. However, this is weaker than saying that the sets obtained by \nconsidering the labels and g-labels underlying the candidates and g-candidates in \nthese two sets are strongly transitively disjoint. \nMiscellaneous remarks about gSp-labels: \n– with the above definition of a gSp-label, a label and a g-label are not gSp-labels \n(due to the condition p > 1); for labels, this is a mere matter of convention, but this \nchoice is more convenient for the sequel; \n– different transversal sets in a gSp-label are not required to be pairwise \ntransitively disjoint, let alone pairwise disjoint; such conditions will appear only in \nthe definitions of g-Subsets and only with respect to candidates (not labels); \n– a gSp-label corresponds to the maximal extent of a possible gSp-subset (as \ndefined below), but it does not tackle non-degeneracy conditions. \n\n268 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nNotation: in the definition of g-Subsets, as in the case of Subsets, we shall need a \nmeans of specifying that, in some g-transversal sets, some labels or g-labels must \nexist while others may exist or not. We shall write this as e.g. {<V1, v1>, <V2, v2>, \n…, (<Vk, vk>), ….}. This should be understood as follows: a label or g-label not \nsurrounded with parentheses must exist; a “label” or “g-label” surrounded with \nparentheses, like (<Vk, vk>), may exist or not; if it exists, then it is named <Vk, vk>. \n10.1.2. g-Pairs \nDefinition: in any resolution state RS of any CSP, a g-Pair (or gS2-subset) is a \ngS2-label {CSPVars, TransvSets}, where: \n– CSPVars = {V1, V2}, \n– TransvSets is composed of the following g-transversal sets of labels and g-\nlabels:  \n{<V1, v11>, <V2, v21>} for constraint c1, \n{<V1, v12>, <V2, v22>} for constraint c2, \nsuch that: \n– in RS, V1 and V2 are disjoint, i.e. they share no candidate; \n– in RS, {<V1, v11>} and {<V1, v12>} are transitively disjoint; {<V2, v22>} and \n{<V2, v21>} are transitively disjoint; \n– in RS, V1 has the two mandatory candidates or g-candidates <V1, v11> and \n<V1, v12> and no other candidate or g-candidate; \n– in RS, V2 has the two mandatory candidates or g-candidates <V2, v21> and \n<V2, v22> and no other candidate or g-candidate. \nA target of a g-Pair is a candidate gS2-linked to the underlying gS2-label. \nTheorem 10.1 (gS2 rule): in any CSP, a target of a g-Pair can be eliminated. \nProof: as the two g-transversal sets play similar roles, we can suppose that Z is \nlinked or g-linked to <V1, v11> and <V2, v21>. If Z was True, these candidates or all \nthe candidates these g-candidates contain would be eliminated by ECP. As V1 and \nV2 have only two candidates or g-candidates each, their other candidate or g-\ncandidate (<V1, v12>, respectively <V2, v22>) would be or would contain their real \nvalue, which is impossible, as both are linked or g-linked. Here again, the proof \nworks only because V1 and V2 share no candidate in RS (and in no posterior \nresolution state). \n10.1.3. g-Triplets \nThere may be several formulations of g-Triplets. Here again, as in the case of \nordinary Triplets, we adopt one that is neither too restrictive (the presence of some \n\n10. g-Subsets, Reversible-gSp-chains, gSp-whips and gSp-braids    \n269 \nof the candidates or g-candidates potentially involved is not mandatory) nor too \ncomprehensive (i.e., by making mandatory the presence of some of the candidates or \ng-candidates involved, it does not allow degenerated cases). \nDefinition: in any resolution state RS of any CSP, a g-Triplet (or gS3-subset) is a \ngS3-label {CSPVars, TransvSets}, where: \n– CSPVars = {V1, V2, V3}, \n– TransvSets is composed of the following g-transversal sets of labels and g-\nlabels:  \n– {<V1, v11>, (<V2, v21>), <V3, v31>} for constraint c1, \n– {<V1, v12>, <V2, v22>, (<V3, v32>)} for constraint c2, \n– {(<V1, v13>), <V2, v23>, <V3, v33>} for constraint c3,  \nsuch that: \n– in RS, V1, V2 and V3 are pairwise disjoint; \n– in RS, {<V1, v11>} and {<V1, v12>} are transitively disjoint; {<V2, v22>} and \n{<V2, v23>} are transitively disjoint; {<V3, v33>} and {<V3, v31>} are transitively \ndisjoint; \n– in RS, V1 has the two mandatory candidates or g-candidates <V1, v11> and \n<V1, v12>, one optional candidate or g-candidate <V1, v13> (supposing this label or \ng-label exists) and no other candidate or g-candidate; \n– in RS, V2 has the two mandatory candidates or g-candidates <V2, v22> and \n<V2, v23>, one optional candidate or g-candidate <V2, v21> (supposing this label or \ng-label exists) and no other candidate or g-candidate; \n– in RS, V3 has the two mandatory candidates or g-candidates <V3, v33> and \n<V3, v31>, one optional candidate or g-candidate <V3, v32> (supposing this label or \ng-label exists) and no other candidate or g-candidate. \nA target of a g-Triplet is defined as a candidate gS3-linked to the underlying gS3-\nlabel. \nTheorem 10.2 (gS3 rule): in any CSP, a target of a g-Triplet can be eliminated.  \nProof: as the three g-transversal sets play similar roles, we can suppose that Z is \ngS3-linked to the first, i.e. linked or g-linked to <V1, v11>, <V2, v21> and <V3, v31> if \nit exists. If Z was True, these candidates or all the candidates these g-candidates \ncontain (if they are present) would be eliminated by ECP. Each of V1, V2 and V3 \nwould have at most two candidates or g-candidates left. Any choice for V1 would \nreduce to at most one the number of possibilities (in terms of candidates and g-\ncandidates) for each of V2 and V3 (due to the pairwise contradictions between \nmembers of each g-transversal sets). Finally, the unique choice for V2 (still in terms \nof candidates and g-candidates), if any, would in turn reduce to zero the number of \npossibilities for V3. \n\n270 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n10.1.4. g-Quads \nFinding the proper formulation for g-Quads, guaranteeing that it covers no \ndegenerated case, is less obvious than for g-Triplets. Borrowing to the Quads case, \nwe consider two types of g-Quads: Cyclic and Special, and we choose to write the \nSpecial g-Quad in such a way that it does not cover any case already covered by the \nCyclic g-Quad. \nDefinition: in any resolution state RS of any CSP, a Cyclic g-Quad (or Cyclic \ngS4-subset) is a gS4-label {CSPVars, TransvSets}, where: \n– CSPVars = {V1, V2, V3, V4}, \n– TransvSets is composed of the following g-transversal sets of labels and g-\nlabels:  \n– {<V1, v11>, (<V2, v21>), (<V3, v31>), <V4, v41>} for constraint c1,  \n– {<V1, v12>, <V2, v22>, (<V3, v32>), (<V4, v42>)} for constraint c2,  \n– {(<V1, v13>), <V2, v23>, <V3, v33>, (<V4, v43>)} for constraint c3, \n– {(<V1, v14>), (<V2, v24>), <V3, v34>, <V4, v44>} for constraint c4,  \nsuch that: \n– in RS, V1, V2, V3 and V4 are pairwise disjoint, i.e. no two of these variables \nshare a candidate; \n– in RS, {<V1, v11>} and {<V1, v12>} are transitively disjoint; {<V2, v22>} and \n{<V2, v23>} are transitively disjoint; {<V3, v33>} and {<V3, v34>} are transitively \ndisjoint; {<V4, v44>} and {<V4, v41>} are transitively disjoint; \n– in RS, V1 has the two mandatory candidates or g-candidates <V1, v11> and \n<V1, v12>, two optional candidates or g-candidates <V1, v13> and <V1, v14> \n(supposing any of these labels exists) and no other candidate or g-candidate; \n– in RS, V2 has the two mandatory candidates or g-candidates <V2, v22> and \n<V2, v23>, two optional candidates or g-candidates <V2, v24> and <V2, v21> \n(supposing any of these labels exists) and no other candidate or g-candidate; \n– in RS, V3 has the two mandatory candidates or g-candidates <V3, v33> and \n<V3, v34>, two optional candidates or g-candidates <V3, v31> and <V3, v32> \n(supposing any of these labels exists) and no other candidate or g-candidate; \n– in RS, V4 has the two mandatory candidates or g-candidates <V4, v44> and \n<V4, v41>, two optional candidates or g-candidates <V4, v42> and <V4, v43> \n(supposing any of these labels exists) and no other candidate or g-candidate. \nDefinition: in any resolution state RS of any CSP, a Special g-Quad (or Special \ngS4-subset) is a gS4-label {CSPVars, TransvSets}, where: \n– CSPVars = {V1, V2, V3, V4}, \n\n10. g-Subsets, Reversible-gSp-chains, gSp-whips and gSp-braids    \n271 \n– TransvSets is composed of the following transversal sets of labels and g-\nlabels:  \n{<V1, v11>, <V2, v21>, <V3, v31>, (<V4, v41>}) for constraint c1,  \n{<V1, v12>, (<V2, v22>), (<V3, v32>), <V4, v42>} for constraint c2,  \n{(<V1, v13>), <V2, v23>, (<V3, v33>), <V4, v43>} for constraint c3, \n{(<V1, v14>), (<V2, v24>), <V3, v34>, <V4, v44>} for constraint c4,  \nsuch that: \n– in RS, V1, V2, V3 and V4 are pairwise disjoint, i.e. no two of these variables \nshare a candidate; \n– in RS, <V1, v11> and <V1, v12> are transitively disjoint; <V2, v21> and \n<V2, v23> are transitively disjoint; <V3, v31> and <V3, v34> are transitively disjoint; \nmoreover, <V4, v42>, <V4, v43> and <V4, v44> are pairwise transitively disjoint; \n– in RS, V1 has the two mandatory candidates or g-candidates <V1, v11> and \n<V1, v12> and no other candidate or g-candidate; \n– in RS, V2 has the two mandatory candidates or g-candidates <V2, v21> and \n<V2, v23> and <V1, v12> and no other candidate or g-candidate; \n– in RS, V3 has the two mandatory candidates or g-candidates <V3, v31> and \n<V3, v34> and <V1, v12> and no other candidate or g-candidate; \n– in RS, V4 has the three mandatory candidates or g-candidates <V4, v42>, \n<V4, v43> and <V4, v44> and no other candidate or g-candidate. \nIn both cases, a target of a g-Quad is defined as a candidate gS4-linked to the \nunderlying gS4-label. \nTheorem 10.3 (gS4 rule): in any CSP, a target of a Cyclic or Special g-Quad \ncan be eliminated.  \nProof for the cyclic case: as the four g-transversal sets play similar roles, we can \nsuppose that Z is linked or g-linked to <V1, v11>, <V2, v21>, <V3, v31> if it exists and \n<V4, v41> if it exists. If Z was True, these candidates or all the candidates these g-\ncandidates contain (if they are present) would be eliminated by ECP. Each of V1, \nV2, V3 and V4 would have at most three candidates or g-candidates left. Any choice \nfor V1 would reduce to at most two the number of possibilities (in terms of \ncandidates and g-candidates) for V2, V3 and V4. Any further choice among the \nremaining candidates or g-candidates for V2 would reduce to at most one the \nnumber of possibilities (still in terms of candidates and g-candidates) for V3 and V4. \nFinally, the unique choice left for V3 (still in terms of candidates and g-candidates), \nif any, would reduce to zero the number of possibilities for V4. \nProof for the special case: there are four subcases (the last two of which are \nsimilar to the second): \n- suppose Z is linked or g-linked to both <V1, v11>, <V2, v21>, <V3, v31> and \n<V4, v41> if it exists. If Z was True, these candidates or all the candidates these g-\n\n272 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ncandidates contain (if they are present) would be eliminated by ECP. Each of V1, \nV2, V3, would have only one candidate or g-candidate left; choosing these \ncandidates or any candidate in these g-candidates as their respective values would \nreduce to zero the number of possibilities for V4. \n- suppose Z is linked to both <V1, v12>, <V2, v22> if it exists, <V3, v32> and \n<V4, v42> if it exists. If Z was True, <V1, v12> and <V4, v42> or all the candidates \nthey contain would be eliminated by ECP; <V1, v11> would then be True, which \nwould eliminate <V2, v21> and <V3, v31> or all the candidates they contain. Then \n<V2, v23> and <V3, v34> would be True. This would leave no possibility for V4. \n \nIf we wanted to introduce larger g-Subsets, it would get harder and harder to \nwrite separate formulæ guaranteeing non-degeneracy of each subcase. We leave this \nas a (difficult) exercise for the reader. Contrary to Subsets, in the 9×9 Sudoku case, \nthere can be g-Subsets of size larger than 4: see the example of a Franken \nSquirmbag (size 5) in section 10.3. \n10.1.5. gSp-subset theories and confluence \nAll of section 8.6 can be transposed and extended from Sp-subsets to gSp-\nsubsets: definition of the gSp resolution theories, proof of their stability for \nconfluence, definition of the gWp+gSp and gBp+gSp resolution theories (in which g-\nwhips[p] or g-braids[p] are added to gSp-subsets) and proof of their stability for \nconfluence. \n10.1.6. Subsumption results for g-Subsets \n10.1.6.1. g-Pairs  \nTheorem 10.4: gS2 ⊆ gW2 (g-whips of length 2 subsume all the g-Pairs). \nProof: keeping the notations of theorem 10.1 and considering a target Z of the g-\nPair that is gS2-linked to the first g-transversal set, i.e. linked or g-linked to both \n<V1, v11> and <V2, v21>, the following g-whip[2] eliminates Z: \ng-whip[2]: V1{v*11 v12} – V2{v*22 .} ⇒ ¬candidate(Z),  \nwhere v*11 [respectively v*22] is v11 [resp. v22] if <V1, v11> [resp. <V2, v22>] is a \ncandidate and it is any element chosen in v11 [resp. v22] if <V1, v11> [resp. <V2, v22>] \nis a g-candidate. In case <V1, v11> is a g-candidate, the candidates in <V1, v11> other \nthan <V1, v*11> are z-candidates in the whip[2]; in case <V2, v22> is a g-candidate, \nthe candidates in <V2, v22> other than <V2, v*22> are t-candidates in the whip[2]. \nThe converse of the above theorem is false: gW2 ⊄ gS2; indeed, W2 ⊄ gS2. For \na deep understanding of both whips and g-Subsets, this is as interesting as the \ntheorem itself. Using the example in section 8.8.1, we have concluded in section \n8.7.1 that W2 ⊄ S2. But the same example can now be used to show that W2 ⊄ gS2. \n\n10. g-Subsets, Reversible-gSp-chains, gSp-whips and gSp-braids    \n273 \nThe three whips[2] defined in section 8.8.1 can be considered no more as g-Pairs \nthan as Pairs. \nIt is nevertheless instructive to understand how a tentative proof of the inclusion \ngW2 ⊆ gS2 would fail. We would have to proceed as follows. Let  \ng-whip[2]: V1{v11 v12} – V2{v22 .} ⇒ ¬candidate(Z), be a g-whip[2] with target Z, \nassociated with CSP variables (V1, V2). Consider all the possible candidates or g-\ncandidates for each of these variables.  \nFor V1, they can only be:  \n– <V1, v’11> = the candidate or g-candidate consisting of <V1, v11> and all the \ncandidates for V1 linked to Z;  \n– and <V1, v’12> = <V1, v12> (a candidate or a g-candidate, with no element \nlinked to Z). \nFor V2, they can only be: \n– <V2, v’22> = the candidate or g-candidate consisting of <V2, v22> and all the \ncandidates for V2 linked to <V1, v12>; \n– and <V2, v’21> = the candidate or g-candidate consisting of all the candidates \nfor V2 linked to Z but not to <V1, v12>.  \nWe have thus built a g-transversal set {<V1, v’12>, <V2, v’22>}, but {<V1, v’11>, \n<V2, v’21>} may not be a g-transversal set: the target Z is linked to these two \ncandidates or g-candidates that may not be linked together by any constraint. This is \nexactly the situation with the three whips[2] in the example of section 8.8.1. \n10.1.6.2. g-Triplets \nTheorem 10.5: gW3 subsumes “almost all” the g-Triplets. \nProof: keeping the notations of theorem 10.3 and considering a target Z of the g-\nTriplet that is gS-linked to the first g-transversal set (the three of them play similar \nroles), the following g-whip eliminates Z in any CSP:  \ng-whip[3]: V1{v*11 v12} – V2{v*22 v23} – V3{v*33 .} ⇒ ¬candidate(Z),  \nprovided that <V1, v13> is not a candidate or a g-candidate for V1. \nHere, v*11 [respectively v*22, v*33] is v11 [resp. v22, v33] if <V1, v11> [resp. <V2, v22>, \n<V3, v33>] is a candidate and it is any element chosen in v11 [resp. v22, v33] if \n<V1, v11> [resp. <V2, v22>, <V3, v33>] is a g-candidate. \nThe optional candidates and the elements of the optional g-candidates of the g-\nTriplet appear in the g-whip as z- or t- candidates. \nConsidering that, in the above situation, the three CSP variables play \nsymmetrical roles, there is only one case of a g-Triplet elimination that cannot be \nreplaced by a g-whip[3] elimination. It occurs when the optional candidates or g-\ncandidates for variables V1, V2 and V3 in the g-transversal set to which the target is \n\n274 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ngS-linked correspond to existing labels or g-labels and are all effectively present in \nthe resolution state.  \n10.1.6.3. g-Quads \n \nTheorem 10.6: gW4 subsumes “almost all” the Cyclic g-Quads. \nKeeping the notations of theorem 10.5, the following g-whip eliminates a target \nZ of the Cyclic g-Quad in any CSP:  \ng-whip[4]: V1{v*11 v12} – V2{v*22 v23} – V3{v*33 v34} – V4{v*41 .} ⇒ \n¬candidate(Z), \nprovided that <V1, v13> and <V1, v14> are not candidates for V1 and <V2, v23> is not \na candidate for V2, \nwith the v*xy defined as before. \nThe optional candidates and the elements of the optional g-candidates of the g-Quad \nappear in the g-whip as z- or t- candidates. \nTheorem 10.7: gB4 subsumes all the Special g-Quads. \nKeeping the notations of theorem 10.5, let Z be a target of the Special g-Quad: \n- if Z is gS4-linked to the first g-transversal set, the following g-braid eliminates Z:  \ng-braid[4]: V1{v*11 v12} – V2{v*21 v23} – V3{v*31 v34} – V4{v*44 .} ⇒ \n¬candidate(Z), \nin which the first three left-linking candidates are linked to Z; \n- if Z is gS4-linked to another g-transversal set, say the second, the following g-whip \neliminates Z:  \ng-whip[4]: V1{v*12 v11} – V2{v*21 v23} – V4{v*43 v44} – V3{v*34 .} ⇒ \n¬candidate(Z), \nin which candidate <V4, v42> appears as a z-candidate for the third CSP variable. \n10.1.7. g-Subsets in Sudoku \nAlthough the concept of a g-Subset has never been considered as such in \nSudoku, the point we want to make here is that g-Subsets have been in existence for \na very long time, under other names: they appear as the “Franken Fish” and “Mutant \nFish” patterns.  \nThe difference between the two kinds depends on the specific geometry of \nSudoku and is of little interest for the general theory developed here. Let us \ntherefore mention it quickly, transposed into the vocabulary of this book. For a \ngiven number n°, a standard Fish in rows [respectively in columns] (of size p) uses \nonly p different Xrn° [resp. Xcn°] CSP variables and p different transversal sets \ndefined by Xcn° [resp. Xrn°] constraints. A Franken Fish in rows (of size p) is \ndefined as an extended Fish (Super-Hidden Subset) pattern of size p in which either \nsome of the p CSP variables are of type Xbn° instead of Xrn° [resp. Xcn°] or some \n\n10. g-Subsets, Reversible-gSp-chains, gSp-whips and gSp-braids    \n275 \nof the p transversal sets are defined by Xbn° constraints instead of Xcn° [resp. Xrn°] \nconstraints. In a Mutant Fish, rows, columns and blocks may all appear in both CSP \nvariables (i.e. these may be Xr°c°, Xrn°, Xcn° and Xbn°) and in constraints defining \nthe transversal sets, which makes them much more complex than Franken Fish.  \nFor more details and for examples, see sudopedia.org. For a (maybe not \nexhaustive) review of the various possibilities, we direct the reader to the specialised \nforums, where he will find that there is a handful of people who consecrate their \ntime to studying and naming them (together with their “finned”, “sushi”, “sashimi” \nand other extensions). There is also a recent free java Sudoku solver, specialised in \nFish: Hodoku – as far as we know, the only solver implementing (almost) all the \nknown possibilities. See also the detailed example in section 10.3 below. \n10.2. Reversible-gSp-chains, gSp-whips and gSp-braids \nWhen we try to apply the zt-ing principle to g-Subsets, everything goes for gSp-\nwhips and gSp-braids as for Sp-whips and Sp-braids. Here again, when it comes to \ndefining the concepts of gSp-links and gSp-compatibility, we always consider the \ngSp-labels underlying the gSp-subsets instead of the gSp-subsets themselves, in \nexactly the same way as we considered the full Sp-labels underlying the Sp-subsets \nwhen we defined Sp-links. The main reason for this choice is the same as in the Sp-\nlinks case: we want all the notions related to linking and compatibility to be purely \nstructural (see chapter 9 for more detail). \n10.2.1. gSp-links; gSp-subsets modulo other g-Subsets; gSp-regular sequences \n10.2.1.1. gSp-links, gSp-compatibility \nDefinition: a label l is compatible with a gSp-label S if l is not gSp-linked to S \n(i.e. if, for each g-transversal set TS of S, there is at least one label or g-label l’ in \nTS such that l is not linked or g-linked to l’). \nDefinition: a label l is compatible with a set R of labels, g-labels, S-labels and \ngS-labels if l is compatible with each element of R (in the senses of “compatible” \nalready defined separately for labels, g-labels, Sp-labels and gSp-labels). \nDefinitions: a label l is gSp-linked to a gSp-subset S if l is gSp-linked to the gSp-\nlabel underlying S; a label l is compatible with a gSp-subset if l is not gSp-linked to \nit; a label l is compatible with a set R of candidates, g-candidates, Subsets and g-\nSubsets if l is compatible with each element of R (in the senses of “compatible” \nalready defined separately for candidates, g-candidates, Sp-subsets and gSp-subsets). \nNotice that, in conformance with what we mentioned at the beginning of section \n10.2, according to the definition of “gSp-linked to a gSp-subset”, it is not enough for \n\n276 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nlabel l to be linked or g-linked to all the actual candidates and g-candidates of one of \nits transversal sets: it must be linked or g-linked to all the labels and g-labels of one \nof its transversal sets. \n10.2.1.2. gSp-subsets modulo a set of labels, g-labels, S-labels and gS-labels \nAll our forthcoming definitions (Reversible-gSp-chains, gSp-whips and gSp-\nbraids) will be based on that of a gSp-subset modulo a set R of labels, g-labels, S-\nlabels and gS-labels; in practice, R will be either the previous right-linking pattern \nor the set consisting of the target plus all the previous right-linking patterns (i.e. \ncandidates, g-candidates, Sk-subsets and gSk-subsets). \nDefinition: in any resolution state of any CSP, given a set R of labels, g-labels, \nS-labels and gS-labels [or a set R of candidates, g-candidates, Subsets and g-\nSubsets], a g-Pair (or gS2-subset) modulo R is a gS2-label {CSPVars, TransvSets}, \nwhere: \n– CSPVars = {V1, V2}, \n– TransvSets is composed of the following transversal sets of labels and g-\nlabels:  \n– {<V1, v11>, <V2, v21>} for constraint c1, \n– {<V1, v12>, <V2, v22>} for constraint c2, \nsuch that: \n– in RS, V1 and V2 are disjoint, i.e. they share no candidate; \n– in RS, {<V1, v11>} and {<V1, v12>} are transitively disjoint; in RS, \n{<V2, v22>} and {<V2, v21>} are transitively disjoint; \n– in RS, V1 has the two mandatory candidates or g-candidates <V1, v11> and \n<V1, v12> compatible with R and no other candidate or g-candidate compatible with \nR; \n– in RS, V2 has the two mandatory candidates or g-candidates <V2, v21> and \n<V2, v22> compatible with R and no other candidate or g-candidate compatible with \nR. \n \nDefinition: in any resolution state of any CSP, given a set R of labels, g-labels, \nS-labels and gS-labels [or a set R of candidates, g-candidates, Subsets and g-\nSubsets], a g-Triplet (or gS3-subset) modulo R is a gS3-label {CSPVars, \nTransvSets}, where: \n– CSPVars = {V1, V2, V3}, \n– TransvSets is composed of the following transversal sets of labels and g-\nlabels:  \n– {<V1, v11>, (<V2, v21>), <V3, v31>} for constraint c1, \n– {<V1, v12>, <V2, v22>, (<V3, v32>)} for constraint c2, \n\n10. g-Subsets, Reversible-gSp-chains, gSp-whips and gSp-braids    \n277 \n– {(<V1, v13>), <V2, v23>, <V3, v33>} for constraint c3,  \nsuch that: \n– in RS, V1, V2 and V3 are pairwise disjoint; \n– in RS, {<V1, v11>} and {<V1, v12>} are transitively disjoint; {<V2, v22>} and \n{<V2, v23>} are transitively disjoint; {<V3, v33>} and {<V3, v31>} are transitively \ndisjoint; \n– in RS, V1 has the two mandatory candidates or g-candidates <V1, v11> and \n<V1, v12> compatible with R, one optional candidate or g-candidate <V1, v13> \ncompatible with R (supposing this label or g-label exists), and no other candidate or \ng-candidate compatible with R; \n– in RS, V2 has the two mandatory candidates or g-candidates <V2, v22> and \n<V2, v23> compatible with R, one optional candidate or g-candidate <V2, v21> \ncompatible with R (supposing this label or g-label exists), and no other candidate or \ng-candidate compatible with R; \n– in RS, V3 has the two mandatory candidates or g-candidates <V3, v33> and \n<V3, v31> compatible with R, one optional candidate or g-candidate <V3, v32> \ncompatible with R (supposing this label or g-label exists), and no other candidate or \ng-candidate compatible with R. \n \nWe leave it to the reader to write the definitions of g-Subsets of larger sizes \nmodulo R (gSp-subsets modulo R). The general idea is that, when one looks in RS at \nsome gSp-label “modulo R”, i.e. when all the candidates and g-candidates in RS \nincompatible with R are “forgotten”, what remains in RS satisfies the conditions of a \nnon degenerated g-Subset of size p based on this gSp-label. \nDefinition: in all the above cases, a target of the gSp-subset modulo R is defined \nas a target of the gSp-subset itself (i.e. as a candidate gSp-linked to its underlying \ngSp-label). \nThe idea is that, in any context (e.g. in a chain) in which the elements in R have \npositive valence, the gSp-subset itself will have positive valence and any of its \ntargets will have negative valence. \n10.2.1.3. gSp-regular sequences \nAs in the previous chapter, it is convenient to introduce an auxiliary notion \nbefore we define Reversible-gSp-chains, gSp-whips and gSp-braids. \nDefinition: let there be given an integer 1≤p≤∞, an integer m≥1, a sequence (q1, \n…, qm) of integers, with 1≤qk≤p for all 1≤k≤m, and let n = ∑1≤k≤m qk; let there also \nbe given a sequence (W1, …, Wm) of different sets of CSP variables of respective \ncardinalities qk and a sequence (V1, …, Vm) of CSP variables such that Vk ∈ Wk for \nall 1≤k≤m. We define a gSp-regular sequence of length n associated with (W1, … \n\n278 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nWm) and (V1, … Vm) to be a sequence of length 2m [or 2m-1] (L1, R1, L2, R2, …. Lm, \n[Rm]), such that: \n– qm=1 and Wm = {Vm}, \n– for 1≤k≤ m, Lk is a candidate; \n– for 1≤k≤ m [or 1≤k<m], Rk is a candidate or a g-candidate if qk=1 and it is a \n(non degenerated) Sqk-subset or gSqk-subset if qk>1; \n– for each 1≤k≤ m [or 1≤k<m], one has “strong continuity”, “strong g-\ncontinuity”, “strong Sqk-continuity” or “strong gSqk-continuity” from Lk to Rk: \n- if Rk is a candidate (qk=1 and Wk={Vk}), Lk and Rk have a representative \nwith Vk: <Vk, lk> and <Vk, rk>, \n- if Rk is a g-candidate (qk=1 and Wk={Vk}), Lk has a representative <Vk, lk> \nwith Vk and Rk is a g-candidate <Vk, rk> for Vk (rk being its set of values), \n- if Rk is an Sqk-subset or a gSqk-subset (qk>1), then Wk is its set of CSP \nvariables and Lk has a representative with Vk. \nThe Lk are called the left-linking candidates of the sequence and the Rk the right-\nlinking objects (or elements or patterns or g-Subsets). Notice that the natural \nexpression of Lk to Rk continuity in case Rk is a g-Subset is the same as if it is a \nSubset. \nNotice also that the definition of a g-Subset implies a disjointness condition on \nthe sets of candidates for the CSP variables inside each Wk, but for a gSp-regular \nsequence there is no condition on the intersections of different Wk’s. In particular, \nWk+i may be a strict subset of Wk, if the right-linking elements in between give \nnegative valence in Wk+i to some candidates or g-candidates that had no individual \nvalence assigned in Wk. This is not considered as an inner loop of the sequence. \n10.2.2. Reversible-gSp-chains \nReversible-gSp-chains are an extension of Reversible-Sp-chains in which right-\nlinking Sp’-subsets may be replaced by gSp’-subsets (p’≤p). \n10.2.2.1. Definition of Reversible-gSp-chains \nDefinition: given an integer 1≤p≤∞ and a candidate Z (which will be a target), a \nReversible-gSp-chain of length n (n ≥ 1) is a gSp-regular sequence (L1, R1, L2, R2, \n…. Lm, Rm) of length n associated with a sequence (W1, … Wm) of sets of CSP \nvariables and a sequence (V1, … Vm) of CSP variables (with Vk ∈ Wk for all \n1≤k<m), such that: \n– Z is neither equal to any candidate in {L1, R1, L2, R2, …. Lm, Rm} nor a \nmember of any g-candidate in this set nor equal to any label in the Sqk-label or gSqk-\nlabel of Rk when Rk is an Sqk-subset or a gSqk-subset, for any 1≤k<m; \n\n10. g-Subsets, Reversible-gSp-chains, gSp-whips and gSp-braids    \n279 \n– Z is linked to L1; \n– for each 1 < k ≤ m, Lk is linked or g-linked or Sqk-1-linked or gSqk-1-linked to \nRk-1; this is the natural way of defining “continuity” from Rk-1 to Lk; \n– R1 is a candidate or a g-candidate or an Sq1-subset or a gSq1-subset modulo Z: \nR1 is the only candidate or g-candidate or is the unique Sq1-subset or is the unique \ngSq1-subset composed of all the candidates C for the CSP variables in W1 such that \nC is compatible with Z; \n– for any 1 < k ≤ m, Rk is a candidate or a g-candidate or an Sqk-subset or a \ngSqk-subset modulo Rk-1: Rk is the only candidate or g-candidate or (if k≠m) is the \nunique Sqk-subset or (if k≠m) is the unique gSqk-subset composed of all the \ncandidates C for the CSP variables in Wk such that C is compatible with Rk-1; \n– Z is not a label for Vm; \n– Z is linked to L1 and to Rm. \nTheorem 10.8 (Reversible-gSp-chain rule for a general CSP): in any resolution \nstate of any CSP, if Z is a target of a Reversible-gSp-chain, then it can be \neliminated (formally, this rule concludes ¬candidate(Z)). \nProof: if Z was True, then L1 would be eliminated by ECP and R1 would be \nasserted by S (if it is a candidate) or it would be a g-candidate or an Sq1-subset or a \ngSq1-subset; in any case, L2 would be eliminated by ECP or W1 or Sq1 or gSq1. By \ninduction, we arrive at: Rm would be asserted by S or it would be a g-candidate – \nwhich would contradict Z being True. \n10.2.2.2. Reversibility of Reversible-gSp-chains in the general CSP \nThe following theorem justifies the name we have given these chains. \nTheorem 10.9: a Reversible-gSp-chain is reversible. \nProof: the main point of the proof is the construction of the reversed chain. As it \nis a simple transposition of the proof for Reversible-Sp-chains in section 9.2.2, we \nleave it as an exercise for the reader. Figure 9.1 can still be used as a partial visual \nsupport for the proof, but now the intersections between horizontal lines (CSP \nvariables) and vertical lines (g-transversal sets) must be interpreted as candidates or \ng-candidates for these CSP variables instead of only candidates. \n10.2.3. gSp-whips and gSp-braids \ngSp-whips and gSp-braids are an extension of g-whips and g-braids in which Sp’-\nsubsets and gSp’-subsets (p’≤p) may appear as right-linking patterns. They can also \nbe seen as extensions of the Reversible-gSp-chains by application of the zt-ing \ninstead of the almost-ing principle. \n\n280 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n10.2.3.1. Definition of gSp-whips \nDefinition: given an integer 1≤p≤∞ and a candidate Z (which will be the target), \na gSp-whip of length n (n ≥ 1) built on Z is a gSp-regular sequence (L1, R1, L2, R2, \n…. Lm) [notice that there is no Rm] of length n, associated with a sequence (W1, … \nWm) of sets of CSP variables and a sequence (V1, … Vm) of CSP variables (with \nVk ∈ Wk for all 1≤k<m and Wm = {Vm}), such that: \n– Z is neither equal to any candidate in {L1, R1, L2, R2, …. Lm} nor a member of \nany g-candidate in this set nor equal to any label in the Sqk-label or gSqk-label of Rk \nwhen Rk is an Sqk-subset or a gSqk-subset, for any 1≤k<m; \n– L1 is linked to Z; \n– for each 1 < k ≤ m, Lk is linked or g-linked or Sqk-1-linked or gSqk-1-linked to \nRk-1; this is a form of “continuity” from Rk-1 to Lk; \n– for any 1 ≤ k < m, Rk is a candidate or a g-candidate or an Sqk-subset or a \ngSqk-subset modulo Z and all the previous right-linking patterns: either Rk is the \nonly candidate or g-candidate compatible with Z and with all the Ri with 1≤ i< k, or \nRk is the unique Sqk-subset or gSqk-subset composed of all the candidates C for \nsome of the CSP variables in Wk such that C is compatible with Z and with all the Ri \nwith 1≤ i< k; \n– Z is not a label for Vm; \n– Vm has no candidate compatible with the target and with all the previous right-\nlinking objects (but Vm has more than one candidate). \nTheorem 10.10 (gSp-whip rule for a general CSP): in any resolution state of \nany CSP, if Z is a target of a gSp-whip, then it can be eliminated (formally, this \nrule concludes ¬candidate(Z)). \nProof: the proof is an easy adaptation of that for the Sp-whips. Supposing Z was \nTrue and iterating upwards: Rk-1 would be asserted by S or it would be a g-candidate \nor an Sqk-1-subset or a gSqk-1-subset; due to Rk-1 to Lk continuity, Lk would be \neliminated by rule ECP, W1, Sqk-1 or gSqk-1; as usual the z- and t- candidates would \nbe progressively eliminated. When m-1 is reached, Rm-1 would have positive valence \nand there would be no possible value left for Vm (because Z itself is not a label for \nVm). \n10.2.3.2. Definition of gSp-braids \nDefinition: given an integer 1≤p≤∞ and a candidate Z (which will be the target), \na gSp-braid of length n (n ≥ 1) built on Z is a gSp-regular sequence (L1, R1, L2, R2, \n…. Lm) [notice that there is no Rm] of length n, associated with a sequence (W1, … \nWm) of sets of CSP variables and a sequence (V1, … Vm) of CSP variables (with \nVk ∈ Wk for all 1≤k<m and Wm = {Vm}), such that: \n\n10. g-Subsets, Reversible-gSp-chains, gSp-whips and gSp-braids    \n281 \n– Z is neither equal to any candidate in {L1, R1, L2, R2, …. Lm} nor a member of \nany g-candidate in this set nor equal to any label in the Sqk-label or gSqk-label of Rk \nwhen Rk is an Sqk-subset or a gSqk-subset, for any 1≤k<m; \n– L1 is linked to Z; \n– for each 1 < k ≤ m, Lk is linked or g-linked or S-linked or gS-linked to Z or to \nsome of the Ri, i<k; this is the only difference with gSp-whips; \n– for any 1 ≤ k < m, Rk is a candidate or a g-candidate or an Sqk-subset or a \ngSqk-subset modulo Z and all the previous right-linking patterns: either Rk is the \nonly candidate or g-candidate compatible with Z and with all the Ri with 1≤ i< k, or \nRk is the unique Sqk-subset or gSqk-subset composed of all the candidates C for \nsome of the CSP variables in Wk such that C is compatible with Z and with all the Ri \nwith 1≤ i< k; \n– Z is not a label for Vm; \n– Vm has no candidate compatible with the target and with all the previous right-\nlinking objects (but Vm has more than one candidate). \nTheorem 10.11 (gSp-braid rule for a general CSP): in any resolution state of \nany CSP, if Z is a target of a gSp-braid, then it can be eliminated (formally, this \nrule concludes ¬candidate(Z)). \nProof: almost the same as the proof for gSp-whips. The condition replacing Rk-1 \nto Lk continuity still allows the elimination of Lk by ECP. \n10.2.3.3. gSp-whip and gSp-braid resolution theories; gSpW and gSpB ratings \nIn the same way as for the Sp-whips or Sp-braids cases, one can define increasing \nsequences of resolution theories, with two parameters, one (n) for the total length of \nthe chain and one (p) for the maximum size of inner Subsets or g-Subsets. By \nconvention, p=1 means no Subset or g-Subset, only candidates and g-candidates. \nDefinition: for each p, 1≤p≤∞, define the increasing sequence (gSpWn, n≥0) of \nresolution theories as follows (similar definitions can be given for gSp-braids, by \nreplacing everywhere “gSp-whip” by “gSp-braid” and “gSpW” by “gSpB”): \n– gSpW0 = BRT(CSP), \n– gSpW1 = gSpW0 ∪ {rules for gSp-whips of length 1} = W1, \n– gSpW2 = gSpW1 ∪ gS2 (if p≥2) ∪ {rules for gSp-whips of length 2}, \n– ....  \n– gSpWn = gSpWn-1 ∪ gSn (if p≥n) ∪ {rules for gSp-whips of length n}, \n– gSpW∞ = ∪n≥0 gSpWn. \nFor p=∞, i.e. for gS-whips built on g-Subsets of a priori unrestricted size, we \nalso write gSWn instead of gS∞Wn.  \n\n282 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nDefinitions: for any 1≤p≤∞, the gSpW-rating of an instance P, noted gSpW(P), is \nthe smallest n ≤ ∞ such that P can be solved within gSpWn. Similarly, for any \n1≤p≤∞, the gSpB-rating of an instance P, noted gSpB(P), is the smallest n ≤ ∞ such \nthat P can be solved within gSpBn. \nObviously, setting p=1, gS1Wn = gWn and gS1W(P) = gW(P) for any instance. \nSimilarly, gS1Bn = gBn and gS1B(P) = gB(P) for any instance \nFor any 1≤p≤∞, the gSpW and gSpB ratings are defined in a purely logical way, \nindependent of any implementation; they are intrinsic properties of each instance; \nmoreover, for any fixed p (1≤p≤∞), the gSpB rating is based on an increasing \nsequence of theories (gSpBn, n≥0) with the confluence property (theorem 10.12). \nFor any puzzle P, one has obviously gW(P) = gS1W(P) ≥ gS2W(P) ≥ gSpW(P) ≥ \ngSp+1W(P) ≥ … ≥ gS∞W(P) and similar inequalities for the gSpB(P). \n10.2.3.4. The confluence property of all the gSpBn resolution theories  \nTheorem 10.12: in any CSP, each of the gSpBn resolution theories (1 ≤ p ≤ ∞, \n0 ≤ n ≤ ∞) is stable for confluence; therefore, it has the confluence property.  \nProof: as it is a simple adaptation of the proof for the SpBn resolution theories, \nwe leave it as an exercise for the reader. We could even allow type-2 targets. \nAs usual, the confluence property of all the gSpBn resolution theories for each p, \n1≤p≤∞, allows to superimpose on gSpBn a “simplest first” strategy compatible with \nthe gSpB rating. \n10.2.3.5. The “T&E(gSp) vs gSp-braids” theorem, 1≤p≤∞ \nAny resolution theory T stable for confluence has the confluence property and \nthe procedure T&E(T) can therefore be defined (see section 5.6.1). Taking T = gSp, \nit is obvious that any elimination done by a gSp-braid can be done by T&E(gSp). As \nwas the case for braids, for g-braids and for Sp-braids, the converse is true: \nTheorem 10.13: for any 1≤p≤∞, any elimination done by T&E(gSp) can be \ndone by a gSp-braid.  \nAs the proof closely follows that for Sp-braids, we leave it to the reader. \n10.2.4. gSp-z-whips and their relationships with gSp’-subsets \nAll the definitions and results in sections 9.3.4 to 9.3.6 can be extended with \nonly slight changes. Informally speaking, a gSp-z-whip[n] can be defined as a gSp-\nwhip[n] with no t-candidate that is not also a z-candidate. And gSp-z-whip \nresolution theories can be defined and shown to have the confluence property. \n\n10. g-Subsets, Reversible-gSp-chains, gSp-whips and gSp-braids    \n283 \nTheorem 10.14: a target Z of a gSp-subset is always a target of a gSp-1-z-whip \nof length p.  \nProof: almost obvious. One can always suppose that Z is gSp-linked to TS1 and \nthat V1 has a candidate or a g-candidate to which Z is linked or g-linked. Let L1 = \n<V1, l1> be this candidate or any candidate in this g-candidate. Let Lp = <Vp, lp> be a \ncandidate for Vp not in TS1 (there must be one if the gSp-subset is not degenerated). \nLet R2 be the gSp-1-subset: {{V1, …, Vp-1}, {TS2, …, TSp}}. Then the desired chain \nis RgSp-1C[p]: {L1 R2} – Vp{lp .}. qed. \n \nA gSp-subset that has g-transversal sets with “transitively non-void” intersections \nallows more eliminations than the “standard” ones defined in section 10.1. (This can \nhappen only for p>2.) \nDefinition: a type-2 target of a gSp-subset is a candidate belonging, either as an \nelement or as a member of a g-label, to (at least) two of its g-transversal sets. \nTheorem 10.15: a type-2 target of a gSp-subset can be eliminated. \nProof: suppose a type-2 target Z is a candidate for variable V1 and belongs to g-\ntransversal sets TS1 and TS2. If Z was True, then all the candidates in TS1 or TS2 or \nin a g-label in TS1 or TS2 would be eliminated by ECP. This would leave only p-2 \npossibilities (in terms of candidates or g-candidates) for the remaining p-1 CSP \nvariables – which is contradictory, in the same way as if it was for a normal target.  \nAs in the case of Sp-subsets, this is a very unusual kind of elimination. The \nfollowing theorem shows that, here also, this abnormality can be palliated. It also \njustifies that we did not consider type-2 targets of gSp-subsets in section 10.1: these \nabnormal targets can always be eliminated by a simpler pattern. An illustration of \nthe following theorem will appear in section 10.3 (for a “Franken Squirmbag”). \nTheorem 10.16: A type-2 target of a gSp-subset is always the (normal) target of \na shorter gSp-2-z-whip of length p-1. \nProof: in a resolution state RS, let Z be a type-2 target of a gSp-subset with CSP \nvariables V1, … Vp and g-transversal sets TS1, … TSp. One can always suppose that \nV1 is the CSP variable for which Z is a candidate (there can be only one in RS) and \nthat TS1 and TS2 are the two g-transversal sets to which Z belongs.  \nFirstly, each of the CSP variables V2, V3, … Vp must have at least one candidate \nor g-candidate of the gSp-subset that is not in TS1 or TS2 (if it has several, choose \none arbitrarily and name it <V2, c2>, … <Vp, cp>, respectively). Otherwise, the gSp-\nsubset would be degenerated; more precisely, Z could be eliminated by a whip[1] \n(or even by ECP after a Single) associated with (any of) the CSP variable(s) that has \nno such candidate. \n\n284 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nSecondly, in TS1 or TS2, there must be at least one candidate for at least one of \nthe CSP variables V2, … Vp. Otherwise, the initial gSp-subset would be degenerated; \nmore precisely, it would contain, among others, the gSp-2-subset {{V3, …, Vp}, \n{TS3, …, TSp}}; this would allow to eliminate all the candidates for V1 and V2 that \nare not in TS1 or TS2; Z could then be eliminated by a whip[1] associated with V2; \nand V1 would have no candidate left. One can always suppose that there exists such \na candidate L2 for V2, i.e. L2 = <V2, l2>. \nModulo Z, we therefore have a gSp-2 subset R2 with CSP variables V2, … Vp-1 \nand g-transversal sets TS3, … TSp. Let cp* be cp if it is a candidate or any element in \ncp if it is a g-candidate. Then, Z is a (normal) target of the following gSp-2-z-whip of \nlength p-1: gSp-2-z-whip[p-1]: V2{l2 R2} – Vp{cp .} ⇒ ¬candidate(Z). qed. \n \nTheorem 10.16 allows to replace any elimination of a candidate Z as a type-2 \ntarget for a gSp-subset by the elimination of Z as a normal target for a gSp-2-z-\nwhip[p-1]. But, as was the case for Sp-subsets in section 9.3.6 and for similar \nreasons, this is not enough to guarantee that type-2 targets of gSp-subsets, if allowed \nto be used as left-linking candidates in the definitions of gSp-whips or gSp-braids, \ncould not lead to (slightly) more general patterns than those in our current \ndefinitions, due to the (probably rare) cases similar to those evoked in section 9.3.6. \nHowever, in the present case, one can prove the following: \nTheorem 10.17: for any 1≤p≤∞, for any n>2, if a RgSpC[n] (respectively a \ngSpW[n], a gSpB[n]) has a left-linking candidate Lk that is a type-2 target of an \ninner gSp-subset, then it can be seen as a normal (i.e. with no inner type-2 targets) \nRgSqC[n] (resp. gSqW[n], gSqB[n]), for some q>p, i.e. with larger inner g-Subsets. \nProof: almost obvious. Every time a left-linking candidate appears as a type-2 \ntarget, it suffices to merge its g-Subset with the next pattern in the sequence. Notice \nthat this would not work for a “non-g” version of this theorem, because, even in this \ncase, the next pattern could be a g-candidate. \nUnfortunately, g-Subsets obtained by this (rather artificial) method tend to be \nvery close to degeneracy. \n10.3. A detailed example \nWe shall use the puzzle in Figure 10.1 (taken from the examples that go with the \nHodoku solver [Hodoku www]) for several purposes: \n– it will provide an example of a gS5-subset and illustrate that, in conformance \nwith our definition, the g-transversal sets do not have to meet all its CSP variables; \n– it will illustrate the application of theorem 10.16 to the type-2 targets of a gS5-\nsubset; \n\n10. g-Subsets, Reversible-gSp-chains, gSp-whips and gSp-braids    \n285 \n– it will provide an example of a Reversible-gS2-chain; \n– it will illustrate alternative solutions using either gS5-subsets and Reversible \nChains or g-whips[5]. \n \n \n  \n  \n  \n \n  \n  \n \n \n \n    8 4 2 5 9 7 1 6 3 \n \n \n  \n  6 1   4 7     5 9 3 2 6 1 8 4 7 \n  \n  \n \n \n4 8   5 2     7 6 1 3 4 8 9 5 2 \n \n  \n  \n  \n  \n   \n  \n      6 8 9 4 1 3 2 7 5 \n  1 5 \n \n \n2 \n \n  6     3 1 5 7 8 2 4 9 6 \n \n7 4   5 \n \n  1 8     2 7 4 6 5 9 3 1 8 \n \n  \n   \n \n  \n \n  \n      4 3 7 1 2 6 5 8 9 \n  2 8   7 5    \n4     1 2 8 9 7 5 6 3 4 \n  5 6   3 4 \n \n2 1     9 5 6 8 3 4 7 2 1 \nFigure 10.1. A puzzle P with W(P) = 4, gW(P) = 5, gSW(P) = 5 \n10.3.1. Solution using only gSp-subsets and Reversible-gSp-chains  \nLet us first see what is obtained if we use the Hodoku software mentioned in \nsection 10.1.7, when only basic rules plus xy-chains, Subsets, Finned-Fish, Franken \nFish, Mutant Fish and Kraken Fish (a kind of Fish Chains to be discussed below) are \nactivated. We keep Hodoku’s self-explaining notation. In the first three patterns, the \nFinned Swordfish, the various “f” indicate the fins. “Finned Swordfish” is a classical \nvariant of Swordfish with additional candidates linked to the target; in our view, it is \nmerely a “z-Swordfish” (or z-SHT); the eliminations allowed here by the three \ninstances of this pattern can also be done by g-whips[3] (see section 10.3.2). \n \n*****\t\r  Hodoku\t\r  2.0.1\t\r  *****\t\r  \nFinned\t\r  Swordfish:\t\r  3\t\r  c239\t\r  r147\t\r  fr2c2\t\r  fr2c3\t\r  fr3c2\t\r  fr3c3\t\r  =>\t\r  r1c1≠3\t\r  \nFinned\t\r  Swordfish:\t\r  9\t\r  r239\t\r  c147\t\r  fr2c2\t\r  fr2c3\t\r  fr3c2\t\r  fr3c3\t\r  =>\t\r  r1c1≠9\t\r  \nFinned\t\r  Swordfish:\t\r  9\t\r  c569\t\r  r147\t\r  fr5c5\t\r  fr6c6\t\r  =>\t\r  r4c4≠9\t\r  \n;;; Resolution state RS1 \n \nNow, Hodoku reaches a resolution state RS1 (displayed in Figure 10.2) with a \n“Franken Squirmbag in columns” for Number 9: in the five Columns c2, c3, c5, c6 \nand c9 (in light grey), Number 9 appears only in Rows r1, r4 and r7 and in Blocks \nb1 and b5 (in dark grey). \n \nFranken\t\r  Squirmbag:\t\r  9\t\r  c23569\t\r  r147b15\t\r  =>\t\r  r1c23478,r2347c1,r4c5678,r567c4,r7c78≠9\t\r  \n \nIn the approach of this chapter, this is a gS5-subset: the five CSP variables are \nXc2n9, Xc3n9, Xc5n9, Xc6n9 and Xc9n9 (symbolised by light grey columns); the five g-\ntransversal sets are defined by CSP variables (considered as constraints) Xr1n9, Xr4n9, \nXr7n9, Xb1n9 and Xb5n9 (symbolised by three dark grey rows and two dark grey \n\n286 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nblocks). The targets of the gS5-subset are all the candidates (the fourteen ones in \nbold underlined characters in Figure 10.1) S5-linked to one of the transversal sets, \ni.e. all the Numbers 9 in r1, r4, r7, b1 or b5 but not in any of c2, c3, c5, c6 or c9.  \n \n \n \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nr1 \nn1 n2      \nn4 n5 n6 \nn7 n8      \n          n3 \nn4      n6 \n     n8 n9 \nn1 n2 n3 \n  \nn7      n9 \n     n2 n3 \n     n5          \nn7      n9 \n     n2       \n  \n          n9 \n          n3 \n  \nn7      n9 \nn1      n3 \n          n6 \n     n8 n9 \n          n3 \n          n6 \n     n8 n9 \n          n3 \n            \n          n9 r1 \nr2 \n     n2 n3 \n n5  \n     n8 n9 \n          n3 \n  \n     n8 n9 \n     n2 n3 \n  \n          n9 \n     n2 n3 \n     n5      \n          n9 n6 n1 \n          n3 \n  \n     n8 n9 n4 n7 r2 \nr3 \nn1      n3 \n          n6 \nn7      n9 \n          n3 \n          n6 \n          n9 \nn1      n3 \n  \nn7      n9 \n          n3 \n  \nn7      n9 n4 n8 \nn1      n3 \n          n6 \n          n9 n5 n2 r3 \nr4 \n     n2 n3 \n          n6 \n     n8 n9 \n          n3 \n          n6 \n     n8 n9 \n     n2 n3 \n  \n          n9 \nn1      n3 \nn4      n6 \nn7 n8      \nn1           \n  \n     n8 n9 \n          n3 \n          n6 \nn7      n9 \n     n2 n3 \nn4 n5        \nn7      n9 \n          n3 \n           \nn7      n9 \n          n3 \n     n5        \n          n9 r4 \nr5 \n          n3 \n  \n     n8 n9 n1 n5 \n          n3 \nn4           \nn7 n8 n9 \n           \n  \n     n8 n9 n2 \n          n3 \nn4             \nn7      n9 \n          n3 \n           \nn7      n9 n6 r5 \nr6 \n     n2 n3 \n          n6 \n          n9 n7 n4 \n          n3 \n          n6 \n          n9 n5 \n          n3 \n          n6 \n          n9 \n     n2 n3 \n           \n          n9 n1 n8 r6 \nr7 \nn1      n3 \nn4              \nn7      n9 \n          n3 \nn4           \n          n9 \nn1      n3 \n  \nn7      n9 \nn1 n2      \n          n6 \n     n8 n9 \nn1 n2      \n  \n     n8 n9 \n           \n          n6 \n          n9 \n          n3 \n     n5 n6 \nn7 n8 n9 \n          n3 \n          n6 \nn7 n8 n9 \n          n3 \n     n5        \n          n9 r7 \nr8 \nn1      n3 \n  \n          n9 n2 n8 \nn1           \n          n6 \n          n9 n7 n5 \n          n3 \n          n6 \n          n9 \n          n3 \n          n6 \n          n9 n4 r8 \nr9 \n  \n  \nn7      n9 n5 n6 \n  \n  \n     n8 n9 n3 n4 \n  \n  \nn7 n8 n9 n2 n1 r9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 10.2. Resolution state RS1 of P, in which there appears a Franken Squirmbag \nAt first sight, this Franken Squirmbag leads to a very impressive result: eighteen \neliminations done by a single pattern. Notice that, contrary to whips that generally \neliminate only one candidate at a time (though associated whips obtained by \npermutations can often eliminate more candidates), a Subset often eliminates several \ncandidates; but eighteen is really exceptional. \nHowever, a closer look shows some difference in the eliminations done by \nHodoku for its Franken Squirmbag and those done by our gS5-subset: in addition to \nthe fourteen candidates of the latter, the former eliminates the following four \ncandidates (in underlined but not bold characters): n9r1c2, n9r1c3, n9r4c5 and \nn9r4c6. These are examples of the type-2 targets evoked in section 10.2.2.3. We \nshall take advantage of them to illustrate how, according to theorem 10.8, they  \ncould be eliminated by shorter gS-z-whips with smaller inner g-Subsets. Here, we \nhave p=5, so we find gS3-z-whip[4]: \n \n\n10. g-Subsets, Reversible-gSp-chains, gSp-whips and gSp-braids    \n287 \ngS3-­‐z-­‐whip[4]:\t\r  n9{r1c5\t\r  gS3:{c5\t\r  c6\t\r  c9}{r4\t\r  r7\t\r  b5}}\t\r  –\t\r  c3n9{r4\t\r  .}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  9\t\r  \ngS3-­‐z-­‐whip[4]:\t\r  n9{r1c5\t\r  gS3:{c5\t\r  c6\t\r  c9}{r4\t\r  r7\t\r  b5}}\t\r  –\t\r  c2n9{r4\t\r  .}\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  9\t\r  \ngS3-­‐z-­‐whip[4]:\t\r  n9{r4c5\t\r  gS3:{c2\t\r  c3\t\r  c9}{r1\t\r  r7\t\r  b1}}\t\r  –\t\r  c6n9{r1\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  9\t\r  \ngS3-­‐z-­‐whip[4]:\t\r  n9{r4c5\t\r  gS3:{c2\t\r  c3\t\r  c9}{r1\t\r  r7\t\r  b1}}\t\r  –\t\r  c6n9{r1\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  9\t\r  \nThe end of the Hodoku resolution path has nothing noticeable: \n \nXYZ-­‐Wing:\t\r  7/6/3\t\r  in\t\r  r4c68,r6c4\t\r  =>\t\r  r4c4≠3\t\r  (a\t\r  particular\t\r  kind\t\r  of\t\r  z-­‐whip[2])\t\r  \nXYZ-­‐Wing:\t\r  9/3/6\t\r  in\t\r  r6c46,r7c6\t\r  =>\t\r  r4c6≠6\t\r  (a\t\r  particular\t\r  kind\t\r  of\t\r  z-­‐whip[2])\t\r  \nNaked\t\r  Pair:\t\r  3,7\t\r  in\t\r  r4c68\t\r  =>\t\r  r4c12379≠3,\t\r  r4c47≠7\t\r  \nLocked\t\r  Candidates\t\r  Type\t\r  1\t\r  (Pointing):\t\r  3\t\r  in\t\r  b4\t\r  =>\t\r  r2378c1≠3\t\r  (i.e.\t\r  whip[1])\t\r  \nLocked\t\r  Candidates\t\r  Type\t\r  1\t\r  (Pointing):\t\r  3\t\r  in\t\r  b7\t\r  =>\t\r  r7c789≠3\t\r  (i.e.\t\r  whip[1])\t\r  \nHidden\t\r  Single:\t\r  r1c9=3\t\r  \nLocked\t\r  Candidates\t\r  Type\t\r  1\t\r  (Pointing):\t\r  3\t\r  in\t\r  b2\t\r  =>\t\r  r56c4≠3\t\r  (i.e.\t\r  whip[1])\t\r  \nSingles:\t\r  r6c4=6,\t\r  r7c6=6\t\r  \nLocked\t\r  Candidates\t\r  Type\t\r  1\t\r  (Pointing):\t\r  9\t\r  in\t\r  b3\t\r  =>\t\r  r5689c7≠9\t\r  (i.e.\t\r  whip[1])\t\r  \nLocked\t\r  Candidates\t\r  Type\t\r  2\t\r  (Claiming):\t\r  9\t\r  in\t\r  r1\t\r  =>\t\r  r23c4≠9\t\r  (i.e.\t\r  whip[1])\t\r  \nLocked\t\r  Candidates\t\r  Type\t\r  2\t\r  (Claiming):\t\r  9\t\r  in\t\r  c4\t\r  =>\t\r  r7c5≠9\t\r  (i.e.\t\r  whip[1])\t\r  \nNaked\t\r  Pair:\t\r  7,8\t\r  in\t\r  r7c8,r9c7\t\r  =>\t\r  r7c7≠7,\t\r  r7c7≠8\t\r  \nSingles:\t\r  r7c7=5,\t\r  r7c9=9,\t\r  r4c9=5,\t\r  r5c8=9,\t\r  r5c5=8,\t\r  r5c1=3,\t\r  r4c5=1,\t\r  r4c4=4,\t\r  r5c4=7,\t\r  r5c7=4,\t\r  r3c4=3,\t\r  \nr4c6=3,\t\r  r6c6=9,\t\r  r1c6=7,\t\r  r6c1=2,\t\r  r6c7=3,\t\r  r4c3=9,\t\r  r4c7=2,\t\r  r4c8=7,\t\r  r7c5=2,\t\r  r1c5=9,\t\r  r7c8=8,\t\r  r1c8=6,\t\r  \nr8c8=3,\t\r  r7c4=1,\t\r  r8c4=9,\t\r  r9c4=8,\t\r  r8c1=1,\t\r  r8c7=6,\t\r  r9c7=7,\t\r  r9c1=9\t\r  \nNaked\t\r  Triple:\t\r  4,5,8\t\r  in\t\r  r1c12,r2c1\t\r  =>\t\r  r2c2≠8\t\r  \nXY-­‐Chain:\t\r  5\t\r  5-­‐\t\r  r1c4\t\r  -­‐2-­‐\t\r  r1c3\t\r  -­‐1-­‐\t\r  r3c3\t\r  -­‐7-­‐\t\r  r3c1\t\r  -­‐6-­‐\t\r  r4c1\t\r  -­‐8-­‐\t\r  r2c1\t\r  -­‐5\t\r  =>\t\r  r1c1,r2c4\t\r  ≠\t\r  5\t\r  \nSingles\t\r  to\t\r  the\t\r  end\t\r  \n10.3.2. Solution using only g-whips  \nThe resolution path with whips has nothing noticeable; it gives W(P) = 9. We \nshall skip it. But the path with g-whips gives gW(P) = 5. The “SQ” comment at the \nend of a line indicates that the elimination is one available with the Franken \nSquirmbag; “SQ2” indicates that it is a type-2 target.  \nAs can be seen, most of the Squirmbag eliminations can be done by shorter g-\nwhips or even shorter whips. The “<<<<” comment indicates a whip[4] elimination \nnot available to the Franken Squirmbag but that can be done before it. \n \n*****\t\r  \t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  gW\t\r  \t\r  *****\t\r  \n28\t\r  givens,\t\r  201\t\r  candidates,\t\r  1425\t\r  csp-­‐links\t\r  and\t\r  1425\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.77\t\r  \ng-­‐whip[3]:\t\r  b2n9{r1c5\t\r  r123c4}\t\r  –\t\r  r9n9{c4\t\r  c7}\t\r  –\t\r  b3n9{r1c7\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  9\t\r  \ng-­‐whip[3]:\t\r  b4n9{r4c3\t\r  r456c1}\t\r  –\t\r  r9n9{c1\t\r  c7}\t\r  –\t\r  r8n9{c7\t\r  .}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  9\t\r  \ng-­‐whip[3]:\t\r  b4n3{r5c1\t\r  r4c123}\t\r  –\t\r  c9n3{r4\t\r  r7}\t\r  –\t\r  r8n3{c8\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  3\t\r  \n;;; Resolution state RS1 \ng-­‐whip[3]:\t\r  b8n9{r7c6\t\r  r789c4}\t\r  –\t\r  r2n9{c4\t\r  c123}\t\r  –\t\r  r3n9{c3\t\r  .}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  9\t\r  ;\t\r  SQ\t\r  \nwhip[4]:\t\r  b2n3{r3c4\t\r  r1c6}\t\r  –\t\r  c9n3{r1\t\r  r7}\t\r  –\t\r  b7n3{r7c3\t\r  r8c1}\t\r  –\t\r  b4n3{r4c1\t\r  .}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  3\t\r  ;\t\r  <<<<\t\r  \ng-­‐whip[4]:\t\r  b4n9{r6c1\t\r  r4c123}\t\r  –\t\r  c9n9{r4\t\r  r1}\t\r  –\t\r  c6n9{r1\t\r  r6}\t\r  –\t\r  c5n9{r4\t\r  .}\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  9\t\r  ;\t\r  SQ\t\r  \ng-­‐whip[4]:\t\r  b7n9{r8c1\t\r  r7c123}\t\r  –\t\r  c9n9{r7\t\r  r1}\t\r  –\t\r  c6n9{r1\t\r  r6}\t\r  –\t\r  c5n9{r4\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  9\t\r  ;\t\r  SQ\t\r  \ng-­‐whip[4]:\t\r  b2n9{r1c5\t\r  r123c4}\t\r  –\t\r  b8n9{r8c4\t\r  r7c456}\t\r  –\t\r  c2n9{r7\t\r  r4}\t\r  –\t\r  c9n9{r4\t\r  .}\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  9\t\r  ;\t\r  SQ2\t\r  \n\n288 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ng-­‐whip[4]:\t\r  b2n9{r1c5\t\r  r123c4}\t\r  –\t\r  b8n9{r8c4\t\r  r7c456}\t\r  –\t\r  c3n9{r7\t\r  r4}\t\r  –\t\r  c9n9{r4\t\r  .}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  9\t\r  ;\t\r  SQ2\t\r  \ng-­‐whip[4]:\t\r  b4n9{r4c3\t\r  r456c1}\t\r  –\t\r  b7n9{r8c1\t\r  r7c123}\t\r  –\t\r  c6n9{r7\t\r  r1}\t\r  –\t\r  c9n9{r1\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  9\t\r  ;\t\r  SQ2\t\r  \ng-­‐whip[4]:\t\r  b4n9{r4c3\t\r  r456c1}\t\r  –\t\r  b7n9{r8c1\t\r  r7c123}\t\r  –\t\r  c5n9{r7\t\r  r1}\t\r  –\t\r  c9n9{r1\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  9\t\r  ;\t\r  SQ2\t\r  \ng-­‐whip[4]:\t\r  b3n9{r3c7\t\r  r1c789}\t\r  –\t\r  b2n9{r1c5\t\r  r123c4}\t\r  –\t\r  r9n9{c4\t\r  c1}\t\r  –\t\r  b4n9{r5c1\t\r  .}\t\r  ==>\t\r  r4c7\t\r  ≠\t\r  9\t\r  ;\t\r  SQ\t\r  \ng-­‐whip[4]:\t\r  b2n9{r3c4\t\r  r1c456}\t\r  –\t\r  b3n9{r1c8\t\r  r123c7}\t\r  –\t\r  r6n9{c7\t\r  c1}\t\r  –\t\r  r9n9{c1\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  9\t\r  ;\t\r  SQ\t\r  \ng-­‐whip[4]:\t\r  b7n9{r7c3\t\r  r789c1}\t\r  –\t\r  b4n9{r5c1\t\r  r4c123}\t\r  –\t\r  c9n9{r4\t\r  r1}\t\r  –\t\r  b2n9{r1c4\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  9\t\r  ;\t\r  SQ\t\r  \ng-­‐whip[4]:\t\r  b8n9{r8c4\t\r  r7c456}\t\r  –\t\r  c9n9{r7\t\r  r4}\t\r  –\t\r  c3n9{r4\t\r  r123}\t\r  –\t\r  c2n9{r3\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  9\t\r  ;\t\r  SQ\t\r  \ng-­‐whip[5]:\t\r   b2n9{r1c6\t\r   r123c4}\t\r   –\t\r   r9n9{c4\t\r   c1}\t\r   –\t\r   r8n9{c1\t\r   c8}\t\r   –\t\r   c9n9{r7\t\r   r4}\t\r   –\t\r   b4n9{r4c2\t\r   .}\t\r   ==>\t\r  \nr1c7\t\r  ≠\t\r  9\t\r  ;\t\r  SQ\t\r  \ng-­‐whip[5]:\t\r  b4n9{r4c3\t\r  r456c1}\t\r  –\t\r  b7n9{r8c1\t\r  r7c123}\t\r  –\t\r  c9n9{r7\t\r  r1}\t\r  –\t\r  c6n9{r1\t\r  r6}\t\r  –\t\r  c5n9{r5\t\r  .}\t\r  ==>\t\r  \nr4c8\t\r  ≠\t\r  9\t\r  ;\t\r  SQ\t\r  \nwhip[3]:\t\r  r5n4{c7\t\r  c4}\t\r  –\t\r  r5n7{c4\t\r  c8}\t\r  –\t\r  r4c8{n7\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  3\t\r  \t\r  \nwhip[4]:\t\r  r4c8{n3\t\r  n7}\t\r  –\t\r  r5n7{c8\t\r  c4}\t\r  –\t\r  r5n3{c4\t\r  c1}\t\r  –\t\r  b7n3{r8c1\t\r  .}\t\r  ==>\t\r  r7c8\t\r  ≠\t\r  3\t\r  \nwhip[5]:\t\r   b5n4{r4c4\t\r   r5c4}\t\r   –\t\r   b5n7{r5c4\t\r   r4c6}\t\r   –\t\r   r4c8{n7\t\r   n3}\t\r   –\t\r   r5n3{c8\t\r   c1}\t\r   –\t\r   b4n8{r5c1\t\r   .}\t\r   ==>\t\r  \nr4c4\t\r  ≠\t\r  8\t\r  \nwhip[5]:\t\r  c6n7{r1\t\r  r4}\t\r  –\t\r  r4c8{n7\t\r  n3}\t\r  –\t\r  c9n3{r4\t\r  r7}\t\r  –\t\r  r8n3{c8\t\r  c1}\t\r  –\t\r  b4n3{r4c1\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  3\t\r  \nwhip[1]:\t\r  c6n3{r6\t\r  .}\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  3,\t\r  r5c4\t\r  ≠\t\r  3\t\r  \nwhip[4]:\t\r  r6c4{n9\t\r  n6}\t\r  –\t\r  b8n6{r8c4\t\r  r7c6}\t\r  –\t\r  c6n9{r7\t\r  r1}\t\r  –\t\r  b3n9{r1c9\t\r  .}\t\r  ==>\t\r  r6c7\t\r  ≠\t\r  9\t\r  \nwhip[5]:\t\r  r4c5{n1\t\r  n8}\t\r  –\t\r  r5c5{n8\t\r  n9}\t\r  –\t\r  b6n9{r5c7\t\r  r4c9}\t\r  –\t\r  b6n5{r4c9\t\r  r4c7}\t\r  –\t\r  r4n4{c7\t\r  .}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  1\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r4c5\t\r  =\t\r  1\t\r  \nwhip[1]:\t\r  r4n8{c1\t\r  .}\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  b7n3{r7c3\t\r  r8c1}\t\r  –\t\r  r5c1{n3\t\r  n9}\t\r  –\t\r  b6n9{r5c8\t\r  r4c9}\t\r  –\t\r  r1c9{n9\t\r  .}\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  3\t\r  \nwhip[5]:\t\r   b1n4{r1c2\t\r   r1c1}\t\r   –\t\r   b1n5{r1c1\t\r   r2c1}\t\r   –\t\r   c1n8{r2\t\r   r4}\t\r   –\t\r   c1n2{r4\t\r   r6}\t\r   –\t\r   b4n6{r6c1\t\r   .}\t\r   ==>\t\r  \nr1c2\t\r  ≠\t\r  6\t\r  \nwhip[5]:\t\r  b1n5{r2c1\t\r  r1c1}\t\r  –\t\r  c1n8{r1\t\r  r4}\t\r  –\t\r  c1n2{r4\t\r  r6}\t\r  –\t\r  r6c7{n2\t\r  n3}\t\r  –\t\r  r5n3{c8\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  3\t\r  \nwhip[5]:\t\r  b6n4{r5c7\t\r  r4c7}\t\r  –\t\r  c7n5{r4\t\r  r7}\t\r  –\t\r  r7c9{n5\t\r  n9}\t\r  –\t\r  c8n9{r8\t\r  r1}\t\r  –\t\r  c5n9{r1\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  9\t\r  \ng-­‐whip[3]:\t\r  b7n9{r7c3\t\r  r789c1}\t\r  –\t\r  b4n9{r5c1\t\r  r4c123}\t\r  –\t\r  b6n9{r4c9\t\r  .}\t\r  ==>\t\r  r7c8\t\r  ≠\t\r  9\t\r  \nwhip[5]:\t\r  b6n9{r4c9\t\r  r5c8}\t\r  –\t\r  c5n9{r5\t\r  r7}\t\r  –\t\r  c6n9{r7\t\r  r6}\t\r  –\t\r  b5n3{r6c6\t\r  r4c6}\t\r  –\t\r  c9n3{r4\t\r  .}\t\r  ==>\t\r  r1c9\t\r  ≠\t\r  9\t\r  \nnaked-­‐single\t\r  ==>\t\r  r1c9\t\r  =\t\r  3\t\r  \nwhip[3]:\t\r  c9n9{r7\t\r  r4}\t\r  –\t\r  r5n9{c8\t\r  c1}\t\r  –\t\r  b7n9{r9c1\t\r  .}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r6c4{n9\t\r  n6}\t\r  –\t\r  b8n6{r8c4\t\r  r7c6}\t\r  –\t\r  b8n9{r7c6\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  9,\t\r  r2c4\t\r  ≠\t\r  9\t\r  \nwhip[1]:\t\r  b2n9{r1c5\t\r  .}\t\r  ==>\t\r  r1c8\t\r  ≠\t\r  9\t\r  \nwhip[1]:\t\r  b3n9{r3c7\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  9,\t\r  r8c7\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r9n9{c4\t\r  c1}\t\r  –\t\r  r5n9{c1\t\r  c8}\t\r  –\t\r  r8n9{c8\t\r  .}\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  9\t\r  ;\t\r  SQ\t\r  \nsingles\t\r  ==>\t\r  r6c4\t\r  =\t\r  6,\t\r  r7c6\t\r  =\t\r  6\t\r  \nwhip[2]:\t\r  r9c7{n7\t\r  n8}\t\r  –\t\r  r7c8{n8\t\r  .}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  7\t\r  \nwhip[2]:\t\r  r9c7{n8\t\r  n7}\t\r  –\t\r  r7c8{n7\t\r  .}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  8\t\r  \nwhip[2]:\t\r  r4c8{n3\t\r  n7}\t\r  –\t\r  r4c6{n7\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  3,\t\r  r4c2\t\r  ≠\t\r  3,\t\r  r4c3\t\r  ≠\t\r  3\t\r  \nwhip[1]:\t\r  b4n3{r6c1\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  3,\t\r  r7c1\t\r  ≠\t\r  3,\t\r  r8c1\t\r  ≠\t\r  3\t\r  \nwhip[1]:\t\r  r8n3{c8\t\r  .}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  3\t\r  \nsingles\t\r  ==>\t\r  r7c7\t\r  =\t\r  5,\t\r  r7c9\t\r  =\t\r  9,\t\r  r4c9\t\r  =\t\r  5,\t\r  r5c8\t\r  =\t\r  9,\t\r  r5c1\t\r  =\t\r  3,\t\r  r5c5\t\r  =\t\r  8,\t\r  r7c5\t\r  =\t\r  2,\t\r  r1c5\t\r  =\t\r  9,\t\r  r1c6\t\r  =\t\r  7,\t\r  \nr3c4\t\r  =\t\r  3,\t\r  r4c6\t\r  =\t\r  3,\t\r  r6c6\t\r  =\t\r  9,\t\r  r6c1\t\r  =\t\r  2,\t\r  r4c3\t\r  =\t\r  9,\t\r  r6c7\t\r  =\t\r  3,\t\r  r8c7\t\r  =\t\r  6,\t\r  r8c8\t\r  =\t\r  3,\t\r  r4c8\t\r  =\t\r  7,\t\r  r5c7\t\r  =\t\r  4,\t\r  r4c7\t\r  \n=\t\r  2,\t\r  r5c4\t\r  =\t\r  7,\t\r  r7c8\t\r  =\t\r  8,\t\r  r9c7\t\r  =\t\r  7,\t\r  r9c1\t\r  =\t\r  9,\t\r  r8c1\t\r  =\t\r  1,\t\r  r8c4\t\r  =\t\r  9,\t\r  r9c4\t\r  =\t\r  8,\t\r  r1c8\t\r  =\t\r  6,\t\r  r7c4\t\r  =\t\r  1,\t\r  r4c4\t\r  =\t\r  4\t\r  \nwhip[3]:\t\r  r2c1{n8\t\r  n5}\t\r  –\t\r  r1c1{n5\t\r  n4}\t\r  –\t\r  r1c2{n4\t\r  .}\t\r  ==>\t\r  r2c2\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  r2c7{n8\t\r  n9}\t\r  –\t\r  r2c2{n9\t\r  n3}\t\r  –\t\r  r7c2{n3\t\r  n4}\t\r  –\t\r  r1c2{n4\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  8\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n\n \n11. Wp-whips, Bp-braids and the T&E(2) instances \nIn chapters 7, 9 and 10, we have extended the possibilities for right-linking \nelements of whips and braids from candidates to respectively g-candidates, Subsets \nand g-Subsets – whereas we always kept left-linking elements restricted to mere \ncandidates. In the present chapter, we shall show that whips and braids themselves \ncan be used as right-linking patterns. For each 1≤p≤∞, we shall define two \nincreasing sequences of resolution theories (WpWn and BpBn, 0≤n≤∞) and we shall \nassociate with them two new ratings, WpW and BpB. \nWe shall prove two main results for Bp-braids, similar to those proven for all our \nprevious generalised braid theories: the confluence property of all the BpBn \nresolution theories (providing the BpB ratings with all the good properties of the \nprevious similar ratings) and a “T&E(Bp) vs Bp-braids” theorem.  \nWe shall also prove that there is a close relationship, given by the “T&E(2) vs B-\nbraids” theorem, between B-braids and an iterated (depth 2) Trial-and-Error \nprocedure. As very fast programs can easily be written for T&E(2), this theorem \nprovides an easy way of checking if an instance of a CSP can be solved by B-braids, \nwithout actually finding explicitly its B-braids resolution path and its BB rating. A \npractical consequence for Sudoku is that, as all the known minimal puzzles can be \nsolved by T&E(2), they all have a finite BB rating. \n11.1. Wp-labels and Bp-labels; Wp-whips and Bp-braids \n11.1.1. Wp-labels and Bp-labels; Wp-links and Bp-links \nWhen one wants to allow a pattern P as a right-linking object of a whip or a \nbraid, the first step is to explicit the P-label underlying its definition, independently \nof any resolution state. The following definition of a W-label extracts from the \ndefinition of a whip its structural part: only the part, but all the part, that does not \ndepend on the resolution state, i.e. that can be expressed with labels and links, \nwithout referring to actual candidates. \nDefinition: for any n≥1, a Wn-label is a structured list (Z, (V1, L1, R1), …, (Vn-1, \nLn-1, Rn-1), (Vn, Ln)), such that: \n– for any 1≤k≤n, Vk is a CSP variable; \n\n290 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– Z, all the Lk’s and all the Rk’s are labels; \n– in the sequence of labels (L1, R1, …, Ln-1, Rn-1, Ln), any two consecutive \nelements are different; \n– Z does not belong to {L1, R1, L2, R2, …. Ln}; \n– L1 is linked to Z; \n– right-to-left continuity: for any 1<k≤n, Lk is linked to Rk-1; \n– strong left-to-right continuity: for any 1≤k<n, Lk and Rk are labels for Vk; \n– Ln is a label for Vn; \n– Z is not a label for Vn. \nDefinition: a Bn-label is a structured sequence as above, with the right-to-left \ncontinuity condition replaced by: \n– for any 1<k≤n, Lk is linked to Z or to a previous Ri. \nDefinitions: a label l is Wn-linked [respectively Bn-linked] to a Wn-label [resp. a \nBn-label] (Z, (V1, L1, R1), …, (Vn-1, Ln-1, Rn-1), (Vn, Ln)) if l is equal to Z. The index \nn in “Wn-linked” or “Bn-linked” may be dropped, as there can be no ambiguity. A \nlabel l is compatible with the above Wn-label [resp. Bn-label] if it is not Wn-linked \n[resp. Bn-linked] to it. \n \nOne can now give an alternative equivalent definition of a whip [or a braid], in \nwhich the structural and non-structural conditions are completely separated: \nDefinition: in a resolution state RS, given a candidate Z (which will be the \ntarget), a whip [respectively a braid] of length n (n ≥ 1) built on Z is a Wn-label \n[resp. a Bn-label] (Z, (V1, L1, R1), …, (Vn-1, Ln-1, Rn-1), (Vn, Ln)), such that: \n– all the Lk’s and all the Rk’s are candidates (not only labels); \n– for any 1 ≤ k < n, Rk is the only candidate for Vk compatible with Z and with \nall the previous right-linking candidates (i.e. with Z and with all the Ri, 1 ≤ i < k); \n– Vn has no candidate compatible with Z and with all the previous right-linking \ncandidates (but Vn has more than one candidate – a non-degeneracy condition). \n11.1.2. Equivalence of whips or braids \nUntil now, we have been very strict on the targets of whips [or braids]: a whip \n[or a braid] has only one target, specified in its definition. But, sometimes there is \nanother whip [braid] with an underlying Wn-label [Bn-label] strongly equivalent \n(definition below) to that of the first whip [braid] and allowing to eliminate its own \ntarget. This entailed no problem until now, because the second whip [braid] could be \nwritten after the first and it did not change the W [B] rating of an instance. But if a \nwhip [braid] is to be inserted into another one as a right-linking pattern, then it \n\n11. Wp-whips, Bp-braids and the T&E(2) instances     \n291 \n \nshould not be counted several times if it serves to justify several t-candidates. The \nfollowing definitions palliate this problem. Notice that, in the manual editing of all \nour previous resolution paths, we have implicitly used them, every time two \neliminations appeared in the same line. \nDefinition (structural): two Wn-labels [Bn-labels] are strongly equivalent if they \ndiffer only by their targets. This is obviously an equivalence relation. \nDefinition (non-structural): in a resolution state RS, two whips [braids] of length \nn are strongly equivalent if their underlying Wn-labels [Bn-labels] are strongly \nequivalent. This is an equivalence relation. \nRemarks about strongly equivalent whips [resp. braids]:  \n– the definition entails that the whips [resp. braids] have the same t-candidates; \n– it also supposes that, for each CSP variable of the common Wn- [resp. Bn-] \nlabel, every candidate that is not a left-linking, t- or right- linking candidate must be \na z-candidate for both whips [braids] simultaneously (i.e. it is linked to their two \ndifferent targets); \n– due to the second remark, there is no simple way of replacing this definition \nby a purely structural one; but if it is satisfied in a resolution state RS, then it will be \nsatisfied in any posterior state in which both whips [braids] are still defined; we say \nthat it is persistent, which, for some purposes, is almost as good as being structural; \n– having no z-candidates, as in t-whips [t-braids], gives rise to strongly \nequivalent whips [braids]; but this is not a necessary condition; \n– a Wn-label [Bn-label] can be interpreted as a potential whip [braid], waiting for \nthe elimination of some candidates from its CSP variables before it becomes an \nactual one. \nDefinition (non-structural): an extended target of a whip W in a resolution state \nRS is a target of any whip strongly equivalent to W in RS. \nRemarks: \n– there is an obvious correspondence between a W1-label and the set consisting \nof a g-label and its targets (seen as whip[1] targets); and a label l is g-linked to a g-\nlabel g if and only if l is an extended target of the W1-label corresponding to g; \n– if Z’ is an extended target of a whip W in a resolution state RS, then it remains \none in any posterior resolution state in which W (or a strongly equivalent whip) is \nstill present and Z’ is still a candidate; being an extended target is a persistent \nproperty; \n– however, a candidate Z’ that is not an extended target for W in RS may \nbecome one in a posterior resolution state RS’, in case all the z-candidates of W in \nRS that are not t-candidates of W and that are not linked to Z’, have been eliminated \nalong the path between RS and RS’. \n\n292 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nDefinition (non-structural): a candidate C is compatible with a whip W in a \nresolution state RS if it is not an extended target of W in RS. Transposing the above \nremarks: if C is incompatible with a whip W in RS, then it remains incompatible \nwith W in any posterior resolution state in which W is still present and C is still a \ncandidate; but if C is compatible with W in RS, it may become incompatible with W \nin a posterior resolution state. It is therefore necessary to be always clear about the \nresolution state under consideration. Said otherwise, incompatibility with a whip is \npersistent, compatibility is not. \n11.1.3. Definition of Wp-whips, Wp-braids and Bp-braids \nSpecial care must be taken with the definition of whips accepting inner whips as \nright-linking patterns:  \n– global variables of the global whip and inner variables of each of its inner sub-\nwhips must not be confused;  \n– similarly, global and inner left-to-right linking conditions must not be \nconfused;  \n– for a proper definition of the global size, the conditions must be written in a \nform that does not allow degeneracy of the inner whips; fortunately, this is much \neasier to do than for inner Subsets: one only has to make sure that contradictions in \nthe inner whips can only occur on their last CSP variables (i.e. not before); \n– it must not be forgotten that, as is always the case for all the inner patterns of \ngeneralised whips, inner whips will appear as “reversed” whips (modulo the target \nand the previous right-linking objects), in the sense that their targets will have to \nappear as the next left-linking candidate. \nDefinition: in any resolution state RS of any CSP, for any n≥1 and 1≤p<n, a Wp-\nwhip[n] is a structured list (Z, (V1, L1, R1, q1), …, (Vm-1, Lm-1, Rm-1, qm-1), (Vm, Lm, \nqm)), with m≤n, that satisfies the following structural and non-structural conditions: \n \nstructural conditions (that could be considered as defining a “Wp-regular sequence \nof length n”): \n– all the qk’s are integers; 1≤qk≤p for all 1≤k≤m, qm = 1 and n = ∑1≤k≤m qk; \n– for any 1≤k≤m, Vk is a CSP variable; \n– for each 1≤k≤m, Lk is a label for Vk; \n– for each 1≤k<m, Rk is a label or a W1-label if qk=1 and it is a Wqk-label if \nqk>1; \n– L1 is linked to Z; \n– right-to-left continuity: for any 1≤k≤m, Lk is linked or Wk-1-linked to Rk-1; \n– for any 1≤k<m, the following “strong continuity or strong W-continuity from \nLk to Rk”, implying “continuity or W-continuity from Lk to Rk”, is satisfied:  \n\n11. Wp-whips, Bp-braids and the T&E(2) instances     \n293 \n \n- if qk=1 and Rk is a label, then Rk (as well as Lk) is a label for Vk;  \n- if qk≥1 and Rk is a Wqk-label, then Vk is one of its CSP variables (it does not \nhave to be the last one – see the comments after Figure 11.4); \n– Z is not a label for Vm; \n \nnon-structural conditions: \n– Z and all the Lk’s are candidates (not only labels); \n– for any 1≤k<m: if qk=1 and Rk is a label, then, Rk is the only candidate for Vk \ncompatible in RS with Z and with all the previous right-linking patterns Ri; if qk≥1 \nand Rk is a Wqk-label (Zk, (Vk,1, Lk,1, Rk,1), …, (Vk,i, Lk,i, Rk,i), …, (Vk,qk-1, Lk,qk-1, \nRk,qk-1), (Vk,qk, Lk,qk)), then: \n- for each i<qk: Lk,i and Rk,i are candidates (not only labels) for CSP variable \nVk,i of Rk; \n- for each i<qk: Rk,i is the only candidate for Vk,i compatible in RS with Z, \nwith the previous right-linking patterns Ri (i<k) of the global Wp-whip[n] being \ndefined, with the previous right-linking candidates Rk,i’ (i’<i) inside Rk, and with Zk;  \n- Lk,qk is a candidate for Vk,qk (not only a label); Vk,qk has no candidate \ncompatible in RS with Z, with the previous right-linking patterns Ri (i<k) of the \nglobal Wp-whip[n] being defined, with the previous right-linking candidates Rk,i \n(i<qk) inside Rk and with Zk (but Vk,qk has more than one candidate compatible in RS \nwith Z and with the previous right-linking objects Ri (i<k) of the global Wp-whip – \nthis is the non-degeneracy condition of the inner Rk whip); \n– Vm has no candidate compatible in RS with the target and with all the previous \nright-linking objects of the global Wp-whip (but Vm has more than one candidate – \nthe usual non-degeneracy condition of the global Wp-whip). \n \nRemark: for all n, a W1-whip[n] is the same thing as a g-whip[n]. \nDefinition: for any n≥1 and 1≤p<n, a Wp-braid[n] is a structured list as above, \nwith the structural right-to-left continuity condition of a Wp-whip[n] replaced by: \n– for any 1≤k≤m, Lk is linked or W-linked to Z or to a previous Ri. \nDefinition: in the previous definition, if the inner Wqk-labels are replaced by \nBqk-labels, one obtains Bp-braids[n]. \nDefinitions: in any of the above defined Wp-whips or Bp-braids, a candidate \nother than Lk for any of the “global” CSP variables Vk is called a global t- \n[respectively global z-] candidate if it is incompatible with a previous right-linking \npattern [resp. with the target Z]; a candidate for a “local” or “inner” CSP variable \nVk,i of an inner braid Rk is called a local (or inner) t- [respectively local (or inner) z-] \n\n294 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ncandidate if it is incompatible with a previous local right-linking candidate Rk,j , j<i \n[resp. with the local target Zk of Rk]. \nNotice that a candidate can be at the same time global and local, z- and t-. Notice \nalso that, as in all our previous definitions, the (global or local) z- and t- candidates \nare not considered as being part of the Wp-whip or Bp-braid patterns. \nRemarks:  \n– in the above definitions, as in any of the previously defined types of \ngeneralised whips or braids, left-linking elements of the global Wp-whip [Bp-braid] \nare mere candidates (and not more general patterns); \n– as shown by the fact that inner whips or braids are “reversed” (see Figure 11.2 \nor the proof of the Wp-whip elimination theorem), the acceptance of whips[p] or \nbraids[p] as right-linking patterns amounts to accepting some form of look-ahead of \nsize p (a form different, globally less restricted than that accepted in Sp-whips or Sp-\nbraids); \n– in the same way as all the types of braids we have met before, Bp-braids[n] are \ninteresting for the confluence property of the BpBn theories and for the “T&E(Bp) vs \nBpB” theorem (see proofs below); and Wp-whips are interesting as a simpler (and \nhopefully good) approximation of Bp-braids; \n– one could also define Bp-whips[n]; a priori, there does not seem to be any \ngood reason for imposing an “outer” continuity condition if the inner bricks do not \nenjoy their own inner continuity, but it may be useful as an approximation tool. \n11.1.4. Graphico-symbolic representations \nThe symbolic representations in Figures 11.1 and 11.2 may help understand how \na partial W2-whip[3] differs from an ordinary partial whip[3]. In these Figures: \n– black horizontal lines represent CSP variables; they are supposed to have \ncandidates only at their extremities or at their meeting points with arrows; \n– dark grey straight oblique arrows represent links from Z to L1 or from Rk to \nLk+1 and also, in the second Figure, inner links from Ri,k to Li,k+1; \n– light grey arrows represent links to z- or t- candidates in the global whip and \n(in the second Figure) in an inner whip (the straight ones represent links to \ncandidates in the same g-label as the next left-linking candidate);  \n– the straight double-sided dark grey arrow in the second Figure represents the \ndouble role of L2 as a target of the inner whip (descending arrow) and as the next \nleft-linking candidate (ascending arrow); \n– the orientations of arrows represent the way links are used in the proof of the \nwhip or W2-whip rule; by themselves, links are not orientated; but these orientations \nalso illustrate the idea that inner whips correspond to some form of look-ahead. \n\n11. Wp-whips, Bp-braids and the T&E(2) instances     \n295 \n \n \n \nL1,2 \nL1,1 \nL1 \nZ \nV1=V1,2 \nV1,1 \nR1,1 \nL2 \nR2 \nV2 \nFigure 11.2. A graphico-symbolic representation of a partial W2-whip[3]. One can \nsee an inner whip[2] modulo Z, with target L2: (L2, (V1,1, L1,1, R1,1) (V1,2, L1,2)).  \n \nFigure 11.1. A graphico-symbolic representation of a partial whip[3] \n \nL1 \nV1 \nR1 \nL3 \nV3 \nR3 \nZ \nL2 \nV2 \nR2 \n\n296 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n11.1.5. Elimination theorems \nTheorem 11.1 (Wp-whip elimination theorem): given a Wp-whip, one can \neliminate its target.  \nProof : obvious. The main point was having the correct definitions. If Z was \nTrue, then L1 and all the candidates linked to Z (the global z-candidates) would be \neliminated by ECP; if R1 is a label, then it would be asserted by S; if R1 is a Wq1-\nlabel, then, after these first series of eliminations, it would be a whip[q1] with target \nL2 and L2 would be eliminated by rule Wq1. We can iterate until we reach Lm would \nbe eliminated by ECP or by rule Wqm-1. (As usual, the global t-candidates would be \nprogressively eliminated by ECP or some Wqk). The last condition implies that Vm \nwould have no possible value. \nTheorem 11.2 (Bp-braid elimination theorem): given a Bp-braid, one can \neliminate its target.  \nProof : almost the same as the proof for Wp-whips (with any reference to Wqk \nreplaced by one to Bqk), the main difference being the condition replacing right-to-\nleft continuity, which still implies that Lk would be eliminated by ECP. \n11.1.6. Wp-whip and Bp-braid resolution theories; the WpW and BpB ratings \nFor each integer p with 1 ≤ p ≤ ∞, one can define an increasing sequence (WpWn, \nn≥0) of resolution theories based on Wp-whips: \n– WpW0 = BRT(CSP), \n– WpW1 = WpW0 ∪{rules for Wp-whips of length 1} = W1, \n– … \n– WpWn = WpWn-1 ∪{rules for Wp-whips of length n}, \n– WpW∞ = ∪n≥0 WpWn. \nOne has obvious similar definitions for (BpBn, n≥0).  \nAnd, for each 1≤p≤∞, one can also define in the usual way the WpW \n[respectively BpB] rating associated with the increasing sequence (WpWn, n≥0) \n[resp. BpBn, n≥0] of resolution theories. It is obvious that, for any instance Q, \nWpW(Q) [resp. BpB(Q)], considered as a function of p, is non-increasing. \nOne can also define the WW and BB ratings as being equal to W∞W and B∞B, \nrespectively, when no restriction is put a priori on the lengths of the inner whips \n[resp. braids] (of course, in each W-whip [resp. B-braid], they can only be smaller \nthan its global length). \nRemarks: \n\n11. Wp-whips, Bp-braids and the T&E(2) instances     \n297 \n \n– it was important to properly define the length of a Wp-whip [or Bp-braid] in a \nway that takes into account the lengths of all its elements, because some Wp-whips \n[or Bp-braids] may be equivalent to (g)Sp-whips [or (g)Sp-braids]; for consistency of \nthe ratings, they must be given the same size, whichever way they are considered; \n– with the confluence property of all the BpBn resolution theories (see section \n11.2), the BpB ratings have the same good properties as those mentioned for \nprevious generalised braid theories; however, non-anticipativeness is no longer true; \nit is replaced by a restricted form of look-ahead, controlled by the maximum size p \nof the inner braids; \n– as an obvious corollary to theorem 11.5 below, the BB rating is finite for any \ninstance of a CSP that can be solved by T&E(2). In Sudoku, this entails that all the \nknown minimal puzzles have a finite BB rating – a rating that is obviously \ninvariant under symmetry and supersymmetry. \n11.1.7. gSpWn+WpWn and gSpWn+BpBn theories; associated ratings \nAllowing gSp-subsets or whips[p] as right-linking patterns in different whips, \none can hope to get still more powerful resolution theories. For each 1≤p≤∞, one \ncan define an increasing sequence gSpWn+WpWn, 0≤n≤∞, of resolution theories: \n– gSpW0+WpW0 = BRT(CSP), \n– gSpW1+WpW1 = gSpW0+WpW0 ∪ gSpW1 ∪ WpW1 = W1, \n– … \n– gSpWn+WpWn = gSpWn-1+WpWn-1 ∪ gSpWn ∪ WpWn, \n– … \n– gSpW∞+WpW∞ = ∪n≥0 gSpWn+WpWn. \nOne can introduce obvious similar definitions for gSpBn +BpBn, 0≤n≤∞.  \nAnd, for each 1≤p≤∞, one can define in the usual way the gSpW+WpW \n[respectively gSpB+WpB] rating associated with the increasing sequence \ngSpWn+WpWn, n≥0, [resp. gSpBn+BpBn, n≥0] of resolution theories.  \nOne can also define the gSW+WW and gSB+BB ratings in the usual way. \nIt is a straightforward corollary to lemma 4.1 and theorems 10.15 and 11.3 \n(below) that all the gSpBn+BpBn resolution theories are stable for confluence and \nhave the confluence property. A “simplest first” strategy can therefore be defined. \nOr rather several “simplest first” strategies: the question is, for each n, do we give \nprecedence to gSp-braids[n] or to Bp-braids[n]? These definitions leave us the \nfreedom of choosing priorities between Subsets and whips. Moreover, the (probably \nlimited) increased resolution power of these combined theories (with respect to the \nBp-braids) is probably not worth its cost in terms of computational complexity. \n\n298 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n11.1.8. (gSp+Wp)-whip and (gSp+Bp)-braid theories; associated ratings \nGoing one step further, one can allow both gSp-subsets and whips[p] as right-\nlinking patterns in the same whips, in the hope of getting the most powerful theories. \nFor each 1≤p≤∞, one can define an increasing sequence (gSp+Wp)Wn, 0≤n≤∞, of \nresolution theories: \n– (gSp+Wp)W0 = BRT(CSP), \n– (gSp+Wp)W1 = W1, \n– … \n– (gSp+Wp)Wn = (gSp+Wp)Wn-1 ∪ {rules for whips of total length n, with inner \ngSp-subsets and Wp-whips}, \n– … \n– (gSp+Wp)W∞ = ∪n≥0 (gSp+Wp)Wn. \nOne can introduce obvious similar definitions for (gSp+Bp)Bn, 0≤n≤∞.  \nAnd, for each 1≤p≤∞, one can define in the usual way the (gSp+Wp)W \n[respectively (gSp+Bp)B] rating associated with the increasing sequence \n(gSp+Wp)Wn, n≥0, [resp. (gSp+Wp)Bn, n≥0] of resolution theories.  \nOne can also define the (gS+W)W and (gS+B)B ratings in the usual way. \nContrary to the previous case, the confluence property of the (gSp+Bp)Bn \nresolution theories must now be proven directly; this can be done by combining the \nproofs for the gSpBn and the BpBn theories (we leave it as an exercise for the reader). \nA “simplest first” strategy can therefore be defined, or rather several “simplest first” \nstrategies, each providing all the (gSp+Bp)B ratings with good properties. But, as in \nthe previous case, the (probably limited) increased resolution power is probably not \nworth the computational cost of so complex braids. \n11.1.9. More graphico-symbolic representations \n11.1.9.1. Similarities between Subsets and whips \nAs suggested by the proof of confluence in the next section, there is a \nremarkable and deep similarity between Subsets and whips/braids of same size p. \nThe definitions of both concepts involve p different CSP variables and p sets of \ncandidates for these variables:  \n– for Sp-subsets: p transversal sets of candidates, defined by p fixed constraints; \n– for whips/braids[p]: p sets consisting of candidates linked (by any constraint) \nto the target or to one of the previous right-linking candidates (a total of p also!). \n \nThese similarities can be represented symbolically in Figure 11.3 (for p = 4). \n\n11. Wp-whips, Bp-braids and the T&E(2) instances     \n299 \n \n \n \nHorizontal black lines represent CSP variables in {V1, V2, V3, V4}. In a Subset \n(leftmost part of the Figure), each vertical grey line represents a fixed constraint in \n{c1, c2, c3, c4}. In a whip or a braid (rightmost part of the Figure), each of these lines \nrepresents the existence of a link (along any constraint) with the target or with a \ndetermined element in the sequence of p-1 right-linking candidates. In horizontal \nlines, candidates may exist only at the intersections with vertical lines; in the \nwhip/braid case, an intersection may represent several candidates (in the same g-\nlabel for the corresponding CSP variable). In spite of their deep conceptual \ndifferences, the ideas represented by “vertical lines” can be used in much the same \nways in several proofs, such as the confluence property and the “T&E(Bp) vs Bp-\nbraids” theorem.  \nFor whips, the rightmost part of this Figure is an alternative view to that of \nFigure 11.1. The latter stressed the various links the target or a right-linking \ncandidate can have with z- and/or t- candidates for various posterior CSP variables. \nThe present view abstracts from these differences, considering that only the \nexistence of a link is important. We insist that, contrary to the Subsets case in the \nleftmost part of the Figure and contrary to what these vertical lines may intuitively \nsuggest, candidates in a vertical line do not have to be pairwise linked (and, in \ngeneral, they are not). \n11.1.9.2. Another graphical representation of W-whips and B-braids \nBased on the similarities between Subsets and whips or braids and on Figure \n11.3, another type of graphical representation for a W-whip can be given in Figure \n11.4, maybe more readable than that in Figure 11.2. Here, the conventions are the \nV4 \nV3 \nV2 \nV1 \nc1 \nc2 \nc3 \nc4 \nV4 \nV3 \nV2 \nV1 \nZ \nR1 \nR2 \nR3 \nFigure 11.3. A symbolic representation of the similarities between a Subset and a whip  \n \n\n300 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nsame as in Figure 11.3: a horizontal black line represents a CSP variable, a vertical \ngrey arrow represents the existence of a link (along any constraint) with the \ncandidate (target or right-linking) at the origin of the arrow. It is supposed that, in \nthe current resolution state, candidates for a CSP variable are present only at its \nintersection with some vertical arrow (and an intersection may represent several \ncandidates in the same g-label for this CSP variable). \n \nRead from left to right, this example starts with a standard partial whip[2] with \ntarget Z, CSP variables V1, V2 and right-linking candidates R1, R2. Then, there \nappears an inner whip[3] with target Z’=L4 (which will be the left-linking candidate \nfor the next part of a larger global W-whip), inner CSP variables V3,1, V3,2 and V3,3, \nand inner right-linking candidates R3,1 and R3,2. Here, CSP variable V3,3 has no  \ncandidate compatible with Z, R1, R2, Z’=L4, R3,1 and R3,2.  \nNotice that, if CSP variable V3,3 had no candidate linked to Z, R1 or R2, the final \ncontradiction in the inner whip would still occur in V3,3, but V3 could not be taken to \nbe V3,3. (This illustrates why, in our definition in section 11.1.3, Vk does not have to \nbe the last element of Wk). \nFigure 11.4. A symbolic representation of a partial W3-whip[5] \nV1 \nV2 \nZ \nR1 \nR2 \nZ’, L4 \nV3,1 \nV3,2 \nV3,3 \nR3,1 \nR3,2 \n\n11. Wp-whips, Bp-braids and the T&E(2) instances     \n301 \n \n11.2. The confluence property of the BpBn resolution theories \nWe now prove the main property of Bp-braid resolution theories. \nTheorem 11.3: each of the BpBn resolution theories (1 ≤ p ≤ ∞, 0 ≤ n ≤ ∞) is \nstable for confluence; therefore, it has the confluence property.  \nProof: in order to keep the same notations as in the proofs for the g-braids \n(section 7.5) and the Sr-braids (section 9.4), we prove the result for BrBn, r and n \nfixed.  \nWe must show that, if an elimination of a candidate Z could have been done in a \nresolution state RS1 by a Br-braid B of length n’ ≤ n and with target Z, it will always \nstill be possible, starting from any further state RS2 obtained from RS1 by \nconsistency preserving assertions and eliminations, if we use a sequence of rules \nfrom BrBn. Let B be: {L1 R1} – {L2 R2} – …. – {Lp Rp} – {Lp+1 Rp+1} – … – {Lm .}, \nwith target Z, where the Rk’s are candidates or braids in Br modulo Z and the \nprevious Ri’s. For inner braids, we use the notations in the definition (section 11.1). \nThe proof follows the same general lines as that for g-braids and Sr-braids. \nIndeed, it is remarkably close to that for Sr-braids, with transversal sets replaced by \nthe sets of candidates linked to some right-linking object (see the similarities in \nFigure 11.3 and discussion in section 11.2.2). For technical reasons, we keep a \nseparate case for inner braids of length 1, i.e. g-whips. \nConsider first the state RS3 obtained from RS2 by applying repeatedly the rules \nin BRT until quiescence. As BRT has the confluence property by theorem 5.6, this \nstate is uniquely defined. (Notice that, thanks to theorem 5.6 and the inclusion \nBn ⊂ BrBn, we could use Bn instead of BRT, but, apart from dispensing us of \nintroducing marks, it does not seem to make the proof simpler.) \nIf, in RS3, target Z has been eliminated, the proof is finished. If target Z has been \nasserted, then the instance of the CSP is contradictory; if not yet detected in RS3, \nthis contradiction can be detected by CD in a state posterior to RS3, reached by a \nseries of applications of rules from Br, following the Br-braid structure of B.  \nOtherwise, we must consider all the elementary events related to B that can have \nhappened between RS1 and RS3, as well as those we must provoke in posterior \nresolution states RS. For this, we start from B’ = what remains of B in RS3 and we \nlet RS = RS3. At this point, B’ may not be an Sr-braid in RS. We progressively \nupdate RS and B’ by repeating the following procedure, for p = 1 to p = m, until it \nproduces a new (possibly shorter) Br-braid B’ with target Z in resolution state RS – \na situation that is bound to happen. We return from this procedure as soon as B’ is a \nBr-braid in RS. All the references below are to the current RS and B’. \n\n302 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \na) If, in RS, any candidate that had negative valence in B – i.e. the left-linking \ncandidate, or any t- or z- candidate, of CSP variable Vp, or any global or local t- or \nz- candidate of Rp in case Rp is an inner braid – has been asserted (this can only be \nbetween RS1 and RS3), then all the candidates linked to it have been eliminated by \nrelevant rules from BRT in RS3, in particular: Z and/or all the candidate(s) Rk (k<p) \nto which it is linked, and/or all the elements of the g-candidate(s) Rk (k<p) to which \nit is g-linked, and/or all the inner candidates to which it is linked of the inner Rk \nbraids (k<p) to which it is B-linked (by the definition of a Br-braid); if Z is among \nthem, there remains nothing to prove; otherwise, the procedure has already either \nbeen successfully terminated by case f1 or f2α and/or dealt with by case d2 of the \nprevious such k’s for which Rk is an inner braid of length qk ≥ 2. \nb) If, in RS3, left-linking candidate Lp has been eliminated (but not asserted), it \ncan no longer be used as a left-linking candidate in a Br-braid. Suppose that either \nCSP variable Vp still has a z- or a t- candidate Cp, or that Rp is an inner braid of \nlength qp ≥ 2 and there is another CSP variable Vp’ in its Wp sequence of CSP \nvariables such that Vp’ still has a z- or a t- candidate Cp; then, in B’, replace Lp by Cp \nand (in the latter case) Vp by Vp’. Now, up to Cp, B’ is a partial Br-braid in RS with \ntarget Z. Notice that, even if Lp was linked or g-linked or B-linked to Rp-1 (e.g. if B \nwas a Br-whip) this may not be the case for Cp; therefore trying to prove along the \nsame lines a similar theorem for Br-whips would fail here. \nc) If, in RS, any t- or z- candidate of Vp or of the inner braid Rp (if Rp is an inner \nbraid) has been eliminated (but not asserted), this has not changed the basic structure \nof B (at stage p). Continue with the same B’. \n \nd) Consider now assertions occurring in right-linking objects of the global Br-\nbraid. There are two cases instead of one for g-braids: assertions occurring in a \nright-linking candidate or g-candidate (case d1) and assertions occurring anywhere \nin an inner braid Rp of length qp ≥ 2 (case d2). \nd1) If, in RS, right-linking candidate Rp or a candidate Rp’ in right-linking g-\ncandidate Rp has been asserted (p can therefore not be the last index of B’), Rp can \nno longer be used as an element of a Br-braid, because it is no longer a candidate or \na g-candidate. As in the proof for Sr-braids, and only because of this d1 case, we \ncannot be sure that this assertion occurred in RS3. We must palliate this. First \neliminate by ECP or W1 any left-linking or t- candidate for any CSP variable of B’ \nafter p, including those in the inner braids, that is incompatible with Rp, i.e. linked or \ng-linked to it, if it is still present in RS. Now, considering the Br-braid structure of B \nupwards from p, more eliminations and assertions can be done by rules from Br. \n(Notice that, as in the Sr-braids case, we are not trying to do more eliminations or \nassertions than needed to get a Br-braid in RS; in particular, we continue to consider \n\n11. Wp-whips, Bp-braids and the T&E(2) instances     \n303 \n \nRp, not Rp’; in any case, it will be excised from B’; but, most of all, we do not have \nto find the shortest possible Br-braid!) \nLet q be the smallest number strictly greater than p such that CSP variable Vq or \nsome CSP variable Vq’ in Wq still has a global left-linking, t- or z- candidate Cq that \nis not linked, g-linked or B-linked to any of the Ri for p ≤ i < q. (For index q, there is \nthus a Vq’ in Wq and a candidate Cq for Vq’ such that Cq is linked, g-linked or B-\nlinked to Z or to some Ri with i < p.)  \nApply the following rules from Br (if they have not yet been applied between \nRS2 and RS) for each of the CSP variables Vu (and all the Vu,i in Wu if Ru is an inner \nbraid) with index (or first index) u increasing from p+1 to q-1 included: \n- eliminate by ECP or W1 or some Br’ (r’≤r) any candidate for any CSP variable in \nWu that is incompatible with Ru-1; \n- at this stage, CSP variable Vu has no left-linking, z- or t- candidate and there \nremains no global t- or z- candidate in Wu if Ru is an inner braid; \n- if Ru is a candidate, assert it by S and eliminate by ECP all the candidates for CSP \nvariables after u, including those in the inner braids, that are incompatible with Ru in \nthe current RS; \n- if Ru is a g-candidate, it cannot be asserted; eliminate by W1 all the candidates for \nCSP variables after u, including those in the inner braids, that are incompatible with \nRu in the current RS; \n- if Ru is an inner braid in Bqu, it cannot be asserted by Bqu; eliminate by Bqu all the \ncandidates for CSP variables after u, including those in the inner braids, that are \nincompatible with Ru in the current RS (this includes the target of Ru). \nIn the new RS thus obtained, excise from B’ the part related to CSP variables \nand inner braids p to q-1 (included); if Lq has been eliminated in the passage from \nRS2 to RS, replace it by Cq (and, if necessary, replace Vq by Vq’); for each integer \ns ≥ p, decrease by q-p the index of CSP variable Vs, of its candidates and inner right-\nlinking pattern (g-candidate or braid) and of the set Ws, in the new B’. In RS, B’ is \nnow, up to p (the ex q), a partial Br-braid in BrBn with target Z. \nd2) If, in RS, a candidate Cp in a right-linking braid Rp with qp≥2 has been \nasserted or eliminated or marked in a previous step, Rp can no longer be used as \nsuch as a right-linking inner braid of a Br-braid, because it may no longer be an \ninner braid. Moreover, there may be several such candidates in Rp; consider them all \nat once. Notice that candidates can only have been asserted as values in the \ntransition from RS1 to RS3 (the candidates asserted in case d1 are all excised from \nB’) and that all the candidates for their CSP variables and all the (global or local) t-\ncandidates they justified in B have also been eliminated in this transition.  \nDelete from Rp the CSP variables and the local t-candidates corresponding to \nthese asserted candidates. Call Rp’ what remains of Rp and replace Rp by Rp’ in B’. \nA few more questions must be dealt with:  \n\n304 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n- is there still a candidate for one of the CSP variables of Rp’ that could play the role \nof a left-linking candidate for Rp’? If not, Rp’ has already become an autonomous \nbraid in RS3; excise it from B’, together with a whole part of B’ after it, along the \nsame lines as in case d1; \n- is Rp’ still linked to the next part of B’? If not, excise it from B’, together with a \nwhole part of B’ after it, as in the previous case; \n- Rp’ may be degenerated (modulo Z and the previous Rk’s); this can easily be fixed \nby replacing Rp’ with a sequence of right-linking candidates and/or smaller inner \nbraids (modulo Z and the previous Rk’s); \n- Rp’ or the sequence of right-linking candidates and/or smaller inner braids \nreplacing it may have more targets than Rp; if any of these is a right-linking \ncandidate or an element of a right-linking g-candidate or of an inner Br’-braid of B’ \nfor some index after p, then mark it so that the information can be used in cases d2, \nf1, f2 or f3 of later steps. \nIn RS, B’ is now, up to p (the ex q), a partial Br-braid in BrBn with target Z. \n \ne) If, in RS, a left-linking candidate Lp has been eliminated (but not asserted) and \nCSP variable Vp has no t- or z- candidate in RS2 (complementary to case b), we now \nhave to consider three cases instead of the two we had for g-braids.  \ne1) If Rp is a candidate, then Vp has only one possible value, namely Rp; if Rp \nhas not yet been asserted by S somewhere between RS2 and RS, do it now; this case \nis now reducible to case d1 (because the assertion of Rp also entails the elimination \nof Lp); go back to case d1 for the same value of p (in order to prevent an infinite \nloop, mark this case as already dealt with for the current step). \ne2) If Rp is a g-candidate, then Rp cannot be asserted by S; however, it can still \nbe used, for any CSP variable after p, to eliminate by W1 any of its t-candidates that \nis g-linked to Rp. Let q be the smallest number strictly greater than p such that, in \nRS, CSP variable Vq still has a global left-linking, t- or z- candidate Cq that is not \nlinked or g-linked or B-linked to any of the Ri for p ≤ i < q. Replace RS by the state \nobtained after all the assertions and eliminations similar to those in case d1 above \nhave been done. Then, in RS, excise the part of B’ related to CSP variables p to q-1 \n(included), replace Lq by Cq (if Lq has been eliminated in the passage from RS2 to \nRS) and re-number the posterior elements of B’, as in case d1. In RS, B’ is now, up \nto p (the ex q), a partial Br-braid in BrBn with target Z. \ne3) If Rp is an inner braid, then Rp is no longer linked via Lp to a previous right-\nlinking element of the braid. If none of the CSP variables Vp’ in Wp has a z- or t- \ncandidate Cp that can be linked, g-linked or B-linked to Z or to a previous Ri, \n(situation complementary to case b), it means that the elimination of Lp has turned \nRp into an unconditional braid. Let q be the smallest number strictly greater than p \nsuch that, in RS, CSP variable Vq has a global left-linking, t- or z- candidate Cq that \n\n11. Wp-whips, Bp-braids and the T&E(2) instances     \n305 \n \nis not linked or g-linked or B-linked to any of the Ri for p ≤ i < q. Replace RS by the \nstate obtained after all the assertions and eliminations similar to those in case d1 \nabove have been done. Then, in RS, excise the part of B’ related to CSP variables p \nto q-1 (included), replace Lq by Cq (if Lq has been eliminated in the passage from \nRS2 to RS) and re-number the posterior elements of B’, as in case d1. In RS, B’ is \nnow, up to p (the ex q), a partial Br-braid in BrBn with target Z. \n \nf) Finally, consider eliminations occurring in a right-linking object Rp. This \nimplies that p cannot be the last index of B’. There are three cases. \nf1) If, in RS, right-linking candidate Rp of B has been eliminated (but not \nasserted) or marked, then replace B’ by its initial part:  \n{L1 R1} – {L2 R2} – …. – {Lp .}. At this stage, B’ is in RS a (possibly shorter) Br-\nbraid with target Z. Return B’ and stop. \nf2) If, in RS, a candidate in right-linking g-candidate Rp has been eliminated (but \nnot asserted) or marked, then: \nf2α) either there remains no unmarked candidate of Rp in RS; then replace B’ by \nits initial part: {L1 R1} – {L2 R2} – …. – {Lp .}; at this stage, B’ is in RS a (possibly \nshorter) Br-braid with target Z; return B’ and stop; \nf2β) or the remaining unmarked candidates of Rp in RS still make a g-candidate \nand B’ does not have to be changed; \nf2γ) or there remains only one unmarked candidate Cp of Rp; replace Rp by Cp in \nB’. We must also prepare the next steps by putting marks. Any t-candidate of B that \nwas g-linked to Rp, if it is still present in RS, can still be considered as a t-candidate \nin B’, where it is now linked to Cp instead of g-linked to Rp; this does not raise any \nproblem. However, this substitution may entail that candidates that were not t-\ncandidates in B become t-candidates in B’; if they are left-linking candidates of B’, \nthis is not a problem either; but if any of them is a right-linking candidate or an \nelement of a right-linking g-candidate or of an inner braid of B’, then mark it so that \nthe same procedure (i.e. f1, f2 or f3) can be applied to it in a later step. \nf3) If, in RS, a candidate Cp in right-linking braid Rp of length qp ≥ 2 has been \neliminated (but not asserted) or marked, this has been dealt with in case d2. \nNotice that this proof works only because the notions of being linked and g-\nlinked do not depend on the resolution state (they are structural) and the notion of \nbeing B-linked is persistent. \n\n306 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n11.3. The “T&E(Bp) vs Bp-braids” and “T&E(2) vs B-braids” theorems \nFor Bp-braids, for any p≥1, we are now prepared to expect some extension of the \n“T&E vs braids” theorem, a “T&E(Bp) vs Bp-braids”; it will be theorem 11.4. But, \nthe really new result (with respect to our above-mentioned expectations) is, if p is \ninfinite, there will also appear a new kind of extension, the “T&E(2) vs B-braids” \ntheorem (theorem 11.5), associated with the iteration of T&E at depth 2. \n11.3.1. The “T&E(Bp) vs Bp-braids” theorem \nAs the T&E(T, Z, RS) procedure can been defined for any resolution theory T \nwith the confluence property (see section 5.6.1), T&E(Bp, Z, RS) can be defined for \nevery p. It is obvious that an elimination done by a Bp-braid can be done by \nT&E(Bp). The converse is true: \nTheorem 11.4: for any p≥1, any elimination done by T&E(Bp) can be done by \na Bp-braid. As a result, any puzzle solvable by T&E(Bp) can be solved by Bp-\nbraids. \nProof: it is an easy adaptation of that for g-braids (which are the case p=1 of Bp-\nbraids). As the above proof of confluence, it is also remarkably close to the proof for \nSp-braids, with transversal sets replaced by the sets of candidates linked to some \nright-linking object (see the similarities in Figure 11.3). \nLet RS be a resolution state and let Z be a candidate eliminated by T&E(Bp, Z, \nRS), using some auxiliary resolution state RS’. Following the successive \napplications of rules from resolution theory Bp in RS’, we progressively build a Bp-\nbraid in RS with target Z. First, remember that Bp contains only four types of rules: \nECP (which eliminates candidates), Bp’ (which eliminates targets of Bp’-braids, \np’≤p), S (which asserts a value for a CSP variable) and CD (which detects a \ncontradiction on a CSP variable).  \nConsider the sequence (P1, P2, …, Pk, …Pm) of rule applications in RS’ based on \nrules from Bp different from ECP and suppose that Pm is the first occurrence of CD \n(there must be at least one occurrence of CD if Z is eliminated by T&E(Bp, Z, RS)). \nWe first define the Rk, Vk, Wk and qk sequences, for k < m: \n- if Pk is of type S, then it asserts a value Rk for some CSP variable Vk; let Wk = \n{Vk} and qk=1; \n- if Pk is of type Bp’, then define Rk as the non degenerated Bp’-braid used by the \ncondition part of Pk, as it appears at the time when Pk is applied; let Wk be the \nsequence of CSP variables of Rk and qk=p’; in this case, Vk will be defined later. \nWe shall build a Bp-braid[n] in RS with target Z, with the Rk’s as its sequence of \nright-linking candidates or Bqk-braids, with the Wk’s as its sequence of sequences of \nCSP variables, with the qk’s as its sequence of sizes and with n= ∑1≤k≤m qk (setting \n\n11. Wp-whips, Bp-braids and the T&E(2) instances     \n307 \n \nqm=1). We only have to define properly the Lk’s, qk’s and Vk’s with Vk ∈ Wk. We \ndo this by recursion, successively for k = 1 to k = m. As the proofs for k = 1 and for \nthe passage from k to k+1 are almost identical, we skip the case k = 1. Suppose we \nhave done it until k and consider the set Wk+1 of CSP variables.  \nWhatever rule Pk+1 is (S or Bqk+1), the fact that it can be applied means that, \napart from Rk+1 (if it is a candidate) or the labels contained in Rk+1 (if it is an Sqk+1-\nbraid), all the other labels for all the CSP variables in Wk+1 that were still candidates \nin RS (and there must be at least one, say Lk+1, for some CSP variable Vk+1 of Wk+1) \nhave been eliminated in RS’ by the assertion of Z and the previous rule applications. \nBut these previous eliminations can only result from being linked or B-linked to Z \nor to some Ri, i≤k. The data Lk+1, Rk+1 and Vk+1 ∈ Wk+1 therefore define a legitimate \nextension for our partial Bp-braid. \nEnd of the procedure: at step m, a contradiction is obtained by CD for a CSP \nvariable Vm. It means that all the candidates for Vm that were still candidates for Vm \nin RS (and there must be at least one, say Lm) have been eliminated in RS’ by the \nassertion of Z and the previous rule applications. But these previous eliminations \ncan only result from being linked or B-linked to Z or to some Ri, i<m. Lm is thus the \nlast left-linking candidate of the Bp-braid we were looking for in RS and we can take \nWm={Vm}. qed. \nHere again (as in the proof of confluence), this proof works only because the \nnotions of being linked and g-linked are structural and the notion of being B-linked \nis persistent. It is also again very unlikely that following the T&E(Bp) procedure to \nproduce a Bp-braid, as in the construction in this proof, would produce the shortest \navailable one in resolution state RS. \n11.3.2. Definition of the T&E(T, P, n) procedure \nIn section 5.6.1, we defined the procedures T&E(T, Z, RS) and T&E(T, RS) for \nany resolution theory T with the confluence property, any candidate Z and any \nresolution state RS. We can now define the iterated versions of these procedures. \nDefinition: given a resolution theory T with the confluence property, a resolution \nstate RS and an integer n, the two procedures Trial-and-Error based on T at depth n \nfor Z in RS and Trial-and-Error based on T at depth n in RS [respectively T&E(T, Z, \nRS, n) and T&E(T, RS, n)] are defined by mutual recursion as follows:  \nT&E(T, Z, RS, 1) = T&E(T, Z, RS) and T&E(T, RS, 1) = T&E(T, RS), where \nthe right-hand sides have been defined in section 5.6.1. \nFor n>1, T&E(T, Z, RS, n) is defined as follows:  \n- make a copy RS1 of RS; in RS1, delete Z as a candidate and assert it as a value;  \n- apply T&E(T, RS1, n-1); \n\n308 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n- if RS1 has become a contradictory state (detected by CD), then delete Z from RS \n(sic: RS, not RS1); otherwise, do nothing (in particular if a solution is obtained in \nRS1, merely forget it);  \n- return the (possibly) modified RS state.  \nFor n>1, T&E(T, RS, n) is defined as follows:  \na) in RS, apply the rules in T until quiescence; if the resulting RS is a solution or a \ncontradictory state, then return it and stop; \nb) mark all the candidates remaining in RS as “not-tried”; \nc) choose some “not-tried” candidate Z, un-mark it and apply T&E(T, Z, RS, n); \nd) if Z has been eliminated from RS by this procedure,  \n       then goto a \n       else if there remains at least one “not-tried” candidate in RS \n                  then goto c else return RS and stop. \nNotice that every time a candidate is eliminated by step d of T&E(T, RS, n), all \nthe other candidates (remaining after step a) are re-marked as “not-tried” by step b. \nThus, the same candidate can be tried several times in different resolution states. \nEven with T having the confluence property, this is necessary to guarantee that the \nresult does not depend on the order used to try the candidates (in step c). \nDefinition: given a resolution theory T with the confluence property and an \ninstance P with initial resolution state RSP, we define T&E(T, P, n) as \nT&E(T, RSP, n). \nDefinition: for an instance P, the T&E-depth of P, d(P), is the smallest n≥0 such \nthat P can be solved by T&E(n), with the convention that T&E(0) = BRT(CSP). \n11.3.3. The “T&E(2) vs B-braids” theorem \nIn the previous definition, taking T = BRT(CSP) and n = 2, and forgetting as \nusual the reference to BRT(CSP), we get procedures T&E(Z, RS, 2), T&E(RS, 2) \nand T&E(P, 2). We write T&E(2) when P is clear. It is obvious that an elimination \ndone by a Bp-braid of any length can be done by T&E(2). The converse is more \ninteresting: \nTheorem 11.5: any elimination done by T&E(2) can be done by a Bp-braid[n] \nfor some p and some n. As a result, any instance solvable by T&E(2) can be solved \nby B-braids. \nThe proof is a mere iteration of the previous proof. Let RS be a resolution state \nand let Z be a candidate eliminated by T&E(Z, RS, 2), using some auxiliary \nresolution state RS’. Following the successive events in RS’, we progressively build \na Bp-braid in RS with target Z. First, notice that there are only four types of such \nevents: three are applications of rules from BRT [ECP (which eliminates \n\n11. Wp-whips, Bp-braids and the T&E(2) instances     \n309 \n \ncandidates), S (which asserts a value for a CSP variable) and CD (which detects a \ncontradiction on a CSP variable)] and the fourth is a call to some T&E(Zk+1, RSk), \nwhere RSk is the resolution state reached after the k-th event.  \nConsider the sequence (P1, P2, …, Pk, …Pm) of such events in RS’, forgetting \nthose associated with rule ECP, and suppose that Pm is the first occurrence of CD \n(there must be at least one occurrence of CD if Z is eliminated by T&E(Z, RS, 2)). \nWe first replace the Pk sequence by a sequence of rule applications: \n- if Pk is of type S, then we extend the B-braid under construction exactly as in the \nT&E(1) case; \n- if Pk is a call to T&E(Zk+1, RSk), then, applying theorem 5.7, we replace it in RSk \nby a braid[qk] with target Zk+1 for some qk≥1. There remains only to notice that such \na braid in RSk is the same thing as a Bqk-braid with target Zk+1 in RS, modulo Z and \nthe previous right-linking candidates of the global B-braid under construction. \nThe rest of the proof is as in theorem 11.4. We skip it. \n11.3.4. Application of the “T&E(2) vs B-braids” theorem to Sudoku \nAs the T&E(n) procedure is easy to code in efficient ways, it is also easy to \ncheck that all the known minimal 9×9 Sudoku puzzles can be solved by T&E(2); \ntherefore they can all be solved by B-braids and they all have a finite BB rating. \nThis includes the hardest ones recently generated by “Eleven”, as introduced in \nsection 9.6; as we had previously checked that all the published “hardest” puzzles \n(and conjectured that all the puzzles) could be solved by T&E(2), after he \nannounced his results, we asked him if it was true of his puzzles; Eleven kindly \nchecked this with his program and provided a positive answer; later, when the \nsublist of his 26,370 hardest became available, we also checked them positively for \nthis property with our independent program. For details on their BpB classification \nwith respect to parameter p, see section 11.4.2.  \nIn terms of the T&E-depth d(P), this means that there are only 3 possibilities for \nany puzzle P:  \n– d(P) = 0 ⇔ no T&E is necessary ⇔ P is solvable by BSRT; \n– d(P) = 1 ⇔ only one T&E hypothesis needs be considered at a time ⇔ P is \nsolvable by braids; \n– d(P) = 2 ⇔ only two or fewer T&E hypotheses need be considered at a time \n⇔ P is solvable by T&E(B) ⇔ P is solvable by B-braids. \n \nMoreover, as there is only a finite (although huge) number of minimal puzzles, it \nentails that there is some p (possibly large) such all the known minimal 9×9 \nSudoku puzzles have a finite BpB rating.  \n\n310 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nTwo questions remain open: whether all the minimal puzzles (not only all the \nknown ones) can be solved by T&E(2) [we have strong reasons to believe that this is \ntrue – our T&E(2) conjecture] and what the value of the smallest such p is [we have \nstrong reasons to believe that it is 7 – our B7B conjecture, see section 11.4]. \nKnowing for certain the smallest p would be interesting, because it would define \nthe maximum look-ahead necessary when one tries to find a solution by structured \nsearch with only one hypothesis at a time and with no guessing. Whatever its actual \nvalue, it is also clear that such a p would provide a universal rating for Sudoku, in \nthe restricted sense that it would ensure a finite rating to every puzzle (which the BB \nrating already does, but without a predefined finite value of p). \nHowever, these universal ratings (BB or this BpB) cannot be considered as \nuniversal in the non-technical sense that they would be associated with the \n“simplest” solution. As we have seen, although all the whip, braid and generalised \nwhip or braid ratings we have introduced are largely mutually compatible (only \nrarely do they give different ratings to a puzzle), the cases where they differ also \nprove that it is not possible to have a single formal definition of simplicity. \n11.4. The scope of Bp-braids in Sudoku \nAs already mentioned many times in this book, 9×9 Sudoku puzzles that cannot \nbe solved by braids (or whips) are very rare (in percentage; less than one in ten \nmillions). The only available sources of such puzzles are biased, for various non \nmutually exclusive reasons: they may have been created with particular patterns of \ngivens (e.g. various kinds of symmetries or quasi-symmetries in the given cells, as \nin the 16×16 and 25×25 examples of section 11.5 below) and/or by algorithms \nbiased by construction for the particular purpose of finding hard instances.  \nThis section can therefore have no more statistical pretension than section 9.6. \nInstead, we shall review collections of extreme puzzles from different sources. The \nmain result here is that B-braids, i.e. braids accepting inner braids as their right-\nlinking elements, allow to solve all the known (standard, i.e. minimal 9×9) Sudoku \npuzzles, giving strong credit to our old conjecture that all the puzzles (not only the \nknown ones) can be solved by T&E(2); this is a noticeable difference with S-braids, \ni.e. braids with inner Subsets. Moreover, it will provide very good reasons for \nmaking the stronger conjecture that all the minimal 9×9 Sudoku puzzles can be \nsolved by Bp-braids with p ≤ 7. \nIt may be useful to notice that the results reported in this section required \ninnumerable months of handcrafting and CPU time: depending on the source, more \nor less of each (but in any case not ours) for puzzle creation; mainly CPU (ours) for \nratings. \n\n11. Wp-whips, Bp-braids and the T&E(2) instances     \n311 \n \n11.4.1. Comparison of scope for Sp-braids and Bp-braids (gsf’s collection) \nTable 11.1 is the analogue for Bp-braids of Table 9.1 (for Sp-braids); it is relative \nto gsf’s collection mentioned in section 9.6, with the same slices of 500 puzzles. As \nthe last puzzles can all be solved by g-braids, we have restricted the list to the first \n6,000. For easier comparison of the resolution powers of the two series of patterns, \nsmall figures recall the values obtained in Table 9.1 (for p ≤ 4). This table shows \nthat all the puzzles in gsf’s list can be solved by Bp-braids with p ≤ 6 – and all but 4 \n(belonging to the first series of 500) can be solved by Bp-braids with p ≤ 5. \nConsidering the next sub-sections, Table 11.1 also shows that the top-level of \nthis list can no longer be considered as containing the hardest known puzzles. But \nwe keep it here, for two reasons: it has long been the reference and it is still \ninteresting for comparing the resolution power of Sp-braids and Bp-braids. \n \n \nResolution theory → \n↓ slice of puzzles \ngB∞ \nB2B∞ \nB3B∞ \nB4B∞ \nB5B∞ \nB6B∞ \n1-500 \n187 \n369336 \n457414 \n482443 \n496 \n500 \n500-1000 \n178 \n364335 \n462415 \n496460 \n500 \n \n1001-1500 \n163 \n421382 \n492451 \n500486 \n \n \n1501-2000 \n168 \n437397 \n499476 \n500490 \n \n \n2001-2500 \n135 \n412367 \n498434 \n500474 \n \n \n2501-3000 \n116 \n386334 \n495443 \n500479 \n \n \n3001-3500 \n120 \n389335 \n496424 \n500473 \n \n \n3501-4000 \n113 \n372325 \n493426 \n500472 \n \n \n4001-4500 \n104 \n345298 \n475395 \n499448 \n500 \n \n4501-5000 \n231 \n433399 \n493450 \n500482 \n \n \n5001-5500 \n348 \n495487 \n500500 \n \n \n \n5501-6000 \n490 \n500500 \n \n \n \n \nTotal solved /6000 \n2353 \n4923 \n4495 \n5860 \n5328 \n5977 \n5707 \n5996 \n \n6000 \n \nTotal unsolved /6000 \n3647 \n1077 \n1505 \n140 \n672 \n23 \n293 \n4 \n \n0 \n \nTable 11.1. Cumulated number of puzzles solved by Bp’-braids, p’≤p, for each slice of 500 \npuzzles in gsf’s list. The second column here (for gB∞) corresponds to the third in Table 9.1. \n11.4.2. Eleven’s collection of puzzles solvable by Bp-braids but not by Sp-braids \nLet us now turn to the collection recently generated by “Eleven”, already \nintroduced at the end of section 9.6. Eleven has made public [Eleven 2011] a list of \n26,370 puzzles that, by construction, cannot be solved by S4-braids (and therefore \n\n312 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nnot by any S-braids), which recommends them for consideration among the hardest. \nNeedless to say, this list has been a great leap forward into the realm of the hardest \npuzzles. We have already stated in section 11.3.4 that they can all be solved by \nT&E(2) and therefore by B-braids; let us now be more precise about the maximum \nvalue of p for which Bp-braids are enough.  \nAs this collection has been generated with the explicit purpose of maximising \nthe SER, we have organised the distribution table (Table 11.2) by slices of constant \nSER (notwithstanding all the possible criticisms about SER as a measure of \ncomplexity). Contrary to the above presentation of gsf’s list, slices have variable \nsize.  In a row, empty cells on the left or right mean that all the puzzles in the slice \ncan be solved by Bp’-braids for some of the p’ in the other cells. For the slices with \nSER < 11.3, we restricted our analysis to the first hundred puzzles in each of them. \nTable 11.2 shows that all the puzzles in Eleven’s “no Sp-braids” collection can \nbe solved by Bp-braids with p ≤ 7; moreover, only two of them cannot be solved by \nBp-braids with p ≤ 6 and only 36 cannot be solved by Bp-braids with p ≤ 5. It also \nshows that there is some vague correlation but no systematic relationship between \nthe SER and the minimum p of a puzzle P.  \n \n \nResolution theory → \nB2B∞ \nB3B∞ \nB4B∞ \nB5B∞ \nB6B∞ \nB7B∞ \n# of puzzles in slice \nSER \n↓ \npuzzles tried in \nthis slice \n4  \n1-4 (all) \n11.9 \n \n \n \n375 \n0 \n125 \n20 \n5-24 (all) \n11.8 \n \n \n15 \n840 \n1050 \n15 \n34 \n25-58 (all) \n11.7 \n \n \n412 \n2059 \n1029 \n \n48  \n59-106 (all) \n11.6 \n \n \n1736 \n2756 \n48 \n \n109 \n107-215 (all) 11.5 \n \n98 \n5651 \n4340 \n11 \n \n263 \n216-478 (all) 11.4 \n \n3513 \n13150 \n8834 \n93 \n \n1207 \n479-578 \n11.3 \n \n24 \n64 \n12 \n \n \n1689  \n1686-1785 \n11.2 \n3 \n45 \n44 \n8 \n \n \n2656  \n3375-3474 \n11.1 \n9 \n60 \n30 \n1 \n \n \n1818  \n6031-6130 \n11.0 \n23 \n70 \n7 \n \n \n \n2427  \n7849-7948 \n10.9 \n70 \n23 \n7 \n \n \n \n2931  10276-11275 10.8 \n22 \n49 \n28 \n1 \n \n \n4606  13207-13306 10.7 \n32 \n54 \n14 \n \n \n \n8558  17813-17912 10.6 \n50 \n46 \n4 \n \n \n \nTable 11.2. For each slice of puzzles of given SER (SER version 1.2.1) in Eleven’s collection, \nnon-cumulated number (and percentage, in small digits) of puzzles solved by Bp-braids. \n\n11. Wp-whips, Bp-braids and the T&E(2) instances     \n313 \n \n[Additional comments on Table 11.2, for Sudoku experts:  \n– each slice with fixed SER has been ordered by Eleven according to secondary \nand ternary criteria, respectively EP and ED, the Sudoku Explainer rating of the \nhardest elimination step before the first assertion step (resp. of the first elimination \nstep); these ratings do not seem to have any impact on the B?B classification results; \n– the discontinuity in behaviour between SER 10.9 and SER 10.8 is inherent in \nthe definitions of these SER values; in between them there are two discontinuities, \none in the types of “contradiction / forcing chains” it is based upon (this can easily \nbe noticed in their names, even though these types are defined only by their Java \ncode) and (an anomalous) one in the number of “nodes” used by these “chains”: \n“10.8: Dynamic + Forcing Chains (289-384 nodes) CRCD Forcing Chains”; \n10.9: Dynamic + Multiple Forcing Chains (73-96 nodes) CRCD Forcing \nChains; this discontinuity is only one of the many inconsistencies of the SER.] \nTable 11.3 (which does not claim for exhaustivity beyond the sub-slices used in \nTable 11.2) displays the most remarkable puzzles in Eleven’s collection, according \nto the following criteria: they have either extreme SER (4 puzzles with SER=11.9 \nand 20 with SER=11.8) or extreme p (2 puzzles with p=7 and 34 with p=6). The \nthree occurrences (in bold), with values 4 or 7 for p, are unexpected. Considering \nthe values of SER between 11.8 and 11.4, it is also unexpected that only one percent \nof the puzzles with SER=11.5 have p≥6; but this may be due to some bias in \nEleven’s collection and/or to some other obscure anomaly of the SER. \n \npuzzle\t\r  \n#\t\r  in\t\r  \nEleven’s\t\r  \nlist\t\r  \nSER\t\r  \np\t\r  \n..3....8..5.1....66....74....8.9..4.7....5....1.6..8.....9...2.....2...8..2...3.4\t\r  \n1\t\r  \n11.9\t\r  \n5\t\r  \n.2.4...8.....8...68....71..2..5...9..95.......4..3.........1..7..28...4.....6.3..\t\r  \n2\t\r  \n11.9\t\r  \n5\t\r  \n..3....8..5....2.17...........5.8..6.9.12....8....3....6.9....5..4....7.....1.6.2\t\r  \n3\t\r  \n11.9\t\r  \n7\t\r  \n..3..6.8....1..2......7...4..9..8.6..3..4...1.7.2.....3....5.....5...6..98.....5.\t\r  \n4\t\r  \n11.9\t\r  \n5\t\r  \n1.......9..67...2..8....4......75.3...5..2....6.3......9....8..6...4...1..25...6.\t\r  \n5\t\r  \n11.8\t\r  \n6\t\r  \n1....6.8....7..1........5.6..9.4.....7.2...3.8....76..3....1..5.4.9.......2.7....\t\r  \n6\t\r  \n11.8\t\r  \n5\t\r  \n...4...89..7..92......3...526...1.....19.....7.....1..5...9..4...6..29.....8....3\t\r  \n7\t\r  \n11.8\t\r  \n4\t\r  \n........94....92......7..45..1.3.....7.6..9..8....7..2.3.7..8....6.1....9....5.2.\t\r  \n8\t\r  \n11.8\t\r  \n5\t\r  \n...4...8...7..92......3...526...1.....19......7....1..5......4..1.8....3..6..29..\t\r  \n9\t\r  \n11.8\t\r  \n5\t\r  \n.2.4..7....6.....17...3......5....6..4.2..9.......5..8..1..8....9..7.......92.3..\t\r  \n10\t\r  \n11.8\t\r  \n5\t\r  \n1.......9.5....2....87...4.2...3......48.5....8.6...7...6..4.5.........1....9.3..\t\r  \n11\t\r  \n11.8\t\r  \n6\t\r  \n..3.5.7..4....9...6..2.......5...8.3.9.....6.8..........8.1...75....4.2.....3.5.8\t\r  \n12\t\r  \n11.8\t\r  \n6\t\r  \n..34...8.......1.37........2...9.......5..8...6...7.4...51....8.7...5...9...62.5.\t\r  \n13\t\r  \n11.8\t\r  \n6\t\r  \n1......8......92....6.3...52....8.....5.7.....6.5....4..47...........91..3..6...7\t\r  \n14\t\r  \n11.8\t\r  \n5\t\r  \n......7.9...1...3..8...74...9....8.5.....5..75.6....2...2.6......13.....94...8...\t\r  \n15\t\r  \n11.8\t\r  \n6\t\r  \n \n\n314 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n \n..34......5..89...78...2...2....5..7...6..41....9....5.......6.8...9...2..1...3..\t\r  \n16\t\r  \n11.8\t\r  \n6\t\r  \n.....6..94...8.2.....7...1.2.9...8....4.3.9...6.....5.3.8.4.......5......7...1...\t\r  \n17\t\r  \n11.8\t\r  \n6\t\r  \n.....6.8....1..2...9..7...5..5.4...734...8...97.........9...6..7...3...4...2...1.\t\r  \n18\t\r  \n11.8\t\r  \n5\t\r  \n..3..6.8....1......9..7...4...8..6..3...4...2.....5.1...2.9...37........94....5..\t\r  \n19\t\r  \n11.8\t\r  \n5\t\r  \n..34.........8...668..7.1.....5......9..1.6.......2..4..5.....28.....96.97.....1.\t\r  \n20\t\r  \n11.8\t\r  \n6\t\r  \n.2....78.4.......6.9..7..1....5....3.....1.......9.12..7..1.8..5....4.....67.3...\t\r  \n21\t\r  \n11.8\t\r  \n5\t\r  \n.2...67..4...8......9.......3.....7.5.8....4..1.3....2....9..5....6.1..3...2..6.7\t\r  \n22\t\r  \n11.8\t\r  \n7\t\r  \n.2.4..7...5...9.3.6...7......5..8.9.7...2.....4.6..3.......1..85......1...1...9.3\t\r  \n23\t\r  \n11.8\t\r  \n6\t\r  \n1....6.......8.2...9.7....5.7.3...5......16....4....73..59....48...2.....3.......\t\r  \n24\t\r  \n11.8\t\r  \n6\t\r  \n..34...8..........7....25..2..........49...1.9.....6.7.....5..6..9.1..3..8.34....\t\r  \n26\t\r  \n11.7\t\r  \n6\t\r  \n.2...6......1...3...9.7...5..5....78.3.....1.8...4.5....4.9.8...6...2...9.......7\t\r  \n27\t\r  \n11.7\t\r  \n6\t\r  \n.234.........8...36.....4.......5..6..19...3.....7.8...19....2.5.......7.4.3...9.\t\r  \n29\t\r  \n11.7\t\r  \n6\t\r  \n.2...67......8......91.....23.....7..7....34...1.....8....9...5..2..4...6....342.\t\r  \n30\t\r  \n11.7\t\r  \n6\t\r  \n....5.78....1.9......7....1.9...1..3..6.2.....4.9.3....7....3.48......6...2....5.\t\r  \n34\t\r  \n11.7\t\r  \n6\t\r  \n.....67...5.1...3.....3...4..8..4...3..52.....9..1..2.7.....6...3.9...1...5.....8\t\r  \n45\t\r  \n11.7\t\r  \n6\t\r  \n...4....9.5...9.3.......1.52..8.......6.4.....1...53....42...7.8...67....7......3\t\r  \n46\t\r  \n11.7\t\r  \n6\t\r  \n1......89....8..2...82..5....93....5.....4....7..6.3..6...1.....4...7.....28...5.\t\r  \n53\t\r  \n11.7\t\r  \n6\t\r  \n1.....7.9.57....3..8.7.....2...4......68......38....5......1..4....9...2...3..56.\t\r  \n54\t\r  \n11.7\t\r  \n6\t\r  \n1.....7.9.57....3..8.7.....2...4......68......38....5......1..2....9...4...3..56.\t\r  \n55\t\r  \n11.7\t\r  \n6\t\r  \n.2...67..4...8...2..9....5...8....4.5.........3.1..2.....89.....6.3.1..7.....73..\t\r  \n85\t\r  \n11.6\t\r  \n6\t\r  \n..3.....94...8.2...6.7...1.2...9...8..4...3.......1.5.3.8.4.......6......7...5...\t\r  \n99\t\r  \n11.6\t\r  \n6\t\r  \n..3.....9...1...63.....75....196.....4.......7....5......6...21..92...3.8.....4..\t\r  \n100\t\r  \n11.6\t\r  \n6\t\r  \n1.....7.9.57....3..8.7.....2....4.....68......38....5......1..2....9...4...3..56.\t\r  \n103\t\r  \n11.6\t\r  \n6\t\r  \n....5.7..4....9.....83....1.8.........12...6.9...7.....6.....18.3.8....2.....54..\t\r  \n176\t\r  \n11.5\t\r  \n6\t\r  \n1....6.8..5...9.....837........3...4..42....8.6.....1...2.4.8.....7....39......5.\t\r  \n287\t\r  \n11.4\t\r  \n6\t\r  \n1...5......7..9....8.3..4....5.1..6..6.8....4.....7....3.2...4...2...3.89.......2\t\r  \n289\t\r  \n11.4\t\r  \n6\t\r  \n....5..8...71..2.....2..1.4..4.....7......6.196.....3.3....5...5...9.....426.....\t\r  \n335\t\r  \n11.4\t\r  \n6\t\r  \n..34..7...5...9.......3..6.........8..4.7..2.91...........6.2....23...4.8..2.5..\t\r  \n342\t\r  \n11.4\t\r  \n6\t\r  \n.2..5......71.9...6...2....2.......8..4...91...9..3.4....76...5.....13........47.\t\r  \n349\t\r  \n11.4\t\r  \n6\t\r  \n1....67...5.........927......87...4.3....1...57....3.....9....8.6...75......4..2.\t\r  \n357\t\r  \n11.4\t\r  \n6\t\r  \n12.4.....4..1...6...8.3......5...9.7.6.....2.74...........9.3.......35.....7...12\t\r  \n365\t\r  \n11.4\t\r  \n6\t\r  \n...45..8......92.....7...452.....3....8........586..7.3..........6.7...4.9...1...\t\r  \n391\t\r  \n11.4\t\r  \n6\t\r  \n.2.4.......6......7....35....8.....63...91.7.9...........2....8....1.35.....75.9.\t\r  \n441\t\r  \n11.4\t\r  \n6\t\r  \nTable 11.3. Puzzles from Eleven’s collection with extreme SER or p \n11.4.3. Other extreme puzzles are also solvable by Bp-braids with p ≤ 7 \nFinally, as much effort has been invested over the years by many people in the \nsearch for extreme puzzles (according to various criteria, but mostly SER), let us \n\n11. Wp-whips, Bp-braids and the T&E(2) instances     \n315 \n \nconsider a few famous ones proposed as such by different creators. Our source here \nis the meta-collection compiled by “Champagne” [Penet 2012], based on previously \nknown lists and on his own creations. However, as we have already considered \nEleven’s puzzles separately in the previous sub-section (mainly because he provided \nsome description of his generation process and he used the same one uniformly to \nproduce his whole collection), we have extracted them from the results in the Tables \nbelow (this will also make further comparisons easier). For convenience, let us call \n“Champagne-minus-Eleven” the resulting collection. \nTables 11.4 and 11.5 are the respective analogues of Tables 11.2 and 11.3 for \nthis complementary collection (but now limited to its puzzles with SER ≥ 11.6, \nbecause it does not lead to anything new). Only one puzzle requires B7-braids. \n \n \nResolution theory → \nB2B∞ \nB3B∞ \nB4B∞ \nB5B∞ \nB6B∞ \nB7B∞ \n# of puzzles in slice \nSER \n3  \n1-3 \n11.9 \n \n \n \n266 \n133 \n00 \n16 \n4-19 \n11.8 \n \n \n212 \n744 \n638 \n16 \n22 \n20-41 \n11.7 \n \n \n418 \n1046 \n836 \n \n49  \n42-90 \n11.6 \n \n510 \n2143 \n1327 \n1020 \n \nTable 11.4. For each slice of puzzles of given SER in Champagne-minus-Eleven’s meta-\ncollection, non-cumulated number (and percentage, in small digits) of puzzles solved by Bp-\nbraids. \npuzzle\t\r  \ncreator\t\r  \nname\t\r  in\t\r  list\t\r  \nSER\t\r  \np\t\r  \n98.7.....7.....6....6.5.....4...5.3...79..5......2...1..85..9......1...4.....3.2.\t\r  \nGPenet\t\r   Champagne_dry\t\r   11.9\t\r  \n6\t\r  \n98.7.....6.....87...7.....5.4..3.5....65...9......2..1..86...5.....1.3.......4..2\t\r   GPenet\t\r  \nkz0_11523\t\r  \n11.9\t\r  \n5\t\r  \n.......39.....1..5..3.5.8....8.9...6.7...2...1..4.......9.8..5..2....6..4..7.....\t\r  \nTarek\t\r  \nGolden\t\r  Nugget\t\r  \n11.9\t\r  \n5\t\r  \n98.76....54.........7..59..4....75.....3...2.....1...6.9...87....4....1....2....3\t\r   GPenet\t\r  \nkz1a_15497\t\r  \n11.8\t\r  \n5\t\r  \n.2...67..4...8......93........9..57..1...7..2......61.3...4..6...8.......6...5.2.\t\r  \nTarek\t\r  \ntarx0075\t\r  \n11.8\t\r  \n5\t\r  \n2.......6.5..8..1...4...9...7.3.1......82.......7.5.3...9...4...8..1..5.6.......2\t\r  \nTarek\t\r  \ntarek-­‐ultra-­‐0203\t\r   11.8\t\r  \n5\t\r  \n98.7.....6...5......4..93..5......6..7..8......9..24....1.....4....9.1.......1.32\t\r  \nGPenet\t\r  \nH1\t\r  \n11.8\t\r  \n5\t\r  \n1.......2..94...5..6....7.....89..4....3.6.....8.4.....2....1..7.......6..5.8..3.\t\r  \ngsf\t\r  \n2007-­‐05-­‐24-­‐003\t\r   11.8\t\r  \n5\t\r  \n6.......2.9.4...5...1...7...5..84.......2.......3.5.4.2.....6...3...9.8...7.....1\t\r  \nColoin\t\r  \ncoloin-­‐04-­‐10_13\t\r   11.8\t\r  \n6\t\r  \n1.......2.9.4...5...6...7...5.3.4.......6........58.4...2...6...3...9.8.7.......1\t\r  \nColoin\t\r  \ncoloin-­‐04-­‐10_14\t\r   11.8\t\r  \n5\t\r  \n1.......2.3.4...5...6...7...5.8.4.......29......3...9...7.....1.9...8.4.2.....6..\t\r  \nHp54\t\r  \nHp54_4\t\r  \n11.8\t\r  \n6\t\r  \n1.......2.3.4...5...6...7...5.9.4.......23......8...9...2...6...9...8.4.7.......1\t\r  \nHp54\t\r  \nHp54_1\t\r  \n11.8\t\r  \n6\t\r  \n98.76....75....9....6......8...4..3..2......1..95..8....86..5......3...4.....1.2.\t\r   GPenet\t\r  \nKZ1C_23862\t\r  \n11.8\t\r  \n5\t\r  \n..3.8....7..2......6...9.1.........3.....596..9.....54.1...45..8...3......27.....\t\r  \nTarek\t\r  \n071223170000\t\r  \n11.8\t\r  \n6\t\r  \n1.......6.5.7...8...3...4.....5.8.9.....3.....8.92....6.....3...7...5.2...4.....1\t\r  \nColoin\t\r  \nH1\t\r  \n11.8\t\r  \n6\t\r  \n5.......9.2.1...7...8...3...4.6.........5.......2.7.1...3...8...6...4.2.9.......5\t\r  \nMetcalf\t\r  \nno\t\r  name\t\r  \n11.8\t\r  \n7\t\r  \n\n316 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n \n98.7.....6..89......5..4...7...3.9....6...7....2....51.6..8.3.......1.4.........2\t\r  \nGPenet\t\r  \nH3\t\r  \n11.8\t\r  \n6\t\r  \n98.7.....6..89......5..4...7...3.9....6...7....2....41.6..8.3.......1..5.......2.\t\r  \nGPenet\t\r  \nH2\t\r  \n11.8\t\r  \n5\t\r  \n98.7.......7.6.........57..4...3..2..1...6..3...9..8..2......4..3......1..86..5..\t\r  \nGPenet\t\r  \ncy4_9253\t\r  \n11.8\t\r  \n5\t\r  \n1.......9.4...3.8...2...6...7..58.......2.......7.4.5...6...2...3.8...7.9.......1\t\r  \nTarek\t\r  \ntarek-­‐2803\t\r  \n11.7\t\r  \n6\t\r  \n1.......2.9.4...5...6...7...5.3.4......96.........8.4...2...6...3...9.8.7.......1\t\r  \nColoin\t\r  \nColoin_04_10\t\r  \n11.7\t\r  \n6\t\r  \n1.......2.3.4...5...6...7...5.8.3.......7.......95..8.7.....6...9...8.3...2.....1\t\r  \njpf\t\r  \njpf-­‐04-­‐08\t\r  \n11.7\t\r  \n6\t\r  \n..34..7.......9..2....1..5.2.........38...6..6.43.........2..9......5..1.6.8..3..\t\r  \nTarek\t\r  \npearly6000-­‐4268\t\r   11.7\t\r  \n6\t\r  \n..34..7.......9..2....1..5.27........38...6....43.........2..9......5..1.6.8..3..\t\r  \nTarek\t\r  \npearly6000-­‐3802\t\r   11.7\t\r  \n6\t\r  \n1.......2..34...5..6....7.....85..9....3.6.....8.9.....2....1..7.......6..9.8..3.\t\r  \njpf\t\r  \njpf-­‐04/14/84\t\r  \n11.7\t\r  \n6\t\r  \n98.7.....7..6..8....5.4....37....6...6.........2....31...3..98.....1...2.....5..4\t\r  \nGPenet\t\r  \nH8\t\r  \n11.7\t\r  \n6\t\r  \n..1...5...2.4...6.3....7....6.28........9..2.......4.65.....1...9.8...4...7.....3\t\r  \nColoin\t\r  \nH2\t\r  \n11.7\t\r  \n6\t\r  \n1.......2.3.4...5...6...7...5.8.3.......74......9...8.7.....6...9...8.3...2.....1\t\r  \njpf\t\r  \njpf-­‐04/14/02\t\r  \n11.6\t\r  \n6\t\r  \n..34...8..5....1..7.......6.1....5....8.9..2.6.......7..294........3..4....8.5...\t\r  \nTarek\t\r  \npearly6000-­‐4143\t\r   11.6\t\r  \n6\t\r  \n3.......8.7.5...1...6...4...9.2.1.......4.......97..2.4.....3...5...2.7...8.....6\t\r  \nTarek\t\r  \ntarek-­‐ultra-­‐0313\t\r   11.6\t\r  \n6\t\r  \n1.......2.9.4...5...6...7...5.9.3.......7.......85..4.7.....6...3...9.8...2.....1\t\r  \njpf\t\r  \nEaster\t\r  Monster\t\r   11.6\t\r  \n6\t\r  \n.......35.....2.6...3.5..8...5.9...6.7....9..1..4.......6.8..9..2.1.....4....7...\t\r  \nColoin\t\r  \nH4\t\r  \n11.6\t\r  \n6\t\r  \n..345.........9......2.34...1......7..4.2.8..9......6...28..5..6......9..7......1\t\r  \nTarek\t\r  \npearly6000-­‐3238\t\r   11.6\t\r  \n6\t\r  \n987......65.........49..8..5..8..7......3..4......2..1.6.7..5......4...3.....1.2.\t\r  \nGPenet\t\r  \nH10\t\r  \n11.6\t\r  \n6\t\r  \n5.......9.2.1...7...8...3...4...2.......5.......7.6.1...3...8...6...4.2.9.......5\t\r  \nStrmCkr\t\r  \nStrmCkr_103\t\r  \n11.6\t\r  \n6\t\r  \n.......8...6...12....2..6.5..15..9..8....3....4..7....3....8.....21....6.7..4....\t\r  \nColoin\t\r  \nH5\t\r  \n11.6\t\r  \n6\t\r  \n98.7.....6..89......5..4...7...3.9....6...7....2....41.6..8.3.......1.5.........2\t\r  \nGPenet\t\r  \nH15\t\r  \n11.6\t\r  \n6\t\r  \nTable 11.5. Puzzles in Champagne-minus-Eleven’s meta-collection with extreme SER or p \n(names of famous puzzles appear in bold; the only puzzle in B7B was not famous before). \n11.5. Existence and classification of instances beyond T&E(2) \n11.5.1. Existence of instances beyond T&E(2) \nAnticipating on a question that might naturally arise now, let us notice that our \nT&E(2) conjecture for the standard 9×9 Sudoku CSP cannot be extended to larger \nSudoku grids, let alone to any CSP. “Blue”, a participant of the Sudoku \nProgrammer’s Forum, reported12 that, using his generator – a priori biased towards \neasier instances, because of the top-down kind (see chapter 6): \n– 46% of his randomly generated 16×16 minimal puzzles required T&E(2), \nalthough he could not find one requiring T&E(3) in 1.9 million random tries;  \n– 90% of his randomly generated 25×25 minimal puzzles required (at least) \nT&E(3). \n \n                               \n12 http://www.setbb.com/sudoku/viewtopic.php?t=2117&start=135&mforum=sudoku \n\n11. Wp-whips, Bp-braids and the instances in T&E(2)     \n317 \n \n . 4 . 9 . 2 . . . . . 6 . D . A \nB . A . D . . . 4 . . . E . F . \n. 3 . 5 . . . 1 . 7 . . . 4 . C \n6 . 1 . . . 8 . F . 9 . . . 5 . \n. C . . . 6 . 8 . 1 . F . . . 5 \n4 . . . B . C . 3 . 7 . 2 . . . \n. . . 3 . A . 7 . E . 4 . 1 . . \n. . 8 . F . 4 . C . 5 . 7 . B . \n. . . G . C . 6 . 9 . B . 2 . . \n9 . . . 1 . D . 2 . E . G . . . \n. B . . . E . 3 . A . 5 . . . 7 \nC . 4 . . . 5 . 7 . 1 . . . 6 . \n. D . 8 . . . A . 3 . . . B . G \n5 . F . 6 . . . 9 . . . 1 . 8 . \n. 9 . 2 . 8 . . . . . 7 . 6 . E \n1 . 6 . C . E . . . D . 9 . 7 . \n. . . 4 . E . 2 . 3 . F . . . 9  \n. . G . 4 . 7 . 6 . 8 . . . F .  \n. 5 . A . C . G . 7 . . . E . .  \n2 . 1 . A . D . 9 . . . C . . .  \n. F . B . 9 . 1 . . . 6 . . . G  \nG . A . 8 . B . . . E . . . 6 .  \n. 7 . 3 . D . . . 8 . . . F . 5  \n6 . C . 5 . . . 2 . . . 4 . 1 .  \n. A . C . . . B . . . 3 . 7 . 2  \n4 . D . . . 1 . . . A . G . 3 .  \n. 1 . . . 7 . . . C . 8 . 4 . B  \n3 . . . E . . . 4 . 6 . 9 . 5 .  \n. . . D . . . 3 . 4 . 2 . 6 . E  \n. . 9 . . . G . C . 1 . 7 . D .  \n. 2 . . . 5 . D . F . 9 . G . .  \n7 . . . F . C . 5 . 3 . 8 . . . \nFigure 11.5. Two 16×16 puzzles with T&E-depth ≥ 3 (hexadecimal notation) \n \n. . J E F 4 . . 3 . . A D . . . . 7 . G . . C . .  \n. . I 9 P . . 1 . . 4 6 . . J . . . 3 . . 8 . . K  \nC M 2 K . . E 6 . . O . . 3 . B . . . . G . . 5 .  \n8 L 1 . . D I . G K . . B . E . 4 . . . . . F . 9  \n3 B . . . F . N J . . . . 5 . D . . M . . 2 . O L  \n1 . . B N . 7 G . . 5 . . . 6 . . D . . . . A J P  \n. . 8 O . 5 D . . J . I . . . . E . . 2 . L . 9 4  \n. J K . D A . . C . N . H . . 8 . . P . 5 3 . . 2  \nA 4 . 6 7 . . 3 . H . C . . K . . . . I B M O . .  \n. . 5 P . . F . K . 1 . . 2 G . . . 9 6 8 D N . .  \n. . 6 . . K . L . 4 . . 9 . . E . . D H I . . M F  \nM . . . I . 8 . 9 . . D . . P . 2 4 . . . . L 3 .  \nN . . . . 3 . B . . F . . 7 . M 8 P I . . K . . G  \n. . A . . . G . . D . . 4 . 5 N K 9 . . . C . B .  \n. 3 . G . . . . P . . 2 . I 8 7 6 . . C . . 1 . .  \n9 . . . 2 . . H . . 3 . 5 O N P . . K 4 . F . . .  \n. 6 . C . . . . . B . G F 4 2 . . 1 A . P 9 . . E  \nD . F . . P . . . . . J 6 L . . 9 G . B O . . K .  \n. 5 . . E . . 8 . . D B K . . I 3 . 6 . . . H . 7  \n. . . 1 . . N . F G . 7 . . 9 L . E 8 . . B . 2 .  \n. . . . . M . E D 2 . . . J A . B 3 . . L . 4 . 6  \n. I . . L . 4 . H F . . . 8 . 1 O . . J . E . N .  \n5 . . F . 6 L K B . . E . . O . . . 2 . 9 . 8 . .  \n. . E . B . 3 A . . 9 H . . . . . F . L . G . 1 O  \n. 8 . 4 M O . . . I . . 3 F . . A . . . 2 . 5 P . \nFigure 11.6. A 25×25 puzzle with T&E-depth ≥ 4 \nBlue also found a few minimal puzzles with symmetries in the pattern of given \ncells; it is known that such symmetries often lead to harder puzzles in the mean \n(although the hardest ones do not necessarily have any symmetries at all). T&E(d) \n\n318 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ncomputation times grow so fast with d that he computed only a lower bound for d, \nbut this is enough for our present purposes. He posted (in the same thread):  \n– fifteen 16×16 minimal puzzles requiring at least T&E(3) (two of them appear \nin Figure 11.5, in hexadecimal notation), \n– two 25×25 minimal puzzles requiring at least T&E(4) (one of them is given in \nFigure 11.6).  \nWhat this suggests is that, as grid size n increases, the depth of T&E required by \nthe worst cases will also increase unboundedly (and this would probably remain true \nof mean case analysis). At what speed it increases remains an open (and apparently \nvery difficult) question. \nEven though, as remarked in the Introduction, any finite Constraint Satisfaction \nProblem can be reformulated as a CSP with only binary constraints, one must \nsometimes consider “implied” or “derived” constraints that are not binary. Indeed, \nwhat this section has shown goes much further: there are naturally binary CSPs \n(such as large size Sudoku) with minimal instances beyond T&E(2) and this \ncorresponds to the necessity of tackling contradictions among more than two labels. \nHow this can be done will be the topic of the next chapter. \n11.5.2. Classification of instances beyond T&E(2) \nIn any CSP, instances P can be classified according to the minimum depth of \nT&E, d(P), necessary to solve them – whatever the maximum value of d(P) may be \nin this particular CSP. Moreover, as T&E(d) is equivalent to T&E(B, d-1), the \nvarious instances P within each of the layers thus defined can be further sub-\nclassified, inside their layer d(P), according to the smallest p such that they can be \nsolved by T&E(Bp, d(P)-1). This is what we did with the 9×9 Sudoku CSP: for the \nd(P)=1 case in chapter 6 and for the d(P)=2 case in section 11.4.  \nThis is a reasonable classification, because the deepest level of T&E is also that \nwhich entails the highest computational cost (roughly speaking, mean computation \ntimes are close to exponential in d for a fixed size CSP). In line with our previous \nremarks on the multiplicity of ratings, it seems to us that, for instances in and \nbeyond T&E(2), this is much more informative than what a single rating (some \ncounterpart of the BB or B7B ratings in case d=2) can provide. \nAt first sight, as T&E(d) is a procedure, the above classification may seem extra-\nlogical; but it could be shown that the “T&E vs braids” and “T&E(2) vs B-braids” \ntheorems can be generalised, so that being solvable by T&E(d) is equivalent to \nbeing solvable by some resolution theory. However, the patterns necessary to do this \nwould be so complex (with several levels of inner braids) that this theoretical result \nwould probably be of no practical use. \n\n11. Wp-whips, Bp-braids and the instances in T&E(2)     \n319 \n11.5.3. Depth of T&E versus backdoor-size \nFinally, when speaking of T&E(d), the notion of a backdoor inevitably comes to \nmind and a question immediately arises: is there a relationship between the \nbackdoor-size of an instance and the depth of T&E necessary to solve it?  \nDefinition: given an instance P of a CSP, the backdoor-size of P, b(P), is the \nsmallest integer n≥0 such that there exists a set B of n labels (a backdoor set) that, \nwhen added to the givens of P, allows to solve P within BRT(CSP). (As the CSP is \nfinite, there is always such an n.) \n[More generally, one can also define the backdoor size b(T, P) of P for any \nresolution theory T as the smallest n such that there exists a set B of n labels (the T-\nbackdoor set) that, when added to the givens of P, allows to solve P in T. And one \ncan ask about the relationship between b(T, P) and d(T, P), where d(T, P) is defined \nsimilarly to d(P). For simplicity, we shall consider here only T = BRT(CSP), but \nmore on this topic can be found on our website. The notion of a strong T backdoor is \nalso introduced there, with an application to the famous EasterMonster puzzle.] \nNow, given an instance P of the CSP, one can associate with it two intrinsic \nconstants: its backdoor size b(P) and its T&E-depth d(p). And our initial question \ngets formalised as: is there a relationship between d(p) and b(p)? The answer is not \nobvious because the backdoor-size b(P) is based on guessing b values (it is therefore \nlargely incompatible with our approach and with the usual requirements of Sudoku \nplayers), whereas the T&E-depth d(P) is based on proving that some sets of d (or \nfewer) hypotheses are contradictory. In particular, none of the relations d ≤ b or \nb ≤ d or of their negations is obvious in the general CSP. \nLet us therefore consider the Sudoku example again. It has long been believed \nthat all the puzzles P had backdoor size b(P) ≤ 2, but Easter Monster was the first \nexample with b(P) = 3. There are now strong reasons to conjecture that b(P) ≤ 3 for \nany 9×9 puzzle (and this is true for all the known ones). \nConsider first the question “d(P) ≤ b(P)?”. If a puzzle can be solved by T&E at \ndepth d, it does not mean that one can choose d fixed hypotheses to generate all the \nauxiliary grids necessary to the T&E procedure: indeed, this procedure may make \nhypotheses on any sets of d candidates. But we currently have no explicit counter-\nexample to d(P) ≤ b(P). Notice that, if we consider gsf’s lists related to backdoors \n[gsf www], either his “FN-1” list of 1,183 puzzles P with b(P) = 1 or his “FN-2” list \nof 28,948 puzzles P with b(P) = 2, all of them can be solved by ordinary T&E, i.e. \nthey have d(P) = 1, thus satisfying d(P) ≤ b(P). \nAs for the question “b(P) ≤ d(P)?”, it is easy to find counter-examples. If we \nconsider again gsf's FN-2 list of 28,948 puzzles P with b(P) = 2, all of them can be \nsolved by ordinary T&E, i.e. they satisfy 1 = d(P) < b(P) = 2.  \n\n320 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nOne can even find counter-examples to the question “b(P) ≤ d(P) + 1?”. If we \nconsider gsf's list [gsf www] of 14 puzzles P with b(P) = 3, reproduced below: \n \n#1\t\r  \t\r  \t\r  \t\r  \t\r  1.......2.9.4...5...6...7...5.9.3.......7.......85..4.7.....6...3...9.8...2.....1\t\r  ;\t\r  Easter-­‐Monster;\t\r  SER=\t\r  11.6\t\r  \t\r  \n#2\t\r  \t\r  \t\r  \t\r  \t\r  9.......5.4.3...6...2...1...8.74........2.......8.6.7.1.....9...3...7.4...5.....2\t\r  ;\t\r  tarek-­‐ultra-­‐.3..;\t\r  SER=\t\r  11.3\t\r  \t\r  \n#3\t\r  \t\r  \t\r  \t\r  \t\r  7.......4.2.6...1...5...8...3.91........5.......2.3.9.8.....7...6...9.2...4.....5\t\r  ;\t\r  tarek-­‐ultra-­‐.3.1;\t\r  SER=\t\r  11.3\t\r  \t\r  \n#4\t\r  \t\r  \t\r  \t\r  \t\r  1......89.....91.2......4....76......3..4....9....2..5..4.7....5....8.1..6.3.....\t\r  ;\t\r  tarek-­‐4/.8;\t\r  SER=\t\r  11.5\t\r  \t\r  \n#5\t\r  \t\r  \t\r  \t\r  \t\r  1.......2..34...5..6....7.....89..4....3.6.....9.4.....2....1..7.......6..5.8..3.\t\r  ;\t\r  jpf-­‐.4/14/.8;\t\r  SER=\t\r  11.2\t\r  \t\r  \n#6\t\r  \t\r  \t\r  \t\r  \t\r  5.......3.2.6...1...8...9...4.7.1.......3.......42..7.9.....5...1...7.2...3.....8\t\r  ;\t\r  tarek-­‐ultra-­‐.3.2;\t\r  SER=\t\r  11.2\t\r  \t\r  \n#7\t\r  \t\r  \t\r  \t\r  \t\r  1.......2..34...5..6....7......5..4....3.1.....894.....2....1..7.......6..5.9..3.\t\r  ;\t\r  jpf-­‐.4-­‐1.;\t\r  SER=\t\r  11.2\t\r  \t\r  \n#8\t\r  \t\r  \t\r  \t\r  \t\r  1.......6.2.5...4...3...7...4.85........1........24.8...7...3...5...9.2.6.......1\t\r  ;\t\r  coloin;\t\r  SER=\t\r  11.3\t\r  \t\r  \n#9\t\r  \t\r  \t\r  \t\r  \t\r  1.......6.2.5...4...3...7...4.89.......2.4.......15.8...7...3...5...9.2.6.......1\t\r  ;\t\r  coloin-­‐.5/11/.1;\t\r  SER=\t\r  11.4\t\r  \t\r  \n#10\t\r  \t\r  \t\r  \t\r  ..1...2...3.....4.5...3...6...1.7....4.....8....9.2...3.......8.6..5..3...2...7..\t\r  ;\t\r  ocean-­‐2..7-­‐.5-­‐29-­‐1;\t\r  SER=\t\r  9.4\t\r  \t\r  \n#11\t\r  \t\r  \t\r  \t\r  3.....2.....54.......6.....1.2..3..........648.........9.7...5.......1.8.5..6....\t\r  ;\t\r  gfroyle-­‐2..7-­‐.5-­‐3.-­‐4;\t\r  SER=\t\r  3.6\t\r  \t\r  \n#12\t\r  \t\r  \t\r  \t\r  .8..9....3......6....3...4.....1...5..2...9....7...8..65....1.....2.7........4...\t\r  ;\t\r  gfroyle-­‐2..7-­‐.5-­‐3.-­‐3;\t\r  SER=\t\r  4.2\t\r  \t\r  \n#13\t\r  \t\r  \t\r  \t\r  ....2.58..4.3......1..........6...715.....2.....4.....2...59.........3.67........\t\r  ;\t\r  gfroyle-­‐2..7-­‐.5-­‐3.-­‐2;\t\r  SER=\t\r  5.7\t\r  \t\r  \n#14\t\r  \t\r  \t\r  \t\r  ...5....13.8......4....3......61....9.....8......5.....6.7...2..1....3........49.\t\r  ;\t\r  gfroyle-­‐2..7-­‐.5-­‐3.-­‐1;\t\r  SER=\t\r  6.6\t\r  \n \nthen four of them (numbers 10, 11, 12 and 14) can be solved by ordinary T&E(1), \ni.e. they satisfy 1 = d(P) < b(P) - 1 = 2; [the remaining ten can be solved by T&E(2), \ni.e. they satisfy d(P) = 2 and therefore d(P) = b(P) - 1].  \nThe last four puzzles in this small collection are interesting because they show \nthat a large backdoor size can also be found in easy instances (i.e. with small SER) \nand therefore backdoor size cannot have much to do with the difficulty of solving. \nAs a result, it does not seem that the notion of backdoor size (intrinsically based \non guessing) can shed much light on classifications of puzzles, like those based on \nthe resolution rules defined in this book, that reject a priori any form of guessing. \nThis conclusion is strengthened if we consider larger size grids: on the Sudoku \nProgrammer’s Forum13, Tarek has proposed a 16×16 puzzle P (Figure 11.7, in \nhexadecimal notation) with backdoor size b(P) = 5. P can be solved by whips of \nlength 9 (which is relatively easy for a 16×16 puzzle). It entails that b(P) = 5 but \nd(P) = 1. \nWe shall now give the full resolution path of this puzzle (as compacted as \npossible) for the main purpose of suggesting a reason why 16×16 Sudoku has never \n(and in our opinion will never) become popular: even for relatively easy puzzles, \nwith nothing special, there are always lots of tedious eliminations. It is essential to \nunderstand that the length of the present path can in no way be compared to those \nwe gave in chapters 5 or 7 for whips or g-whips: those examples had very long paths \n(and, for most of them, very long whips) because they were quite exceptional in \nsome respect; here the length is typical of all but the easiest 16×16 puzzles. This \nalso shows how our theoretical interpretations of the general requirements of \n                               \n13 http://www.setbb.com/sudoku/viewtopic.php?t=2117&start=154&mforum=sudoku \n\n11. Wp-whips, Bp-braids and the instances in T&E(2)     \n321 \nsimplicity or explainability can be challenged by more pratical concerns of boredom \nfor instances of CSPs that are not really designed for human solving. It seems that \nthis concern will appear every time a CSP has many candidates (see also the \nNumbrix® and Hidato® examples in chapter 16). \n \n \n. . . . C . . . . B . 1 8 . 6 . \n1 5 . E . . 7 4 D . . . C . B . \n. . B . . 9 . . . . 5 . . . . . \n3 A . . . . G F 8 6 . . . . 4 E \n9 F . . . . . 2 A E . . . . G . \n. . 7 . . E . . . . 9 . . 3 . . \nE . . G . . 1 B . 4 . . 7 . 8 . \n. C . 8 6 . D . . . . F 5 . . . \n. . . 6 E . . . . F . 9 1 . 2 . \nG . . 3 . . 6 . . A . . D . . C \n. . 5 . . 2 . . . . 6 . . 4 . . \nA . . . . . . 5 7 8 . . . . . G \n. 8 . . . . . . B 9 . . . . 5 . \n. . 1 . . 7 . . . . E . . B . . \n. E . B 8 . 2 . . C . . 4 . A 9 \n. 7 . D . . 9 . . 3 . A 6 . C . \nFigure 11.7. A 16×16 puzzle (from Tarek) with backdoor size = 5 and T&E-depth = 1 \n*****\t\r  \t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  W\t\r  \t\r  \t\r  *****\t\r  \n91\t\r  givens,\t\r  871\t\r  candidates,\t\r  8498\t\r  csp-­‐links\t\r  and\t\r  8498\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  0.56\t\r  \nsingles\t\r  ==>\t\r  r5c13\t\r  =\t\r  11,\t\r  r12c14\t\r  =\t\r  6,\t\r  r1c9\t\r  =\t\r  9\t\r  \nwhip[1]:\t\r  c7n11{r12\t\r  .}\t\r  ==>\t\r  r9c6\t\r  ≠\t\r  11,\t\r  r10c5\t\r  ≠\t\r  11,\t\r  r10c6\t\r  ≠\t\r  11,\t\r  r11c5\t\r  ≠\t\r  11,\t\r  r12c5\t\r  ≠\t\r  11,\t\r  r12c6\t\r  ≠\t\r  11\t\r  \nwhip[1]:\t\r  r1n14{c7\t\r  .}\t\r  ==>\t\r  r3c8\t\r  ≠\t\r  14,\t\r  r3c7\t\r  ≠\t\r  14\t\r  \nwhip[2]:\t\r  r2n6{c3\t\r  c6}\t\r  –\t\r  r2n8{c6\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  r2n8{c3\t\r  c6}\t\r  –\t\r  r2n6{c6\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  9\t\r  \nsingles\t\r  ==>\t\r  r2c14\t\r  =\t\r  9,\t\r  r4c13\t\r  =\t\r  2,\t\r  r8c15\t\r  =\t\r  9,\t\r  r7c5\t\r  =\t\r  9,\t\r  r8c14\t\r  =\t\r  14,\t\r  r13c13\t\r  =\t\r  14,\t\r  r16c8\t\r  =\t\r  14,\t\r  r1c7\t\r  =\t\r  14\t\r  \nwhip[2]:\t\r  c7n5{r6\t\r  r14}\t\r  –\t\r  c10n5{r14\t\r  .}\t\r  ==>\t\r  r6c5\t\r  ≠\t\r  5\t\r  \nwhip[2]:\t\r  r4c11{n12\t\r  n7}\t\r  –\t\r  r4c12{n7\t\r  .}\t\r  ==>\t\r  r3c9\t\r  ≠\t\r  12,\t\r  r3c12\t\r  ≠\t\r  12\t\r  \nwhip[1]:\t\r  b3n12{r4c12\t\r  .}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  12,\t\r  r4c3\t\r  ≠\t\r  12\t\r  \nwhip[2]:\t\r  r4c11{n7\t\r  n12}\t\r  –\t\r  r4c12{n12\t\r  .}\t\r  ==>\t\r  r4c14\t\r  ≠\t\r  7,\t\r  r1c11\t\r  ≠\t\r  7,\t\r  r3c10\t\r  ≠\t\r  7\t\r  \nsingles\t\r  ==>\t\r  r8c10\t\r  =\t\r  7,\t\r  r5c5\t\r  =\t\r  7\t\r  \nwhip[2]:\t\r  c10n1{r11\t\r  r6}\t\r  –\t\r  b5n1{r6c2\t\r  .}\t\r  ==>\t\r  r11c4\t\r  ≠\t\r  1\t\r  \nwhip[2]:\t\r  r3c10{n16\t\r  n2}\t\r  –\t\r  r2c10{n2\t\r  .}\t\r  ==>\t\r  r14c10\t\r  ≠\t\r  16,\t\r  r11c10\t\r  ≠\t\r  16,\t\r  r6c10\t\r  ≠\t\r  16\t\r  \nwhip[1]:\t\r  c10n16{r2\t\r  .}\t\r  ==>\t\r  r1c11\t\r  ≠\t\r  16,\t\r  r2c11\t\r  ≠\t\r  16,\t\r  r2c12\t\r  ≠\t\r  16,\t\r  r3c9\t\r  ≠\t\r  16,\t\r  r3c12\t\r  ≠\t\r  16\t\r  \nwhip[2]:\t\r  r3c10{n2\t\r  n16}\t\r  –\t\r  r2c10{n16\t\r  .}\t\r  ==>\t\r  r14c10\t\r  ≠\t\r  2,\t\r  r6c10\t\r  ≠\t\r  2\t\r  \nwhip[1]:\t\r  c10n2{r2\t\r  .}\t\r  ==>\t\r  r1c11\t\r  ≠\t\r  2,\t\r  r2c11\t\r  ≠\t\r  2,\t\r  r2c12\t\r  ≠\t\r  2\t\r  \nwhip[1]:\t\r  r1n2{c1\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  2,\t\r  r3c2\t\r  ≠\t\r  2,\t\r  r3c4\t\r  ≠\t\r  2\t\r  \nnaked-­‐single\t\r  ==>\t\r  r2c12\t\r  =\t\r  3\t\r  \nwhip[1]:\t\r  c10n2{r2\t\r  .}\t\r  ==>\t\r  r3c9\t\r  ≠\t\r  2,\t\r  r3c12\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  r2c11{n15\t\r  n10}\t\r  –\t\r  r2c16{n10\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  15\t\r  \nwhip[2]:\t\r  r2c11{n10\t\r  n15}\t\r  –\t\r  r2c16{n15\t\r  .}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  10\t\r  \nsingles\t\r  ==>\t\r  r2c5\t\r  =\t\r  2,\t\r  r2c10\t\r  =\t\r  16,\t\r  r3c10\t\r  =\t\r  2\t\r  \n\n322 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[2]:\t\r  r2c11{n10\t\r  n15}\t\r  –\t\r  r2c16{n15\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  10\t\r  \nwhip[2]:\t\r  r4c11{n7\t\r  n12}\t\r  –\t\r  r4c12{n12\t\r  .}\t\r  ==>\t\r  r3c12\t\r  ≠\t\r  7\t\r  \nwhip[1]:\t\r  b3n7{r4c12\t\r  .}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  7\t\r  \nsingles\t\r  ==>\t\r  r4c4\t\r  =\t\r  9,>\t\r  r4c3\t\r  =\t\r  13,\t\r  r14c2\t\r  =\t\r  9,\t\r  r7c2\t\r  =\t\r  3\t\r  \nwhip[1]:\t\r  b5n13{r6c1\t\r  .}\t\r  ==>\t\r  r6c16\t\r  ≠\t\r  13,\t\r  r6c15\t\r  ≠\t\r  13,\t\r  r6c12\t\r  ≠\t\r  13,\t\r  r6c10\t\r  ≠\t\r  13\t\r  \nwhip[1]:\t\r  b13n16{r16c3\t\r  .}\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  16\t\r  \nwhip[2]:\t\r  b9n9{r12c3\t\r  r10c3}\t\r  –\t\r  b9n14{r10c3\t\r  .}\t\r  ==>\t\r  r12c3\t\r  ≠\t\r  15,\t\r  r12c3\t\r  ≠\t\r  12,\t\r  r12c3\t\r  ≠\t\r  2,\t\r  r12c3\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  b9n9{r10c3\t\r  r12c3}\t\r  –\t\r  b9n14{r12c3\t\r  .}\t\r  ==>\t\r  r10c3\t\r  ≠\t\r  15,\t\r  r10c3\t\r  ≠\t\r  2,\t\r  r10c3\t\r  ≠\t\r  4,\t\r  r10c3\t\r  ≠\t\r  8\t\r  \nwhip[2]:\t\r  c4n5{r5\t\r  r14}\t\r  –\t\r  c10n5{r14\t\r  .}\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  5\t\r  \nwhip[1]:\t\r  c1n5{r16\t\r  .}\t\r  ==>\t\r  r14c4\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  c7n5{r6\t\r  r14}\t\r  –\t\r  c10n5{r14\t\r  r6}\t\r  –\t\r  r7n5{c12\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  r7n5{c12\t\r  c6}\t\r  –\t\r  c7n5{r6\t\r  r14}\t\r  –\t\r  c10n5{r14\t\r  .}\t\r  ==>\t\r  r5c12\t\r  ≠\t\r  5,\t\r  r6c9\t\r  ≠\t\r  5,\t\r  r6c12\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  r6c10{n1\t\r  n5}\t\r  –\t\r  b5n5{r6c4\t\r  r5c4}\t\r  –\t\r  b5n1{r5c4\t\r  .}\t\r  ==>\t\r  r6c9\t\r  ≠\t\r  1,\t\r  r6c15\t\r  ≠\t\r  1\t\r  \nsingles\t\r   ==>\t\r   r6c15\t\r   =\t\r   15,\t\r   r6c13\t\r   =\t\r   10,\t\r   r7c6\t\r   =\t\r   15,\t\r   r7c3\t\r   =\t\r   10,\t\r   r3c15\t\r   =\t\r   1,\t\r   r4c14\t\r   =\t\r   5,\t\r   r9c16\t\r   =\t\r   5,\t\r  \nr11c16\t\r  =\t\r  11,\t\r  r9c14\t\r  =\t\r  10,\t\r  r10c14\t\r  =\t\r  8,\t\r  r10c5\t\r  =\t\r  15,\t\r  r1c6\t\r  =\t\r  5,\t\r  r14c15\t\r  =\t\r  13,\t\r  r14c10\t\r  =\t\r  5,\t\r  r6c10\t\r  =\t\r  1,\t\r  \nr11c10\t\r  =\t\r  13,\t\r  r11c2\t\r  =\t\r  1,\t\r  r5c4\t\r  =\t\r  1,\t\r  r8c16\t\r  =\t\r  1,\t\r  r6c4\t\r  =\t\r  5,\t\r  r5c7\t\r  =\t\r  5,\t\r  r15c1\t\r  =\t\r  5,\t\r  r16c5\t\r  =\t\r  5,\t\r  r16c6\t\r  =\t\r  11,\t\r  \nr4c6\t\r  =\t\r  1,\t\r  r10c6\t\r  =\t\r  4,\t\r  r4c5\t\r  =\t\r  11\t\r  \nwhip[1]:\t\r  b6n4{r6c7\t\r  .}\t\r  ==>\t\r  r6c16\t\r  ≠\t\r  4\t\r  \nsingles\t\r  ==>\t\r  r5c16\t\r  =\t\r  4,\t\r  r5c3\t\r  =\t\r  6,\t\r  r2c3\t\r  =\t\r  8,\t\r  r2c6\t\r  =\t\r  6,\t\r  r3c2\t\r  =\t\r  6,\t\r  r1c2\t\r  =\t\r  16\t\r  \nwhips[1]:\t\r  b6n4{r6c7\t\r  .}\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  4,\t\r  r6c2\t\r  ≠\t\r  4;\t\r  \t\r  \t\r  \t\r  \t\r  c2n4{r12\t\r  .}\t\r  ==>\t\r  r9c3\t\r  ≠\t\r  4\t\r  \nnaked-­‐single\t\r  ==>\t\r  r9c3\t\r  =\t\r  12\t\r  \nwhips[1]:\t\r  c2n4{r12\t\r  .}\t\r  ==>\t\r  r9c1\t\r  ≠\t\r  4,\t\r  r12c4\t\r  ≠\t\r  4;\t\r  \t\r  \t\r  \t\r  \t\r  c15n3{r11\t\r  .}\t\r  ==>\t\r  r12c13\t\r  ≠\t\r  3,\t\r  r11c13\t\r  ≠\t\r  3\t\r  \nwhip[1]:\t\r  b12n15{r12c13\t\r  .}\t\r  ==>\t\r  r14c13\t\r  ≠\t\r  15,\t\r  r3c13\t\r  ≠\t\r  15\t\r  \nwhip[2]:\t\r  b16n3{r14c16\t\r  r13c16}\t\r  –\t\r  r1n3{c16\t\r  .}\t\r  ==>\t\r  r14c8\t\r  ≠\t\r  3\t\r  \nwhip[4]:\t\r  r10n7{c15\t\r  c8}\t\r  –\t\r  b10n9{r10c8\t\r  r11c8}\t\r  –\t\r  r11c13{n9\t\r  n15}\t\r  –\t\r  r11c4{n15\t\r  .}\t\r  ==>\t\r  r11c15\t\r  ≠\t\r  7\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r10c15\t\r  =\t\r  7\t\r  \nwhip[4]:\t\r  r12c15{n3\t\r  n14}\t\r  –\t\r  b9n14{r12c3\t\r  r10c3}\t\r  –\t\r  r10n9{c3\t\r  c8}\t\r  –\t\r  b10n1{r10c8\t\r  .}\t\r  ==>\t\r  r12c5\t\r  ≠\t\r  3\t\r  \nwhip[5]:\t\r  r12n1{c11\t\r  c5}\t\r  –\t\r  r10c8{n1\t\r  n9}\t\r  –\t\r  r11n9{c8\t\r  c13}\t\r  –\t\r  b12n15{r11c13\t\r  r12c13}\t\r  –\t\r  r12c4{n15\t\r  .}\t\r  \n==>\t\r  r12c11\t\r  ≠\t\r  2\t\r  \nwhip[5]:\t\r   c6n8{r9\t\r   r5}\t\r   –\t\r   r6n8{c8\t\r   c12}\t\r   –\t\r   b7n11{r6c12\t\r   r8c11}\t\r   –\t\r   c1n11{r8\t\r   r6}\t\r   –\t\r   c1n13{r6\t\r   .}\t\r   ==>\t\r  \nr9c1\t\r  ≠\t\r  8\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r11c1\t\r  =\t\r  8\t\r  \nwhip[1]:\t\r  b9n15{r12c4\t\r  .}\t\r  ==>\t\r  r14c4\t\r  ≠\t\r  15,\t\r  r13c4\t\r  ≠\t\r  15,\t\r  r1c4\t\r  ≠\t\r  15,\t\r  r3c4\t\r  ≠\t\r  15\t\r  \nwhip[3]:\t\r  r11n7{c8\t\r  c4}\t\r  –\t\r  r11n15{c4\t\r  c13}\t\r  –\t\r  r11n9{c13\t\r  .}\t\r  ==>\t\r  r11c8\t\r  ≠\t\r  16,\t\r  r11c8\t\r  ≠\t\r  12,\t\r  r11c8\t\r  ≠\t\r  10,\t\r  \nr11c8\t\r  ≠\t\r  3\t\r  \nwhip[6]:\t\r   b11n5{r10c12\t\r   r10c9}\t\r   –\t\r   r10n14{c9\t\r   c3}\t\r   –\t\r   r12c3{n14\t\r   n9}\t\r   –\t\r   r12c13{n9\t\r   n15}\t\r   –\t\r  \nr12c4{n15\t\r  n2}\t\r  –\t\r  r10c2{n2\t\r  .}\t\r  ==>\t\r  r10c12\t\r  ≠\t\r  11\t\r  \nwhip[2]:\t\r  b7n11{r6c12\t\r  r8c11}\t\r  –\t\r  r10n11{c11\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  11\t\r  \nwhip[1]:\t\r  c2n11{r12\t\r  .}\t\r  ==>\t\r  r9c1\t\r  ≠\t\r  11\t\r  \nwhip[4]:\t\r  b10n11{r9c7\t\r  r12c7}\t\r  –\t\r  c12n11{r12\t\r  r6}\t\r  –\t\r  r6n8{c12\t\r  c8}\t\r  –\t\r  b2n8{r3c8\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  c6n8{r9\t\r  r5}\t\r  –\t\r  r6n8{c8\t\r  c12}\t\r  –\t\r  r6n11{c12\t\r  c1}\t\r  –\t\r  c1n13{r6\t\r  .}\t\r  ==>\t\r  r9c6\t\r  ≠\t\r  13\t\r  \nwhip[5]:\t\r  r9n7{c8\t\r  c1}\t\r  –\t\r  c1n13{r9\t\r  r6}\t\r  –\t\r  r6n11{c1\t\r  c12}\t\r  –\t\r  r6n8{c12\t\r  c7}\t\r  –\t\r  b2n8{r3c7\t\r  .}\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  8\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r9c6\t\r  =\t\r  8\t\r  \nwhip[1]:\t\r  b6n8{r6c8\t\r  .}\t\r  ==>\t\r  r6c12\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  c8n12{r14\t\r  r6}\t\r  –\t\r  r6n8{c8\t\r  c7}\t\r  –\t\r  c7n4{r6\t\r  r13}\t\r  –\t\r  b14n15{r13c7\t\r  .}\t\r  ==>\t\r  r14c7\t\r  ≠\t\r  12\t\r  \nwhip[4]:\t\r  c8n12{r14\t\r  r6}\t\r  –\t\r  r6n8{c8\t\r  c7}\t\r  –\t\r  c7n4{r6\t\r  r14}\t\r  –\t\r  b14n15{r14c7\t\r  .}\t\r  ==>\t\r  r13c7\t\r  ≠\t\r  12\t\r  \n\n11. Wp-whips, Bp-braids and the instances in T&E(2)     \n323 \nwhip[7]:\t\r   b10n16{r11c5\t\r   r9c8}\t\r   –\t\r   b6n16{r6c8\t\r   r8c6}\t\r   –\t\r   b6n10{r8c6\t\r   r8c8}\t\r   –\t\r   b6n3{r8c8\t\r   r5c6}\t\r   –\t\r  \nr15c6{n3\t\r  n13}\t\r  –\t\r  b10n13{r12c6\t\r  r12c5}\t\r  –\t\r  c5n1{r12\t\r  .}\t\r  ==>\t\r  r13c5\t\r  ≠\t\r  16\t\r  \nwhip[8]:\t\r  r6n11{c12\t\r  c1}\t\r  –\t\r  c1n13{r6\t\r  r9}\t\r  –\t\r  r9n7{c1\t\r  c8}\t\r  –\t\r  b10n16{r9c8\t\r  r11c5}\t\r  –\t\r  r11c12{n16\t\r  n14}\t\r  –\t\r  \nr10n14{c12\t\r  c3}\t\r  –\t\r  r10n9{c3\t\r  c8}\t\r  –\t\r  r11c8{n9\t\r  .}\t\r  ==>\t\r  r6c12\t\r  ≠\t\r  12\t\r  \nwhip[8]:\t\r   r10c2{n11\t\r   n2}\t\r   –\t\r   b11n2{r10c9\t\r   r12c12}\t\r   –\t\r   r12c4{n2\t\r   n15}\t\r   –\t\r   b12n15{r12c13\t\r   r11c13}\t\r   –\t\r  \nr11n9{c13\t\r  c8}\t\r  –\t\r  r10c8{n9\t\r  n1}\t\r  –\t\r  b11n1{r10c9\t\r  r12c11}\t\r  –\t\r  r12n4{c11\t\r  .}\t\r  ==>\t\r  r12c2\t\r  ≠\t\r  11\t\r  \nwhip[9]:\t\r   b8n2{r7c14\t\r   r6c16}\t\r   –\t\r   r6c2{n2\t\r   n13}\t\r   –\t\r   b9n13{r12c2\t\r   r9c1}\t\r   –\t\r   r9n7{c1\t\r   c8}\t\r   –\t\r  \nr11c8{n7\t\r  n9}\t\r   –\t\r   r10c8{n9\t\r   n1}\t\r   –\t\r   r10c11{n1\t\r   n11}\t\r   –\t\r   b7n11{r8c11\t\r   r6c12}\t\r   –\t\r   r6c1{n11\t\r   .}\t\r   ==>\t\r  \nr7c11\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  b8n13{r7c16\t\r  r5c14}\t\r  –\t\r  b8n12{r5c14\t\r  r7c14}\t\r  –\t\r  r7c11{n12\t\r  .}\t\r  ==>\t\r  r7c12\t\r  ≠\t\r  13\t\r  \nwhip[3]:\t\r  r7c11{n12\t\r  n13}\t\r  –\t\r  b8n13{r7c16\t\r  r5c14}\t\r  –\t\r  b8n12{r5c14\t\r  .}\t\r  ==>\t\r  r7c12\t\r  ≠\t\r  12,\t\r  r7c9\t\r  ≠\t\r  12\t\r  \nwhip[9]:\t\r   r6n11{c12\t\r   c1}\t\r   –\t\r   c1n13{r6\t\r   r9}\t\r   –\t\r   b9n7{r9c1\t\r   r11c4}\t\r   –\t\r   b9n15{r11c4\t\r   r12c4}\t\r   –\t\r  \nr12n2{c4\t\r  c2}\t\r  –\t\r  r12n4{c2\t\r  c11}\t\r  –\t\r  r12n1{c11\t\r  c5}\t\r  –\t\r  r10c8{n1\t\r  n9}\t\r  –\t\r  r11c8{n9\t\r  .}\t\r  ==>\t\r  r12c12\t\r  ≠\t\r  11\t\r  \nsingles\t\r  ==>\t\r  r6c12\t\r  =\t\r  11,\t\r  r8c1\t\r  =\t\r  11,\t\r  r8c3\t\r  =\t\r  4\t\r  \nwhips[1]:\t\r  r8n2{c11\t\r  .}\t\r  ==>\t\r  r7c12\t\r  ≠\t\r  2,\t\r  r7c9\t\r  ≠\t\r  2;\t\r  \t\r  \t\r  \t\r  \t\r  r7n2{c16\t\r  .}\t\r  ==>\t\r  r6c16\t\r  ≠\t\r  2\t\r  \nnaked-­‐single\t\r  ==>\t\r  r6c16\t\r  =\t\r  6\t\r  \nwhip[1]:\t\r  r8n2{c11\t\r  .}\t\r  ==>\t\r  r6c9\t\r  ≠\t\r  2\t\r  \nwhip[7]:\t\r   r12n11{c11\t\r   c7}\t\r   –\t\r   r9c7{n11\t\r   n3}\t\r   –\t\r   b11n3{r9c11\t\r   r11c9}\t\r   –\t\r   c9n12{r11\t\r   r6}\t\r   –\t\r  \nb6n12{r6c7\t\r  r5c6}\t\r  –\t\r  r12c6{n12\t\r  n13}\t\r  –\t\r  r12c5{n13\t\r  .}\t\r  ==>\t\r  r12c11\t\r  ≠\t\r  1\t\r  \nsingles\t\r   ==>\t\r   r12c5\t\r   =\t\r   1,\t\r   r10c8\t\r   =\t\r   9,\t\r   r11c8\t\r   =\t\r   7,\t\r   r11c4\t\r   =\t\r   15,\t\r   r12c4\t\r   =\t\r   2,\t\r   r10c2\t\r   =\t\r   11,\t\r   r11c13\t\r   =\t\r   9,\t\r  \nr12c13\t\r  =\t\r  15,\t\r  r10c3\t\r  =\t\r  14,\t\r  r12c3\t\r  =\t\r  9,\t\r  r6c2\t\r  =\t\r  2,\t\r  r6c1\t\r  =\t\r  13,\t\r  r9c1\t\r  =\t\r  7\t\r  \nwhip[5]:\t\r   c6n16{r15\t\r   r8}\t\r   –\t\r   c6n10{r8\t\r   r13}\t\r   –\t\r   b14n12{r13c6\t\r   r14c8}\t\r   –\t\r   b14n6{r14c8\t\r   r15c8}\t\r   –\t\r  \nc8n1{r15\t\r  .}\t\r  ==>\t\r  r13c8\t\r  ≠\t\r  16\t\r  \nwhip[5]:\t\r   c6n16{r15\t\r   r8}\t\r   –\t\r   c6n10{r8\t\r   r13}\t\r   –\t\r   b14n12{r13c6\t\r   r13c8}\t\r   –\t\r   b14n6{r13c8\t\r   r15c8}\t\r   –\t\r  \nc8n1{r15\t\r  .}\t\r  ==>\t\r  r14c8\t\r  ≠\t\r  16\t\r  \nwhip[5]:\t\r   c8n1{r15\t\r   r13}\t\r   –\t\r   b14n6{r13c8\t\r   r14c8}\t\r   –\t\r   b14n12{r14c8\t\r   r13c6}\t\r   –\t\r   c6n16{r13\t\r   r8}\t\r   –\t\r  \nc6n10{r8\t\r  .}\t\r  ==>\t\r  r15c8\t\r  ≠\t\r  16\t\r  \nwhip[5]:\t\r  c8n16{r6\t\r  r9}\t\r  –\t\r  b10n13{r9c8\t\r  r12c6}\t\r  –\t\r  r15c6{n13\t\r  n3}\t\r  –\t\r  b6n3{r5c6\t\r  r8c8}\t\r  –\t\r  b6n10{r8c8\t\r  .}\t\r  \n==>\t\r  r8c6\t\r  ≠\t\r  16\t\r  \nwhip[1]:\t\r  c6n16{r15\t\r  .}\t\r  ==>\t\r  r14c5\t\r  ≠\t\r  16\t\r  \nwhip[4]:\t\r  b10n10{r11c7\t\r  r11c5}\t\r  –\t\r  c5n16{r11\t\r  r6}\t\r  –\t\r  b6n4{r6c5\t\r  r6c7}\t\r  –\t\r  c7n8{r6\t\r  .}\t\r  ==>\t\r  r3c7\t\r  ≠\t\r  10\t\r  \nwhip[5]:\t\r   c9n3{r11\t\r   r8}\t\r   –\t\r   b7n2{r8c9\t\r   r8c11}\t\r   –\t\r   b7n16{r8c11\t\r   r6c9}\t\r   –\t\r   b11n16{r11c9\t\r   r11c12}\t\r   –\t\r  \nc5n16{r11\t\r  .}\t\r  ==>\t\r  r9c11\t\r  ≠\t\r  3\t\r  \nwhip[5]:\t\r  r6c9{n12\t\r  n16}\t\r  –\t\r  c5n16{r6\t\r  r11}\t\r  –\t\r  r11c12{n16\t\r  n14}\t\r  –\t\r  r12c12{n14\t\r  n4}\t\r  –\t\r  r3c12{n4\t\r  .}\t\r  ==>\t\r  \nr5c12\t\r  ≠\t\r  12,\t\r  r11c9\t\r  ≠\t\r  12\t\r  \nsingles\t\r  ==>\t\r  r6c9\t\r  =\t\r  12,\t\r  r7c11\t\r  =\t\r  13,\t\r  r5c12\t\r  =\t\r  8,\t\r  r5c11\t\r  =\t\r  3,\t\r  r5c6\t\r  =\t\r  12,\t\r  r5c14\t\r  =\t\r  13,\t\r  r7c16\t\r  =\t\r  2,\t\r  r7c14\t\r  =\t\r  12,\t\r  \nr16c11\t\r  =\t\r  8,\t\r  r16c16\t\r  =\t\r  15,\t\r  r2c16\t\r  =\t\r  10,\t\r  r2c11\t\r  =\t\r  15,\t\r  r1c11\t\r  =\t\r  10,\t\r  r14c16\t\r  =\t\r  8\t\r  \nwhip[1]:\t\r  b3n4{r3c12\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  4,\t\r  r3c1\t\r  ≠\t\r  4\t\r  \nwhip[1]:\t\r  b7n16{r8c11\t\r  .}\t\r  ==>\t\r  r8c8\t\r  ≠\t\r  16\t\r  \nwhip[2]:\t\r  r1n3{c16\t\r  c8}\t\r  –\t\r  r1n13{c8\t\r  .}\t\r  ==>\t\r  r1c16\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r   c8n1{r13\t\r   r15}\t\r   –\t\r   b14n6{r15c8\t\r   r14c8}\t\r   –\t\r   b14n12{r14c8\t\r   .}\t\r   ==>\t\r   r13c8\t\r   ≠\t\r   13,\t\r   r13c8\t\r   ≠\t\r   10,\t\r  \nr13c8\t\r  ≠\t\r  3\t\r  \nwhip[3]:\t\r  c8n1{r15\t\r  r13}\t\r  –\t\r  b14n6{r13c8\t\r  r14c8}\t\r  –\t\r  b14n12{r14c8\t\r  .}\t\r  ==>\t\r  r15c8\t\r  ≠\t\r  13,\t\r  r15c8\t\r  ≠\t\r  3\t\r  \nwhip[3]:\t\r  b14n12{r14c8\t\r  r13c8}\t\r  –\t\r  b14n1{r13c8\t\r  r15c8}\t\r  –\t\r  b14n6{r15c8\t\r  .}\t\r  ==>\t\r  r14c8\t\r  ≠\t\r  10\t\r  \nwhip[3]:\t\r  r12c6{n13\t\r  n3}\t\r  –\t\r  b6n3{r8c6\t\r  r8c8}\t\r  –\t\r  r1c8{n3\t\r  .}\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  13\t\r  \nsingles\t\r  ==>\t\r  r12c6\t\r  =\t\r  13,\t\r  r12c2\t\r  =\t\r  4,\t\r  r9c2\t\r  =\t\r  13,\t\r  r13c5\t\r  =\t\r  13,\t\r  r15c12\t\r  =\t\r  13\t\r  \nwhip[3]:\t\r  r15c6{n16\t\r  n3}\t\r  –\t\r  r14n3{c5\t\r  c13}\t\r  –\t\r  r14n16{c13\t\r  .}\t\r  ==>\t\r  r15c11\t\r  ≠\t\r  16,\t\r  r15c9\t\r  ≠\t\r  16\t\r  \n\n324 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[4]:\t\r  r1n7{c14\t\r  c4}\t\r  –\t\r  b1n4{r1c4\t\r  r1c1}\t\r  –\t\r  r16c1{n4\t\r  n2}\t\r  –\t\r  b16n2{r16c14\t\r  .}\t\r  ==>\t\r  r13c14\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  b2n10{r3c5\t\r  r3c8}\t\r  –\t\r  b2n8{r3c8\t\r  r3c7}\t\r  –\t\r  r6c7{n8\t\r  n4}\t\r  –\t\r  b14n4{r14c7\t\r  .}\t\r  ==>\t\r  r14c5\t\r  ≠\t\r  10\t\r  \nwhip[3]:\t\r  b14n4{r14c7\t\r  r13c7}\t\r  –\t\r  b14n15{r13c7\t\r  r14c7}\t\r  –\t\r  r14n10{c7\t\r  .}\t\r  ==>\t\r  r14c4\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  r6n4{c7\t\r  c5}\t\r  –\t\r  r14c5{n4\t\r  n3}\t\r  –\t\r  c13n3{r14\t\r  r3}\t\r  –\t\r  r3c7{n3\t\r  .}\t\r  ==>\t\r  r6c7\t\r  ≠\t\r  8\t\r  \nsingles\t\r  ==>\t\r  r6c7\t\r  =\t\r  4,\t\r  r6c5\t\r  =\t\r  16,\t\r  r6c8\t\r  =\t\r  8,\t\r  r3c7\t\r  =\t\r  8,\t\r  r9c8\t\r  =\t\r  16,\t\r  r14c5\t\r  =\t\r  4\t\r  \nwhip[5]:\t\r   r14n16{c12\t\r   c13}\t\r   –\t\r   c14n16{r16\t\r   r3}\t\r   –\t\r   c14n15{r3\t\r   r1}\t\r   –\t\r   r1c3{n15\t\r   n2}\t\r   –\t\r   r16c3{n2\t\r   .}\t\r   ==>\t\r  \nr16c9\t\r  ≠\t\r  16\t\r  \nwhip[5]:\t\r  c11n16{r13\t\r  r8}\t\r  –\t\r  r8c9{n16\t\r  n2}\t\r  –\t\r  r16c9{n2\t\r  n1}\t\r  –\t\r  b11n1{r10c9\t\r  r10c11}\t\r  –\t\r  c11n2{r10\t\r  .}\t\r  \n==>\t\r  r13c11\t\r  ≠\t\r  4\t\r  \nsingles\t\r  ==>\t\r  r9c11\t\r  =\t\r  4,\t\r  r9c9\t\r  =\t\r  3,\t\r  r9c7\t\r  =\t\r  11,\t\r  r12c11\t\r  =\t\r  11,\t\r  r4c11\t\r  =\t\r  12,\t\r  r4c12\t\r  =\t\r  7\t\r  \nwhip[3]:\t\r  r14n16{c12\t\r  c13}\t\r  –\t\r  b16n3{r14c13\t\r  r13c16}\t\r  –\t\r  r13n7{c16\t\r  .}\t\r  ==>\t\r  r13c11\t\r  ≠\t\r  16\t\r  \nsingles\t\r  ==>\t\r  r8c11\t\r  =\t\r  16,\t\r  r8c9\t\r  =\t\r  2\t\r  \nwhip[3]:\t\r  b16n2{r13c14\t\r  r16c14}\t\r  –\t\r  r16c1{n2\t\r  n4}\t\r  –\t\r  b15n4{r16c9\t\r  .}\t\r  ==>\t\r  r13c12\t\r  ≠\t\r  2\t\r  \nwhip[4]:\t\r   b16n2{r13c14\t\r   r16c14}\t\r   –\t\r   r16n1{c14\t\r   c9}\t\r   –\t\r   b11n1{r10c9\t\r   r10c11}\t\r   –\t\r   c11n2{r10\t\r   .}\t\r   ==>\t\r  \nr13c3\t\r  ≠\t\r  2,\t\r  r13c1\t\r  ≠\t\r  2\t\r  \nwhip[4]:\t\r  r15c11{n1\t\r  n7}\t\r  –\t\r  r13c11{n7\t\r  n2}\t\r  –\t\r  b16n2{r13c14\t\r  r16c14}\t\r  –\t\r  r16n1{c14\t\r  .}\t\r  ==>\t\r  r15c9\t\r  ≠\t\r  1\t\r  \nwhip[4]:\t\r   b15n4{r13c12\t\r   r16c9}\t\r   –\t\r   c9n1{r16\t\r   r10}\t\r   –\t\r   b11n5{r10c9\t\r   r10c12}\t\r   –\t\r   r7c12{n5\t\r   .}\t\r   ==>\t\r  \nr13c12\t\r  ≠\t\r  6\t\r  \nwhip[3]:\t\r  c12n2{r14\t\r  r10}\t\r  –\t\r  c12n5{r10\t\r  r7}\t\r  –\t\r  c12n6{r7\t\r  .}\t\r  ==>\t\r  r14c12\t\r  ≠\t\r  16\t\r  \nwhip[3]:\t\r  r15n15{c3\t\r  c9}\t\r  –\t\r  r15n6{c9\t\r  c8}\t\r  –\t\r  r13n6{c8\t\r  .}\t\r  ==>\t\r  r13c1\t\r  ≠\t\r  15\t\r  \nwhip[4]:\t\r   r15n15{c9\t\r   c3}\t\r   –\t\r   b13n3{r15c3\t\r   r13c3}\t\r   –\t\r   b16n3{r13c16\t\r   r14c13\t\r  r14n16{c13\t\r   .}\t\r   ==>\t\r  \nr14c9\t\r  ≠\t\r  15\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n\n \n12. Patterns of proof and associated classifications \nUntil now, our approach has been based on the resolution paradigm introduced \nin section 1.2 and formalised in chapter 4. The fundamental confluence property of \nthe various T-braid theories and the “T&E(T) vs T-braids” theorems together show \nthat this paradigm applies well, in theory, to instances in T&E(1) or T&E(2): in each \ncase, a “simplest first” strategy and a universal rating [respectively B or BB] can be \ndefined. Moreover, the many concrete examples provided in this book show that, for \ninstances in T&E(1) or gT&E(1), it also applies well in practice to CSP’s as varied \nas Sudoku, N-Queens, Futoshiki, Kakuro, Numbrix® and Hidato® (for the latter, see \nchapters 14 to 16). For small values of p, this practical aspect could be extended to \ninstances in T&E(Sp). \nNow, for the general instances in T&E(2) and beyond gT&E(1), even though the \nparadigm still applies in theory, resolution paths for most of them require B-braids \n(even S-braids are generally not enough). But the structure of B-braids is rather \ncomplex, as it relies on “contextual” indirect contradictions between two candidates. \nConsidering our general readability requirement, one may legitimately wonder \nwhether a solution based on such patterns can satisfy it. The first two sections below \nwill introduce apparently simpler patterns; they will finally be shown to have the \nsame resolution power, but they correspond to very different views of resolution. \nBeyond the technicalities associated with these new extended whip and braid \npatterns, our main point here is thus of a more epistemological nature. Re-assessing \nour initial resolution paradigm, it revolves around the notion of a pattern of proof. \nBecause the fuzzy borderline of complexity that may compel us to switch from \nthe extreme requirement of finding the “simplest” solution to the relaxed one of \nfinding a “readable” solution seems to cut through the T&E(2) land, this chapter \nstarts by exploring various ways of dealing with such instances. Even the possibility \nof defining the notion of a “simplest solution” becomes much more questionable in \nT&E(2). Moreover, beyond gT&E(1), the simplicity and the understandability \nrequirements may be at strong variance; we thus discuss various options for their \ninterpretation. In particular, we show that “equivalent” structures (e.g. B*-braids vs \nB-braids) can correspond to viewpoints that lead to very different classifications. \nFinally, we show that a pure logic approach along the same lines as above, is still \npossible in theory, even for instances beyond T&E(2), although it may require some \n\n326 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nextensions to our initial resolution paradigm and the computational complexity may \nbe much higher, depending on which patterns of proof one is willing to accept. \n12.1. Bi-whips, bi-braids, confluence and bi-T&E \nFrom a purely abstract logical point of view, given a single-solution instance of a \nCSP, if a candidate for some CSP variable is not its final value, then it is \ncontradictory with anything, including itself. As shown by the various resolution \ntheories we had to define, this does not imply that it can be proven to be \ncontradictory either “easily” or in an “understandable” way or in a “constructive” \nway or in a “pattern-based” way. When one deals with T&E(2) instances, one has to \nconsider contradictions arising from pairs of candidates in addition to contradictions \narising from a single candidate; but the previous remarks also apply to pairs of \ncandidates; as a result, when saying that two candidates are incompatible, one \nshould always specify how this incompatibility is supposed to be proven. \nIn order to catch by constructive logical patterns some types of indirect pairwise \ncontradictions between candidates, we shall first introduce the concepts of a bi-whip \nand a bi-braid. For each integer n≥1, the bi-whip[n] and bi-braid[n] incompatibility \nrelations between candidates Z1 and Z2 will be two different constructive restricted \nforms of the abstract logical nand2 predicate defined by:  \nnand2(Z1, Z2) ≡ ¬[candidate(Z1) ∧ candidate(Z2)]. \nAs should now be expected from all the generalised whips and braids we have \nmet in the previous chapters, we shall show that bi-braids have a smooth theory (one \ncan prove a form of stability for confluence and a “bi-braid vs bi-T&E” theorem) \nand bi-whips are a structurally nicer and easier to compute (hopefully good) logical \napproximation of bi-braids. In the next section, we shall see how each of these \npatterns can be used to define new extended whip or braid patterns (namely W*-\nwhips and B*-braids) that have a significantly simpler structure than W-whips and \nB-braids, although they are also based on indirect pairwise contradictions. \n12.1.1. Definition of bi-whips and bi-braids \nApart from being based on two candidates instead of one, bi-whips and bi-braids \nare very much like whips and braids, respectively. But, instead of leading to \neliminations, they prove contradictions between pairs of candidates. \nDefinition: given a resolution state RS and two different candidates Z1 and Z2 in \nRS that are not linked, for any n≥1, a bi-whip[n] built on Z1 and Z2 is a structured \nlist ({Z1, Z2}, (V1, L1, R1), …,  (Vn-1, Ln-1, Rn-1), (Vn, Ln)), such that: \n– for any 1≤k≤n, Vk is a CSP variable; \n– Z1, Z2, all the Lk’s and all the Rk’s are candidates in RS; \n\n12. Patterns of proof and associated classifications   \n327 \n– in the sequence (L1, R1, …, Ln-1, Rn-1, Ln), any two consecutive elements are \ndifferent; \n– Z1 and Z2 do not belong to {L1, R1, L2, R2, …. Ln}; \n– L1 is linked to Z1 or Z2; \n– right-to-left continuity: for any 1<k≤n, Lk is linked to Rk-1; \n– strong left-to-right continuity: for any 1≤k<n, Lk and Rk are candidates for Vk; \n– Ln is a candidate for Vn; \n– at least one of Z1 and Z2 is not a label for Vn; \n– for any 1≤k<n, Rk is the only candidate for Vk compatible with Z1, Z2 and all \nthe previous Ri (i<k); \n– Vn has no candidate compatible with Z1, Z2 and all the previous Ri (i<n); (but \nVn has more than one candidate – the usual non-degeneracy condition). \nDefinition: a bi-braid[n] built on Z1 and Z2 is a structured list as above, with the \nright-to-left continuity condition replaced by: \n– for any 1<k≤n, Lk is linked to Z1 or Z2 or a previous Ri. \nDefinitions: given a resolution state RS and n ≥ 1, two different candidates Z1 \nand Z2 in RS that are not linked are said bi-whip[n] (respectively bi-braid[n]) \nincompatible or contradictory in RS if there is in RS some bi-whip[n] (resp. some \nbi-braid[n]) built on Z1 and Z2. Z1 and Z2 are said bi-whip (respectively bi-braid) \nincompatible or contradictory in RS if they are bi-whip[n] (resp. bi-braid[n]) \nincompatible in RS for some n ≥ 1. We also say that they are bi-whip (resp. bi-braid) \ncontradictory. \nRemarks: \n– in order to avoid confusion with B-braids, the “bi” in “bi-whip” and “bi-braid” \nshould be pronounced [ai] as in “bye bye”; \n– in a bi-whip[n] or a bi-braid[n], n is called the length; notice that, according to \nthe above definitions, as was the case with those for whips or braids and all their \ngeneralisations, no initial structured strict sublist ({Z1, Z2}, (V1, L1, R1), …,  (Vn-1, \nLk-1, Rk-1), (Vk, Lk))  of ({Z1, Z2}, (V1, L1, R1), …,  (Vn-1, Ln-1, Rn-1), (Vn, Ln)), with \nk < n, is a bi-whip[n] or a bi-braid[n] based on Z1 and Z2 in RS; this is our usual \nnon-degeneracy condition for whip-like or braid-like structures; \n– we use the same terminology of z- and t- candidates as for whips; here, a z-\ncandidate is a candidate linked to (at least) one of Z1 and Z2; \n– in any CSP, for any bi-braid[2] built on Z1 and Z2 there is a bi-whip[2] built on \nZ1 and Z2 (the proof is similar to that for ordinary braids – see theorem 5.5); \n– if, in a resolution state RS, W is a partial whip [respectively a partial braid] \nbased on Z and C is a left-linking or a t-candidate of W, then Z and C are obviously \nbi-whip [resp. bi-braid] incompatible in RS, unless C is linked to Z: the final CSP \n\n328 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nvariable through which the bi-whip [resp. bi-braid] contradiction is made explicit is \nthe first Vk such that C is linked to Rk; \n– if the present definitions were extended to the case Z1 = Z2, a bi-whip [resp. a \nbi-braid] built on Z1 and Z2 would merely be a whip [resp. a braid] of same length \nbuilt on Z1; as usual in our approach, we exclude this case because it is degenerated. \n12.1.2. Bi-whips[1] in Sudoku \nIn Sudoku, a typical bi-whip[1] contradiction occurs between Z1 and Z2 when, in \na row r, number n appears as a candidate in only two blocks b1 and b2 and when Z1 \n[respectively Z2] is a candidate for number n in an rc-cell situated in b1 [resp. b2] but \nnot in r (as  in the leftmost part of Figure 12.1); as usual, the role of rows and blocks \ncan be permuted (as in the rightmost part of Figure 12.1); and rows can be replaced \nby columns.  \n \nFigure 12.1. Two typical types of bi-whips[1] in Sudoku \nBut there are other possibilities: when, in a row r, number n is a candidate in \nonly two columns c1 and c2 and Z1 and Z2 are candidates for n, respectively in c1 and \nc2, anywhere outside r;  or when a 2D cell is bivalue and each of Z1 and Z2 is linked \nto a different candidate for this cell. See section 12.3.5 for more examples. \n12.1.3. Definition of the bi-braid logical theories  \nLet us now define an increasing sequence of logical theories for bi-braids. Notice \nthat we speak of logical theories, not of resolution theories; only later (in section \n12.2) will bi-braids be used in resolution theories. \nWe first define, for each n ≥ 1, an auxiliary predicate: \nbi-braid[n](z1, z2, l1, r1, V1, l2, r2, V2, …, ln-1, rn-1, Vn-1, ln, Vn), with signature (label, \nlabel, [label, label, CSP-variable]n-1, label, CSP-Variable). Formally, it is the \ndescription of a bi-braid[n] in terms of candidates and links, in the style of what was \nwritten for whips in section 5.2.2. \nb \nr1 \nr2 \nZ1 \nZ2 \nZ1 \nr \nb2 \nb1 \nZ2 \n\n12. Patterns of proof and associated classifications   \n329 \nWe also introduce a new constant “bi-braid” in the domain of Constraint or \nConstraint-Type (depending on which modelling choice has been made for the CSP \nunder consideration). We correlatively allow predicate “linked-by” to accept this \nconstant as its last argument. Predicate “linked” is still obtained from “linked-by” by \nexistentially quantifying its last argument (of type Constraint or Constraint-Type). \nNotice that, contrary to all the links considered until now, links of type bi-braid are \nnot structural, they may be dynamically created, but this will not be a problem in the \nsequel, because they are persistent. \nWe can now define BRT*(CSP) as the usual BRT(CSP), but with the domain of \nits Constraint or Constraint-Type extended as described above; as a result, its ECP \nrule is naturally extended into ECP* so as to take care of the corresponding new \nconstraints; compared with BRT, it can be described as containing the additional \nrule: \nECP-bi-braid: ∀≠l1,l2{[value(l1) ∧ linked(l1, l2, bi-braid)] ⇒ ¬candidate(l2)}. \nDefinition: a bi-braid[n] contradiction rule is a formula in the “condition => \naction” form, where “condition” is a bi-braid[n] for two different candidates Z1 and \nZ2 and “action” is the assertion of ground atomic formula “linked-by(Z1, Z2, bi-\nbraid)”. \nDefinition: for any n ≥ 0, let biBn be the following logical theory: \n– biB0 = BRT*(CSP); \n– biB1 = biB0 ∪ { bi-braid[1] contradiction rules }, \n– biB2 = biB1 ∪ { bi-braid[2] contradiction rules }, \n– ....  \n– biBn = biBn-1 ∪ { bi-braid[n] contradiction rules }, \n– biB∞ = ∪n≥0 biBn. \nNotice that, in and of itself, none of the biBn theories allows any elimination that \ncould not be done in the original BRT(CSP). \n12.1.4. Stability for confluence of the bi-braid logical theories  \nWe have not defined the biBn as resolution theories (as such they would be no \nmore than BRT(CSP)), but the definition (in section 4.5) of stability for confluence \ncan be extended to them as follows. \nDefinition: a logical bi-braid theory T is stable for confluence if, for any instance \nP of the CSP, for any resolution state RS1 of P and for any rule R in T applicable in \nstate RS1 for asserting a bi-braid contradiction for two different candidates Z1 and Z2 \n– in the form of a “linked-by(Z1, Z2, bi-braid)” ground atomic formula – , if any set \nY of consistency preserving assertions and/or eliminations is done before R is \n\n330 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \napplied, leading to a resolution state RS2, and if it destroys the pattern of R (R can \ntherefore no longer be applied for asserting a bi-braid link between Z1 and Z2), then \nthere always exists a sequence of rules in T that will allow the assertion of a bi-braid \nlink between Z1 and Z2 (possibly based on a shorter bi-braid). \nThe following theorem is mainly a preamble to the proof of the confluence \nproperty of the B*pBm resolution theories defined in section 12.2. \nTheorem 12.1: for any 0 ≤ n ≤ ∞, bi-braid theory biBn is stable for confluence. \nProof: the following proof is a straightforward adaptation of that of theorem 5.6, \nwith only very slight changes. \nLet n<∞ be fixed (the case n=∞ is an obvious corollary to all the cases n<∞). We \nshall show that, if there is a bi-braid B of length m ≤ n built on Z1 and Z2 in some \nresolution state RS1, then, for any further resolution state RS2 obtained from RS1 by \nconsistency preserving assertions and eliminations, in the resolution state RS3 \nobtained from RS2 by applying all the rules in BRT until quiescence, if both Z1 and \nZ2 are still candidates in RS3, there will always be in RS3 a bi-braid of length m’ ≤ m \nbuilt on Z1 and Z2.  \nLet B be: {L1 R1} – {L2 R2} – …. – {Lp Rp} – {Lp+1 Rp+1} – … – {Lm .}. \nFirst notice that, as BRT has the confluence property (theorem 4.1), state RS3 is \nuniquely defined, independently of the way we apply the rules in BRT.  \nIf any of Z1 or Z2 has been eliminated or asserted in RS3, there remains nothing \nto prove. Otherwise, we must consider all the elementary events related to B that can \nhave happened between RS1 and RS3 (all the possibilities are marked by the same \nletter as in the proof of theorem 5.6). For this, we start from B’ = what remains of B \nin RS3. At this point, B’ may not be a bi-braid in RS3. We repeat the following \nprocedure, for p = 1 to p = m, producing in the end a new (possibly shorter) bi-braid \nB’ built on Z1 and Z2 in RS3. All the references below are to the current B’. \na) If, in RS3, the left-linking or any t- or z- candidate of CSP variable Vp has \nbeen asserted, then Z1 or Z2 and/or the previous Rk(’s) to which Lp is linked must \nhave been eliminated by ECP in the passage from RS2 to RS3 (if it was not yet \neliminated in RS2); if Z1 or Z2 is among these eliminations, there remains nothing to \nprove; otherwise, the procedure has already been successfully terminated by case f \nof the first such k. \nb) If, in RS3, left-linking candidate Lp has been eliminated (but not asserted) (it \ncan therefore no longer be used as a left-linking candidate in a bi-braid) and if CSP \nvariable Vp still has a z- or a t- candidate Cp, then replace Lp by Cp; now, up to Cp, \nB’ is a partial bi-braid built on Z1 and Z2 in RS3. Notice that, even if Lp was linked \n\n12. Patterns of proof and associated classifications   \n331 \nto Rp-1 (as it would if B was a bi-whip), this may not be the case for Cp; therefore \ntrying to prove a similar theorem for bi-whips would fail here, as in the whips case. \nc) If, in RS3, any t- or z- candidate of Vp has been eliminated (but not asserted), \nthis has not changed the basic structure of B (at stage p). Continue with the same B’. \nd) If, in RS3, right-linking candidate Rp has been asserted (p can therefore not be \nthe last index of B’), it can no longer be used as an element of a bi-braid, because it \nis no longer a candidate. Notice that all the left-linking and t- candidates for CSP \nvariables of B after p that were incompatible in B with Rp, i.e. linked to it, if still \npresent in RS2, must have been eliminated by ECP somewhere between RS2 and \nRS3. But, considering the bi-braid structure of B upwards from p, more eliminations \nand assertions must have been done by rules from BRT between RS2 and RS3. \nLet q be the smallest number strictly greater than p such that, in RS3, CSP \nvariable Vq still has a (left-linking, t- or z-) candidate Cq that is not linked to any of \nthe Ri for p ≤ i < q (by definition of a bi-braid, Cq is therefore linked to Z1 or to Z2 or \nto some Ri with i < p). Between RS2 and RS3, the following rules from BRT must \nhave been applied for each of the CSP variables Vu of B with index u increasing \nfrom  p+1 to q-1 included: eliminate its left-linking candidate (Lu) by ECP, assert its \nright-linking candidate (Ru) by S, eliminate by ECP all the left-linking and t-\ncandidates for CSP variables after u that were incompatible in B with the newly \nasserted candidate (Ru).  \nIn RS3, excise from B’ the part related to CSP variables p to q-1 (included) and \n(if Lq has been eliminated in the passage from RS1 to RS3) replace Lq by Cq; for each \ninteger s ≥ p, decrease by q-p the index of CSP variable Vs and of its candidates in \nB’; in RS3, B’ is now, up to p (the ex q), a partial bi-braid in Bn built on Z1 and Z2.  \ne) If, in RS3, left-linking candidate Lp has been eliminated (but not asserted) and \nif CSP variable Vp has no t- or z- candidate in RS3 (complementary to case b), then \nVp has only one possible value in RS3, namely Rp; Rp must therefore have been \nasserted by S somewhere between RS1 and RS3; this case has therefore been dealt \nwith by case d (because the assertion of Rp also entails the elimination of Lp). \nf) If, in RS3, right-linking candidate Rp of B has been eliminated (but not \nasserted), in which case p cannot be the last index of B’, then replace B’ by its initial \npart: {L1 R1} – {L2 R2} – …. – {Lp .}. At this stage, B’ is in RS3 a shorter bi-braid \nbuilt on Z1 and Z2. Return B’ and stop. \nNotice that, as was the case for ordinary braids, for the bi-braid thus obtained, its \nsequence of  CSP variables is a sub-sequence W’ of those of B, its right-linking \ncandidates are those of B belonging to the sub-sequence W’, its left-linking \ncandidates are those of B belonging to the sub-sequence W’, each of them possibly \nreplaced by a t-candidate of B for the same CSP variable. \n\n332 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n12.1.5. Definition of the bi-T&E(Z1, Z2, RS) procedure \nDefinition: given a resolution state RS and two different non-linked candidates \nZ1 and Z2 in RS, bi-T&E(Z1, Z2, RS) or bi-Trial-and-Error(Z1, Z2, RS) is the \nfollowing procedure:  \n- make a copy RS’ of RS; in RS’, delete Z1 and Z2 as candidates and assert them as \nvalues;  \n- in RS’, apply repeatedly all the rules in BRT(CSP) until quiescence; \n- if RS’ has become a contradictory state (detected by axiom CD), then assert \nlinked-by(Z1, Z2, bi-braid) in RS (sic: in RS, not in RS’).  \nRemarks: \n– this definition is meaningful only because BRT(CSP) has the confluence \nproperty for any CSP: otherwise, the result of “applying repeatedly in RS’ all the \nrules in BRT until quiescence” may not be uniquely defined; \n– if we extended this definition to the degenerated case Z1 = Z2, bi-T&E(Z1, Z1, \nRS) would assert “linked-by(Z1, Z1, bi-braid)”  in RS if and only if T&E(Z1, RS) \neliminates Z1 from RS; \n– in case Z1 ≠ Z2, but Z1 would be eliminated by T&E(Z1, RS) or Z2 by \nT&E(Z2, RS), then bi-T&E(Z1, Z2, RS) would assert linked-by(Z1, Z2, bi-braid); in \nthe sequel, we shall avoid such situations by systematically applying T&E before bi-\nT&E. \n12.1.6. The bi-T&E(Z1, Z2, RS) procedure vs bi-braid incompatibilities \nIt is obvious that, for any bi-braid incompatibility obtained via a bi-braid B built \non two different candidates Z1 and Z2 in some resolution state RS, procedure bi-\nT&E(Z1, Z2, RS) will assert “linked-by(Z1, Z2, bi-braid)”  in RS; this can easily be \nseen by applying in RS’ a sequence of rules from BRT following the bi-braid \nstructure of B. The converse is more interesting. \nTheorem 12.2 (“bi-T&E vs bi-braid”): for any instance of any CSP, for any \nresolution state RS and for any pair of different non-linked candidates Z1 and Z2 \nin RS, if bi-T&E(Z1, Z2, RS) asserts “linked-by(Z1, Z2, bi-braid)” in RS, then there \nis in RS a bi-braid (of undefined length) built on Z1 and Z2. \nProof: it is a straightforward adaptation of the corresponding proof for braids \n(theorem 5.7).  \nLet RS’ be the auxiliary resolution state used by bi-T&E(Z1, Z2, RS). Following \nthe steps of BRT in RS’, we progressively define a bi-braid in RS built on Z1 and Z2. \nFirst, remember that BRT contains three types of rules: ECP (which eliminates \ncandidates), S (which asserts a value for a CSP variable) and CD (which detects a \ncontradiction on a CSP variable).  \n\n12. Patterns of proof and associated classifications   \n333 \nConsider the first step of BRT in RS’ that is an application of rule S, asserting \nsome label R1 as a value. As R1 was not a value in RS, there must have been in RS’ \nsome elimination of a candidate, say L1, for a CSP variable V1 of which R1 is a \ncandidate, and the elimination of L1 (which made the assertion of R1 by S possible \nin RS’) can only have been made possible in RS’ by the assertion of Z1 and Z2. But \nif L1 has been eliminated in RS’, it can only be by ECP and because it is linked to Z1 \nor Z2. Then {L1 R1} is the first pair of candidates of our bi-braid in RS and V1 is its \nfirst CSP variable. (Notice that there may be other z-candidates for V1, but this is \npointless, we can choose any of them as L1 and consider the remaining ones as z-\ncandidates).  \nThe sequel is done by recursion. Suppose we have built a bi-braid in RS \ncorresponding to the part of the BRT resolution in RS’ up to its k-th assertion step. \nLet Rk+1 be the next candidate asserted by BRT in RS’. As Rk+1 was not a value in \nRS, there must have been in RS’ some elimination of a candidate, say Lk+1, for a \nCSP variable Vk+1 of which Rk+1 is a candidate, and the elimination of Lk+1 (which \nmade the assertion of Rk+1 possible in RS’) can only have been made possible in RS’ \nby the assertion of Z1 and/or Z2 and/or of some of the previous Ri. But if Lk+1 has \nbeen eliminated in RS’, it can only be by ECP and because it is linked to Z1 or Z2 or \nto some of the previous Ri, say C. Then our partial bi-braid in RS can be extended to \na longer one, with {Lk+1 Rk+1} added to its candidates, Lk+1 linked to C, and Vk+1 \nadded to its sequence of CSP variables. \nEnd of the procedure: a contradiction is supposed to be obtained by BRT in RS’. \nAs, in BRT, only ECP can eliminate a candidate, a contradiction is obtained if a \nvalue asserted in RS’, i.e. if Z1 or Z2 or one of the Ri, i<n, eliminates in RS’ (via \nECP) a candidate, say Ln, that was the last one for a corresponding variable Vn and \nthat is linked to Z1 or Z2 or one of the Ri, i<n. Ln and Vn are thus the last left-linking \ncandidate and CSP variable of the bi-braid we were looking for in RS. \nNothing can guarantee that both Z1 and Z2 have effectively been used in this \nconstruction, but this is not a problem: if one of them has not, it only means that we \nare in the special case mentioned in the second remark at the end of section 12.1.5. \n12.2. W*p-whips and B*p-braids \nWe now introduce W*p-whips and B*p-braids. Basically, they are like ordinary \nwhips or braids in which indirect, but non-contextual (contrary to W-whips and B-\nbraids), bi-whip or bi-braid contradications between candidates are allowed \nwherever direct links can appear in whips or braids. We shall show that every B*-\nbraid can be considered as a B-braid and conversely (surpringly) – if we forget any \nnotion of length. We shall also define associated resolution theories and show that \nthey have the confluence property, thereby allowing to define a B*B rating. It is \n\n334 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ninteresting to notice that different views of “equivalent” structures (B-braids vs B*-\nbraids) lead to very different ratings and classifications. \n12.2.1. Definition of W*p-whips and B*p-braids \nDefinition: given a resolution state RS of any CSP, an integer p with 1 ≤ p ≤ ∞, \nan integer m≥1 and a candidate Z in RS, a W*p-whip[m] built on Z is a structured \nlist (Z, (V1, L1, R1), …, (Vm-1, Lm-1, Rm-1), (Vm, Lm)) that satisfies the following \nconditions: \n– for any 1≤k≤m, Vk is a CSP variable; \n– Z, all the Lk’s and all the Rk’s are candidates; \n– in the sequence of labels (L1, R1, …, Lm-1, Rm-1, Lm), any two consecutive \nelements are different; \n– Z does not belong to {L1, R1, L2, R2, …. Lm}; \n– either L1 is linked to Z or L1 and Z  are bi-whip[p’] incompatible in RS for \nsome p’ ≤ p; \n– extended right-to-left continuity: for any 1<k≤m, either Lk is linked to Rk-1 or \nLk and Rk-1 are bi-whip[p’] incompatible in RS for some p’ ≤ p; \n– strong left-to-right continuity: for any 1≤k<m, Lk and Rk are candidates for Vk; \n– Z is not a label for Vm; \n– for any 1≤k<m: Rk is the only candidate for Vk that is compatible and not bi-\nwhip[p’] incompatible in RS for any p ’≤ p with Z and with all the previous right-\nlinking candidates Ri; \n– Vm has no candidate compatible and not bi-whip[p’] incompatible in RS for \nany p’ ≤ p with Z and with all the previous right-linking candidates (but Vm has \nmore than one candidate – our usual non-degeneracy condition of the global \nstructure being defined). \n \nDefinition: a B*-braid[m] is a structured list as above, with “bi-whip \n[in]compatible” replaced everywhere by “bi-braid [in]compatible” and with the \nextended right-to-left continuity condition replaced by: \n– for any 1≤k≤m, Lk is linked to Z1 or to Z2 or to a previous Ri or Lk is bi-\nbraid[p’] incompatible in RS for some p ’≤ p with Z1 or with Z2 or with a previous \nRi. \nIn both cases, Z is called the target and m the pseudo-length (“pseudo” because it \ndoes not take into account the lengths of the inner bi-whip/bi-braid contradictions). \nIf p = ∞, we discard as usual the p index and we write W*-whip and B*-braid.  \nThe case m = 1 is worth some comment. Recalling our definition of forcing-\nwhips in section 5.9, condition patterns of rules in W*pW1 (respectively B*pB1) \n\n12. Patterns of proof and associated classifications   \n335 \ncould also be named forcing-bi-whips (resp. forcing-bi-braids), because the target Z \nof a W*p-whip[1] (resp. a B*p-braid[1] ) is bi-whip (resp. bi-braid) incompatible \nwith all the candidates of CSP variable V1: using the symmetry of bi-whips (resp. \nbi-braids) with respect to their {Z1, Z2} pair and looking backwards towards Z from \nthe first CSP variable V1, all the candidates for V1 contradict Z. \nTheorem 12.3 (W*-whip and B*-braid elimination theorem): given a W*-whip \n[respectively a B*-braid] built on candidate Z, its target Z can be eliminated. \nProof: obvious. \nFigure 12.2 is a graphico-symbolic representation of a W*-whip[4] built on Z. \nVertical lines represent the sequence of its CSP variables, from left to right; all the \nother lines represent direct links or bi-whip contradictions (undifferentiated); curved \nones represent distant contradictions (corresponding to global z- and t- candidates); \na candidate for a CSP variable can only exist at an endpoint of another line. \n \n \n \nFigure 12.2. A graphico-symbolic representation of a W*-whip[4] built on Z  \nBy comparing the definitions or the graphico-symbolic representations, it \nappears that B*p-braids are a particular case of Bp-braids and W*-whips are a \nparticular case of W*-whips (they are even the same pattern, length \nnotwithstanding, in the m=0 case, if we extend the above definition to this case). \nThe main difference between a Bp-braid and a B*p-braid (still apart from not \ntaking into account the lengths of the inner structures) is that the inner bi-braids of a \nB*p-braid rely on no global z- or t- candidates, contrary to the inner braids used in \na Bp-braid. Said otherwise, the indirect contradictions between two candidates \nappearing in a B-braid may be contextual (they may depend on Z and the previous \nright-linking candidates), while they may not in a B*-braid. It makes the structure of \na B*-braid apparently much simpler. However, there is a surprising “equivalence”. \nZ \nR1 \nR2 \nR3 \nV1 \nV2 \nV3 \nV4 \n\n336 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nTheorem 12.4 (pseudo-equivalence of B*-braids and B-braids): in any \nresolution state RS of any CSP, for any candidate Z in RS, if there is in RS a B*-\nbraid based on Z, then there is also in RS a B-braid based on Z. Conversely, if \nthere is in RS a B-braid[m] based on Z, then there is in RS a B*m-1-braid[1], i.e. a \nforcing bi-braid[m-1], based on Z. \nProof: the first part is a result of the preceding remarks. As for the converse, \nconsider a B-braid[m] B with target Z. It is easy to see that, for any global left-\nlinking or t- candidate C of B, the part of B before C is a bi-braid of length less than \nm based on Z and C. Taking all such bi-braids for all the candidates of the last CSP \nvariable of B, we get the desired B*-braid[1] (or forcing bi-braid). \nRemarks:  \n– although the first part of the theorem remains true when we replace B*-braids \nby W*-whips and B-braids by W-whips, the converse does not; \n– in our view, in spite of this theorem, B*-braids and B-braids cannot be \nconsidered as the “same” pattern: the notion of length [or pseudo-length] that we \nhave always introduced at the same time as each of our patterns is an integral and an \nessential part of their definition; \n– as all the (known) Sudoku puzzles are in T&E(2) or less, they can all be solved \nby forcing bi-braids; but this is not a very interesting result, as it gives no indication \non the maximum length of the necessary bi-braids; \n– the smallest p such that an instance Q is in B*pB may be much larger than the \nsmallest p such that Q is in BpB; \n– in the Sudoku community, vague notions of a “contradiction chain” and a \n“nested contradiction chain” have been in existence for a long time (with vaguely \ncontradictory variants of each). As far as any precise interpretation can be given \n(based e.g. on the outputs of Sudoku Explainer), a “contradiction chain” is a \nsequence of applications of Single and ECP rules, i.e. of rules from BRT, based on \nthe assumption of some candidate (if Z is True, then …); said otherwise, it is a proof \nin BRT. It has also been argued that whips and braids are “the same thing as” \ncontradiction chains; this claim is based on too vague definitions of contradiction \nchains to be refuted, but such a chain is much more closer to our T&E procedure (or \nto some version of it that partly controls the total number of inferences) than to a \nwhip or a braid. In the same view, W-whips, B-braids, W*-whips and B*-braids \nwould all be “the same thing as” nested contradiction chains, although the latter are \nmuch closer to our T&E(2) procedure. Notwithstanding all this, our main point here \nis, the “same-thing” view completely forgets the notion of length inherently \nassociated with each of our patterns, the confluence property of the braid resolution \ntheories that can only be defined with this specific notion of length, the “simplest-\nfirst” strategy it justifies and the associated ratings. The “same-thing” view could as \nwell be applied to the various types of “contradiction chains” on which Sudoku \n\n12. Patterns of proof and associated classifications   \n337 \nExplainer is based (and to its associated measure of complexity, basically the \nnumber of inference steps, of which we have already mentioned that it cannot be \ndefined by any logical theory – see note 5 of chapter 6); accordingly, the “same” \npattern would thus be assigned three different ratings. \n12.2.2. The W*pWm and B*pBm resolution theories; confluence property of B*pBm \nDefinition: given an integer p with 1 ≤ p ≤ ∞, we define in the now usual way \nthe following increasing sequence of resolution theories: \n– W*pW0 = BRT(CSP), \n– W*pW1 = W*pW0 ∪ W1 ∪ {rules for W*p-whips of pseudo-length 1}, \n– … \n– W*pWm = W*pWm-1 ∪ Wm ∪ {rules for W*p-whips of pseudo-length m}, \n– W*pW∞ = ∪m≥0 W*pWm. \nOne has obvious similar definitions for (B*pBm, m≥0).  \nW*pWm [respectively B*pBm] is based on W*-whips [resp. B*-braids] of \nmaximum pseudo-length m with inner bi-whips [resp. bi-braids] of maximum length \np. As for all our previous patterns, we also define W*Wm [resp. B*Bn] as W*∞Wm \n[resp. B*∞Bm], in which inner bi-whips [resp. bi-braids] may have unrestricted \nlength. \nSimilarly to the whip, g-whip, S-whip, W-whip cases, or to the corresponding \nbraid cases, one can associate a W*pW [resp. a B*pB] rating with these families of \nresolution theories. Using theorem 12.1, it is easy to prove the following confluence \nproperty, so that the B*pB rating has good computational properties. However, it \nshould be stressed that these ratings neglect all the inner bi-whips [resp. bi-braids] \nand their meaning is therefore something queer, like “rating modulo the inner bi-\nwhips [resp. bi-braids]”. In particular, the B*pB rating of any instance in T&E(1) is \nalways 0. \nTheorem 12.5: for any p and n with 1 ≤ p, m ≤ ∞, resolution theory B*pBm has \nthe confluence property. \nProof: as it is an easy combination of the proofs of theorems 5.6 and 12.1, we \nleave it as an exercise for the reader. \n12.2.3. The T&E* and T&E*p procedures \nRemember from section 12.1.3 the definitions of the extended basic resolution \ntheory BRT* (the analogue of BRT, but in the language with an additional constant \n“bi-braid” in Constraint or Constraint-Type) and of the logical theories biBp for \n\n338 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \np ≥ 1; remember also that, after theorem 12.1, all of these theories are stable for \nconfluence (an essential property for the following definition to be meaningful). \nDefinition: for any p with 1≤p≤∞, given a resolution state RS of a CSP, in the \nabove-defined extended language, procedure T&E*2\np(RS) is defined as follows: \n- loop until a solution or a contradiction is found or until quiescence: \n     - in RS, apply repeatedly the rules of Bp (braids of length ≤ p) until quiescence;  \n       if a solution is found, return it and stop; \n     - loop until a solution or a contradiction is found or until quiescence: \n            . in RS, apply the rules of biBp to all the candidate pairs; (this step can only \n              add links for  the “bi-braid” constraint);  \n            . in RS, apply repeatedly the rules of BRT* (now use the bi-braid links  \n              produced in the previous step); if a solution is found, return it and stop; \n     - end loop; \n- end loop.  \nIn case p = ∞, this is equivalent to T&E*2(RS): \n- loop until a solution or a contradiction is found or until quiescence: \n     - set RS = T&E(RS); if a solution or a contradiction is found, return it and stop; \n     - loop until a solution or a contradiction is found or until quiescence: \n         . set RS = bi-T&E(RS); (this step can only add links for the “bi-braid”  \n           constraint);  \n         . set RS = T&E(BRT*); (now use the bi-braid links produced in the previous  \n           step); \n     - end loop; \n- end loop.  \nTheorem 12.6 (“T&E*2\np vs B*p-braids”): for any CSP and any p with 1≤p≤∞, \nif, in some resolution state RS in the extended language of BRT*, procedure \nT&E*2\np(RS) deletes a candidate Z, then there exists in RS either a braid[p] with \ntarget Z or a B*p-braid with target Z using only inner bi-braids no longer than p. \nFor any p with 1≤p≤ ∞, an instance P of a CSP can be solved by T&E*2\np if and \nonly if it can be solved by B*p-braids. \nProof: obvious, along the same lines as for all the previous similar theorems. \nAs all the previous similar theorems, this provides an easy means of checking \nwhether an instance is in B*pB.  \nIn case p = ∞ and as a corollary to theorems 11.5 [T&E(2) vs B-braid], 12.4 \n[pseudo-equivalence of B*-braids and B-braids] and 12.6, one has the following \ntheorem. (Exercise: write a direct proof.) \nTheorem 12.7: T&E*2 ≡ T&E(2) – only in the limited sense that these two very \ndifferent procedures always produce the same result. \n\n12. Patterns of proof and associated classifications   \n339 \n12.3. Patterns of proof and associated classifications \nGiven an instance in T&E(2), we have seen that it can be solved in very different \nways with generic generalised chain patterns. It is one of the purposes of this section \nto review the various possibilities in the general case and to show how they work in \npractice. But, for the sake of providing this analysis with a broader perspective, we \nshall first reassess the general readability requirements one can reasonably put on \nthe solution of instances beyond T&E(1) or gT&E(1); this will lead to the informal \nnotion of a pattern of proof. \n12.3.1. Rating versus classification \nAs shown by the multitude of possible ratings introduced in this book – all \nlogically grounded –, rating or classification of instances cannot be primary goals in \nthemselves, even in a context restricted by the sole purpose of pattern-based solving; \nthey have to be justified by higher level requirements such as simplicity or \nreadability of a possible solution. Conversely, such vague requirements can only be \nmade precise if there is some objective way of measuring how they are satisfied. So, \nrating and classification principles on the one hand and requirements analysis on the \nother, are intimately related. As a preamble to the sequel, let us clarify the difference \nwe have implicitly made since chapter 11 between classification and rating:  \n– in a rating system (e.g. in any of the W, gW, B, gB, SB, BB or BpB systems), \nevery instance is assigned a unique, possibly infinite value; it is supposed to \nrepresent its complexity (with respect to the corresponding family of resolution \nrules); any two instances can thus be directly compared; \n– in a classification system, e.g. in the very broad T&E(?) or in B?B or in a \nsimilar B*?B, one has several levels and sublevels of  complexity (think of the \nclassification of electrons in an atom, with the various s, p, d, f … layers and sub-\nlayers) and one does not necessarily try to compare directly instances from different \nlevels (even if the BpB and the BqB ratings of an instance are indeed comparable, the \nsmallest value of p such that BpB is finite is often more interesting than the BpB \nrating itself).  \nIn this book, broad classifications have always been easier to compute than \nratings; this may not be a general a priori difference between classification and \nrating, but a result of less stringent requirements; ratings have always supposed that \nwe could exhibit a resolution path, whereas classifications allowed the use of the \n“T&E(T) vs T-braids” theorem; this is a clear advantage of classifications. As \nshown in chapter 13, a broad classification system such as the B?B can be enough \n(with no explicit computation of any rating) when one wants to analyse the worth of \nintroducing a new resolution rule. \n\n340 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nAs for the relationship between the two approaches, given a rating system, a one-\nlevel classification system can obviously be obtained from it, based on the different \nvalues of the rating. But, conversely, given a classification system, there may be no \nunique rating compatible with it. However, in both cases, our minimal a priori \nrequirements for a classification or a rating system are the same: \n– it should be purely logical, i.e. it should be defined by an increasing sequence \nof CSP resolution theories (preferably with the confluence property, for better \ncomputational properties, although this is not necessary in theory);  \n– it should be invariant under all the logical symmetries of the CSP (which \nshould be a consequence of the previous condition if predicate “linked” is correctly \ndefined); by “logical symmetries”, we mean more than just the obvious geometric \nones (e.g., in Sudoku, we include in them the analogies between rows and blocks). \nAs for ratings, considering all those that have been defined in this book, one \ncould add an a posteriori requirement: any rating should somehow be based on the \nnumber of CSP variables necessary to formulate the patterns in the resolution rules; \nas a result, the most natural ratings satisfying these conditions are those introduced \nuntil now (there is no reason to use any function of this number rather than the \nnumber itself). \n12.3.2. The first two generic ways of solving a T&E(2) instance \nGiven an instance Q in T&E(2) [and not in gT&E(1)], the concrete question is, \nhow can one present its solution in a readable form, as simply as possible? After \nchapter 11, there seemed to be only two theoretical options for simplicity, \ncorresponding respectively to the rating and classification views: either one wants to \nfind a resolution path leading to the smallest BB rating of Q or one wants a BpB \nsolution of Q with the smallest p (and then, optionally, with the shortest possible Bp-\nbraids, or Wp-whips if any, for this fixed value of p). \nThe first case corresponds to the idea that we want the hardest elimination to be \nglobally as simple as possible (including in it all that is necessary to prove it); it is \nconceptually clear although it seems computationally intractable for instances \nbeyond gT&E(1) [or T&E(Sp) for small values of p].  \nIn the second case, the first step is to find the smallest p; this can easily be done \nby applying the T&E(Bp) procedure to Q for increasing values of p until it is able to \nsolve Q. Having found the smallest p, we know that Q has a Bp-braids solution.  If \np = 1, this means a g-whip solution. For higher values of p, one can (at least in \ntheory) look for the “simplest” Bp-braids solution (i.e. the solution with the smallest \nBpB rating) by applying the simplest-first strategy within resolution theory BpB. \nHow this works in practice has been illustrated in section 11.5 for p = 2. \n\n12. Patterns of proof and associated classifications   \n341 \nIn each of these approaches, the limits of readability are reached. Contrary to the \npuzzles in T&E(1) or gT&E(1), that have readable solutions with whips or g-whips \n(sometimes, they also require braids and g-braids), we consider that the BpB \nclassification for p > 2 is more interesting from an abstract classification point of \nview (as in section 11.4) than for actually producing the simplest resolution path in \nBpB (in the sense of the BpB rating). In any event, it is likely that, for such instances, \nthe readability requirement could hardly be met by any approach, unless the \nmeanings of “readable” or “simplest” are significantly extended beyond those we \nhave assigned them until now. It is our next goal to explore how this could be done. \n12.3.3. The need to reassess our requirements for instances beyond gT&E(1) \nIt should first be recalled that, when it faces really new problems, any scientific \ndiscipline seldom progresses by keeping untouched the current formulation of its \nmost general principles. Such principles can also be considered as requirements of \n“ultimate” understandability, because everything else (relevant to this discipline) \nshould be explained by them. In parallel with a constant tendency to increased \nrigour or formalisation, there is in science a tendency to generalisation (and \nexperience shows that, most of the time, these tendencies go hand in hand). Thus, \nthe principle of mass conservation had to be extended to a principe of mass-energy \nconservation, Galilean symmetry to Poincaré symmetry and so on. Similarly, in \nevolution theory, the natural selection paradigm had to be extended from Darwin’s \ninitial view of “best” fitness in some niche to a more opportunistic view of fitness.  \nMany people with little scientific practice believe that science has general a \npriori Laws; but this is a very wrong view of science; from the outside, the “laws” \nof a scientific discipline may seem to be a priori, perhaps because they generally \nevolve only on long time scales, but they are indeed the result of its historical \ndevelopment. They are the super structure built to present all of its results in a \nunified framework. \nThere does not seem to be any general way of specifying how the general laws \nof a scientific discipline should be defined or interpreted or modified when \nnecessary. However, they should be absolute and universal; although they are \nsubject to (rare) change, the very notion of a general law would be meaningless \nwithout these two properties: they are absolute and universal in the current state of \ndevelopment of the discipline. But they should first of all also satisfy a \ncomplementary commonsense “principle of reasonableness” (or principle of \nsubmission to reality). In a not so different context, this has best been expressed in \neveryday terms by the King in “The Little Prince” (we added the italics): \n \n– Sire… over what do you rule? \n– Over everything, said the king, with magnificent simplicity. \n– Over everything? \n\n342 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nThe king made a gesture, which took in his planet, the other planets, and all the stars. \n– Over all that? asked the little prince. \n– Over all that, the king answered. \nFor his rule was not only absolute: it was also universal. \n– And the stars obey you? \n– Certainly they do, the king said. They obey instantly. I do not permit \ninsubordination. \nSuch power was a thing for the little prince to marvel at. […] he plucked up his \ncourage to ask the king a favor: \n– I should like to see a sunset… Do me that kindness… Order the sun to set… \n– If I ordered a general to fly from one flower to another like a butterfly, or to write a \ntragic drama, or to change himself into a sea bird, and if the general did not carry out \nthe order that he had received, which one of us would be in the wrong?, the king \ndemanded. The general, or myself? \n– You, said the little prince firmly. \n– Exactly. One must require from each one the duty which each one can perform, the \nking went on. Accepted authority rests first of all on reason. If you ordered your \npeople to go and throw themselves into the sea, they would rise up in revolution. I \nhave the right to require obedience because my orders are reasonable. \nAlthough in a much less grandiose context, instances of a CSP beyond T&E(1) \nor gT&E(1) challenge the universality of our initial views of simplicity and rating. It \nis then time for a little more thinking about our requirements and our interpretations \nof them. Instead of sticking too strictly to these views, let us analyse, based on the \nconcrete results of the previous sections, what could be considered as “reasonable” \nalternative interpretations of the vague requirements of simplicity, understandability, \nexplanainability or readability for the resolution paths of such extreme instances. \n12.3.4. The B*B and B*pB approaches \nFor instances in T&E(2), the present chapter has introduced two new alternative \nways of presenting a solution: compute either the bi-braid contradictions or the bi-\nbraid[p’] contradictions for all the p’ with 1≤p’≤p, and use them in addition to the \ndirect contradiction links to find either the shortest B*-braids or the shortest B*p-\nbraids – shortest with respect to the pseudo-lengths of these B*-braids or B*p-braids, \ni.e. when these indirect bi-braid contradiction links are considered as being no more \ncomplex than the direct ones.  \nLogically speaking, this amounts to considering as lemmas all the necessary bi-\nbraid contradictions (resp. bi-braid[p’] contradictions for any p’≤p) and not counting \ntheir complexity in the proofs of the eliminations. From a technical point of view, as \nthese contradictions are not structural, they may have to be continuously updated, \nwith potentially new instances created every time a candidate is deleted during the \nresolution process. But this is not an unknown situation in mathematics: they can be \nconsidered as lemmas, intertwined with theorems (here the eliminations). \n\n12. Patterns of proof and associated classifications   \n343 \nFrom a rating point of view, this approach consists of hiding part of the \ncomplexity of each elimination step (possibly the main part, as p is taken larger and \nlarger). It does not allow to define ratings compatible with the previously defined \nones, because it reduces to the same complexity (zero) all the inner bi-braid or bi-\nbraid[p’] pairwise contradictions. It is equivalent to allowing a hidden level of T&E \n(possibly restricted by p), namely bi-T&E. \nIn the examples in the next two subsections, especially the first, if one considers \nwithout caution the resolution paths thus obtained, these instances may seem to be \neasy or relatively easy; but this kind of presentation obviously hides the main part of \ncomplexity.  \nOne possibility for less cheating with complexity is to use these quasi resolution \npaths only as guides to a complete solution and to justify each of the B*-braids or \nB*p-braids they contain by the precise bi-braids on which it relies: once Z1 and Z2 \nare given and it is known that they are bi-braid incompatible (e.g. because we have \nfirst found it by applying the fast bi-T&E procedure), it is not very difficult to find \nthe shortest bi-braid that can actually prove this in the current resolution state.  \nIf eliminations are considered as theorems and bi-braid contradictions as \nlemmas, this approach provides the shortest theorems, at the cost of lemmas of \nuncontrolled complexity or of complexity bounded by p: even if, afterwards, we find \nthe shortest bi-braid contradictions for each (Z1, Z2) pair used in the path, there is no \nreason why the B*-braids or B*p’-braids in the path would globally use the shortest \npossible inner bi-braids; on the contrary, complexity evacuated from the B*-braids \nhas to be compensated by complexity in the inner bi-braids.  \nWhat the above two approaches suggest, together with the two (BB and BpB) of \nchapter 11, is that, for such T&E(2) instances, our initial requirement of simplicity \ncannot be understood in the simple terms of a unique rating or classification system. \nThis raises more difficult questions that are relevant to automatic theorem proving in \ngeneral: what does one really want in terms of readability or understandability of the \nproofs, e.g. what type of global pattern of proof does one allow these proofs to \nrespect? Here, B*-braids or B*p-braids and the corresponding whip versions, can be \nconsidered as general patterns of proof, the inner bi-whips and/or bi-braids being \nthere to fill in the details. We shall soon see that there are many alternative \npossibilities, but let us first illustrate these two B*B and B*pB approaches. \n12.3.5. Two examples of the B*B approcah \nFor instances in T&E(2), possibly after applying more elementary rules (such as \nbraids or g-braids), one can look for a solution with B*-braids of shortest pseudo-\nlengths, based on all the possible inner bi-braid contradictions (with no a priori limit \non their lengths). If one is not interested in the exact bi-braids used (in the “details” \n\n344 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nof the proof), one can even start by computing the bi-braid contradictions via the \nmuch faster bi-T&E procedure.  \nWhether the bi-braids are continuously updated or updated when needed is an \noption that cannot change the final result; if they are updated at least when no more \nB*-braid[1] is available, theorem 12.4 guarantees that a solution in terms of forcing \nbi-braids will be found. However, if they are not updated at all, a B*-braid solution \nmay not be found: for instance, it will not for the first puzzle in Eleven’s collection. \n12.3.5.1 EasterMonster \nConsider first the famous EasterMonster puzzle (see Figure 13.1 in the next \nchapter). EasterMonster is in B6B, but it has a very specific pattern allowing a series \nof thirteen eliminations, after which it is in B2B – see definition and discussion of \nthis pattern (a “belt of crosses”) in chapter 13. \n \n*****\t\r  \t\r  SudoRules\t\r  16.2\t\r  \t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  B*B\t\r  \t\r  \t\r  *****\t\r  \n21\t\r  givens,\t\r  239\t\r  candidates,\t\r  1546\t\r  csp-­‐links\t\r  and\t\r  1546\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.36\t\r  \nbelt[4]\t\r  made\t\r  of\t\r  crosses:\t\r  \n\t\r  \t\r  \t\r  \t\r  \t\r  cross\t\r  in\t\r  block\t\r  b1\t\r  with\t\r  center\t\r  r2c2\t\r  \n\t\r  \t\r  \t\r  \t\r  \t\r  \t\r  \t\r  \t\r  \t\r  \t\r  horizontal\t\r  outer\t\r  candidates:\t\r  3\t\r  8;\t\r  vertical\t\r  outer\t\r  candidates:\t\r  4\t\r  8;\t\r  inner\t\r  candidates:\t\r  2\t\r  7\t\r  \n\t\r  \t\r  \t\r  \t\r  \t\r  cross\t\r  in\t\r  block\t\r  b3\t\r  with\t\r  center\t\r  r2c8\t\r  \n\t\r  \t\r  \t\r  \t\r  \t\r  \t\r  \t\r  \t\r  \t\r  \t\r  horizontal\t\r  outer\t\r  candidates:\t\r  3\t\r  8;\t\r  vertical\t\r  outer\t\r  candidates:\t\r  3\t\r  9;\t\r  inner\t\r  candidates:\t\r  1\t\r  6\t\r  \n\t\r  \t\r  \t\r  \t\r  \t\r  cross\t\r  in\t\r  block\t\r  b9\t\r  with\t\r  center\t\r  r8c8\t\r  \n\t\r  \t\r  \t\r  \t\r  \t\r  \t\r  \t\r  \t\r  \t\r  \t\r  horizontal\t\r  outer\t\r  candidates:\t\r  4\t\r  5;\t\r  vertical\t\r  outer\t\r  candidates:\t\r  3\t\r  9;\t\r  inner\t\r  candidates:\t\r  2\t\r  7\t\r  \n\t\r  \t\r  \t\r  \t\r  \t\r  cross\t\r  in\t\r  block\t\r  b7\t\r  with\t\r  center\t\r  r8c2\t\r  \n\t\r  \t\r  \t\r  \t\r  \t\r  \t\r  \t\r  \t\r  \t\r  \t\r  horizontal\t\r  outer\t\r  candidates:\t\r  4\t\r  5;\t\r  vertical\t\r  outer\t\r  candidates:\t\r  4\t\r  8;\t\r  \t\r  inner\t\r  candidates:\t\r  1\t\r  6\t\r  \n\t\r  ==>\t\r  \t\r  \t\r  \n\t\r  \t\r  \t\r  \t\r  \t\r  eliminations\t\r  in\t\r  rows:\t\r  r2c5\t\r  ≠\t\r  3,\t\r  r2c5\t\r  ≠\t\r  8,\t\r  r2c6\t\r  ≠\t\r  8,\t\r  r8c4\t\r  ≠\t\r  5,\t\r  r8c5\t\r  ≠\t\r  4\t\r  \n\t\r  \t\r  \t\r  \t\r  \t\r  eliminations\t\r  in\t\r  columns:\t\r  r5c2\t\r  ≠\t\r  4,\t\r  r5c2\t\r  ≠\t\r  8,\t\r  r5c8\t\r  ≠\t\r  3,\t\r  r5c8\t\r  ≠\t\r  9\t\r  \n\t\r  \t\r  \t\r  \t\r  \t\r  eliminations\t\r  in\t\r  blocks:\t\r  r1c3\t\r  ≠\t\r  7,\t\r  r3c1\t\r  ≠\t\r  2,\t\r  r7c3\t\r  ≠\t\r  1,\t\r  r9c1\t\r  ≠\t\r  6\t\r  \nAfter these eliminations, there is no available g-braid but the last part of theorem \n12.4 guarantees that there is a solution with B*-braids[1] (or forcing bi-braids), \nusing inner bi-braids of unrestricted length. At this point, we computed the set of \n6,166 direct + bi-braid contradictions (via the bi-T&E procedure, using the “bi-braid \nvs bi-T&E” theorem, which is enough when we do not want to take the lengths of \nthe inner bi-braids into account); this set does not even need to be updated before \nthe solution is obtained by a relatively short sequence of B*-braids[1]. Remember \nhowever what we said above: giving this resolution path without providing any \ndetails about the inner bi-braids of unrestricted length is obviously cheating with \ncomplexity. \n \nb*-­‐braid[1]:\t\r  r6c3{n9\t\r  .}\t\r  ==>\t\r  r9c1\t\r  ≠\t\r  4\t\r  \nb*-­‐braid[1]:\t\r  b7n4{r9c2\t\r  .}\t\r  ==>\t\r  r8c9\t\r  ≠\t\r  5\t\r  \nb*-­‐braid[1]:\t\r  b7n8{r9c2\t\r  .}\t\r  ==>\t\r  r8c9\t\r  ≠\t\r  4\t\r  \nsingles\t\r  ==>\t\r  r8c9\t\r  =\t\r  7,\t\r  r4c8\t\r  =\t\r  7\t\r  \n\n12. Patterns of proof and associated classifications   \n345 \nb*-­‐braid[1]:\t\r  r9c8{n9\t\r  .}\t\r  ==>\t\r  r8c7\t\r  ≠\t\r  2\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r7c8\t\r  =\t\r  2\t\r  \nb*-­‐braid[1]:\t\r  r8c7{n5\t\r  .}\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  6\t\r  \nb*-­‐braid[1]:\t\r  r9c1{n9\t\r  .}\t\r  ==>\t\r  r8c4\t\r  ≠\t\r  6\t\r  \nhidden-­‐single-­‐in-­‐a-­‐row\t\r  ==>\t\r  r8c1\t\r  =\t\r  6\t\r  \nb*-­‐braid[1]:\t\r  r8c4{n2\t\r  .}\t\r  ==>\t\r  r9c6\t\r  ≠\t\r  8\t\r  \nb*-­‐braid[1]:\t\r  r8c4{n2\t\r  .}\t\r  ==>\t\r  r9c6\t\r  ≠\t\r  5\t\r  \nb*-­‐braid[1]:\t\r  r8c4{n2\t\r  .}\t\r  ==>\t\r  r9c4\t\r  ≠\t\r  5\t\r  \nb*-­‐braid[1]:\t\r  r8c4{n2\t\r  .}\t\r  ==>\t\r  r9c4\t\r  ≠\t\r  3\t\r  \nb*-­‐braid[1]:\t\r  b9n9{r9c8\t\r  .}\t\r  ==>\t\r  r8c4\t\r  ≠\t\r  1\t\r  \nsingles\t\r  ==>\t\r  r8c4\t\r  =\t\r  2,\t\r  r8c5\t\r  =\t\r  1,\t\r  r7c2\t\r  =\t\r  1\t\r  \nb*-­‐braid[1]:\t\r  r5c4{n6\t\r  .}\t\r  ==>\t\r  r9c6\t\r  ≠\t\r  7\t\r  \nhidden-­‐single-­‐in-­‐a-­‐block\t\r  ==>\t\r  r9c4\t\r  =\t\r  7\t\r  \nb*-­‐braid[1]:\t\r  r9c6{n6\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  4\t\r  \nb*-­‐braid[1]:\t\r  b8n6{r9c6\t\r  .}\t\r  ==>\t\r  r9c5\t\r  ≠\t\r  8\t\r  \nb*-­‐braid[1]:\t\r  b8n6{r9c6\t\r  .}\t\r  ==>\t\r  r9c5\t\r  ≠\t\r  4\t\r  \nb*-­‐braid[1]:\t\r  c4n1{r5\t\r  .}\t\r  ==>\t\r  r8c3\t\r  ≠\t\r  4\t\r  \nsingles\t\r  ==>\t\r  r8c3\t\r  =\t\r  5,\t\r  r8c7\t\r  =\t\r  4,\t\r  r3c9\t\r  =\t\r  4,\t\r  r3c1\t\r  =\t\r  5,\t\r  r9c7\t\r  =\t\r  5,\t\r  r5c9\t\r  =\t\r  5\t\r  \nb*-­‐braid[1]:\t\r  r1c7{n9\t\r  .}\t\r  ==>\t\r  r9c2\t\r  ≠\t\r  8\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n12.3.5.2 Eleven#3 (a puzzle in B7B) \nIn order to show that the B*B approach does not exclude the hardest instances \n(hardest according to the B?B classification), consider now the first of Eleven’s \npuzzles in B7B (#3 in his list, Figure 12.3), one of the three hardest known ones in \nthis classification, as mentioned in section 11.4.2.  \n \n \n  \n  3 \n \n  \n  \n \n8 \n \n \n5   \n   \n \n2 \n \n1 \n7   \n \n \n  \n \n  \n \n \n \n  \n  5   8  \n  6 \n  9   1 2   \n \n  \n  \n8   \n \n  \n  3   \n  \n \n \n6   9 \n \n  \n \n  5 \n   \n4   \n \n  \n  7   \n  \n \n \n  1 \n \n6   2 \nFigure 12.3. Puzzle Eleven#3  \nThe same technique as for EasterMonster works, although it now requires B*-\nbraids of greater pseudo-lengths, up to six, if we never update the initial bi-braid \ncontradictions. There are 4,518 initial direct links plus bi-braid contradictions. In the \nforthcoming resolution path, only B*-braids are active. The following can be \nconsidered as the general lines of a proof of the solution based on only bi-braid \n\n346 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ncontradictions available in the initial resolution state (and not giving the details is \nagain cheating with complexity). \n \n*****\t\r  \t\r  SudoRules\t\r  16.2\t\r  \t\r  \t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  B*B\t\r  \t\r  \t\r  *****\t\r  \n22\t\r  givens,\t\r  238\t\r  candidates,\t\r  1609\t\r  csp-­‐links\t\r  and\t\r  1609\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.43\t\r  \nb*-­‐braid[1]:\t\r  r9n8{c4\t\r  .}\t\r  ==>\t\r  r6c8\t\r  ≠\t\r  4\t\r  \nb*-­‐braid[1]:\t\r  r5n4{c9\t\r  .}\t\r  ==>\t\r  r6c3\t\r  ≠\t\r  7\t\r  \nb*-­‐braid[1]:\t\r  r9n8{c4\t\r  .}\t\r  ==>\t\r  r4c8\t\r  ≠\t\r  4\t\r  \nb*-­‐braid[1]:\t\r  r9n9{c8\t\r  .}\t\r  ==>\t\r  r4c8\t\r  ≠\t\r  3\t\r  \nb*-­‐braid[1]:\t\r  b9n9{r9c8\t\r  .}\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  6\t\r  \nb*-­‐braid[1]:\t\r  r2c8{n9\t\r  .}\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  5\t\r  \nb*-­‐braid[1]:\t\r  b5n7{r6c5\t\r  .}\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  4\t\r  \nb*-­‐braid[1]:\t\r  b9n9{r9c8\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  9\t\r  \nb*-­‐braid[1]:\t\r  b9n9{r9c8\t\r  .}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  9\t\r  \nb*-­‐braid[1]:\t\r  b9n9{r9c8\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  7\t\r  \nb*-­‐braid[1]:\t\r  b5n7{r6c5\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  4\t\r  \nb*-­‐braid[1]:\t\r  b9n9{r9c8\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  9\t\r  \nb*-­‐braid[1]:\t\r  b9n9{r9c8\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  7\t\r  \nb*-­‐braid[1]:\t\r  b9n9{r9c8\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  7\t\r  \nb*-­‐braid[2]:\t\r  c6n4{r2\t\r  r5}\t\r  –\t\r  b8n7{r9c4\t\r  .}\t\r  ==>\t\r  r3c3\t\r  ≠\t\r  6\t\r  \nb*-­‐braid[2]:\t\r  b1n9{r1c1\t\r  r2c1}\t\r  –\t\r  c3n7{r9\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  5\t\r  \nb*-­‐braid[2]:\t\r  r7c3{n1\t\r  n7}\t\r  –\t\r  r9n7{c3\t\r  .}\t\r  ==>\t\r  r8c1\t\r  ≠\t\r  3\t\r  \nb*-­‐braid[3]:\t\r  c1n9{r1\t\r  r8}\t\r  –\t\r  r4c8{n9\t\r  n2}\t\r  –\t\r  r6c8{n2\t\r  .}\t\r  ==>\t\r  r3c8\t\r  ≠\t\r  4\t\r  \nb*-­‐braid[4]:\t\r  r2n4{c4\t\r  c1}\t\r  –\t\r  c1n9{r2\t\r  r8}\t\r  –\t\r  r4c8{n9\t\r  n2}\t\r  –\t\r  r6c8{n2\t\r  .}\t\r  ==>\t\r  r3c8\t\r  ≠\t\r  3\t\r  \nb*-­‐braid[4]:\t\r  c3n1{r3\t\r  r4}\t\r  –\t\r  c2n1{r4\t\r  r1}\t\r  –\t\r  c2n4{r1\t\r  r6}\t\r  –\t\r  b4n7{r6c2\t\r  .}\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  2\t\r  \nb*-­‐braid[4]:\t\r  c2n3{r4\t\r  r8}\t\r  –\t\r  b7n8{r7c3\t\r  r9c3}\t\r  –\t\r  r8n1{c1\t\r  c7}\t\r  –\t\r  r6c7{n1\t\r  .}\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  1\t\r  \nb*-­‐braid[4]:\t\r  r5c3{n5\t\r  n6}\t\r  –\t\r  r2c6{n4\t\r  n9}\t\r  –\t\r  r1c6{n9\t\r  n1}\t\r  –\t\r  r3c6{n1\t\r  .}\t\r  ==>\t\r  r2c4\t\r  ≠\t\r  6\t\r  \nb*-­‐braid[5]:\t\r  r2c8{n3\t\r  n6}\t\r  –\t\r  r2c1{n6\t\r  n4}\t\r  –\t\r  c8n4{r2\t\r  r5}\t\r  –\t\r  r7n3{c5\t\r  c1}\t\r  –\t\r  r4c1{n3\t\r  .}\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  5\t\r  \nb*-­‐braid[1]:\t\r  c1n5{r9\t\r  .}\t\r  ==>\t\r  r9c3\t\r  ≠\t\r  5\t\r  \nb*-­‐braid[3]:\t\r  b1n6{r2c1\t\r  r1c1}\t\r  –\t\r  r5c1{n6\t\r  n3}\t\r  –\t\r  b6n3{r5c9\t\r  .}\t\r  ==>\t\r  r6c7\t\r  ≠\t\r  5\t\r  \nb*-­‐braid[1]:\t\r  b6n5{r6c8\t\r  .}\t\r  ==>\t\r  r3c8\t\r  ≠\t\r  5\t\r  \nb*-­‐braid[4]:\t\r  c8n5{r5\t\r  r6}\t\r  –\t\r  r5c1{n3\t\r  n6}\t\r  –\t\r  b1n6{r1c1\t\r  r2c3}\t\r  –\t\r  c6n4{r9\t\r  .}\t\r  ==>\t\r  r5c8\t\r  ≠\t\r  4\t\r  \nb*-­‐braid[4]:\t\r  r6n6{c4\t\r  c3}\t\r  –\t\r  r5n5{c8\t\r  c3}\t\r  –\t\r  c8n4{r2\t\r  r9}\t\r  –\t\r  b8n4{r9c6\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  7\t\r  \nb*-­‐braid[4]:\t\r  r3c8{n9\t\r  n6}\t\r  –\t\r  r2c8{n6\t\r  n4}\t\r  –\t\r  r1n9{c1\t\r  c6}\t\r  –\t\r  r2c6{n9\t\r  .}\t\r  ==>\t\r  r3c7\t\r  ≠\t\r  9\t\r  \nb*-­‐braid[4]:\t\r  r2n7{c5\t\r  c4}\t\r  –\t\r  r2n4{c4\t\r  c1}\t\r  –\t\r  r5n4{c1\t\r  c7}\t\r  –\t\r  c5n3{r8\t\r  .}\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  8\t\r  \nb*-­‐braid[5]:\t\r  r2n4{c4\t\r  c1}\t\r  –\t\r  r5c1{n4\t\r  n3}\t\r  –\t\r  r4c1{n2\t\r  n1}\t\r  –\t\r  b1n9{r3c3\t\r  r2c3}\t\r  –\t\r  r2c6{n9\t\r  .}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  6\t\r  \nb*-­‐braid[5]:\t\r  r3n9{c6\t\r  c3}\t\r  –\t\r  r9c3{n9\t\r  n7}\t\r  –\t\r  b4n1{r4c1\t\r  r4c3}\t\r  –\t\r  r7c3{n1\t\r  n2}\t\r  –\t\r  c1n2{r8\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  2\t\r  \nb*-­‐braid[5]:\t\r  c4n8{r2\t\r  r3}\t\r  –\t\r  c3n6{r2\t\r  r5}\t\r  –\t\r  r5c1{n6\t\r  n3}\t\r  –\t\r  c2n3{r4\t\r  r8}\t\r  –\t\r  b8n7{r9c4\t\r  .}\t\r  ==>\t\r  r5c9\t\r  ≠\t\r  4\t\r  \nb*-­‐braid[5]:\t\r  r5c1{n3\t\r  n6}\t\r  –\t\r  b1n6{r1c1\t\r  r2c3}\t\r  –\t\r  r2c6{n4\t\r  n9}\t\r  –\t\r  r2c8{n9\t\r  n3}\t\r  –\t\r  r5c8{n3\t\r  .}\t\r  ==>\t\r  r6c3\t\r  ≠\t\r  1\t\r  \nb*-­‐braid[5]:\t\r  r5c1{n3\t\r  n6}\t\r  –\t\r  b1n6{r1c1\t\r  r2c3}\t\r  –\t\r  r2c6{n4\t\r  n9}\t\r  –\t\r  r2c8{n9\t\r  n3}\t\r  –\t\r  r5c8{n3\t\r  .}\t\r  ==>\t\r  r6c3\t\r  ≠\t\r  2\t\r  \nb*-­‐braid[6]:\t\r   c1n6{r1\t\r   r2}\t\r   –\t\r   c1n9{r2\t\r   r8}\t\r   –\t\r   r7c5{n4\t\r   n8}\t\r   –\t\r   b7n8{r8c2\t\r   r9c2}\t\r   –\t\r   r9n3{c2\t\r   c4}\t\r   –\t\r  \nr8n3{c5\t\r  .}\t\r  ==>\t\r  r2c8\t\r  ≠\t\r  4\t\r  \nb*-­‐braid[1]:\t\r  c8n4{r9\t\r  .}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  4\t\r  \nb*-­‐braid[5]:\t\r  r7n4{c5\t\r  c8}\t\r  –\t\r  r6n1{c7\t\r  c8}\t\r  –\t\r  c3n2{r4\t\r  r7}\t\r  –\t\r  c6n2{r7\t\r  r8}\t\r  –\t\r  c6n6{r8\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  5\t\r  \nb*-­‐braid[1]:\t\r  c6n5{r9\t\r  .}\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  5\t\r  \nb*-­‐braid[6]:\t\r  b9n3{r7c7\t\r  r9c8}\t\r  –\t\r  b7n8{r8c2\t\r  r9c2}\t\r  –\t\r  r5n7{c3\t\r  c6}\t\r  –\t\r  r5n4{c6\t\r  c1}\t\r  –\t\r  r2n4{c1\t\r  c6}\t\r  –\t\r  \nb8n4{r9c6\t\r  .}\t\r  ==>\t\r  r8c1\t\r  ≠\t\r  2\t\r  \n\n12. Patterns of proof and associated classifications   \n347 \nb*-­‐braid[6]:\t\r  c3n6{r2\t\r  r6}\t\r  –\t\r  c8n5{r5\t\r  r6}\t\r  –\t\r  r7n4{c8\t\r  c5}\t\r  –\t\r  r7n3{c5\t\r  c1}\t\r  –\t\r  c1n2{r7\t\r  r1}\t\r  –\t\r  r8c2{n1\t\r  .}\t\r  \n==>\t\r  r2c6\t\r  ≠\t\r  4\t\r  \nFrom this point on, the solution can be found by similar B*-braids of maximum \npseudo-length 3. But it can also be found by g-braids or even by g-whips of \nmaximum length 8; in the context of this chapter, this can be considered as easy and \nwe shall skip the end of the path. \n12.3.6. An example of the B*pB approach, p fixed \nInstead of looking for a solution with B*-braids with the shortest pseudo-lengths, \nwith no restriction on the lengths of the inner bi-braids, as in the previous examples, \none can restrict these to some length p (possibly after choosing the smallest possible \np) and look for a solution with B*p-braids with the shortest pseudo-lengths. \n \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nr1 n1 \n     n2 n3 \nn4 n5 n6 \n n8  \n          n3 \nn4      n6 \nn7 n8      \n n2  \nn4 n5 n6 \n          n9 \n     n2 n3 \nn4 n5      \n          n9 \n          n3 \n     n5 n6 \n          n9 \n n2  \n \nn7 n8 n9 \n          n3 \nn4           \n     n8 n9 \n     n2 n3 \nn4           \n          n9 r1 \nr2 \n     n2 n3 \nn4 n5      \nn7           \n     n2 n3 \nn4 n5      \n \n          n3 \nn4           \nn7           n1 n8 \n          n3 \n n5  \n          n9 \n n2  \n \nn7      n9 \n          n3 \nn4           \n          n9 n6 r2 \nr3 \n     n2 n3 \nn4      n6 \n n8  \n     n2 n3 \nn4      n6 \n n8  \nn9 \n n2  \nn4      n6 \n \n     n2 n3 \nn4           \n \nn7 \nn1 n2      \n \n n8  \nn5 \nn1 n2 n3 \nn4           \n \nr3 \nr4 \n n2  \nn4           \nn7           \nn1 n2      \nn4           \n          n9 \nn1           \nn4           \nn7           \n n2  \n n5  \nn7      n9 n6 \nn1           \n n5  \n          n9 n3 \nn1           \nn4           \n          n9 n8 r4 \nr5 \n     n2 n3 \n          n6 \n n8  \nn1 n2 n3 \n          n6 \n     n8 n9 n5 \n n2  \n \n     n8 n9 \nn1 n2      \n \n          n9 n4 \nn1 n2      \n          n6 \n          n9 n7 \nn1 n2      \n \n          n9 r5 \nr6 \n n2  \nn4      n6 \nn7 n8      \nn1 n2      \nn4      n6 \n     n8 n9 \nn1           \nn4      n6 \nn7 n8      n3 \nn1 n2      \n \nn7      n9 \nn1                   \n \n     n8 n9 n5 \nn1           \nn4      n6 \n          n9 \nn1 n2      \nn4           \n          n9 r6 \nr7 \n          n3 \nn4 n5 n6 \n n8  \nn1      n3 \nn4 n5 n6 \n n8  \nn1      n3 \nn4      n6 \n n8  \n \nn4      n6 \n     n8 n9 \nn1      n3 \nn4           \n          n9 n2 \nn1           \n          n6 \n     n8 n9 \nn1      n3 \n          n6 \n     n8 n9 n7 r7 \nr8 \n          n3 \n          n6 \n n8  \nn1      n3 \n          n6 \n n8  \nn2 \n \n          n6 \nn7 n8 n9 \nn1      n3 \n \nn7      n9 \nn1      n3 \n          n6 \n     n8 n9 n4 \nn1      n3 \n          n6 \n     n8 n9 n5 r8 \nr9 n9 n7 \nn1      n3 \nn4      n6 \n n8  \n \nn4 n5 n6 \n n8  \nn1      n3 \nn4 n5      \n \nn1      n3 \n     n5 n6 \n n8  \nn1           \n          n6 \n n8  \nn2 \nn1      n3 \n \n \nr9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 12.4. Resolution state RS1 of puzzle (eleven #26370) in T&E(2) \nThe last puzzle (#26370) in Eleven’s collection, obtainable from Figure 12.4 by \ndeleting n5r6c7 as a given, provides an example of the B*pB approach for p = 2. It \ncan easily be checked that it is in T&E(B2) and therefore in B2B. We shall now \n\n348 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nprove that it is also in B*2B and even in W*2W, mainly for the sake of showing how \na solution based on B*2-braids or W*2-whips can look like. \n \n*****\t\r  \t\r  SudoRules\t\r  16.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  W*2W\t\r  *****\t\r  \n22\t\r  givens,\t\r  245\t\r  candidates,\t\r  1708\t\r  csp-­‐links\t\r  and\t\r  1708\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.43\t\r  \nhidden-­‐single-­‐in-­‐a-­‐column\t\r  ==>\t\r  r6c7\t\r  =\t\r  5\t\r  \nwhip[1]:\t\r  r9n5{c6\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  5,\t\r  r7c5\t\r  ≠\t\r  5\t\r  \n \n;;; resolution state RS1, displayed in Figure 12.4. \nAfter these obvious steps, there is no whip or g-whip and we enter the realm of \nbi-braids and B*2-braids (actually the simpler realm of bi-whips and W*2-whips). \nThere are now three W*2-whip eliminations; each of the last two is made possible \nby the previous one (in the present case, the new bi-whips that may appear after \neach of these steps play no role in the last two eliminations): \n \nw*2-­‐whip[8]:\t\r  c3n8{r7\t\r  r9}\t\r  –\t\r  r8n8{c1\t\r  c8}\t\r  –\t\r  c6n8{r8\t\r  r6}\t\r  –\t\r  r5n6{c1\t\r  c7}\t\r  –\t\r  r9c7{n6\t\r  n1}\t\r  –\nr5n1{c7\t\r  c5}\t\r  –\t\r  r7c5{n1\t\r  n3}\t\r  –\t\r  c3n3{r7\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  8\t\r  \nw*2-­‐whip[4]:\t\r  c3n3{r7\t\r  r9}\t\r  –\t\r  c8n3{r1\t\r  r8}\t\r  –\t\r  r7c4{n9\t\r  n6}\t\r  –\t\r  c3n6{r7\t\r  .}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  3\t\r  \nw*2-­‐whip[4]:\t\r  c3n6{r7\t\r  r9}\t\r  –\t\r  r8n6{c1\t\r  c8}\t\r  –\t\r  r7c5{n9\t\r  n1}\t\r  –\t\r  c8n1{r7\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  6\t\r  \nAfter this point, the resolution path is entirely in B1B = gB and it can even be \nexpressed by short g-whips of maximum length 5; as it has nothing noticeable and it \ncan be considered as easy in the context of this chapter, we skip it. \nThe above W*2-whips can be considered as defining the (in the present case, \nvery simple) general pattern of proof or the main lines of a forthcoming full proof. \nLet us now fill in the details of this proof. For this purpose, for each of the CSP \nvariables involved, we first mark its right-linking candidate with an integer between \nbrackets, its standard z- and t- candidates with our usual * and # symbols, and its \nremaining candidates with the capital letters associated with the following bi-whips, \nif they must be justified either as left-linking candidates or as additional ones that \nare bi-whip incompatible with the target or with a previous right-linking one: \n \nw*2-­‐whip[8]:\t\r  c3n8{r7\t\r  r9(1)\t\r  r1M\t\r  r6A}\t\r  –\t\r  r8n8{c1\t\r  c8(2)\t\r  c2#1\t\r  c4*\t\r  c6*}\t\r  –\t\r  c6n8{r8\t\r  r6(3)\t\r  r9*}\t\r  –\t\r  \nr5n6{c1N\t\r  c7(4)\t\r  c2P\t\r  }\t\r  –\t\r  r9c7{n6\t\r  n1(5)\t\r  n8#1}\t\r  –\t\r  r5n1{c7\t\r  c5(6)\t\r  c2Q\t\r  c9B}\t\r  –\t\r  r7c5{n1\t\r  n3(7)\t\r  n4C\t\r  n9D}\t\r  –\t\r  \nc3n3{r7\t\r  .\t\r  r1R\t\r  r2S\t\r  r9}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  8\t\r  \nw*2-­‐whip[4]:\t\r   \t\r   c3n3{r7\t\r   r9(1)\t\r   r1R\t\r   r2S}\t\r   –\t\r   c8n3{r1E\t\r   r8(2)\t\r   r2F\t\r   r7*}\t\r   –\t\r   r7c4{n9G\t\r   n6(3)\t\r   n4H}\t\r   –\t\r  \nc3n6{r7\t\r  .\t\r  r1J\t\r  r6T\t\r  r9}\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  3\t\r  (made\t\r  possible\t\r  by\t\r  the\t\r  elimination\t\r  of\t\r  n8r7c4)\t\r  \nw*2-­‐whip[4]:\t\r   c3n6{r7\t\r   r9(1)\t\r   r1J\t\r   r6T}\t\r   –\t\r   r8n6{c1\t\r   c8(2)\t\r   c2#1\t\r   c4*\t\r   c6*}\t\r   –\t\r   r7c5{n9K\t\r   n4L\t\r   }\t\r   –\t\r  \nc8n1{r7\t\r  .\t\r  \t\r  r4U\t\r  r6V\t\r  r8#2}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  6\t\r  (made\t\r  possible\t\r  by\t\r  the\t\r  elimination\t\r  of\t\r  n3r7c5)\t\r  \nThe following twenty bi-whips, necessary to justify these three W*2-whips, are \nonly a small subset of the 677 bi-whips[1] and 300 bi-whips[2] available in RS1 – to \nbe compared also with the 1,374 direct links between the candidates remaining in \nRS1. We mark them with the letters corresponding to those used for indexing the \nW*2-whips. Taken individually, none of them is very complex, but their number \n\n12. Patterns of proof and associated classifications   \n349 \nshows that the solution is far from being as simple as would falsely be suggested if \nwe gave no more detail than the above three W*2-whips in bold. \n \nA:\t\r  bi-­‐whip[1]:\t\r  c6n8{r9\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n8r6c3\t\r  n8r7c4)\t\r  \nB:\t\r  bi-­‐whip[1]:\t\r  c8n1{r8\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n1r5c9\t\r  n1r9c7)\t\r  \nC:\t\r  bi-­‐whip[1]:\t\r  r9n4{c5\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n4r7c5\t\r  n8r9c3)\t\r  \nD:\t\r  bi-­‐whip[1]:\t\r  b9n9{r8c8\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n8r8c8\t\r  n9r7c5)\t\r  \nE:\t\r  bi-­‐whip[1]:\t\r  b9n3{r9c9\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n3r1c8\t\r  n3r9c3)\t\r  \nF:\t\r  bi-­‐whip[1]:\t\r  b9n3{r9c9\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n3r2c8\t\r  n3r9c3)\t\r  \nG:\t\r  bi-­‐whip[1]:\t\r  b9n9{r8c8\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n3r8c8\t\r  n9r7c4)\t\r  \nH:\t\r  bi-­‐whip[1]:\t\r  r9n4{c5\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n3r9c3\t\r  n4r7c4)\t\r  \nJ:\t\r  bi-­‐whip[1]:\t\r  c6n6{r9\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n6r1c3\t\r  n6r7c4)\t\r  \nK:\t\r  bi-­‐whip[1]:\t\r  b9n9{r8c8\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n6r8c8\t\r  n9r7c5)\t\r  \nL:\t\r  bi-­‐whip[1]:\t\r  r9n4{c5\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n4r7c5\t\r  n6r9c3)\t\r  \nM:\t\r  bi-­‐whip[2]:\t\r  b3n8{r1c7\t\r  r3c7}\t\r  –\t\r  r9n8{c7\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n8r1c3\t\r  n8r7c4)\t\r  \nN:\t\r  bi-­‐whip[2]:\t\r  b4n3{r5c1\t\r  r5c2}\t\r  –\t\r  r5n8{c2\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n6r5c1\t\r  n8r7c4)\t\r  \nP:\t\r  bi-­‐whip[2]:\t\r  b4n3{r5c2\t\r  r5c1}\t\r  –\t\r  r5n8{c1\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n6r5c2\t\r  n8r7c4)\t\r  \nQ:\t\r  bi-­‐whip[2]:\t\r  b4n3{r5c2\t\r  r5c1}\t\r  –\t\r  b4n8{r5c1\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n1r5c2\t\r  n8r6c6)\t\r  \nR:\t\r  bi-­‐whip[2]:\t\r  r3n3{c1\t\r  c9}\t\r  –\t\r  r9n3{c9\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n3r1c3\t\r  n3r7c5)\t\r  \nS:\t\r  bi-­‐whip[2]:\t\r  r3n3{c1\t\r  c9}\t\r  –\t\r  r9n3{c9\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n3r2c3\t\r  n3r7c5)\t\r  \nT:\t\r  bi-­‐whip[2]:\t\r  r5n6{c1\t\r  c7}\t\r  –\t\r  r9n6{c7\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n6r6c3\t\r  n6r7c4)\t\r  \nU:\t\r  bi-­‐whip[2]:\t\r  r5n1{c5\t\r  c2}\t\r  –\t\r  r8n1{c2\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n1r4c8\t\r  n1r7c5)\t\r  \nV:\t\r  bi-­‐whip[2]:\t\r  r5n1{c5\t\r  c2}\t\r  –\t\r  r8n1{c2\t\r  .}\t\r  ==>\t\r  bi-­‐whip-­‐contrad(n1r6c8\t\r  n1r7c5)\t\r  \nExercise: re-write the above W*2-whips as W2-braids and compute their lengths \nas W2-braids (notice that these may not be the smallest possible W2-braids). \nIn this example – relatively simple for a puzzle in T&E(2) –, three W*2-whip \neliminations are enough to bring the puzzle to a much easier situation (in gW). But, \nthis was the last puzzle in Eleven’s list [one of the easiest in T&E(2) and not in \ngT&E(1)] and, for harder puzzles, many more eliminations based on much longer \nbi-braid contradictions will generally be necessary. Moreover, there is no guarantee \nthat a puzzle in BpB has a solution in B*pB. \n12.3.7. Theorems and lemmas of equal complexity: the [B*B] classification \nThere appears to be a compromise between the above two options: \n– minimising the complexity of the theorems (eliminations), at the cost of \nlemmas of unrestricted complexity, as in the B*B approach illustrated in section \n12.3.5, \n– minimising the complexity of the lemmas (bi-braid contradictions) they rely \non, at the cost of theorems of unrestricted complexity, as in the B*?B approach \nillustrated in section 12.3.6 (in which the smallest p such that there is a solution in \nB*pB is first looked for).  \n\n350 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nIndeed, as each B*pBm has the confluence property, one can vary p and m \narbitrarily and many compromises are possible. In particular, one can require that \ntheorems and lemmas have the same maximum complexity. This amounts to setting \np = m. Considering then the increasing sequence (B*pBp, p≥0) of resolution theories, \none can define the [B*B] rating in the usual way. \nDefinition: given an instance Q of a CSP, its [B*B] rating is the smallest p such \nthat Q can be solved in B*pBp, i.e. by B*-braids of maximum pseudo-length p \nrelying on inner bi-braids of maximum length p. Having an infinite [B*B] rating \nmeans that Q cannot be solved by B*-braids, i.e. that it is not in T&E(2). \nAs this rating is mainly intended for instances in T&E(2) beyond gT&E \n(although it could in theory apply to any instance), we prefer considering it as a sub-\nclassification of instances in T&E(2). \nSuch a compromise may be justified in logical puzzles or from an abstract \nlogical point of view. However, if we tried to extend it to automated theorem \nproving in general, it would be, from a mathematical point of view, at variance with \nthe usual implicit and non formalisable requirement that lemmas should be \n“meaningful”; whether lemmas are harder to prove than theorems is irrelevant. This \nleaves aside the question of deciding in general what should be called a lemma and \nwhat a theorem: the difference cannot be formalised in logic; it is based on meaning, \non the possibility of a non-contextual (or, at least, not too much contextual) \nformulation and on more or less arbitrary choices; however, in the context of this \nchapter, considering binary contradictions as lemmas and eliminations as theorems \nand considering both as “meaningful” sounds quite natural, so that this general \nquestion can be skipped. \nMoreover, although accepting theorems and lemmas of equal complexity may \nseem to be a rational choice, it does not take into account considerations about the \ncomplexity of choosing which lemmas to use. If there are n candidates, then there \nare n(n-1)/2 candidate pairs. As a result, the number of potential bi-braid \ncontradictions is much larger than the number of potential braids of same length. So \nthat it may seem better to define a rating based on the (B*pBp(p-1)/2, p≥0) or even a \n(B*pBf(p), p≥0) sequence of resolution theories, where f is a function increasing \n(much) faster than p. As the possibilities for such f functions are almost unlimited, \nand there does not seem to be any really good choice, we shall not dwell on them. \n12.3.8. Different patterns of proof involved in the above approaches \nPerhaps the simplest way of analysing the differences between the above \napproaches consists of exhibiting their respective global patterns of proof. Recalling \nthe remarks in section 5.7.7 about the no OR-branching in any of the patterns \nintroduced in this book, they can be considered to refer to the local patterns of proof \n\n12. Patterns of proof and associated classifications   \n351 \nused in each elimination step; we are now dealing with the pattern of the whole \nproof. In the following patterns of proof, we use a standard notation for patterns in \ngeneral, where the vertical bar “⏐” means “or”, “*” means zero or more \noccurrences, and (…)p = 1, … means a sequence indexed by values of p increasing \nfrom 1 to infinity (i.e. to an a priori unbounded finite value). \nFor easier comparison with the harder theories under discussion here, let us first \nmention the global pattern of a proof in the “elementary” Bp or gBp (including B = \nB∞ or gB = gB∞) resolution theories: \n \n[Ep⏐A]*, with: \n     Ep = candidate elimination in Bp or gBp \n     A = assertion by Single \nWe can now write the patterns of proof underlying the various approaches \nanalysed in this chapter: \n \n– for the BpB (including BB = B∞B) approach, p fixed: \n \n[Ep⏐A]*, with: \n     Ep = candidate elimination in BpB \n     A = assertion by Single \n \n– for the B*pB and B*B (= B*∞B) approach, p fixed: \n \n[[Ep⏐A]*Lp*]*, with: \n     Ep = candidate elimination in B*pB  \n     A = assertion by Single \n     Lp = assertion of a bi-braid contradiction in biBp \n \n– for the [B*B]? approach: \n \n ([Ep⏐A]*Lp*)p = 1, …, with: \n     Ep = candidate elimination in [B*B]p \n     A = assertion by Single \n     Lp = assertion of a bi-braid contradiction in biBp \n \nIn the BpB case (p = 2, … ∞), this apparently simple description must however \nbe completed by recalling that each proof of a candidate-elimination theorem in BpB \nrelies on a much more complex structure than in the other cases: as Bp-braids \ninclude inner braids that may depend on the target and on previous right-linking \ncandidates, these should be considered as “contextual lemmas”, i.e. lemmas whose \nscopes are restricted to very particular situations. In all the other cases, each theorem \nor lemma is valid in the current resolution state with no further restriction. Ep, a \ncandidate elimination in BpB, with its contextual lemmas (= inner braids) made \n\n352 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nexplicit, obeys the following pattern, in which “⏐⏐” means that both actions should \nbe done in parallel and freely intertwined. As before, this should be considered as a \ngeneral pattern of proof, not as a procedure. \n \n   start proof (find a partial-braid[1]) \n   Loop until a full B-braid is found \n      continue main proof (extend the current partial B-braid) ⏐⏐ \n      find a contextual elimination (inner braid) \n   end loop \n12.4. d-whips, d-braids, W*d-whips and B*d-braids \nMost of what has been done in the previous sections can be further generalised \nso as to take into account the indirect contradictions between more than two \ncandidates that inevitably appear for instances in T&E(3) and beyond. As the \nvarious possible requirements on solutions and on how to mix d-contradictions with \nvarious values of d are still more numerous but they also are straightforward \nextensions of the above, we shall give precise definitions but we shall leave the \ntheorems and their proofs as exercises. \nIndeed, more than all the technical possibilities suggested below, what is \nremarkable here, as mentioned in the Introduction, is that the existence of instances \nrequiring T&E(d) with d ≥ 3, together with the equivalence of T&E(d) with Bd-braid \ncontradictions, shows that, in order to get a constructive solution, it is sometimes \nnecessary to consider derived constraints among more than two labels, even though \nthe given CSP was initially supposed to have only binary constraints. The gap \nbetween the what and the how is still more impressive than suggested by the unary \nand binary derived constraints we had to introduce with resolution rules for whips, \nbraids, W-whips, B-braids, W*-whips and B*-braids. \n12.4.1. d-whips and d-braids \nDefinition: given d ≥ 1 and given d different candidates Z1, Z2, …, Zd in a \nresolution state RS, with no two of them linked, for any n ≥ 1, a d-whip[n] built on \nZ1, Z2, …, Zd is a structured list ({Z1, Z2, …, Zd}, (V1, L1, R1), …, (Vn-1, Ln-1, Rn-1), \n(Vn, Ln)), such that: \n– for any 1≤k≤n, Vk is a CSP variable; \n– Z1, Z2, …, Zd, all the Lk’s and all the Rk’s are candidates in RS; \n– in the sequence (L1, R1, …, Ln-1, Rn-1, Ln), any two consecutive elements are \ndifferent; \n– none of Z1, Z2, … and Zd belongs to {L1, R1, L2, R2, …, Ln}; \n– L1 is linked to Z1, Z2, … or Zd; \n\n12. Patterns of proof and associated classifications   \n353 \n– right-to-left continuity: for any 1<k≤n, Lk is linked to Rk-1; \n– strong left-to-right continuity: for any 1≤k<n, Lk and Rk are candidates for Vk; \n– Ln is a candidate for Vn; \n– at least one of Z1, Z2, … and Zd is not a label for Vn; \n– for any 1≤k<n: Rk is the only candidate for Vk compatible with Z1, Z2, …, Zd \nand all the previous Ri (i<k); \n– Vn has no candidate compatible with Z1, Z2, …, Zd and all the previous Ri \n(i<n); (but Vn has more than one candidate). \nRemark: 2-whips[n] are the same thing as the bi-whips[n] defined in section \n11.4.1. \nDefinition: given d≥1 and d candidates Z1, Z2, …, Zd in a resolution state RS, \nwith no two of them linked, for any n≥1, a d-braid[n] built on Z1, Z2, …, Zd is a \nstructured list as above, with the right-to-left continuity condition replaced by: \n– for any 1<k≤n, Lk is linked to Z1, Z2, …, or Zd or a previous Ri. \nDefinitions: given a resolution state RS, d different candidates Z1, Z2, … and Zd \nin RS, such that no two of them are linked, are said d-whip[n] (respectively d-\nbraid[n]) incompatible or contradictory in RS if there exists in RS some d-whip[n] \n(resp. some d-braid[n]) built on Z1, Z2, … and Zd. Z1, Z2, … and Zd are said d-whip \n(respectively d-braid) incompatible or contradictory in RS if there is some n such \nthat, in RS, they are d-whip[n] (resp. d-braid[n]) incompatible.  \nNow defining the nandd(Z1, Z2, …, Zd) predicate as \nnandd(Z1, Z2, …, Zd) ≡ ¬[candidate(Z1) ∧ candidate (Z2) ∧ … ∧ candidate(Zd)],  \nit is obvious that all the d-whip[n] and d-braid[n] contradiction relations between \nd candidates are constructive restricted forms of this pure logic nandd predicate. \nMoreover, all these relations are symmetric in all their arguments. \nExercise: define d-braid[m] logical theories and prove their stability for \nconfluence; define a procedure d-T&E(Z1, Z2, …, Zd) and prove its equivalence with \nthe existence of a d-braid of unrestricted length built on Z1, Z2, …, Zd. \n12.4.2. W*d-whips and B*d-braids \nThese d-whips and d-braids can now be used in a way very close to the way bi-\nwhips and bi-braids have been used in section 12.2. \nDefinition: given a resolution state RS of any CSP and a candidate Z in RS, a \nB*d-1-braid based on Z is a structured list (Z, (V1, L1, R1), …, (Vm-1, Lm-1, Rm-1), \n(Vm, Lm)) that satisfies the following conditions: \n– for any 1≤k≤m, Vk is a CSP variable; \n\n354 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– Z, all the Lk’s and all the Rk’s are candidates; \n– in the sequence of labels (L1, R1, …, Lm-1, Rm-1, Lm), any two consecutive \nelements are different; \n– Z does not belong to {L1, R1, L2, R2, …. Lm}; \n– L1 is linked to Z; \n– for any 1<k≤m, there is some d’, 0≤d’<d, such that Lk is d’-braid incompatible \nin RS with a subset of d’ elements taken from {Z} ∪ {Rj, j<k}; \n– strong left-to-right continuity: for any 1≤k<m, Lk and Rk are candidates for Vk; \n– Z is not a label for Vm; \n– for any 1≤k<m: Rk is the only candidate for Vk that is not d’-braid \nincompatible in RS with a subset of d’ elements taken from {Z} ∪ {Rj, j<k} for \nsome d’, 0≤d’<d; \n– Vm has no candidate that is not d’-braid incompatible in RS with a subset of d’ \nelements taken from {Z} ∪ {Rj, j<k} for some d’, 0≤d’<d; (but Vm has more than \none candidate – the usual non-degeneracy condition). \nWe can now define the following increasing sequence of resolution theories: \n– B*0 = BRT(CSP);  \n– B*1 = B∞ = ∪n≥0 Bn, the now familiar braids resolution theory; … \n– B*d = Bd-1 ∪ rules for B*d-1-braids. \nExercise: prove that all these theories have the confluence property, define the \nappropriate T&E*d procedure and prove an equivalence theorem. \nNotice that the passage from B*d-1 to B*d could be replaced by the addition of a \nsingle formula with precondition the existence of a d-braid and with conclusion the \nassertion of a nandd about d candidates (this is not a standard resolution rule, but it is \nstill a logic formula with no disjunction): \nB*d = B*d-1 ∪ ∀l1∀l2…∀ld[Bi-T&E-contradd(l1, l2, …, ld) ⇒ nandd(l1, l2, …, ld)] \nsuch nandd would then be used inside B*d by the standard laws of constructive logic.  \nNotice also that, if the above definitions took care of the lengths of the various \nd’-braids used in the d’-braid contradiction relations, the total length of a B*d-braid \ncould be defined; and a “universal” rating B*\n∞B could also be defined. However, the \ncomputational complexity of B*d-braids may make them computationally \nintractable. Alternatively, for an instance in T&E(d), one could define, upwards \nfrom deeper to shallower layers, a sequence (pd, …, p2, p1) of the minimal sizes \nnecessary for each of the sets of d’-braid contradictions, assuming at each level all \nthe deeper Bi-T&E-contradd’’ contradictions obtainable with the previous maximal \nallowed pd’’ lengths. \n\n \nPart Four \nMATTERS OF MODELLING \n\n\n \n13. Application-specific rules (the sk-loop in Sudoku) \nAs a counterpoint to the first chapter about modelling a Constraint Satisfaction \nProblem, the present one will tackle the problem of modelling resolution rules. Until \nnow, we have been little concerned with modelling questions relative to rules \n(exceptions are the discussion about how to define g-labels or to express the non-\ndegeneracy conditions of Subsets): all our rules were progressively derived from the \ntwo most basic types of rules for the Sudoku CSP, namely xy-chains (i.e. bivalue-\nchains restricted to rc-space) and Subset rules. In the process, our guiding principles \nhave been theoretical: they rested on the analysis of how to transpose them to the \ngeneral CSP, how to prove them and how to generalise these proofs further and \nfurther (of course, these are also modelling principles). In this respect, the approach \nfollowed in this book is very close to that we first applied in HLS. \nHowever, over the years, participants of Sudoku forums have kept following a \nvery different, example-based approach. Various types of rules have been proposed, \nin application-specific forms and usually in very informal presentations. Here, we \nshall examine a single example of such a tentative rule for the following purposes: \n– we shall illustrate how putting a few examples together and saying they have \nthe same pattern is a good start for defining a new resolution rule for a given CSP \nbut it is very far from enough for doing this in a non-ambiguous way; at some point, \na theoretical analysis is needed; in other terms, the example-based and the theory-\nbased approaches are more complementary than opposite; \n–  we shall also show how new kinds of rules can be formalised, starting from \nexamples; this will raise the delicate question of boundary cases; \n– finally, we shall show how our general B?B classification allows to measure \nthe impact of application-specific rules on hard instances. \nIt should be stressed that our purposes are only illustrative of what can be done \nwhen a new rule is suspected to have been discovered; this chapter is in no case \nintended as a review of the “exotic” patterns that may have appeared in forums. \nWe shall start from the famous EasterMonster Sudoku puzzle (created by jpf). It \nhas long been considered as the hardest puzzle and the first pattern-based \nelimination of candidates for it was obtained by Steven Kurzhals with a rule he \nintroduced in several Sudoku forums (in a rather sketchy way). Since then, this (now \nclassical) pattern has been known under several names: hidden-pairs loop, sk-loop… \n\n358 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n13.1. The EasterMonster family of puzzles and the sk-loop \nConsider Figure 13.1. Informally, given the content of the four grey cells in each \nof the blocks at the four corners of the grid, the sk-loop rule says that the following \nthirteen candidates (crossed in the Figure) can be eliminated:  \n- in row r2 outside blocks b1 and b3, numbers n3 and n8: n3r2c5, n8r2c5, n8r2c6,  \n- in row r8 outside blocks b7 and b9, numbers n4 and n5: n4r8c5, n5r8c4, \n- in column c2 outside blocks b1 and b7, numbers n4 and n8: n4r5c2, n8r5c2, \n- in column c8 outside blocks b3 and b9, numbers n3 and n9: n3r5c8, n9r5c8, \n- in block b1 outside the four grey cells, numbers n2 and n7: n2r3c1, n7r1c3, \n- in block b3 outside the four grey cells, numbers n1 and n6: nothing, \n- in block b7 outside the four grey cells, numbers n1 and n6: n1r7c3, n6r9c1, \n- in block b9 outside the four grey cells, numbers n2 and n7: nothing. \nFrom Table 11.5, we know that EasterMonter is in B6B; after these eliminations, \nit can be solved in B2B. Being in B2B is far from being easy, but this is clearly much \nbetter than being in B6B. So, undoubtedly, the sk-loop is worth some consideration. \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nr1 n1 \n \nn4           \nn7 n8      \n          n3 \nn4 n5      \nn7 n8      \n          n3 \n     n5 n6 \nn7           \n          n3 \n          n6 \n     n8 n9 \n \n     n5 n6 \nn7 n8      \n          n3 \nn4           \n     n8 n9 \n          n3 \n          n6 \n          n9 n2 \nr1 \nr2 \n     n2 n3 \n \n     n8      n9 \n          n3 \n \nn7 n8      n4 \nn1 n2 n3 \n          n6 \n n8  \nn1 n2      \n          n6 \nn7 n8      \nn1      n3 \n \n n8  \nn5 \n          n3 \n          n6 \n n8  \nr2 \nr3 \n     n2 n3 \nn4 n5      \n     n8      \n     n2      \nn4           \n n8  \nn6 \nn1 n2 n3 \n n5  \n \nn1 n2 n3 \n \n     n8 n9 \nn1 n2      \n n5  \n n8  \nn7 \nn1      n3 \n \n          n9 \n          n3 \nn4           \n     n8 n9 r3 \nr4 \n     n2      \nn4      n6 \n     n8      n5 \nn1           \nn4           \nn7 n8      n9 \nn1 n2      \nn4      n6 \n \nn3 \nn1 n2      \n \n n8  \nn1 n2      \n          n6 \nn7           \n \n          n6 \nn7 n8      r4 \nr5 \n     n2 n3 \nn4      n6 \n     n8 n9 \nn1 n2      \nn4      n6 \n n8  \nn1      n3 \nn4           \n     n8 n9 \nn1 n2      \n          n6 \n \nn7 \nn1 n2      \nn4      n6 \n \nn1 n2 n3 \n n5  \n     n8 n9 \nn1 n2 n3 \n          n6 \n          n9 \n          n3 \n     n5 n6 \n     n8 n9 r5 \nr6 \n     n2 n3 \n          n6 \n          n9 \nn1 n2      \n          n6 \nn7           \nn1      n3 \n \nn7      n9 n8 \nn5 \nn1 n2      \n          n6 \n \nn1 n2 n3 \n \n          n9 n4 \n          n3 \n          n6 \nn7      n9 r6 \nr7 n7 \nn1           \nn4           \n n8  \nn1           \nn4 n5      \n     n8 n9 \nn1 n2 n3 \n n5  \n \nn1 n2 n3 \nn4           \n n8  \nn1 n2      \nn4 n5      \n n8  \nn6 \n     n2 n3 \n \n          n9 \n          n3 \nn4 n5      \n          n9 r7 \nr8 \n \nn4 n5 n6 \n \nn3 \nn1           \nn4 n5      \n      \nn1 n2      \n     n5 n6 \nn7           \nn1 n2      \nn4      n6 \n \nn9 \n     n2      \nn4 n5      \n \nn8 \n \nn4 n5      \nn7           r8 \nr9 \n \nn4 n5 n6 \n     n8 n9 \n \nn4      n6 \n n8  \nn2 \n          n3 \n     n5 n6 \nn7           \n          n3 \nn4      n6 \n n8  \n \nn4 n5 n6 \nn7 n8      \n          n3 \nn4 n5      \n          n9 \n          n3 \n \nn7      n9 n1 \nr9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 13.1. EasterMonster (outer candidates in bold), from B6B to B2B \n\n13. Application-specific rules (the sk-loop in Sudoku)     \n359 \nSoon after this pattern was discovered, many variants of EasterMonster were \nfound; they all displayed the same set of four blocks forming a rectangle, each with \na “cross” of four cells, each of these cells having three numbers, more or less as in \nEasterMonster. It should be noted that the clues in the central block have no \ninfluence on the contents of the 16 cells of the sk-loop, so that many variants can \neasily be obtained by merely changing them; the only condition is keeping the \npuzzle minimal (or at least ensuring it has a unique solution). \n \n x   \n  \n \n  \n  \n \n \nx   \n \nx   x  \n \n  x     \n  \n  x \n \n  \n \nx \n \n \n  \n \nx   x   \n   \n  \n    \n  \n \n  \n \nx   \n \n  \n    \n \n  \n \nx   x   x \n \n  \n \n  x  \n \n  x   \n    \n  \nx   \n  \n \nx   x     \nx \n \n \n  \n  \n \n \n  x   \nFigure 13.2. The pattern of given cells in Metcalf’s puzzle \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nr1 \nn5 \nn1      n3 \n \nn7           \nn1           \nn4      n6 \nn7           \n          n3 \nn4           \nn7 n8      \n     n2 n3 \nn4      n6 \nn7 n8      \n      n2 n3 \n          n6 \n n8  \nn1 n2      \nn4      n6 \n \n \nn4      n6 \n n8  \nn9 \nr1 \nr2 \n          n3 \nn4      n6 \n \nn2 \n \nn4      n6 \n          n9 n1 \n          n3 \nn4      n6 \nn7 n8 n9 \n          n3 \n     n5 n6 \n     n8 n9 \n \nn4 n5 n6 \n \nn7 \n \nn4      n6 \n n8  \nr2 \nr3 \nn1           \nn4      n6 \nn7           \nn1           \n \nn7      n9 n8 \n \nn4 n5      \nn7      n9 \n n2  \nn4      n6 \nn7      n9 \n n2  \n     n5 n6 \n          n9 n3 \n \nn4 n5 n6 \n \nn1 n2      \nn4      n6 \n \nr3 \nr4 \nn1 n2 n3 \n \nn7 n8      n4 \nn1 n2      \n n5  \nn7      n9 n6 \nn1      n3 \n \n     n8 n9 \nn1      n3 \n \n     n8 n9 \n n2  \n n5  \nn7      n9 \n          n3 \n n5  \n     n8 n9 \n     n2 n3 \n \nn7 n8      r4 \nr5 \nn1 n2 n3 \n          n6 \nn7 n8          \nn1      n3 \n \nn7 n8 n9 \nn1 n2      \n          n6 \nn7      n9 \n          n3 \nn4           \n     n8 n9 n5 \nn1      n3 \n \n     n8 n9 \n n2  \nn4      n6 \nn7      n9 \n          n3 \nn4      n6 \n     n8 n9 \n     n2 n3 \nn4      n6 \nn7 n8      r5 \nr6 \n          n3 \n          n6 \n n8  \n          n3 \n n5  \n     n8 n9 \n \n     n5 n6 \n          n9 n2 \n          n3 \nn4           \n     n8 n9 n7 \n \nn4 n5 n6 \n          n9 n1 \n          n3 \nn4      n6 \n n8  \nr6 \nr7 \nn1 n2      \nn4           \nn7           \nn1           \n n5  \nn7           n3 \n \n n5  \nn7      n9 \nn1 n2      \n          n6 \nn7      n9 \nn1 n2      \n     n5 n6 \n          n9 n8 \n \nn4      n6 \n          n9 \nn1           \nn4      n6 \nn7           r7 \nr8 \nn1           \n \nn7 n8      n6 \nn1           \n n5  \nn7           \n          n3 \n n5  \nn7 n8 n9 \nn1      n3 \n \nn7 n8 n9 n4 \nn1           \n \nn7      n9 n2 \nn1      n3 \n \nn7           r8 \nr9 \nn9 \nn1           \n \nn7 n8      \nn1 n2      \nn4           \nn7           \n          n3 \n   \nn7 n8      \nn1 n2 n3 \n          n6 \nn7 n8      \nn1 n2 n3 \n          n6 \n n8  \nn1           \nn4      n6 \nn7           \n          n3 \nn4      n6 \n \nn5 \nr9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 13.3. Metcalf’s puzzle (outer candidates in bold), from B7B to B4B \n\n360 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nEven before the sk-loop was found in it, EasterMonster was famous not only for \nits high SER (11.6, the highest known at that time) but also for the quasi-symmetries \nin its pattern of clues. However, there is another minimal puzzle of still higher SER, \nwith both an sk-loop and a more beautifully symmetric pattern of clues (shown in \nFigure 13.2). It is Metcalf’s puzzle (with its initial resolution state given in Figure \n13.3). We have already met it in Table 11.5 as one of the only three known (as of \nthis writing) puzzles in B7B; it also has the highest known SER (11.8) for a puzzle \nwith an sk-loop. It should be noted that, contrary to EasterMonster, there are two \nblocks in which the pairs of numbers in bold appear in the four grey cells. \nThe eliminations allowed by the sk-loop are: r5c2≠7, r5c2≠1, r2c6≠6, r2c5≠6, \nr2c5≠4, r5c8≠6, r5c8≠4, r8c5≠7, r8c5≠1, r8c4≠7. After this, Metcalf’s puzzle can be \nsolved in B4B. Again, this is not easy, but still easier than B7B. (Later, we shall see \nan sk-loop puzzle for which the eliminations do not change its B3B classification). \n13.2. How to define a resolution rule from a set of examples \nSeveral descriptions and several proofs of an sk-loop rule have been proposed \nsoon after it was introduced, but as we were no more satisfied by them than by the \noverall description of the pattern, we have tried to write our own formalisation. \nHowever, it is not obvious to define a resolution rule corresponding to a given \nexample or set of examples. We shall ask a few questions that must be answered \nduring this process. This will lead us to provide not one but two non a priori \nequivalent formal interpretations of the sk-loop. (There is a positive aspect of using \ncomputers in Sudoku solving: when programming a rule, one has to answer each of \nthese questions. Conversely, the logical conditions that will be defined below for our \nformal interpretations can be understood as specifications for an implementation.)  \nThe first question is about transforming the constants appearing in one or several \nexamples into variables. It may seem easy to replace specific numbers, rows, \ncolumns and blocks by generic variables, but the relations they should have may be \nambiguous; the question is, which of the relations present in the examples (e.g. the \nequality of two candidate-Numbers) are actually meaningful and which are purely \ncoincidental? In our opinion, this can only be settled while trying to prove the rule. \nA second group of two non-obvious questions is: which candidates present in the \nexample(s) can be made optional and which additional candidates can be allowed as \noptional candidates in each of the cells? In chapter 8, we have already seen \nexamples of how to deal with this when we defined the non-degeneracy conditions \nfor Subset rules. Even with this elementary case, it was far from obvious for Subsets \nof size greater than three. The two interpretations of sk-loops introduced in the next \nsubsections answer these two questions. In the EasterMonster example and in all the \nvariants that first appeared, each of the sixteen cells concerned by the sk-loop had \n\n13. Application-specific rules (the sk-loop in Sudoku)     \n361 \nexactly three candidates. With the following definitions, they may have 2, 3 or 4. \nTherefore, each of these interpretations is already a non obvious generalisation of \nthe first known examples. The puzzle in Figure 13.4 shows that this is indeed useful. \nThird question: what conditions do ensure that the pattern will not degenerate \ninto something simpler? Anticipating on the definition of a belt of crosses in the \nnext subsection, if all the sets of inner candidates in the 2k crosses are the same and \nall the sets of horizontal + vertical candidates are the same, then the whole belt \ndegenerates into a set of k Naked-Quads in rows, k Naked-Quads in columns and 2k \nNaked-Quads in blocks (whether this can really happen is another question). \nFourth question: can the overall structure be generalised? Can it be included in a \nwhole family of patterns (e.g. in the sense that xy-chains or whips of different \nlengths form a family)? The following two interpretations in terms of belts of \ncrosses or of x2y2-chains both allow a priori larger patterns, each with more \ndifferent physical shapes than the “standard” one. None has been found until now \nfor the 9×9 puzzle (there does not seem to be room enough for them), but there is no \nobvious reason for not finding any in larger grids. \nFifth question, intimately related to the previous one: what are the building \nblocks of the overall structure? The following two interpretations rely on different \nbuilding blocks (crosses versus x2y2-segments). The second is easily seen to be a \npriori more “atomic” and more general than the first; it also provides a better \nunderstanding of how the rule can be proven. Nevertheless, none of the known \nexamples satisfies the second but not the first.  \nSixth question: where should the pattern be classified in a complexity hierarchy? \nNotice that this is not an abstract question that could be independent of the tentative \nformulation of the rule. In order to state the rule precisely, such classification \ndecisions have to be made (be it implicitly). For instance, the non-degeneracy \ncondition we formulated for Quads in chapter 8 supposes that Quads are more \ncomplex than Triplets and Pairs (in this case, it is not really open to discussion, but \nit is nonetheless necessary for making the non-degeneracy condition meaningful). In \nthe rating or classification approach of this book, as the sk-loop involves sixteen rc-\ncells, i.e. sixteen CSP variables, it should be ranked somewhere close to W16, B16, \ngW16, gB16, SB16 or BB16. \n13.3. First interpretation of an sk-loop: crosses and belts of crosses \nLet us now introduce our first interpretation (the most straightforward one) of \nthe sk-loop by defining its building blocks (“crosses”) and the ways (via crosses \n“aligned” along “spines”) they can be combined into a full pattern (“a belt of \ncrosses”) allowing eliminations. Our definitions try to be as general as possible, \n\n362 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nconsidering the way we shall prove the rule; they go a priori much beyond the mere \nEasterMonster case (and they are meaningful for any grid size). \nDefinition: a cross is defined by the following two sets of data and conditions:  \n1) a pattern of cells: \n– a block b; \n– a row r and a column c that both intersect b; the intersection of r and c will be \ncalled the “center” of the cross;  \n– two different cells, each in both row r and block b, and none equal to the \ncenter of the cross; they will be called the horizontal ends of the cross; \n– two different cells, each in both column c and block b, and none equal to the \ncenter of the cross; they will be called the vertical ends of the cross. \n \nThe “center” of a cross is a conceptual center, it does not have to be the physical \ncenter of block b. However, by a proper puzzle isomorphism, any “cross” can be \nmade to look like a physical cross (whence the name we have chosen for them); in \nthe examples below, they will appear directly as physical crosses in EasterMonster \n(Figure 13.1), in Metcalf’s puzzle (Figure 13.3) and in Tarek’s puzzle (Figure 13.4), \nand only indirectly (i.e. after an iso) in Ronk’s puzzle (Figure 13.6). Notice that the \nabove conditions imply that the four “ends of the cross” are different cells (they will \nbe drawn in light grey in the forthcoming Figures). \n2) a pattern of candidates in the four ends of the cross: \n– two different “horizontal outer” candidate-Numbers; \n– two different “vertical outer” candidate-Numbers; (each of them may be equal \nto an horizontal outer one); \n– two different “inner” candidate-Numbers, each different from any of the \n(horizontal and vertical) outer candidate-Numbers; \n– none of the four ends is decided;  \n– each of the two horizontal ends of the cross contains only inner and horizontal \nouter candidate-Numbers; each of the inner and horizontal outer candidate-Numbers \nappears in at least one of the two horizontal ends of the cross;  \n– each of the two vertical ends of the cross contains only inner and vertical outer \ncandidate-Numbers; each of the inner and vertical outer candidate-Numbers appears \nin at least one of the two horizontal ends of the cross. \nForgetting the condition on the four undecided ends would lead to invalid \neliminations; it is not a consequence of all the other assumptions (not even a \npractical one), as shown by the following six puzzles from Eleven’s collection: \n \n......7..4..18...6.....2.1..4..9...3..9..15.....7...2..6.......83.5.......4.3...8\t\r  \t\r  ER/EP/ED=10.8/10.8/9.9\t\r  #10526\t\r  \n12.........6.8...2.8...3...2...65..8...9...4...7...5.......4.9....5..3...6..7...1\t\r  \t\r  ER/EP/ED=10.7/10.7/9.4\t\r  #13852\t\r  \n\n13. Application-specific rules (the sk-loop in Sudoku)     \n363 \n..34......5...92..6...7.....1......8.....1.259..5..1...9...58....4.6.....6.3...7.\t\r  \t\r  ER/EP/ED=10.6/1.2/1.2\t\r  #23210\t\r  \n1....6.8....7....2.8..3.......9....7....2.3....5..1.4...4..56...9......36......1.\t\r  \t\r  ER/EP/ED=10.6/1.2/1.2\t\r  #24974\t\r  \n1..45..8.........6.....75..2.4.......1.2...9...9.3........6...7..18...2..8...53..\t\r  \t\r  ER/EP/ED=10.6/1.2/1.2\t\r  #26051\t\r  \n12..5...9...7.....7.....5..2.1.4.9...9......4.4.6...2.3.2.1........6..92.....81..\t\r  \t\r  ER/EP/ED=10.6/1.2/1.2\t\r  #26342\t\r  \nNotice that in the set of 1,662 known (as of this writing) puzzles with an sk-loop, \nwe have found none in which one of the four ends of a cross did not contain any of \nthe outer candidate-Numbers and we have found only one (Tarek’s puzzle, \ndisplayed in Figure 13.4) in which one of the four ends of a cross did not contain \nany of the inner candidate-Numbers. Because of this example (and only because the \nsame elimination proof is valid for it), the definition we give here for the pattern of \ncandidates in a cross is slightly more general than that available on our website. \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nr1 \nn4 \n \n     n5 n6 \n          n9 \n     n2 n3 \n          n6 \n          n9 \n n2  \n     n5 n6 \nn7 n8      \n     n2 n3 \n n5  \n n8  \n          n3 \n n5  \nn7 n8      \n          n3 \n          n6 \nn7 n8 n9 \n          n3 \n \n     n8 n9 n1 \nr1 \nr2 \n          n3 \n     n5 n6 \n \nn7 \nn1      n3 \n          n6 \n \nn1           \nn4 n5 n6 \n n8  \nn9 \nn1      n3 \nn4 n5      \n n8  \n          n3 \n          n6 \n n8  \nn2 \n          n3 \nn4      n6 \n \nr2 \nr3 \n     n2 n3 \n          n6 \n          n9 \nn1           \n          n6 \n          n9 n8 \nn1 n2      \nn4      n6 \nn7           \nn1 n2 n3 \nn4           \n \nn1      n3 \nn4           \nn7           n5 \n          n3 \nn4           \n          n9 \n          n3 \nn4      n6 \nn7      n9 r3 \nr4 \n n2  \n n5  \nn7 n8      n3 \nn1 n2      \nn4           \nn7           n9 \nn1           \nn4 n5      \n n8  \nn6 \nn1 n2      \n \nn7 n8      \nn1           \nn4 n5      \n n8  \n n2  \nn4 n5      \nn7           r4 \nr5 \n n2  \n     n5 n6 \n     n8 n9 \nn1           \nn4 n5 n6 \n     n8 n9 \nn1 n2      \nn4      n6 \n          n9 \nn1           \nn4 n5      \n n8  \nn7 \nn1           \nn4 n5      \n n8  \nn1 n2 n3 \n \n     n8 n9 \nn1      n3 \nn4 n5      \n     n8 n9 \n     n2 n3 \nn4 n5      \n          n9 r5 \nr6 \n \n n5  \nn7 n8 n9 \nn1           \nn4 n5      \n     n8 n9 \nn1           \nn4           \nn7      n9 n3 \nn1           \nn4 n5      \n n8  \nn2 \nn1           \n \nn7 n8 n9 n6 \n \nn4 n5      \nn7      n9 r6 \nr7 \n          n3 \n          n6 \nn7 n8 n9 \n \nn4      n6 \n     n8 n9 n5 \nn1 n2      \nn4           \nn7 n8      \nn1 n2 n3 \nn4           \n n8  \nn1      n3 \nn4           \nn7 n8 n9 \nn1 n2 n3 \n          n6 \n          n9 \nn1      n3 \n \n           n9 \n     n2 n3 \n          n6 \n          n9 r7 \nr8 \n          n3 \n \n     n8 n9 n2 \n          n3 \nn4           \n          n9 \nn1           \nn4 n5      \n n8  \nn6 \nn1      n3 \nn4 n5      \n     n8 n9 \nn1      n3 \n \n          n9 n7 \n          n3 \n n5  \n          n9 r8 \nr9 \nn1 \n \n          n6 \n          n9 \n          n3 \n          n6 \nn7      n9 \n n2  \n n5  \nn7           \n     n2 n3 \n n5  \n \n          n3 \n n5  \nn7      n9 n4 \n          n3 \n n5  \n          n9 n8 \nr9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 13.4. Tarek’s puzzle (#071223170000, outer candidates in bold), from B6B to B3B \nDefinitions: two crosses are row-aligned [respectively column-aligned] if they \nare in different blocks, they are centred in the same row [resp. column] and they \nhave the same set of horizontal [resp. vertical] outer candidate-Numbers.  \nDefinition: a spine for a belt of even length 2k is defined by a sequence of 2k \ncells in different blocks such that, when repeating the first at the end of the list, two \n\n364 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nconsecutive cells are alternatively in the same row and in the same column (these \ncells define the global structure of the belts to be defined below).  \nDefinition: a belt of crosses of even length 2k is defined by the following data \nand conditions:  \n– a spine for a belt of length 2k; \n– for each of the cells in the spine, a cross centred on this cell; \n– when repeating the first cross at the end of the list, consecutive crosses are \nalternatively row-aligned and column-aligned; \n– the 2k sets of inner candidate-Numbers of the 2k crosses are not all equal; the \nsets of horizontal + vertical candidates-Numbers of the 2k crosses are not all equal \n(non-degeneracy condition). \nIn the EasterMonster, Metcalf’s and Tarek’s examples, the spine is (r2c2, r2c8, \nr8c8, r8c2); it forms a square. As of now, no minimal 9×9 puzzle has been found \nwith a belt of crosses based on a spine longer than 4: it is easy to find such spines, \nbut when it comes to placing the clues in such a way that the proper candidate \npatterns appear in the crosses, it seems there is not enough room on the grid for such \nstructures. On the other hand, there does not seem to be any reason for not finding \nany in larger grids. \nTheorem 13.1: Given a belt of crosses, one can eliminate:  \n- in each of its blocks: any inner candidate-Number of this block that is not in any \nend of the cross in this block,  \n- in each “central” row of consecutive row-aligned crosses: any horizontal outer \ncandidate-Number (they are the same for the two crosses) that is not in any end of \nthe crosses in the two blocks,  \n- in each “central” column of consecutive column-aligned crosses: any vertical \nouter candidate-Number (they are the same for the two crosses) that is not in any \nend of the crosses in the two blocks.  \nProof: Let us call C1, C2, … C2k the 2k crosses and b1, b2, … b2k their blocks. \nSuppose we start with two row-aligned crosses. We shall only prove that the inner \ncandidate-Numbers in block b1 outside the ends of C1 can be eliminated; the proofs \nfor the other parts of the theorem are similar. \nIf none of the horizontal ends of C1 contains any of the inner candidate-Numbers \nof C1, then one has successively: \n- the horizontal ends of C1 together contain both of the horizontal outer candidate-\nNumbers of C1; \n- the horizontal ends of C2 (which are row-aligned with those of C1) contain none of \nthe horizontal outer candidate-Numbers of C2 (which are the same as those of C1); \n- the horizontal ends of C2 contain both of the inner candidate-Numbers of C2 (only \ntwo candidate-Numbers for two cells); \n\n13. Application-specific rules (the sk-loop in Sudoku)     \n365 \n- the vertical ends of C2 contain none of the inner candidate-Numbers of C2 (block \nconstraint); \n- the vertical ends of C2 together contain both of the vertical outer candidate-\nNumbers of C2 (only two candidate-Numbers for two cells); \n… \n- the horizontal ends of C2k contain both of the inner candidate-Numbers of C2k; \n- the vertical ends of  C2k contain none of the inner candidate-Numbers of C2k; \n- the vertical ends of  C2k together contain both of the vertical outer candidate-\nNumbers of C2k; \n- the vertical ends of  C1 contain none of the vertical outer candidate-Numbers of C1; \n- the vertical ends of C1 together contain both of the inner candidate-Numbers of C1. \nSimilarly, if none of the vertical ends of C1 contains any of the inner candidate-\nNumbers of C1, then the horizontal ends of C1 together contain both of the inner \ncandidate-Numbers of C1. Combining these two results, if there is a branch of C1 \nwhose two ends contain none of the inner candidate-Numbers of C1, then these two \ncandidate-Numbers must be in the ends of the other branch. Finally, using \ncontraposition, if there is a branch of C1 that contains one and only one of the inner \ncandidate-Number of C1, then the other inner candidate-Number of C1 must be in \nthe other branch.  \nIn any case, given the whole belt of crosses, each of the two inner candidate-\nNumbers must be in one of the four ends of C1. Whence the eliminations of the \ninner candidate-Numbers in b1 outside the four ends of C1. Qed.  \nNotice that, if the inner candidates appeared somewhere in the row of a cross in \na block, outside the ends of this cross, they could also be eliminated (this is probably \npointless in 9×9 puzzles because in all the known examples the center of the block is \noccupied by a clue, but it might happen in larger grids). \n \n \nFigure 13.5. A possible spine for a belt of length 6. \nRemarks on the shape of the spine: with belts of length 4, the spine can only be a \nrectangle; moreover, as floors and towers can be permuted, there is essentially one \n\n366 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nspine. However, with belts of length 6, the spine can (must) have different shapes \n(but always with spine ends in different blocks), e.g. as shown in Figure 13.5. \nFinally, in anticipation of section 13.5, notice that a belt of crosses of length 4 \ncan always be seen as a g-Subset of size sixteen, with its sixteen CSP variables \ndefined by the sixteen rc-cells forming  the ends of the four crosses and its sixteen \ntransversal sets defined by four rn constraints (the two rows of the centers combined \nwith the two horizontal Number-candidates), four cn constraints (the two columns of \nthe centers combined with the two horizontal Number-candidates) and eight bn \nconstraints (the four blocks of the centers, each combined with its two inner \nNumber-candidates). It is easy to check that this view allows the same eliminations \nas the belt-of-crosses view, but it is not consistent with the original view of the \npattern as a loop (i.e. some kind of closed chain).  \n13.4. Second interpretation of an sk-loop: x2y2-chains \nThe above interpretation of the sk-loop is the simplest one from the player’s \npoint of view, because crosses can easily be seen inside a block; but it hides the \nsymmetrical roles played by blocks and rows or columns in our proof. Whence our \nsecond interpretation based on the remark that the proof in the previous section \nillustrates the x2y2-transfer principle to be enunciated below. Our building blocks \nwill now be \"x2y2-segments\".  \nDefinitions (classical): a rowblock is the intersection of a row and a block; a \ncolblock is the intersection of a column and a block; a segment is either a rowblock \nor a colblock.  \nDefinition: an x2y2-segment of type row [respectively col] is defined by the \nfollowing data and conditions: \n– a rowblock [resp a colblock] with two distinguished non-decided cells called \nits ends (as before, they do not have to be the physical ends, they are the conceptual \nends); \n– two different “left-linking” candidate-Numbers; \n– two different “right-linking” candidate-Numbers, each different from any of \nthe left-linking candidate-Numbers; \n– each of the two ends of the x2y2-segment contains only left-linking and right-\nlinking candidate-Numbers;  \n– each of the left-linking and each of the right-linking candidate-Numbers \nappears in at least one of the two ends of the x2y2-segment. \nDefinition: two x2y2-segments are chainable if:  \n\n13. Application-specific rules (the sk-loop in Sudoku)     \n367 \n– the set of right-linking candidate-Numbers of the first is equal to the set of left-\nlinking candidate-Numbers of the second; \n– they have no end in common; \n– they satisfy either of the following conditions: \n- they are both of type row, they lie in the same row but in different blocks, \n- they are both of type column, they lie in the same column but in different blocks,  \n- the first is of type row, the second of type col and they lie in the same block, \n- the first is of type col, the second of type row and they lie in the same block, \n- they are both of type row, they lie in the same block but in different rows, \n- they are both of type col, they lie in the same block but in different columns. \nRemarks:  \n– two chainable x2y2-segments always share a single unit: respectively row and \ncolumn for the first two cases listed above, and block for the remaining four cases; \n– the last two cases introduce completely new possibilities that were not \navailable in the “belt of crosses” view; \n– given an x2y2-segment, its reverse can be defined as the x2y2-segment based \non the same rowblock [or colblock] and ends, but with the roles of left-linking and \nright-linking candidate-Numbers interchanged; \n– if two x2y2-segments are chainable, then the reversed segments taken in \nreversed order are chainable. \nThe basic (and obvious) property of an x2y2-segment is that if none of its left-\nlinking candidate-Numbers is true in any of its two cells, then each of its right-\nlinking candidate-Numbers must be true in one of its two cells.  \nThis readily extends to a basic property of chainable x2y2-segments, where it \nconstitutes what we call the x2y2-transfer principle (a natural generalisation of the \nclassical xy-transfer principle for bivalue chains): if none of the left-linking \ncandidate-Numbers of the first x2y2-segment is true in any of its two cells, then \neach of the right-linking candidate-Numbers of the second x2y2-segment must be \ntrue in one of its two cells. This can in turn be extended to any sequence of \nchainable x2y2-segments as described below: \n \nxy-transfer principle \nx2y2-transfer principle \nif not x1 then y1  \n     then not x2  \n        then y2  \n            then not x3  \n                then y3 ... \nif neither of x1 and x'1 then both of y1 and y'1  \n     then neither of x2 and x'2  \n         then both of y2 and y'2  \n             then neither of x3 and x'3 \n                 then both of y3 and y'3 .... \n\n368 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nDefinition: an x2y2-belt of length n is a sequence of n different x2y2-segments, \nS1, S2, ..., Sn, all different, such that (setting Sn+1 = S1) for each j in {1, 2, ..., n}, Sk \nand Sk+1 are chainable.  \nRemarks:  \n– notice the circularity condition (as for belts of crosses); \n– the length n does not have to be even; \n– if one defines the reversed belt as being the sequence of the reversed segments \ntaken in the reversed order, then it is an x2y2-belt (this is needed in the proof of the \nfollowing theorem).  \nDefinition: Given an x2y2-belt, the targets of one of its couples of consecutive \n(therefore chainable) x2y2-segments (still setting Sn+1 = S1) are the candidate-\nNumbers equal to the right-linking candidates of the first segment (or the left-\nlinking candidates of the second) and belonging to their unique common unit but to \nnone of their ends. \nDefinition: The targets of an x2y2-belt are the targets of any of its couples of \nconsecutive (therefore chainable) x2y2-segments (still setting Sn+1 = S1).  \nTheorem 13.2: Given an x2y2-belt, any of its targets can be eliminated.  \nThe proof is essentially the same as that we gave above for belts of crosses. It is \nbased on iterating the x2y2-transfer principle in both directions and concluding in \nthe same way as in that proof.  \nRemarks on the shape of the spine:  \n– given an x2y2-belt, we can define its spine more or less as previously (details \nare left to the reader);  \n– with x2y2-belts of length 4, the spine can only be a rectangle, but it can now \nbe “flat”, e.g. with four rowblocks in two different rows and two different blocks;  \n– with belts of length 6, the spine can have new different shapes, e.g. as in \nFigure 13.5, but with the horizontal or the vertical branch, or both, flattened as in the \nprevious case; \n– a question remains open: can one build a (9×9 or larger) puzzle with an x2y2-\nbelt with any of these spines? As of today, no example has been found, but there \ndoes not seem to be any reason why this would not be possible for larger grids. \n13.5. Should the above definitions be generalised further? \nConsider the example in Figure 13.6. In blocks b5, b6 and b9, the conditions for \na belt of crosses seem to be satisfied with the possible outer candidates in these \n\n13. Application-specific rules (the sk-loop in Sudoku)     \n369 \nblocks written in bold (this is the only possibility for a belt). But there is a problem \nfor extending this to block b8: there is only one horizontal outer candidate-Number \n(n8), only one vertical outer candidate-Number (n3), and there are too many inner \ncandidate-Numbers (either n4 in r7c5 and r8c4 or n9 in r7c6 and r9c4). \nSupposing none of n1 and n2 was in r4c5 or r4c6, we can proceed as in section \n13.4 until we show that n5 and n8 must be in r7c8 and r7c9. But afterwards, the \nchain-like reasoning used in the standard case does not allow to conclude than none \nof n3 and n5 can be in any of r5c4 and r6c4. The x2y2 chain of reasoning is broken; \nit can only be patched with a piece of reasoning very specific to this situation. \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nr1 \nn9 \nn8 \nn1 n2 n3 \n \n \nn7 \nn1 n2 n3 \nn4      n6 \n \n     n2 n3 \n     n5 n6 \n \nn1 n2      \nn4 n5 n6 \n \nn1      n3 \nn4 n5 n6 \n \n     n2 n3 \n     n5 n6 \n \nr1 \nr2 \nn7 \nn1 n2      \n \n \nn6 \nn1 n2 n3 \nn4 n5      \n          n9 \nn1 n2 n3 \nn4           \n \n     n2 n3 \n n5  \n          n9 n8 \nn1      n3 \nn4 n5      \n \n     n2 n3 \n n5  \n          n9 r2 \nr3 \nn1 n2 n3 \n \n \n \nn5 \nn4 \nn1 n2 n3 \n \n          n9 \nn1 n2 n3 \n          n6 \n n8  \n     n2 n3 \n          n6 \n     n8 n9 \nn1 n2      \n          n6 \n          n9 \nn1      n3 \n          n6 \nn7           \n     n2 n3 \n          n6 \nn7      n9 r3 \nr4 \nn6 \nn1 n2      \nn4           \nn7      n9 \nn1 n2      \n n5  \nn7      n9 n8 \nn1 n2      \n \nn7           \n n2  \n n5  \nn7           n3 \n \nn4 n5      \nn7          \n \n     n5      \nn7      n9 r4 \nr5 \nn1      n3 \nn4 n5      \n n8  \nn1           \nn4           \nn7           \nn1      n3 \n n5  \nn7 n8      \nn1      n3 \n n5  \n \nn9 \n          n3 \n     n5 n6 \nn7           \n \nn4 n5 n6 \n \nn2 \n \n     n5 n6 \nn7 n8      r5 \nr6 \n     n2 n3 \n n5  \n n8  \n     n2      \n           \nn7      n9 \n     n2 n3 \n n5  \nn7 n8 n9 \n     n2 n3 \n n5  \n \n     n2 n3 \n          n6 \nn7           n4 \n \n     n5 n6 \n          n9 \n \n     n5 n6 \nn7 n8      n1 \nr6 \nr7 \nn1 n2      \nn4 n5      \n n8  \nn3 \nn1 n2      \n n5  \n     n8  n9 n6 \n n2  \nn4           \n n8  \n n2  \n \n     n8 n9 n7 \nn1           \n n5  \n n8  \n n2  \n n5  \n n8  \nr7 \nr8 \nn1 n2      \nn4           \n n8  \nn1 n2      \nn4      n6 \nn7           \nn1 n2      \n \nn7 n8      \n     n2 n3 \nn4           \n \nn5 \n     n2 n3 \n \nn7 n8      \nn1 n2      \n          n6 \n \nn9 \n     n2 n3 \n          n6 \n n8  \nr8 \nr9 \n     n2      \n     n5      \n n8  \n n2  \n          n6 \nn7      n9 \n n2  \n n5  \nn7 n8 n9 \n     n2 n3 \n \n          n9 \n     n2 n3 \n \nn7 n8      n1 \n n2  \n     n5 n6 \n \n          n3 \n     n5 n6 \n n8  \nn4 \nr9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 13.6. Ronk’s puzzle (outer candidates in bold), from B3B to B3B \nAn alternative approach is to give a definition in terms of g-Subsets, with: \n– sixteen CSP variables associated with the sixteen rc-cells at the ends of the \ncrosses and pseudo-crosses (in light grey): Xr4c5, Xr4c6, Xr5c4, Xr6c4; Xr4c8, \nXr4c9, Xr5c7, Xr6c7; Xr7c5, Xr7c6, Xr8c4, Xr9c4; Xr7c8, Xr7c9, Xr8c7, Xr9c7; \n– and sixteen g-transversal sets defined by the following sixteen g-transversal \nconstraints: two of type rn (r4n7, r7n8), two of type cn (c4n3, c7n6) and twelve of \ntype bn (b5n1, b5n2, b5n5, b6n4, b6n5, b6n9, b8n2, b8n4, b8n9, b9n1, b9n2, b9n5); \n\n370 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n \none can then eliminate the following sixteen candidates: r4c2≠7, r4c3≠7, r5c6≠5, \nr5c9≠5, r7c1≠8, r7c3≠8, r8c6≠2, r8c9≠2, r2c4≠3, r3c4≠3, r6c5≠2, r9c5≠2, r1c7≠6, \nr3c7≠6, r6c8≠5, r9c8≠5 (the number of eliminations is also sixteen by mere chance). \nFour of these eliminations would not be justified by a belt of crosses: r5c6≠5, \nr5c9≠5, r6c8≠5 and r9c8≠5. On the other hand, the following eight eliminations that \nwould have been allowed by a belt of crosses are not justified by the present g-\nSubset[16]: r4c3≠5, r7c1≠5, r7c3≠5, r2c4≠ 5, r1c7≠5, r8c1≠5, r8c3≠5, r8c3≠2. \nThe question now is: should the informal sk-loop rule be extended beyond its \ninitial scope and beyond our interpretations in terms of belts of crosses or x2y2-\nchains, so that it applies to this puzzle? The only obvious way this could be done is \nby redefining it as a particular kind of g-Subset[16] based on sixteen CSP variables \nassociated with cells forming a pattern of crosses on the grid, as described above; it \ndoes not seem that any general condition on the g-transversal sets could be added to \nthat defined by the general concept of a g-Subset[16]. As shown by the statistics in \nTables 8.1 and 11.1, Subsets are very inefficient compared to braids of same size; \nso, one should find very good reasons (such as the frequency of occurrence of this \ngeneralised pattern – but it seems to be very rare) before swapping to such a new \ndefinition. In any case, if such an extension was adopted, the name sk-loop should \ncertainly have to be changed (at least to “generalised sk-loop” or “mutant sk-loop”), \nas the initial loop idea that led to its definition would be completely lost. Our \npurpose here is not to provide a final answer, but only to illustrate the kind of \nquestions that arise when trying to formalise new resolution rules.  \n13.5.1. Another S2-braid example \nIncidentally, as mentioned in section 9.7.1, this puzzle provides nice examples of \nS2-braids. From the initial state in Figure 13.6, no elimination can be done by a braid \nor a g-braid. The first patterns we find are sixteen S2-braids, corresponding to the \neliminations allowed by the g-Subset[16] and then nothing more can be done with \nS2-braids (the puzzle being in B3B, the next elimination must be an S3-braid). \n\t\r  \nS2-­‐braid[14]:\t\r  b9n3{r9c8\t\r  r8c9}\t\r  –\t\r  b9n6{r8c9\t\r  r789c7}\t\r  –\t\r  b9n8{r8c9\t\r  r7c789}\t\r  –\t\r  {n8r7c5\t\r  NP:\t\r  b8{r7c5\t\r  \nr8c4}{n2\t\r   n4}}\t\r   –\t\r   r7c6{n2\t\r   n9}\t\r   –\t\r   r9c4{n9\t\r   n3}\t\r   –\t\r   {n3r5c4\t\r   HP:\t\r   b5{r5c6\t\r   r6c5}{n3\t\r   n6}}\t\r   –\t\r   b5n7{r5c6\t\r  \nr4c456}\t\r  –\t\r  r4c8{n7\t\r  n4}\t\r  –\t\r  r5c7{n4\t\r  n5}\t\r  –\t\r  r4c9{n5\t\r  n9}\t\r  –\t\r  r6c7{n9\t\r  .}\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  5\t\r  \nLet us now provide some explanatory detail, after introducing a few markers: \n– a number between brackets after each right-linking object in the braid; \n– independent numberings of these candidates or patterns for different branches \nof the braid, each of them starting after the number from which it branches out; here, \nthere is only one main branch (1, 2, ... 11) plus a small secondary branch (2'); this \nS2-braid is almost an S2-whip; \n\n13. Application-specific rules (the sk-loop in Sudoku)     \n371 \n– explicit addition of z- and t- candidates, with symbol “*” for a z-candidate and \nwith symbol “#n” for a t-candidate (with n = the number of the previous right-\nlinking candidate or pattern to which it is linked); remember however that these \ncandidates are not part of the braid. \n \nS2-­‐braid[14]:\t\r   b9n3{r9c8\t\r   r8c9(1)}\t\r   –\t\r   b9n6{r8c9\t\r   r789c7(2')\t\r   r9c8*}\t\r   –\t\r   b9n8{r8c9\t\r   r7c789(2)\t\r   r9c8*}\t\r   –\t\r  \n{n8r7c5\t\r   NP:\t\r   b8{r7c5\t\r   r8c4}{n2\t\r   n4}(3)\t\r   n3r8c4#1}\t\r   –\t\r   r7c6{n2\t\r   n9(4)\t\r   n8#2}\t\r   –\t\r   r9c4{n9\t\r   n3(5)\t\r   n2#3}\t\r   –\t\r  \n{n3r5c4\t\r  \t\r  HP:\t\r  b5{r5c6\t\r  r6c5}{n3\t\r  n6}(6)\t\r  n3r6c4#5}\t\r  –\t\r  b5n7{r5c6\t\r  r4c456(7)\t\r  r6c5#6}\t\r  –\t\r  r4c8{n7\t\r  n4(8)\t\r  n5*}\t\r  –\t\r  \nr5c7{n4\t\r  n5(9)\t\r  n6#2'}\t\r  –\t\r  r4c9{n5\t\r  n9(10)\t\r  n7#7}\t\r  –\t\r  r6c7{n9\t\r  .\t\r  n5#9\t\r  n6#2'}\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  5\t\r  \nRemember that, by definition, Sp-braids may include g-candidates as right-\nlinking objects. They appear here in cells (2'), (2) and (7). \nIt can be checked that all the other eliminations allowed by the g-Subset[16] can \nbe done by similar S2-braids. \n13.6. Measuring the impact of an application-specific rule \nThree complementary aspects of the impact of a specific rule can be considered: \n– How often does it appear in instances of the CSP? The answer obviously \ndepends on how we classify the specific rule with respect to the general purpose \nones, but all the known cases of Sudoku-specific rules appear very rarely if we put \nthem after whips or braids (g-whips, g-braids) of same size. This can be verified for \nsk-loops (which rarely interact with generic rules) and even for the nonspecific rules \nfor Subsets (where it is a consequence of the general subsumption theorems). \n– For instances in T&E(1) or gT&E(1), how much can it modify their W, B, gW \nor gB ratings? We have already seen examples in Sudoku of how allowing Subsets \ncan (very rarely) either slightly decrease the W rating of a puzzle or make it solvable \nby whips when it was not without the Subset rules. \n– For instances in T&E(2), the previous question becomes: how much can it \nchange their B?B classification? In this section, we shall concentrate on this type of \nimpact and we shall consider the sk-loop example (in its belt-of-crosses \nformalisation). \nAs shown by the Subset examples in chapter 8, there does not seem to be much \ncorrelation between the intrinsic complexity of a new rule and its possible impact on \nrating. The reason is that there seems to be no limit to the possible modifications the \nelimination of a single candidate or a few ones can entail. The same goes for the \nimpact on classification: in this chapter, we have seen that, after eliminating all their \nsk-loop targets, Metcalf’s puzzle moves from B7B down to B4B, EasterMonster \nfrom B6B to B2B, Tarek’s puzzle from B6B to B3B, while Ronk’s puzzle remains in \nB3B; the example in Figure 13.7 (SER 10.5, obtained by adding a diagonal clue to \nMetcalf’s puzzle, thus making it non-minimal, but looking like a snowflake) moves \n\n372 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nfrom B3B to gB. As a result, the impact of an application-specific rule can only be \nevaluated either statistically (when unbiased collections of instances are available) \nor on individual instances. For Subsets, we could give statistical evaluations; but, as \nof this writing, for the sk-loop, we can only analyse its individual impact. \n \n \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nr1 n5 \nn1      n3 \n \nn7           \nn1           \nn4      n6 \nn7           \n          n3 \nn4           \nn7 n8      \n     n2 n3 \nn4      n6 \nn7 n8      \n      n2 n3 \n          n6 \n   \nn1 n2      \nn4      n6 \n \n \nn4      n6 \n n8  \nn9 \nr1 \nr2 \n          n3 \nn4      n6 \n \nn2 \n \nn4      n6 \n          n9 n1 \n          n3 \nn4      n6 \nn7 n8 n9 \n          n3 \n     n5 n6 \n          n9 \n \nn4 n5 n6 \n \nn7 \n \nn4      n6 \n n8  \nr2 \nr3 \nn1           \nn4      n6 \nn7           \nn1           \n \nn7      n9 n8 \n \nn4 n5      \nn7      n9 \n n2  \nn4      n6 \nn7      n9 \n n2  \n     n5 n6 \n          n9 n3 \n \nn4 n5 n6 \n \nn1 n2      \nn4      n6 \n \nr3 \nr4 \nn1 n2 n3 \n \nn7           n4 \nn1 n2      \n n5  \nn7      n9 n6 \nn1      n3 \n \n          n9 n8 \n n2  \n n5  \nn7      n9 \n          n3 \n n5  \n          n9 \n     n2 n3 \n \nn7           r4 \nr5 \nn1 n2 n3 \n          n6 \nn7 n8          \nn1      n3 \n \nn7 n8 n9 \nn1 n2      \n          n6 \nn7      n9 \n          n3 \nn4           \n          n9 n5 \nn1      n3 \n \n          n9 \n n2  \nn4      n6 \nn7      n9 \n          n3 \nn4      n6 \n     n8 n9 \n     n2 n3 \nn4      n6 \nn7 n8      r5 \nr6 \n          n3 \n          n6 \n n8  \n          n3 \n n5  \n     n8 n9 \n \n     n5 n6 \n          n9 n2 \n          n3 \nn4           \n          n9 n7 \n \nn4 n5 n6 \n          n9 n1 \n          n3 \nn4      n6 \n n8  \nr6 \nr7 \nn1 n2      \nn4           \nn7           \nn1           \n n5  \nn7           n3 \n \n n5  \nn7      n9 \nn1 n2      \n          n6 \nn7      n9 \nn1 n2      \n     n5 n6 \n          n9 n8 \n \nn4      n6 \n          n9 \nn1           \nn4      n6 \nn7           r7 \nr8 \nn1           \n \nn7 n8      n6 \nn1           \n n5  \nn7           \n          n3 \n n5  \nn7 n8 n9 \nn1      n3 \n \nn7 n8 n9 n4 \nn1           \n \nn7      n9 n2 \nn1      n3 \n \nn7           r8 \nr9 n9 \nn1           \n \nn7 n8      \nn1 n2      \nn4           \nn7           \n          n3 \n   \nn7 n8      \nn1 n2 n3 \n          n6 \nn7 n8      \nn1 n2 n3 \n          n6 \n   \nn1           \nn4      n6 \nn7           \n          n3 \nn4      n6 \n \nn5 \nr9 \n \nc1 \nc2 \nc3 \nc4 \nc5 \nc6 \nc7 \nc8 \nc9 \n \nFigure 13.7. Snowflake, a non-minimal variant of Metcalf’s puzzle, from B3B to gB \n13.7. Can an (apparently) application-specific rule be made general? \nIn the first parts of this book, we have shown that many rules that originated in \nSudoku could be re-written in such a way that they are meaningful for any CSP: \n– all our (standard and generalised) whip and braid rules, \n– the classical Subset rules (and the finned fish, which are mere S-whips), \n– the classical Franken and Mutant Fish (which now appear as g-Subset rules). \nCan an application-specific resolution rule be made general? The sk-loop \nexample and the discussion in section 13.5 together indicate that if such is the case, \nit may have to be at the cost of loosing much of the general idea at the origin of the \nrule (in the present case, even if the basic geometrical structure is kept unchanged). \n\n \n14. Transitive constraints and Futoshiki \nFutoshiki (literally “inequality” in Japanese), another logic puzzle, appeared a \nfew years ago and is becoming relatively popular in Japan (but still much less than \nSudoku). It is interesting in the context of this book for the following reasons:  \n– contrary to our main Sudoku example, it has more constraints (inequality \nconstraints between the contents of adjacent cells) than the “strong” ones due to its \nCSP variables; \n– in its “pure” form, it has no clue other than such inequality constraints (i.e. it \nhas no predefined value for any of the cells); \n– contrary to the Sudoku constraints, the inequality constraints are asymmetric; \n– although the set of CSP variables is fixed as in LatinSquare or Sudoku, the set \nof the inequality constraints depends on the set of given inequalities; \n– Futoshiki has g-labels that, given an instance, do not depend on its resolution \nstate, in conformance with our general definition (g-labels are structural); but, unlike \nSudoku, they depend on the instance under consideration (unless one wants to \nintroduce a whole set of universal but useless g-labels); \n– contrary to Sudoku, g-labels involve sets of values instead of sets of cells. \nIn spite of all these noticeable differences, we shall show that our approach is \nquite relevant to it, even for very hard instances. \n14.1. Introducing Futoshiki and modelling it as a CSP \n14.1.1. Definition of Futoshiki \nLike an n×n Sudoku, an n×n Futoshiki is a special kind of n×n Latin Square. An \nn×n Futoshiki puzzle requires the placement of numbers from 1 to n in the cells of \nan n×n square grid in such a way that each of these numbers appears only once [and \ntherefore exactly once] in each row and in each column. Unlike Sudoku, grid size n \ndoes not have to be the square of some integer m (n = m2) and there are no m×m or \nany other block constraints (in this respect, it is much closer to LatinSquare than to \nSudoku).  \nHowever, in any instance of Futoshiki, there are specific inequality constraints \nbetween elements in rows and columns, as in the example of Figure 14.1. A strict \n\n374 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ninequality sign between two contiguous cells in a row [respectively a column] \nmeans that the values in these two cells must be related by this inequality. These \nsigns can appear graphically in four different shapes (<, >, ∧, ∨), but it should be \nstressed that they all have the same “strictly less than” meaning, they define only \none new type of constraint; their appearance is only used to state graphically in \nwhich order the two cells are involved in the inequality. 14 \n \n \n \nc1 \n \nc2 \n \nc3 \n \nc4 \n \nc5 \n \nc6 \n \nr1 \n \n \n \n< \n \n \n \n> \n \n< \n \nr1 \n \n∧ \n \n∨ \n \n \n \n∧ \n \n \n \n∧ \n \nr2 \n \n> \n \n \n \n \n \n \n \n \n \nr2 \n \n∧ \n \n∨ \n \n \n \n \n \n \n \n \n \nr3 \n \n \n \n \n \n< \n \n \n \n \n \nr3 \n \n \n \n \n \n \n \n \n \n \n \n∨ \n \nr4 \n \n< \n \n \n \n \n \n \n \n \n \nr4 \n \n \n \n \n \n \n \n \n \n \n \n \n \nr5 \n \n \n \n \n \n \n \n \n \n \n \nr5 \n \n \n \n∨ \n \n∧ \n \n \n \n \n \n∧ \n \nr6 \n \n \n \n> \n \n \n \n> \n \n> \n \nr6 \n \nc1 \n \nc2 \n \nc3 \n \nc4 \n \nc5 \n \nc6 \n \nFigure 14.1. A 6×6 Futoshiki puzzle (clues of #M5121, from atksolutions.com) \nAs in Sudoku or in any logic puzzle with a reasonable definition, a “well-\nformed” puzzle is supposed to have a unique solution. Sometimes, clues are given in \nsome of the cells (with the obvious meaning that they should be their final values, as \nin Sudoku); but this is not compulsory: inequality constraints can be enough to \nensure uniqueness of a solution, as in Figure 14.1.  \n                               \n14 There is a variant of Futoshiki (also unnamed, as far as we know) in which inequality signs \nare supposed to relate any two cells in different contiguous sectors in the same row [or \ncolumn] – where a sector is defined as a contiguous set of cells delimited by two such signs. \nAs it does not call for a radical change to the analyses of this chapter, we shall not consider it \nhere. \n\n14. Transitive constraints and Futoshiki     \n375 \nWe shall call “pure Futoshiki” a puzzle with no other clue than inequalities, \nalthough we are not aware of any name being currently used to make such a \ndistinction. In the following, all our examples will be pure Futoshikis, but this does \nnot change anything to their discussion. Our personal preference for pure Futoshiki \nis related to its pure geometric aspect (and also to the fact that, in the context of this \nbook, this makes it look more complementary to our main Sudoku example); \nhowever, this will remain abstract, as we shall not investigate the kinds of geometric \nproperties of the set of inequality signs that might have implications on the solution \n(and which type of implications, if any). \n(In the “impure” case, i.e. if both digits and inequalities can be given, from a \ntheoretical or CSP point of view, especially if one wants to define minimal \ninstances, both predefined values and inequality constraints should be put on the \nsame footing and considered as clues. Without this precision, there might be an \nambiguity on the interpretation of  “minimal”: should one consider minimality with \nrespect to a fixed set of inequalities or should one consider both types of clues as \none set – each choice raises a few questions of its own.) \nFutoshiki has obvious symmetries, some from LatinSquare (row-column \nsymmetry, reflection) and some related to inequalities. If P is an n×n Futoshiki \npuzzle [or complete grid] and if P’ is obtained from P by reversing all the inequality \nsigns and replacing every Number k by n-k+1, then P’ is an n×n Futoshiki puzzle [or \ncomplete grid]. But rows [or columns] can obviously not be permuted. \n14.1.2. The sorts, CSP variables, labels and constraint types of Futoshiki \nFutoshiki has Number, Row and Column sorts similar to those of Sudoku, but \nwith ranges corresponding to the grid size. There is a predicate “<” with signature \n(Number, Number), with the axiom of transitivity and with axiom n1 < n2 < n3 < … \nThe “natural” CSP variables of k×k Futoshiki are the k2 Xrc variables, with r in \n{r1, …, rk} and c in {c1, …, ck}: in the original formulation, one value in {1, …, k} \nmust be found for each of them; in the formalisation, one value of sort Number must \nbe found. However, as in Sudoku, one can define the rn and cn representations and \ncorresponding Xrn and Xcn CSP variables, bringing the total number of CSP \nvariables to 3×k2. Notice that there are no “block-number”, i.e. no Xbn, CSP \nvariables. Accordingly, one can define an extended Futoshiki board, with rc, rn and \ncn cells representing the Xrc, Xrn and Xcn variables, respectively. \nLabels are defined as (n, r, c) triplets (also notated nrc), as in Sudoku or \nLatinSquare. There are thus k3 labels. Label nrc or (n, r, c) is the equivalence class \nof the three pre-labels: <Xrc, n>, <Xrn, c>, <Xcn, r>. For details, see chapter 2, the \nonly difference being the absence of pre-labels corresponding to Xbn CSP variables. \n\n376 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nThere are four Constraint-Types: rc, rn, cn, < (not to be confused with predicate \n“<” on Numbers). In a graphical representation, the < constraint may appear in four \ndifferent shapes: (<, >, ∧, ∨) but this is one and only one Constraint-Type. \nConstraints of type rc, rn, cn between labels are exactly as in Sudoku. As for the \ninequality Constraint-Type, it may seem to introduce essentially asymmetric \nrelations and one may wonder how it can be modelled as a set of symmetric links \nbetween labels, as required by our CSP modelling approach. But this is \nstraightforward: \n– for each row r°, for each pair of cells r°c1° and r°c2° related by the inequality \nsign < in r° (in any of the two shapes it can take in a row: <, >), the inequality \nconstraint between these two cells is completely taken into account by the set of \nground atomic formulæ “linked-by(n1°r°c1°, n2°r°c2°, <)” for all the Numbers n1° \nand n2° such that n1° ≥ n2°. \n– for each column c°, for each pair of cells r1°c° and r2°c° related by the \ninequality sign < in c° (in any of the two shapes it can take in a column: ∧, ∨), the \ninequality constraint between these two cells is completely taken into account by the \nset of ground atomic formulæ “linked-by(n1°r1°c°, n2°r2°c°, <)” for all the Numbers \nn1° and n2° such that n1° ≥ n2°. \nFutoshiki has the same (Naked, Hidden and Super-Hidden) Subsets and Subset \nrules as LatinSquare (said otherwise, it has the same Subset rules as Sudoku, except \nthose based on blocks). Futoshiki has whips of length 1 (as shown by the \nforthcoming example) and therefore it has g-labels (see section 14.5 for details). \nFinally, there is nothing special to say about its Basic Resolution Theory, except \nthat, in its “pure” form (i.e. with no predefined values), contrary to Sudoku, its \nelementary constraint propagation rules (ECP), which take into account not only the \nrc, rn and cn constraints, but also the < constraint, can eliminate no candidate at the \nstart; all the k3 labels will therefore appear as candidates in the initial resolution state \nRSP of any puzzle P. As a result, no minimal “pure” Futoshiki puzzle can be solved \nin BRT(Futoshiki); but this in itself entails no other significant difference. \n14.2. Ascending chains and whips \nFutoshiki has a very simple and well known rule that does not seem to have any \nstandard name; we shall call it the ascending-chain rule; it is usually considered as a \nrule of its own and, as far as we know, it has never before been noticed that it \ncorresponds to the interaction rules of Sudoku and that it can be simulated by a mere \nrepetition of the whip[1] rule. \n\n14. Transitive constraints and Futoshiki     \n377 \n14.2.1. The weak and strong forms of the ascending chain rule \nDefinition: in n×n Futoshiki, an ascending chain of length k (1 < k < n) is a \nsequence of k+1 cells, each adjacent in its row or column to the next one and related \nto it by the “<” sign.  \nNotice that these cells may all be in the same row [such as (r3c3, r3c4) in Figure \n14.1], or in the same column [such as (r1c1, r2c2, r2c3)], but they may also be \nspread on several rows and columns [such as (r3c2, r2c2, r1c2, r1c3) or  (r5c2, r6c2, \nr6c3, r5c3)]. The definition of length (k if the chain lies on k+1 cells) will be \njustified by theorem 14.2. \nThe ascending chain rule (weak version): in n×n Futoshiki, if (C0, C1, …, Ck) is \nan ascending chain of length k, then, for any i with 0 ≤ i ≤ k, k candidate-Numbers \ncan be deleted from Ci, namely: \n- the i candidate-Numbers j with 1 ≤ j ≤ i; \n- the k-i candidate-Numbers j with n-(k-i)+1 ≤ j ≤ n. \nThere are several obvious consequences. In a well-formed n×n Futoshiki puzzle: \n- there can be no ascending chain of length n or greater; \n- an ascending chain of length n-1 completely determines the values of all its cells. \nIndeed, this is the (more or less) standard formulation of the rule, but a stronger \nversion is often needed in practice. \nThe ascending chain rule (strong version): in n×n Futoshiki, if (C0, C1, …, Ck) \nis an ascending chain of length k and if, in the current resolution state, m0 is the \nsmallest candidate for C0 and Mk is the largest candidate for Ck, then: \n- for any i with 0 < i ≤ k, all the candidate-Numbers j with 1 ≤ j ≤ m0+i-1 can be \ndeleted from Ci; \n- for any i with 0 ≤ i < k, all the candidate-Numbers j with Mk-(k-i)+1 ≤ j ≤ n can be \ndeleted from Ci. \nThe proof of both versions is straightforward, either directly (by counting the \nnumber of smaller / greater values there must be in the other cells of the chain) or as \na corollary to theorem 14.1 below.  \nExercise (easy): write the proof of the strong version. \nBesides taking into consideration the minimum or maximum values still present \nin the endpoints in the current resolution state, the strong version of the ascending \nchain rule differs from the weak one by one more point. The latter could be \nrestricted with no damage to maximal ascending chains, but the former gets its full \nstrength only if it can be applied to non-maximal ones. Consider for instance the \nchain in Figure 14.2 (the cells C0, C1, …, C5 do not have to be in the same row or \ncolumn, they only have to be related by <). Each cell is displayed with the \n\n378 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ncandidates remaing after the weak rule has been applied. Suppose now that some \nother rule application deletes n3 in C2. Then, by considering the sub-chain C3, …, \nC5, the strong rule can delete n4 in C3, n5 in C4 and n6 in C5. Similarly, if n6 was \ndeleted from C2 by another rule, then the strong rule could delete n5 from C2 and n4 \nfrom C1. Of course, these eliminations could also be done by whips[1] (using \ntheorem 14.1), but this example shows that only the strongest form of the ascending \nchain rule captures its full power. \n \n \nn1 n2 n3 \nn4           \n \n< \n     n2 n3 \nn4 n5      \n \n< \n          n3 \nn4 n5 n6 \n \n< \n \nn4 n5 n6 \nn7           < \n \n     n5 n6 \nn7 n8      < \n \n          n6 \nn7 n8 n9 \nFigure 14.2. A symbolic representation of the strong ascending chain rule. \n14.2.2. Ascending chains vs whips[1] \nTheorem 14.1: Any elimination done by the ascending chain rule (weak or \nstrong version) can be obtained by a sequence of applications of the whip[1] rule. \n \n \n \nc1 \n \nc2 \n \nc3 \n \nc4 \n \nc5 \n \nc6 \n \nr1 \nn1 n2 n3 \nn4           \n           \n \n          n3 \nn4 n5      \n           < \n \nn4 n5 n6 \n           \n \n     n2 n3 \nn4 n5      \n           > \nn1 n2 n3 \nn4           \n          < \n     n2 n3 \nn4 n5      \n          r1 \n \n∧ \n \n∨ \n \n \n \n∧ \n \n \n \n∧ \n \nr2 \n     n2 n3 \nn4 n5      \n           \n \n     n2 n3 \nn4           \n           \n \nn1 n2 n3 \nn4 n5 n6 \n           \n \n          n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5 n6 \n           \n \n          n3 \nn4 n5 n6 \n           r2 \n \n∧  \n∨  \n \n \n \n \n \n \n \n \nr3 \n          n3 \nn4 n5 n6 \n \n           \n \nn1 n2 n3 \n \n           \n \nn1 n2 n3 \nn4 n5      \n           < \n     n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5 n6 \n           \n \n     n2 n3 \nn4 n5 n6 \n           r3 \n \n \n \n \n \n \n \n \n \n \n \n∨ \n \nr4 \nn1 n2 n3 \nn4 n5      \n           < \n     n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5      \n          r4 \n \n \n \n \n \n \n \n \n \n \n \n \n \nr5 \nn1 n2 n3 \nn4 n5 n6 \n           \n \n \nn4 n5 n6 \n           \n \nn1 n2 n3 \n \n           \n \nn1 n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \n \n           r5 \n \n \n \n∨ \n \n∧ \n \n \n \n \n \n∧ \n \nr6 \nn1 n2 n3 \nn4 n5 n6 \n           \n \n          n3 \nn4 n5      \n           > \n     n2 n3 \nn4           \n           \n \n \nn4 n5 n6 \n           > \n          n3 \nn4 n5      \n           > \n     n2 n3 \nn4           \n           r6 \n \nc1 \n \nc2 \n \nc3 \n \nc4 \n \nc5 \n \nc6 \n \nFigure 14.3. Resolution state RS1 of the puzzle in Figure 14.1 \n\n14. Transitive constraints and Futoshiki     \n379 \nConversely, it is not true that any whip[1] comes in this way from an ascending \nchain. Without entering into details, think of a puzzle with constraint r1c4 < r1c5 \nand a resolution state with the following kind of whip[1]: r1n3{c4 .} ==> r1c5 ≠ 2. \nProof for the weak version: for the first series of eliminations described in the \ndefinition of the ascending-chain rule, proceed upwards from number 1 to number k \nand for each of these numbers backwards from cell Ck to cell C1; for the second \nseries of eliminations, proceed downwards from number n down to number n-(k-\ni)+1 and for each of these numbers forwards from cell C0 to cell Ck-1.  \nThe proof of theorem 14.1 will be better understood after reading the following \nexample, in which we show how the whip[1] rule applies to the easy puzzle in \nFigure 14.1 to make a lot of ascending-chain eliminations (we choose the whips[1] \nin the order mentioned in the proof). \n \n*****\t\r  Manual\t\r  solution\t\r  *****\t\r  \n;;;\t\r  concentrating\t\r  first\t\r  on\t\r  the\t\r  upper-­‐left\t\r  corner\t\r  \nwhip[1]:\t\r  r1c6{n1\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  1;\t\r  whip[1]:\t\r  r1c5{n1\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  1;\t\r  whip[1]:\t\r  r1c6{n2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  2\t\r  \nwhip[1]:\t\r  r1c6{n6\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  6;\t\r  whip[1]:\t\r  r2c6{n6\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  6;\t\r  whip[1]:\t\r  r1c6{n5\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  5\t\r  \nwhip[1]:\t\r  r1c4{n1\t\r  .}\t\r  ==>\t\r  r2c4\t\r  ≠\t\r  1;\t\r  whip[1]:\t\r  r1c5{n1\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  1;\t\r  whip[1]:\t\r  r1c4{n2\t\r  .}\t\r  ==>\t\r  r2c2\t\r  ≠\t\r  2\t\r  \nwhip[1]:\t\r  r2c4{n6\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  6\t\r  \n…\t\r  lots\t\r  of\t\r  similar\t\r  eliminations\t\r  related\t\r  to\t\r  the\t\r  remaining\t\r  ascending\t\r  chains\t\r  \nFigure 14.3 shows the state RS1 reached after all these rules have been applied. \nStarting from resolution state RS1, we now have the following resolution path. \nNotice that, if RS1 was not merely taken as our starting state, some of the following \nSingle rules could be applied earlier in the path. As usual, we do not write the ECP \nrule firings, but they are applied whenever possible, immediately after the Singles. \nThey include not only constraint propagation according to the rc, rn and cn \nconstraints, but also according to the inequality constraint, in conformance with the \ngeneral definition of BRT(CSP) in section 4.3. \n \n*****\t\r  \t\r  \t\r  \t\r  \t\r  \t\r  FutoRules\t\r  1.2\t\r  \t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  W\t\r  \t\r  \t\r  *****\t\r  \nsingles:\t\r  r6c1\t\r  =\t\r  1,\t\r  r1c5\t\r  =\t\r  1,\t\r  r1c3\t\r  =\t\r  6,\t\r  r3c2\t\r  =\t\r  1,\t\r  r2c3\t\r  =\t\r  1,\t\r  r6c4\t\r  =\t\r  6\t\r  \nwhip[1]:\t\r  r1c1{n2\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  2;\t\r  whip[1]:\t\r  r2c1{n3\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  3;\t\r  whip[1]:\t\r  r3c2{n5\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  5\t\r  \nwhip[1]:\t\r  r5c3{n2\t\r  .}\t\r  ==>\t\r  r6c3\t\r  ≠\t\r  2;\t\r  whip[1]:\t\r  r6c3{n3\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  3;\t\r  whip[1]:\t\r  r6c2{n4\t\r  .}\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  4\t\r  \nwhip[1]:\t\r  r3c4{n5\t\r  .}\t\r  ==>\t\r  r3c3\t\r  ≠\t\r  5\t\r  \nsingles:\t\r  r4c3\t\r  =\t\r  5,\t\r  r6c6\t\r  =\t\r  2,\t\r  r5c6\t\r  =\t\r  1,\t\r  r4c4\t\r  =\t\r  1,\t\r  r2c2\t\r  =\t\r  2\t\r  \nwhip[1]:\t\r  r1c6{n3\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  3;\t\r  whip[1]:\t\r  r4c6{n3\t\r  .}\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  3;\t\r  whip[1]:\t\r  r4c1{n1\t\r  .}\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  1\t\r  \nwhip[1]\t\r  r2c4{n5\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  5\t\r  \n \n;;; Resolution state RS2, displayed in Figure 14.4. After RS2 is reached, the simplest \nrules are short whips[2].  \n \nwhip[2]:\t\r  c2n3{r1\t\r  r4}\t\r  –\t\r  c6n3{r4\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  3,\t\r  r1c4\t\r  ≠\t\r  3\t\r  (this\t\r  is\t\r  also\t\r  an\t\r  XWing)\t\r  \nwhip[2]:\t\r  r1n5{c2\t\r  c6}\t\r  –\t\r  r1n3{c6\t\r  .}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  r1c1{n4\t\r  n2}\t\r  –\t\r  r1c4{n2\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  4\t\r  (this\t\r  is\t\r  also\t\r  a\t\r  Naked\t\r  Pair)\t\r  \n\n380 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[2]:\t\r  c6n5{r2\t\r  r3}\t\r  –\t\r  c6n6{r3\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  c1n5{r3\t\r  r5}\t\r  –\t\r  c1n6{r5\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  r3n3{c3\t\r  c5}\t\r  –\t\r  r3n2{c5\t\r  .}\t\r  ==>\t\r  r3c3\t\r  ≠\t\r  4\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \nExercise: check these whips on Figure 14.4. \n \n \n \n \nc1 \n \nc2 \n \nc3 \n \nc4 \n \nc5 \n \nc6 \n \nr1 \n     n2 n3 \nn4           \n           \n \n          n3 \nn4 n5      \n           < \n \nn6  \n           \n \n     n2 n3 \nn4           \n           > \n \nn1  \n           \n< \n          n3 \nn4 n5      \n          r1 \n \n∧ \n \n∨ \n \n \n \n∧ \n \n \n \n∧ \n \nr2 \n          n3 \nn4 n5      \n           \n \n \nn2  \n           \n \n \nn1  \n           \n \n          n3 \nn4 n5      \n           \n \n     n2 n3 \nn4 n5 n6 \n           \n \n           \nn4 n5 n6 \n           r2 \n \n∧  \n∨  \n \n \n \n \n \n \n \n \nr3 \n           \nn4 n5 n6 \n \n           \n \n \nn1  \n           \n \n     n2 n3 \nn4           \n           < \n     n2 n3 \nn4 n5      \n           \n \n     n2 n3 \nn4 n5 n6 \n           \n \n           \nn4 n5 n6 \n           r3 \n \n \n \n \n \n \n \n \n \n \n \n∨ \n \nr4 \n     n2 n3 \nn4           \n           < \n          n3 \nn4      n6 \n           \n \n \nn5  \n           \n \n \nn1  \n           \n \n     n2 n3 \nn4      n6 \n           \n \n          n3 \nn4           \n          r4 \n \n \n \n \n \n \n \n \n \n \n \n \n \nr5 \n     n2 n3 \nn4 n5 n6 \n           \n \n \n     n5 n6 \n           \n \n     n2 n3 \n \n           \n \n     n2 n3 \nn4 n5      \n           \n \n     n2 n3 \nn4 n5 n6 \n           \n \n \nn1  \n           \nr5 \n \n \n \n∨ \n \n∧ \n \n \n \n \n \n∧ \n \nr6 \n \nn1  \n           \n \n           \nn4 n5      \n           > \n          n3 \nn4           \n           \n \n \nn6  \n           \n> \n          n3 \nn4 n5      \n           > \n \nn2  \n           \nr6 \n \nc1 \n \nc2 \n \nc3 \n \nc4 \n \nc5 \n \nc6 \n \nFigure 14.4. Resolution state RS2 of the puzzle in Figure 14.1 \n14.2.3. Remarks on the rating of ascending chains \nDepending on how we consider the ascending-chain rule, we may be tempted to \nassign it different ratings. If we decompose it as above – as a sequence of whips[1] – \nthe W rating of this part of the resolution path is 1; otherwise, if we consider it as an \nindependent rule, it seems we should assign it a rating equal to the length of the \nchain. This reflects an unavoidable difference in viewpoints: \n– either one prefers “atomic” rules (here whips[1]) to which more complex ones \ncan be reduced and one has to apply them multiple times (this is the approach \nfollowed in this book); \n\n14. Transitive constraints and Futoshiki     \n381 \n– or one prefers to define more complex rules (here the ascending-chain rule) \neach application of which leads to a large sets of eliminations.  \nThe good solution in our view is that one can use the ascending chain rule in its \noriginal form (which is much easier to apply systematically), but remember that it is \nequivalent to a sequence of whips[1] and therefore grant it rating 1, independent of \nlength. This is an interesting example of rule reduction, because the real underlying \ncomplexity (supposing our view of rating is still based on the hardest step) is \ndrastically less than might appear from a quick look at the usual formulation of the \nrule. This is also more consistent with our intuition of simplicity. \nNotice also that, in a pure Futoshiki puzzle, there always are initial ascending-\nchain eliminations and that these could be considered as obvious domain \nrestrictions; one could decide to systematically choose as initial resolution state for a \npuzzle P the RS1 (obtained immediately after all these restrictions) instead of the \nusual RSP of the general theory (consisting of all the candidates in all the undecided \ncells). \nAs a result of the ascending chain rule, many extreme values (1 and n and those \nclose to them) will often be eliminated before the medium ones. This introduces an \ninteresting asymmetry between extreme and medium values and it suggests the \nheuristics of trying to place or eliminate first the extreme values. However, as any \nheuristics, its efficiency should be tested by statistical studies, for which this chapter \ncan have no pretension: there is no available generator of Futoshiki puzzles, a \nfortiori no controlled-bias one. Notice that, in “pure” n×n Futoshiki, as long as only \nthis rule (and the hill and valley rules) is applied, the set of candidates for any cell \ncan have no “hole”: it can only be a full sub-interval [k1, …, k2] of [1, …, n]. \n14.3. Hills, valleys and S-whips \nOne can obtain more eliminations by combining two different ascending chains \nthat both live completely in a single row or column, provided that they form a \n“valley” or a “hill” in this row or column; these eliminations can only be done at  \nthe top of the hill or at the bottom of the valley. It seems these classical rules have \nno standard name, but “hill” and “valley” sound appropriate. \n14.3.1. The hill rule and the valley rule \nDefinitions: a hill is a pair of ascending chains (C0, C1, …, Ck) and (C’0, C’1, …, \nC’k’) of lengths k and k’, all completely in the same row [or column], such that \nCk = C’k’ and (C0, C1, …, Ck-1) and (C’0, C’1, …, C’k’-1) are disjoint. A valley of \nlength l is a pair of ascending chains (C0, C1, …, Ck) and (C’0, C’1, …, C’k’) of \nlengths k and k’, all completely in the same row [or column], such that C’0 = C0 and \n\n382 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n(C1, C2, …, Ck) and (C’1, C’2, …, C’k’) are disjoint. The length of the hill or valley is \ndefined as l = k + k’. \nThe hill rule (weak form): in n×n Futoshiki, if (C0, C1, …, Ck) and (C’0, C’1, …, \nC’k’) form a hill, then one can eliminate from Ck the k+k’ candidate-Numbers \nbetween 1 and k+k’ included. \nThe valley rule (weak form): in n×n Futoshiki, if (C0, C1, …, Ck) and (C0, C’1, \n…, C’k’) form a valley, then one can eliminate from C0 the k+k’ candidate-Numbers \nbetween n-(k+k’)+1 and n included. \n \nProof: by counting the number of cells that must have a smaller value than Ck \n[respectively a larger value than C0]. \n \n \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      > \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      > \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      < \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      < \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      < \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      \n \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      \n \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \n          n3 \nn4 n5 n6 \nn7 n8      > \n     n2 n3 \nn4 n5 n6 \nn7           > \nn1 n2 n3 \nn4 n5      \n      \n< \n     n2 n3 \nn4 n5 n6 \n \n< \n          n3 \nn4 n5 n6 \nn7           < \n \nn4 n5 n6 \nn7 n8      \n \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      \nFigure 14.5. Illustration of the valley rule in an 8×8 Futoshiki, n = 8, k = 2, k’=3, k+k’ = 5, \nn-(k+k’)+1 = 4; candidates 8 to 4 can be eliminated from the fourth cell. First line, before \nany elimination. Second line, after the whip[1] (or ascending chain) eliminations of section \n14.2.1. In the second line, the two crossed candidates are eliminated by the valley rule. \nThe hill rule (strong form): in n×n Futoshiki, if (C0, C1, …, Ck) and (C0, C’1, …, \nC’k’) form a hill and if, in the current resolution state, m is the smallest candidate-\nNumber still present in C0 or C’0, then one can eliminate from Ck the m+k+k’ \ncandidate-Numbers between 1 and m+k+k’-1 included. \nThe valley rule (strong form): in n×n Futoshiki, if (C0, C1, …, Ck) and (C0, C’1, \n…, C’k’) form a valley and if, in the current resolution state, M is the largest \ncandidate-Number still present in Ck or C’k’, then one can eliminate from C0 the \nM+k+k’ candidate-Numbers between n-M-(k+k’)+1 and n included. \nThe proofs of the strong forms are similar to those of their weak forms. \nMoreover, the remarks we made about the two forms of ascending chains can be \ntransposed in an obvious way to hills and valleys. \n14.3.2. Hills, valleys and S-whips \nTheorem 14.2: Any elimination done by the hill or the valley rule using \nascending chains of lengths k and k’ can be obtained by the application of \n\n14. Transitive constraints and Futoshiki     \n383 \nwhips[1] and/or S-whips of total length no more than k+k’ with a single inner \nSubset of size no more than k+k’-1. If k = 1 (or k’ = 1), it can be obtained by a \nwhip[k+k’]. \nProof: it is enough to prove the hill or valley eliminations that cannot be done by \nthe simpler ascending chain rule. The case k = 1 or k’ = 1 is obvious. For clarity, we \nshall prove the general case (k ≠ 1 and k’ ≠ 1) only in the example of Figure 14.4, \ni.e. the eliminations rc4 ≠ 5 and rc4 ≠ 4: \n \nwhip[4]:\t\r  rc5{n5\t\r  n6}\t\r  –\t\r  rc6{n6\t\r  n7}\t\r  –\t\r  rc7{n7\t\r  n8}\t\r  –\t\r  rc3{n8\t\r  .}\t\r  ==>\t\r  rc4\t\r  ≠\t\r  5\t\r  \nS4-­‐whip[5]:\t\r  r{c5n4\t\r  S4{c5\t\r  c6\t\r  c7\t\r  c3}{n5\t\r  n6\t\r  n7\t\r  n8}}\t\r  –\t\r  rc2{n8\t\r  .}\t\r  ==>\t\r  rc4\t\r  ≠\t\r  4\t\r  \nNotice that, contrary to the ascending chain rule, the hill or valley rules cannot in \ngeneral be reduced to combinations of elementary rules. Therefore, their place in the \ncomplexity hierarchy should be defined by their length. However, as our purposes in \nthis chapter are only illustrative, we put them all just after whip[1], i.e. just after \n(both weak and strong) ascending chains.  \nThis theorem justifies our definition of the “length” of a hill or valley: whether \nwe consider it as such or as an S-whip, we get the same length. In Sudoku, an S-\nwhip is a relatively complex pattern. It is interesting that Futoshiki provides very \nnatural and easy to find instances of it (but there may be more complex ones, similar \nto those in Sudoku).  \n14.4. A detailed example using the hill rule, the valley rule and Subsets \nLet us now illustrate this rule with the (relatively hard) pure 7×7 Futoshiki \npuzzle defined by its <, >, ∧ and ∨ inequality symbols in Figure 14.6. Contrary  to \nthe example in section 14.2, we now use explicit ascending chain rules, both their \nweak version, notated e.g. asc[3]: r3c7<r2c7<r1c7<r1c6), and their strong version, \nnotated e.g. str-asc[2]: r6c3<r6c2<r5c2. We write their apparent length, but both are \nfundamentally mere whips[1]. The reason for making a distinction between weak \nand strong cases is only contingent: the weak version can only be used for \ninitialisation purposes leading to state RS1 while the strong one can only be used \nlater; this is easily done in FutoRules by assigning them different priorities.  \nIn the (easy but tedious) part of the resolution path leading to RS1, the initial \nascending chains are applied in a random order, independent of their apparent \nlengths; the application of Singles has been suspended during this first phase.  \nThe path was generated by FutoRules, our Futoshiki solver based on our general \nCSP-Rules solver. What we needed to add to CSP-Rules is input-output functions \n(most of which are the same as in SudoRules) as well as functions for defining the \ninequality constraints from the data given in the form described in the next \n\n384 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nparagraph. In order to identify ascending chains, hills and valleys, even in cases \nwhere they are subsumed by whips, we also added specific rules for them.15 \n\t\r  \n \n \nc1 \n \nc2 \n \nc3 \n \nc4 \n \nc5 \n \nc6 \n \nc7 \n \nr1 \nn1 n2 n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4           \n           < \n     n2 n3 \nn4 n5      \n           > \nn1 n2 n3 \nn4           \n           \n \n \nn4 n5 n6 \nn7           > \n          n3 \nn4 n5 n6 \n           r1 \n \n \n \n \n \n \n \n∧ \n \n \n \n \n \n∨ \n \nr2 \nn1 n2 n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7            \n          n3 \nn4 n5 n6 \n           < \n \nn4 n5 n6 \nn7            \n          n3 \nn4 n5 n6 \nn7           > \n     n2 n3 \nn4 n5      \n           r2 \n \n \n \n \n \n \n \n \n \n \n \n∨ \n \n∨ \n \nr3 \nn1 n2 n3 \nn4 n5 n6 \nn7            \n          n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7            \n     n2 n3 \nn4 n5 n6 \n           < \n          n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4           \n           r3 \n \n \n \n∨ \n \n \n \n∨ \n \n∨ \n \n \n \n \n \nr4 \n          n3 \nn4 n5 n6 \nn7           > \n     n2 n3 \nn4 n5 n6 \n          > \nn1 n2 n3 \nn4 n5      \n           \n \nn1 n2 n3 \nn4 n5      \n           \n \nn1 n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5 n6 \n           \n \n     n2 n3 \nn4 n5 n6 \nn7           r4 \n \n \n \n \n \n \n \n \n \n \n \n∧ \n \n∨ \n \nr5 \n     n2 n3 \nn4 n5 n6 \nn7            \n          n3 \nn4 n5 n6 \nn7           > \nn1 n2 n3 \nn4 n5 n6 \n           \n \n          n3 \nn4 n5 n6 \nn7            \n     n2 n3 \nn4 n5 n6 \nn7            \n     n2 n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \n           r5 \n \n∨ \n \n∨ \n \n \n \n∨ \n \n∨ \n \n \n \n∧ \n \nr6 \nn1 n2 n3 \nn4 n5      \n           < \n     n2 n3 \nn4 n5 n6 \n           > \nn1 n2 n3 \nn4 n5      \n           < \n     n2 n3 \nn4 n5 n6 \n           > \nn1 n2 n3 \nn4           \n           \n \n \nn4 n5 n6 \nn7            \n     n2 n3 \nn4 n5 n6 \nn7           r6 \n \n \n \n \n \n \n \n \n \n∧ \n \n∨ \n \n \n \nr7 \nn1 n2 n3 \nn4 n5 n6 \nn7           \n \nn1 n2 n3 \nn4 n5 n6 \nn7            \n     n2 n3 \nn4 n5 n6 \nn7           > \nn1 n2 n3 \nn4 n5 n6 \n           \n \n     n2 n3 \nn4 n5      \n           < \n          n3 \nn4 n5 n6 \n           > \nn1 n2 n3 \nn4 n5      \n           r7 \n \nc1 \n \nc2 \n \nc3 \n \nc4 \n \nc5 \n \nc6 \n \nc7 \n \nFigure 14.6. State RS1 of a 7×7 Futoshiki puzzle (clues of #H662, from atksolutions.com) \nThe second, third and fourth lines in the output display the compact \nrepresentation we use and we recommend for any type (pure or not) of n×n \nFutoshiki (this is how we feed FutoRules with puzzles). It is made of three series of \nsymbols. The first sequence is for the n×n clues in the cells, exactly as in Sudoku. \nThe second and the third represent inequalities. The second is the sequence of (n-\n1)×n inequality signs present in the n successive rows, from top to bottom. The third \n                               \n15 To give a rough idea of what is needed for using CSP-Rules to solve another CSP, the total \ntime it took us was two days, including extensive testing. Of course, as grid geometry is the \nsame, forgetting blocks, we could re-use much of what we had done for SudoRules; for very \ndifferent types of CSPs, in particular with a different geometry, it may take longer. In \nSudoRules or FutoRules, the specific part (of source code) is about 3% of the generic CSP-\nRules part. \n\n14. Transitive constraints and Futoshiki     \n385 \nis the sequence of the same number (n-1)×n of inequality signs present in the n \nsuccessive colums, from left to right. The symbols “.” and “-” are placeholders, \nmeaning respectively the absence of any digit or inequality sign. In case one only \nwants to deal with “pure” Futoshiki, the first sequence can be discarded. \n\t\r  \n*****\t\r  \t\r  FutoRules\t\r  1.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  W+S\t\r  \t\r  \t\r  *****\t\r  \n.................................................  \n--<>->---<->---<-->>----->----<><>---->-<>  \n---->--->->-------<->->--->-><->-<->>>-><- \n0\t\r  givens,\t\r  343\t\r  candidates,\t\r  3087\t\r  csp-­‐links\t\r  and\t\r  3759\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.60\t\r  \nasc[1]:\t\r  r5c7<r6c7\t\r  ==>\t\r  r6c7\t\r  ≠\t\r  1,\t\r  r5c7\t\r  ≠\t\r  7\t\r  \nasc[1]:\t\r  r5c7<r4c7\t\r  ==>\t\r  r4c7\t\r  ≠\t\r  1\t\r  \nasc[3]:\t\r  r3c7<r2c7<r1c7<r1c6\t\r  ==>\t\r  r3c7\t\r  ≠\t\r  7,\t\r  r3c7\t\r  ≠\t\r  6,\t\r  r3c7\t\r  ≠\t\r  5,\t\r  r2c7\t\r  ≠\t\r  7,\t\r  r2c7\t\r  ≠\t\r  6,\t\r  r2c7\t\r  ≠\t\r  1,\t\r  r1c7\t\r  ≠\t\r  7,\t\r  \nr1c7\t\r  ≠\t\r  2,\t\r  r1c7\t\r  ≠\t\r  1,\t\r  r1c6\t\r  ≠\t\r  3,\t\r  r1c6\t\r  ≠\t\r  2,\t\r  r1c6\t\r  ≠\t\r  1\t\r  \nasc[2]:\t\r  r3c7<r2c7<r2c6\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  2,\t\r  r2c6\t\r  ≠\t\r  1\t\r  \nasc[1]:\t\r  r4c6<r5c6\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  1,\t\r  r4c6\t\r  ≠\t\r  7;\t\r  asc[1]:\t\r  r3c6<r2c6\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  7\t\r  \nasc[3]:\t\r  r6c5<r7c5<r7c6<r6c6\t\r  ==>\t\r  r7c6\t\r  ≠\t\r  7,\t\r  r7c6\t\r  ≠\t\r  2,\t\r  r7c6\t\r  ≠\t\r  1,\t\r  r7c5\t\r  ≠\t\r  7,\t\r  r7c5\t\r  ≠\t\r  6,\t\r  r7c5\t\r  ≠\t\r  1,\t\r  r6c6\t\r  ≠\t\r  3,\t\r  \nr6c6\t\r  ≠\t\r  2,\t\r  r6c6\t\r  ≠\t\r  1,\t\r  r6c5\t\r  ≠\t\r  7,\t\r  r6c5\t\r  ≠\t\r  6,\t\r  r6c5\t\r  ≠\t\r  5\t\r  \nasc[1]:\t\r  r6c5<r5c5\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  1;\t\r  asc[1]:\t\r  r4c5<r3c5\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  7,\t\r  r3c5\t\r  ≠\t\r  1\t\r  \t\r  \nasc[2]:\t\r  r4c4<r3c4<r3c5\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  7,\t\r  r4c4\t\r  ≠\t\r  6,\t\r  r3c5\t\r  ≠\t\r  2,\t\r  r3c4\t\r  ≠\t\r  7,\t\r  r3c4\t\r  ≠\t\r  1\t\r  \nasc[1]:\t\r  r6c1<r5c1\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  7,\t\r  r5c1\t\r  ≠\t\r  1;\t\r  asc[2]:\t\r  r7c7<r7c6<r6c6\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  7,\t\r  r7c7\t\r  ≠\t\r  6\t\r  \nasc[1]:\t\r  r7c4<r7c3\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  7,\t\r  r7c3\t\r  ≠\t\r  1\t\r  \nasc[2]:\t\r  r6c5<r6c4<r5c4\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  7,\t\r  r6c4\t\r  ≠\t\r  1,\t\r  r5c4\t\r  ≠\t\r  2,\t\r  r5c4\t\r  ≠\t\r  1\t\r  \nasc[2]:\t\r  r6c3<r6c4<r5c4\t\r  ==>\t\r  r6c3\t\r  ≠\t\r  7,\t\r  r6c3\t\r  ≠\t\r  6\t\r  \t\r  \nasc[2]:\t\r  r6c3<r6c2<r5c2\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  7,\t\r  r6c2\t\r  ≠\t\r  1,\t\r  r5c2\t\r  ≠\t\r  2,\t\r  r5c2\t\r  ≠\t\r  1\t\r  \nasc[2]:\t\r  r6c1<r6c2<r5c2\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  6\t\r  \t\r  \nasc[1]:\t\r  r5c3<r5c2\t\r  ==>\t\r  r5c3\t\r  ≠\t\r  7\t\r  \t\r  \nasc[2]:\t\r  r4c3<r4c2<r3c2\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  7,\t\r  r4c3\t\r  ≠\t\r  6,\t\r  r4c2\t\r  ≠\t\r  7,\t\r  r4c2\t\r  ≠\t\r  1,\t\r  r3c2\t\r  ≠\t\r  2,\t\r  r3c2\t\r  ≠\t\r  1\t\r  \t\r  \nasc[2]:\t\r  r4c3<r4c2<r4c1\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  2,\t\r  r4c1\t\r  ≠\t\r  1\t\r  \nasc[3]:\t\r  r1c5<r1c4<r2c4<r2c5\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  3,\t\r  r2c5\t\r  ≠\t\r  2,\t\r  r2c5\t\r  ≠\t\r  1,\t\r  r2c4\t\r  ≠\t\r  7,\t\r  r2c4\t\r  ≠\t\r  2,\t\r  r2c4\t\r  ≠\t\r  1,\t\r  r1c5\t\r  ≠\t\r  7,\t\r  \nr1c5\t\r  ≠\t\r  6,\t\r  r1c5\t\r  ≠\t\r  5,\t\r  r1c4\t\r  ≠\t\r  7,\t\r  r1c4\t\r  ≠\t\r  6,\t\r  r1c4\t\r  ≠\t\r  1\t\r  \nasc[3]:\t\r  r1c3<r1c4<r2c4<r2c5\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  7,\t\r  r1c3\t\r  ≠\t\r  6,\t\r  r1c3\t\r  ≠\t\r  5\t\r  \n \n;;; Resolution state RS1, displayed in Figure 14.6. Starting from RS1, after a Single \nand a few ascending chains (strong form, just enabled by the Single), we find our \nfirst hills and valleys. \n \nhidden-­‐single-­‐in-­‐a-­‐column:\t\r  r5c4\t\r  =\t\r  7\t\r  \nstr-­‐asc[1]:\t\r  r5c3<r5c2\t\r  ==>\t\r  r5c3\t\r  ≠\t\r  6;\t\r  str-­‐asc[1]:\t\r  r6c2<r5c2\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  6\t\r  \nstr-­‐asc[1]:\t\r  r6c1<r6c2\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  5\t\r  \nstr-­‐asc[2]:\t\r  r6c3<r6c2<r5c2\t\r  ==>\t\r  r6c3\t\r  ≠\t\r  5\t\r  \n \nvalley[2]:\t\r  r4c7>r5c7<r6c7\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  6\t\r  \nhill[2]:\t\r  r6c3<r6c4>r6c5\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  2\t\r  \nhill[2]:\t\r  r6c1<r6c2>r6c3\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  2\t\r  \nstr-­‐asc[1]:\t\r  r6c2<r5c2\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  3\t\r  \nhill[2]:\t\r  r1c3<r1c4>r1c5\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  2\t\r  \n\n386 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nThe rest of the resolution path has nothing noticeable; from the outside, it looks \nexactly like one for Sudoku. However, it is worth checking the t-candidates in the \nvarious whips, because many of them rely on the inequality constraints. As for the \npresence of Subsets, it is here for illustration purposes only: all these instances are \nsubsumed by whips. \n \n \n \nc1 \n \nc2 \n \nc3 \n \nc4 \n \nc5 \n \nc6 \n \nc7 \n \nr1 \nn1 n2 n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4           \n           < \n          n3 \nn4 n5      \n           > \nn1 n2 n3 \nn4           \n           \n \n \n     n5 n6 \nn7           > \n          n3 \nn4 n5 n6 \n           r1 \n \n \n \n \n \n \n \n∧ \n \n \n \n \n \n∨ \n \nr2 \nn1 n2 n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7            \n           \nn4 n5 n6 \n           < \n \n     n5 n6 \nn7            \n          n3 \nn4 n5 n6 \nn7           > \n     n2 n3 \nn4 n5      \n           r2 \n \n \n \n \n \n \n \n \n \n \n \n∨ \n \n∨ \n \nr3 \nn1 n2 n3 \nn4 n5 n6 \nn7            \n           \n     n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7            \n     n2 n3 \nn4 n5 n6 \n           < \n           \nn4 n5 n6 \nn7            \nn1 n2 n3 \n \n           \n \nn1 n2 n3 \nn4           \n           r3 \n \n \n \n∨ \n \n \n \n∨ \n \n∨ \n \n \n \n \n \nr4 \n           \n     n5 n6 \nn7           > \n               \nn4 n5 n6 \n          > \n          n3 \nn4 n5      \n           \n \nn1 n2      \n \n           \n \n          n3 \nn4 n5 n6 \n           \n \nn1 n2      \n \n           \n \n          n3 \nn4 n5 n6 \nn7           r4 \n \n \n \n \n \n \n \n \n \n \n \n∧ \n \n∨ \n \nr5 \n     n2 n3 \nn4 n5 n6 \n           \n \n           \nn4 n5 n6 \n          > \nn1 n2 n3 \nn4 n5      \n           \n \n \nn7  \n              \n \n     n2 n3 \nn4 n5 n6 \n           \n \n     n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5      \n           r5 \n \n∨ \n \n∨ \n \n \n \n∨ \n \n∨ \n \n \n \n∧ \n \nr6 \nn1 n2 n3 \nn4           \n           < \n          n3 \nn4 n5      \n           > \nn1 n2 n3 \n           \n           < \n          n3 \nn4 n5 n6 \n           > \nn1 n2      \n           \n           \n \n \nn4 n5 n6 \nn7            \n      \n         n6 \nn7           r6 \n \n \n \n \n \n \n \n \n \n∧ \n \n∨ \n \n \n \nr7 \nn1 n2 n3 \nn4 n5 n6 \nn7           \n \nn1 n2 n3 \nn4 n5 n6 \nn7            \n     n2 n3 \nn4 n5 n6 \nn7           > \nn1 n2 n3 \nn4 n5 n6 \n           \n \n     n2 n3 \nn4 n5      \n           < \n          n3 \nn4 n5 n6 \n           > \nn1 n2 n3 \nn4 n5      \n           r7 \n \nc1 \n \nc2 \n \nc3 \n \nc4 \n \nc5 \n \nc6 \n \nc7 \n \nFigure 14.7. State RS2 of the 7×7 Futoshiki puzzle in Figure 14.5. \nstr-­‐asc[1]:\t\r  r1c4<r2c4\t\r  ==>\t\r  r2c4\t\r  ≠\t\r  3;\t\r  str-­‐asc[1]:\t\r  r2c4<r2c5\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  c4n2{r4\t\r  r7}\t\r  –\t\r  c4n1{r7\t\r  .}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  3,\t\r  r4c4\t\r  ≠\t\r  4,\t\r  r4c4\t\r  ≠\t\r  5\t\r  \nwhip[2]:\t\r  r4c3{n2\t\r  n1}\t\r  –\t\r  r4c4{n1\t\r  .}\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  2\t\r  \nstr-­‐asc[1]:\t\r  r4c2<r4c1\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  3;\t\r  str-­‐asc[1]:\t\r  r4c2<r3c2\t\r  ==>\t\r  r3c2\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  c6n2{r4\t\r  r3}\t\r  –\t\r  c6n1{r3\t\r  .}\t\r  ==>\t\r  r4c6\t\r  ≠\t\r  3,\t\r  r4c6\t\r  ≠\t\r  4,\t\r  r4c6\t\r  ≠\t\r  5\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐row\t\r  r4{c4\t\r  c6}{n1\t\r  n2}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  1,\t\r  r4c5\t\r  ≠\t\r  2,\t\r  r4c7\t\r  ≠\t\r  2\t\r  \nstr-­‐asc[1]:\t\r  r4c5<r3c5\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  3\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐row\t\r  r4{c4\t\r  c6}{n1\t\r  n2}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  1,\t\r  r4c3\t\r  ≠\t\r  2\t\r  \nstr-­‐asc[1]:\t\r  r4c3<r4c2\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  3;\t\r  str-­‐asc[1]:\t\r  r4c2<r3c2\t\r  ==>\t\r  r3c2\t\r  ≠\t\r  4\t\r  \nstr-­‐asc[1]:\t\r  r4c2<r4c1\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  4\t\r  \n\n14. Transitive constraints and Futoshiki     \n387 \nwhip[2]:\t\r  c5n1{r6\t\r  r1}\t\r  –\t\r  c5n2{r1\t\r  .}\t\r  ==>\t\r  r6c5\t\r  ≠\t\r  4,\t\r  r6c5\t\r  ≠\t\r  3\t\r  \nwhip[4]:\t\r  c7n7{r6\t\r  r4}\t\r  –\t\r  c7n6{r4\t\r  r1}\t\r  –\t\r  r1c6{n6\t\r  n7}\t\r  –\t\r  r6n7{c6\t\r  .}\t\r  ==>\t\r  r6c7\t\r  ≠\t\r  5,\t\r  r6c7\t\r  ≠\t\r  4,\t\r  r6c7\t\r  ≠\t\r  3,\t\r  \nr6c7\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  r6n3{c2\t\r  c1}\t\r  –\t\r  r6n1{c1\t\r  c5}\t\r  –\t\r  r6n2{c5\t\r  .}\t\r  ==>\t\r  r6c3\t\r  ≠\t\r  4\t\r  \nwhip[6]:\t\r  c6n1{r3\t\r  r4}\t\r  –\t\r  c6n2{r4\t\r  r5}\t\r  –\t\r  c6n3{r5\t\r  r7}\t\r  –\t\r  r7c5{n3\t\r  n2}\t\r  –\t\r  r7c7{n2\t\r  n1}\t\r  –\t\r  c4n1{r7\t\r  .}\t\r  ==>\t\r  \nr3c6\t\r  ≠\t\r  4,\t\r  r3c6\t\r  ≠\t\r  5,\t\r  r3c6\t\r  ≠\t\r  6\t\r  \nwhip[10]:\t\r  r1c7{n4\t\r  n3}\t\r  –\t\r  r1c4{n3\t\r  n5}\t\r  –\t\r  r2c4{n5\t\r  n6}\t\r  –\t\r  r2c5{n6\t\r  n7}\t\r  –\t\r  c6n7{r2\t\r  r6}\t\r  –\t\r  r6n5{c6\t\r  c2}\t\r  –\t\r  \nr5c2{n5\t\r  n6}\t\r  –\t\r  r3c2{n6\t\r  n7}\t\r  –\t\r  r1n7{c2\t\r  c1}\t\r  –\t\r  r1n6{c1\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  4\t\r  \n \n;;; Resolution state RS2, displayed in Figure 14.7. After RS2 is reached, the longest \nwhip in the path appears. \n \nwhip[12]:\t\r  r6n7{c6\t\r  c7}\t\r  –\t\r  r6n6{c7\t\r  c4}\t\r  –\t\r  r6n5{c4\t\r  c2}\t\r  –\t\r  r5c2{n5\t\r  n6}\t\r  –\t\r  r3c2{n6\t\r  n7}\t\r  –\t\r  c5n7{r3\t\r  r2}\t\r  \n–\t\r   c3n7{r2\t\r   r7}\t\r   –\t\r   r7n6{c3\t\r   c1}\t\r   –\t\r   r7c6{n6\t\r   n3}\t\r   –\t\r   r7n5{c6\t\r   c4}\t\r   –\t\r   r7n4{c4\t\r   c2}\t\r   –\t\r   r4c2{n4\t\r   .}\t\r   ==>\t\r  \nr6c6\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  r6n4{c1\t\r  c4}\t\r  –\t\r  r6n5{c4\t\r  c6}\t\r  –\t\r  r6n7{c6\t\r  c7}\t\r  –\t\r  r6n6{c7\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  3\t\r  \nstr-­‐asc[1]:\t\r  r6c2<r5c2\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  r4c2{n6\t\r  n4}\t\r  –\t\r  r6c2{n4\t\r  .}\t\r  ==>\t\r  r3c2\t\r  ≠\t\r  5\t\r  \nwhip[2]:\t\r  r3c5{n6\t\r  n7}\t\r  –\t\r  r3c2{n7\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  6\t\r  \nnaked-­‐triplets-­‐in-­‐a-­‐column\t\r  c2{r4\t\r  r5\t\r  r6}{n4\t\r  n5\t\r  n6}\t\r  ==>\t\r  r3c2\t\r  ≠\t\r  6,\t\r  r7c2\t\r  ≠\t\r  6,\t\r  r7c2\t\r  ≠\t\r  5,\t\r  r7c2\t\r  ≠\t\r  4\t\r  \nsingles\t\r  :\t\r  r3c2\t\r  =\t\r  7,\t\r  r2c5\t\r  =\t\r  7,\t\r  r7c3\t\r  =\t\r  7\t\r  \nstr-­‐asc[1]:\t\r  r4c5<r3c5\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  r4n7{c1\t\r  c7}\t\r  –\t\r  r4n6{c7\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  5\t\r  \nnaked-­‐triplets-­‐in-­‐a-­‐column\t\r  c2{r4\t\r  r5\t\r  r6}{n4\t\r  n5\t\r  n6}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  6,\t\r  r2c2\t\r  ≠\t\r  4,\t\r  r2c2\t\r  ≠\t\r  5,\t\r  r2c2\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  r1n7{c6\t\r  c1}\t\r  –\t\r  r1n6{c1\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  5\t\r  \nwhip[2]:\t\r  r6c6{n6\t\r  n7}\t\r  –\t\r  r1c6{n7\t\r  .}\t\r  ==>\t\r  r7c6\t\r  ≠\t\r  6\t\r  \nstr-­‐asc[1]:\t\r  r7c7<r7c6\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  5;\t\r  str-­‐asc[2]:\t\r  r6c5<r7c5<r7c6\t\r  ==>\t\r  r7c5\t\r  ≠\t\r  5\t\r  \nwhip[2]:\t\r  c5n6{r3\t\r  r5}\t\r  –\t\r  c5n5{r5\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  4\t\r  \nnaked-­‐triplets-­‐in-­‐a-­‐column\t\r  c2{r4\t\r  r5\t\r  r6}{n4\t\r  n6\t\r  n5}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  4,\t\r  r1c2\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  r7c5{n3\t\r  n2}\t\r  –\t\r  r7c7{n2\t\r  n1}\t\r  –\t\r  r7c2{n1\t\r  .}\t\r  ==>\t\r  r7c6\t\r  ≠\t\r  3\t\r  \nwhip[5]:\t\r  r2c6{n3\t\r  n6}\t\r  –\t\r  r2c4{n6\t\r  n4}\t\r  –\t\r  r1c4{n5\t\r  n3}\t\r  –\t\r  r1n4{c5\t\r  c1}\t\r  –\t\r  r1n5{c1\t\r  .}\t\r  ==>\t\r  r2c7\t\r  ≠\t\r  5\t\r  \nstr-­‐asc[1]:\t\r  r3c7<r2c7\t\r  ==>\t\r  r3c7\t\r  ≠\t\r  4\t\r  \nwhip[3]:\t\r  c7n7{r4\t\r  r6}\t\r  –\t\r  c7n6{r6\t\r  r1}\t\r  –\t\r  c7n5{r1\t\r  .}\t\r  ==>\t\r  r4c7\t\r  ≠\t\r  4,\t\r  r4c7\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  r4n4{c2\t\r  c5}\t\r  –\t\r  r4n3{c5\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  5\t\r  \nwhip[4]:\t\r  c3n6{r2\t\r  r3}\t\r  –\t\r  c5n6{r3\t\r  r5}\t\r  –\t\r  r5c2{n6\t\r  n5}\t\r  –\t\r  c3n5{r5\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  1,\t\r  r2c3\t\r  ≠\t\r  2,\t\r  r2c3\t\r  ≠\t\r  3,\t\r  \nr2c3\t\r  ≠\t\r  4\t\r  \n \n;;; Resolution state RS3 \n \nwhip[6]:\t\r  r2n1{c1\t\r  c2}\t\r  –\t\r  r2n2{c2\t\r  c7}\t\r  –\t\r  r3c7{n3\t\r  n1}\t\r  –\t\r  c6n1{r3\t\r  r4}\t\r  –\t\r  c4n1{r4\t\r  r7}\t\r  –\t\r  r7n6{c4\t\r  .}\t\r  ==>\t\r  \nr2c1\t\r  ≠\t\r  6\t\r  \nwhip[6]:\t\r  c3n6{r3\t\r  r2}\t\r  –\t\r  c3n5{r2\t\r  r5}\t\r  –\t\r  r5c2{n5\t\r  n6}\t\r  –\t\r  c5n6{r5\t\r  r3}\t\r  –\t\r  c5n5{r3\t\r  r4}\t\r  –\t\r  r4n3{c5\t\r  .}\t\r  ==>\t\r  \nr3c3\t\r  ≠\t\r  3\t\r  \nwhip[7]:\t\r  r2c4{n5\t\r  n6}\t\r  –\t\r  r7n6{c4\t\r  c1}\t\r  –\t\r  r7n5{c1\t\r  c6}\t\r  –\t\r  r6n5{c6\t\r  c2}\t\r  –\t\r  r5c2{n5\t\r  n6}\t\r  –\t\r  c5n6{r5\t\r  r3}\t\r  –\t\r  \nc3n6{r3\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  5\t\r  \nstr-­‐asc[1]:\t\r  r1c3<r1c4\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  4\t\r  \nstr-­‐asc[1]:\t\r  r1c5<r1c4\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  4\t\r  \nnaked-­‐triplets-­‐in-­‐a-­‐row\t\r  r1{c2\t\r  c3\t\r  c5}{n1\t\r  n2\t\r  n3}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  3,\t\r  r1c7\t\r  ≠\t\r  3\t\r  \n\n388 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nnaked-­‐single:\t\r  r1c4\t\r  =\t\r  4\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐row\t\r  r2{c3\t\r  c4}{n5\t\r  n6}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  5,\t\r  r2c6\t\r  ≠\t\r  6\t\r  \nstr-­‐asc[2]:\t\r  r3c7<r2c7<r2c6\t\r  ==>\t\r  r3c7\t\r  ≠\t\r  3,\t\r  r2c7\t\r  ≠\t\r  4\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐row\t\r  r2{c3\t\r  c4}{n5\t\r  n6}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  5\t\r  \nnaked-­‐triplets-­‐in-­‐a-­‐column\t\r  c7{r1\t\r  r4\t\r  r6}{n6\t\r  n5\t\r  n7}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  5\t\r  \nnaked-­‐triplets-­‐in-­‐a-­‐row\t\r  r1{c2\t\r  c3\t\r  c5}{n1\t\r  n2\t\r  n3}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  1,\t\r  r1c1\t\r  ≠\t\r  2,\t\r  r1c1\t\r  ≠\t\r  3\t\r  \nwhip[3]:\t\r  r3c5{n5\t\r  n6}\t\r  –\t\r  c3n6{r3\t\r  r2}\t\r  –\t\r  r2n5{c3\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  5\t\r  \nnaked-­‐triplets-­‐in-­‐a-­‐row\t\r  r3{c4\t\r  c6\t\r  c7}{n2\t\r  n3\t\r  n1}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  1,\t\r  r3c1\t\r  ≠\t\r  2,\t\r  r3c1\t\r  ≠\t\r  3,\t\r  r3c3\t\r  ≠\t\r  1,\t\r  r3c3\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  c4n1{r7\t\r  r4}\t\r  –\t\r  c6n1{r4\t\r  r3}\t\r  –\t\r  r3n3{c6\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  3\t\r  \nwhip[3]:\t\r  r4n2{c4\t\r  c6}\t\r  –\t\r  c6n1{r4\t\r  r3}\t\r  –\t\r  r3n3{c6\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  2\t\r  \nnaked-­‐single:\t\r  r3c4\t\r  =\t\r  3\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐column\t\r  c4{r2\t\r  r6}{n5\t\r  n6}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  6\t\r  \nsingles:\t\r  r7c1\t\r  =\t\r  6,\t\r  r4c1\t\r  =\t\r  7,\t\r  r1c1\t\r  =\t\r  5\t\r  \nstr-­‐asc[1]:\t\r  r6c1<r5c1\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  4\t\r  \nnaked-­‐single\t\r  :\t\r  r3c1\t\r  =\t\r  4\t\r  \nstr-­‐asc[1]:\t\r  r6c1<r5c1\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  3\t\r  \nsingles:\t\r  r1c7\t\r  =\t\r  6,\t\r  r4c7\t\r  =\t\r  5,\t\r  r6c7\t\r  =\t\r  7,\t\r  r1c6\t\r  =\t\r  7,\t\r  r4c2\t\r  =\t\r  6\t\r  \nstr-­‐asc[2]:\t\r  r6c3<r6c2<r5c2\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  5\t\r  \t\r  \nstr-­‐asc[1]:\t\r  r5c3<r5c2\t\r  ==>\t\r  r5c3\t\r  ≠\t\r  5\t\r  \nsingles:\t\r  r6c2\t\r  =\t\r  4,\t\r  r5c2\t\r  =\t\r  5,\t\r  r3c5\t\r  =\t\r  5,\t\r  r3c3\t\r  =\t\r  6,\t\r  r2c3\t\r  =\t\r  5,\t\r  r2c4\t\r  =\t\r  6,\t\r  r6c4\t\r  =\t\r  5,\t\r  r6c6\t\r  =\t\r  6,\t\r  r5c5\t\r  =\t\r  6,\t\r  r7c6\t\r  =\t\r  \n5,\t\r  r6c3\t\r  =\t\r  3,\t\r  r4c3\t\r  =\t\r  4,\t\r  r4c5\t\r  =\t\r  3,\t\r  r1c2\t\r  =\t\r  3,\t\r  r7c7\t\r  =\t\r  3,\t\r  r2c7\t\r  =\t\r  2,\t\r  r3c7\t\r  =\t\r  1,\t\r  r5c7\t\r  =\t\r  4,\t\r  r3c6\t\r  =\t\r  2,\t\r  r4c6\t\r  =\t\r  1,\t\r  r4c4\t\r  \n=\t\r  2,\t\r  r7c4\t\r  =\t\r  1,\t\r  r7c2\t\r  =\t\r  2,\t\r  r7c5\t\r  =\t\r  4,\t\r  r5c6\t\r  =\t\r  3\t\r  \nstr-­‐asc[1]:\t\r  r6c1<r5c1\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  2\t\r  \nnine\t\r  naked-­‐singles\t\r  to\t\r  the\t\r  end:\t\r  r6c1\t\r  =\t\r  1,\t\r  r2c1\t\r  =\t\r  3,\t\r  r6c5\t\r  =\t\r  2,\t\r  r1c5\t\r  =\t\r  1,\t\r  r1c3\t\r  =\t\r  2,\t\r  r5c3\t\r  =\t\r  1,\t\r  r2c6\t\r  =\t\r  4,\t\r  \nr5c1\t\r  =\t\r  2,\t\r  r2c2\t\r  =\t\r  1\t\r  \nThis puzzle also provides an example of braids in Futoshiki. Indeed, if we \nactivate braids, we get the same resolution path upto state RS2. But, the elimination \ndone by the whip[12] coming immediately after RS2 in the path with whips can now \nbe done by a braid[10], which leads to a B rating of 10 for this puzzle. We did not \ninvestigate whether the whip[12] for this elimination is due to some non-confluence \nphenomenon in this puzzle or if its W rating is effectively 12. \n \nbraid[10]:\t\r  r6n7{c6\t\r  c7}\t\r  –\t\r  r6n6{c7\t\r  c4}\t\r  –\t\r  r6n5{c4\t\r  c2}\t\r  –\t\r  r5c2{n5\t\r  n6}\t\r  –\t\r  r4c2{n6\t\r  n4}\t\r  –\t\r  r7c6{n4\t\r  n3}\t\r  \n–\t\r  r3c2{n5\t\r  n7}\t\r  –\t\r  r7c5{n3\t\r  n2}\t\r  –\t\r  r7c2{n2\t\r  n1}\t\r  –\t\r  r7c7{n5\t\r  .}\t\r  ==>\t\r  r6c6\t\r  ≠\t\r  4\t\r  \nThe next steps of the path are the same as in the above resolution path without \nbraids, upto state RS3. We do not repeat them here. After RS3, there is a braid[5] \neliminating a candidate that was not eliminated by whips. After it, the two paths \ndiverge, even though they share many patterns (such as pairs and triplets). \n \nbraid[5]:\t\r  r3c5{n6\t\r  n5}\t\r  –\t\r  c3n6{r3\t\r  r2}\t\r  –\t\r  c3n5{r2\t\r  r5}\t\r  –\t\r  r5c2{n5\t\r  n6}\t\r  –\t\r  c5n6{r5\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  6\t\r  \nbraid[5]:\t\r  r3n6{c3\t\r  c5}\t\r  –\t\r  r4n3{c3\t\r  c5}\t\r  –\t\r  c5n5{r4\t\r  r5}\t\r  –\t\r  c3n5{r5\t\r  r2}\t\r  –\t\r  c3n6{r3\t\r  .}\t\r  ==>\t\r  r3c3\t\r  ≠\t\r  3\t\r  \nwhip[6]:\t\r  r2n1{c1\t\r  c2}\t\r  –\t\r  r2n2{c2\t\r  c7}\t\r  –\t\r  r3c7{n3\t\r  n1}\t\r  –\t\r  c6n1{r3\t\r  r4}\t\r  –\t\r  c4n1{r4\t\r  r7}\t\r  –\t\r  r7n6{c4\t\r  .}\t\r  ==>\t\r  \nr2c1\t\r  ≠\t\r  6\t\r  \nbraid[6]:\t\r  c5n6{r5\t\r  r3}\t\r  –\t\r  r5c2{n6\t\r  n5}\t\r  –\t\r  c5n5{r5\t\r  r4}\t\r  –\t\r  r6c2{n5\t\r  n4}\t\r  –\t\r  r4n4{c5\t\r  c3}\t\r  –\t\r  r4n3{c5\t\r  .}\t\r  ==>\t\r  \nr5c6\t\r  ≠\t\r  6\t\r  \n\n14. Transitive constraints and Futoshiki     \n389 \nbraid[6]:\t\r  c5n6{r5\t\r  r3}\t\r  –\t\r  r5c2{n6\t\r  n5}\t\r  –\t\r  c5n5{r5\t\r  r4}\t\r  –\t\r  r4c1{n6\t\r  n7}\t\r  –\t\r  c2n6{r5\t\r  r4}\t\r  –\t\r  r4c7{n7\t\r  .}\t\r  ==>\t\r  \nr5c1\t\r  ≠\t\r  6\t\r  \nwhip[7]:\t\r  r2c4{n5\t\r  n6}\t\r  –\t\r  r7n6{c4\t\r  c1}\t\r  –\t\r  r7n5{c1\t\r  c6}\t\r  –\t\r  r6n5{c6\t\r  c2}\t\r  –\t\r  r5c2{n5\t\r  n6}\t\r  –\t\r  c5n6{r5\t\r  r3}\t\r  –\t\r  \nc3n6{r3\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  5\t\r  \nstr-­‐asc[1]:\t\r  r1c3<r1c4\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  4;\t\r  str-­‐asc[1]:\t\r  r1c5<r1c4\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  4\t\r  \nnaked-­‐triplets-­‐in-­‐a-­‐row\t\r  r1{c2\t\r  c3\t\r  c5}{n1\t\r  n2\t\r  n3}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  3\t\r  \nnaked-­‐single:\t\r  r1c4\t\r  =\t\r  4\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐row\t\r  r2{c3\t\r  c4}{n5\t\r  n6}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  6,\t\r  r2c6\t\r  ≠\t\r  5\t\r  \nstr-­‐asc[2]:\t\r  r3c7<r2c7<r2c6\t\r  ==>\t\r  r3c7\t\r  ≠\t\r  3,\t\r  r2c7\t\r  ≠\t\r  4\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐row\t\r  r2{c3\t\r  c4}{n5\t\r  n6}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  5\t\r  \nhidden-­‐pairs-­‐in-­‐a-­‐column\t\r  c6{n6\t\r  n7}{r1\t\r  r6}\t\r  ==>\t\r  r6c6\t\r  ≠\t\r  5\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐row\t\r  r6{c6\t\r  c7}{n6\t\r  n7}\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  6\t\r  \nnaked-­‐triplets-­‐in-­‐a-­‐column\t\r  c7{r1\t\r  r4\t\r  r6}{n6\t\r  n5\t\r  n7}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  5\t\r  \nnaked-­‐triplets-­‐in-­‐a-­‐row\t\r  r1{c2\t\r  c3\t\r  c5}{n1\t\r  n2\t\r  n3}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  3,\t\r  r1c1\t\r  ≠\t\r  2,\t\r  r1c1\t\r  ≠\t\r  1\t\r  \nwhip[3]:\t\r  r3c5{n5\t\r  n6}\t\r  –\t\r  c3n6{r3\t\r  r2}\t\r  –\t\r  r2n5{c3\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  5\t\r  \nnaked-­‐triplets-­‐in-­‐a-­‐row\t\r  r3{c4\t\r  c6\t\r  c7}{n2\t\r  n3\t\r  n1}\t\r  ==>\t\r  r3c3\t\r  ≠\t\r  2,\t\r  r3c3\t\r  ≠\t\r  1,\t\r  r3c1\t\r  ≠\t\r  3,\t\r  r3c1\t\r  ≠\t\r  2,\t\r  r3c1\t\r  ≠\t\r  1\t\r  \nwhip[2]:\t\r  r5c1{n2\t\r  n5}\t\r  –\t\r  r3c1{n5\t\r  .}\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  4\t\r  \nsingles:\t\r  r6c2\t\r  =\t\r  4,\t\r  r6c4\t\r  =\t\r  5,\t\r  r2c4\t\r  =\t\r  6,\t\r  r2c3\t\r  =\t\r  5,\t\r  r7c1\t\r  =\t\r  6,\t\r  r4c1\t\r  =\t\r  7,\t\r  r1c1\t\r  =\t\r  5,\t\r  r3c1\t\r  =\t\r  4,\t\r  r3c3\t\r  =\t\r  6,\t\r  \nr3c5\t\r  =\t\r  5,\t\r  r1c7\t\r  =\t\r  6,\t\r  r4c7\t\r  =\t\r  5,\t\r  r4c2\t\r  =\t\r  6,\t\r  r5c2\t\r  =\t\r  5,\t\r  r6c7\t\r  =\t\r  7,\t\r  r6c6\t\r  =\t\r  6,\t\r  r1c6\t\r  =\t\r  7,\t\r  r7c6\t\r  =\t\r  5,\t\r  r5c5\t\r  =\t\r  6,\t\r  \nr2c6\t\r  =\t\r  4\t\r  \nstr-­‐asc[1]:\t\r  r6c1<r5c1\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  3\t\r  \nsingles\t\r  ==>\t\r  r6c3\t\r  =\t\r  3,\t\r  r4c3\t\r  =\t\r  4,\t\r  r4c5\t\r  =\t\r  3,\t\r  r1c2\t\r  =\t\r  3,\t\r  r5c7\t\r  =\t\r  4,\t\r  r7c5\t\r  =\t\r  4,\t\r  r5c3\t\r  =\t\r  1,\t\r  r1c3\t\r  =\t\r  2,\t\r  r1c5\t\r  =\t\r  1,\t\r  \nr6c5\t\r  =\t\r  2,\t\r  r6c1\t\r  =\t\r  1,\t\r  r2c2\t\r  =\t\r  1,\t\r  r7c2\t\r  =\t\r  2\t\r  \nwhip[3]:\t\r  c6n1{r3\t\r  r4}\t\r  –\t\r  c4n1{r4\t\r  r7}\t\r  –\t\r  c4n3{r7\t\r  .}\t\r  ==>\t\r  r3c\t\r  \t\r  ≠\t\r  3\t\r  \neleven\t\r  singles\t\r  to\t\r  the\t\r  end:\t\r  r5c6\t\r  =\t\r  3,\t\r  r5c1\t\r  =\t\r  2,\t\r  r2c1\t\r  =\t\r  3,\t\r  r2c7\t\r  =\t\r  2,\t\r  r3c7\t\r  =\t\r  1,\t\r  r7c7\t\r  =\t\r  3,\t\r  r7c4\t\r  =\t\r  1,\t\r  r4c4\t\r  =\t\r  2,\t\r  \nr3c4\t\r  =\t\r  3,\t\r  r4c6\t\r  =\t\r  1,\t\r  r3c6\t\r  =\t\r  2\t\r  \n14.5. g-labels, g-whips and g-braids in Futoshiki \nIn n×n Futoshiki, let us define the following sets of Numbers:  \nk+ = {k, k+1, …, n} for any k < n and k- = {1, 2 …, k} for any k > 1. \nWe can now define the g-labels of Futoshiki. For any Xrc CSP variable:  \n– there is a g-label < Xrc, k+>, or k+rc for short, provided that cell rc is adjacent \nin a row [respectively in a column] to at least one cell r’c’ such that there is a < \n[resp. a ∧] inequality sign between rc and r’c’. It is easy to see that label k’r’c’ for \nthis adjacent cell is g-linked to g-label k+rc according to the general definition in \nchapter 7 if and only if  k’ ≤ k. \n– there is a g-label < Xrc, k->, or k-rc for short, provided that cell rc is adjacent in \na row [respectively in a column] to at least one cell r’c’ such that there is a > [resp. a \n∨] inequality sign between rc and r’c’. It is easy to see that label k’r’c’ for this \nadjacent cell is g-linked to g-label k-rc according to the general definition in chapter \n7 if and only if k’ ≥ k. \n\n390 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nRemark: the set of g-labels is fixed in the sense that it does not vary during the \nresolution process, i.e. it does not depend on the resolution state of a given instance, \nbut, contrary to Sudoku, it is different for each instance. Alternatively, one could \nmove the < condition between cells from the definition of g-labels to the definition \nof predicate g-linked. This would introduce lots of useless g-labels, but it would not \nchange anything in theory or in practice. [From a programming point of view, it may \nbe easier to have a set of g-labels independent of the instance; but one can also have \na universal set of “potential” g-labels and a subset of real g-labels for each instance.] \n \n \n \nc1 \n \nc2 \n \nc3 \n \nc4 \n \nc5 \n \nc6 \n \nc7 \n \nc8 \n \nc9 \n \nr1 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n \n          n6 \nn7 n8      < \n \n \nn7 n8 n9  \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      < \n     n2 n3 \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5 n6 \n \nr1 \n \n∧ \n \n \n \n \n \n∨ \n \n \n \n \n \n \n \n \n \n∧ \n \nr2 \n     n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \n \n     n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n \nn4 n5 n6 \nn7 n8 n9 > \n          n3 \nn4 n5 n6 \nn7 n8      > \n     n2 n3 \nn4 n5 n6 \nn7           r2 \n \n \n \n∨  \n∧  \n∨       \n \n \n \n \n \nr3 \n      \nn4 n5 n6 \nn7 n8 n9 > \n          n3 \nn4 n5 n6 \nn7 n8       \n     n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n \nn4 n5 n6 \n \n \n \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      < \n     n2 n3 \nn4 n5 n6 \nn7           > \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \n     n2 n3 \nn4 n5 n6 \nn7 n8 n9 r3 \n \n \n \n∨    \n∨  \n∨    \n∨ \n \n \n \n∨ \n \nr4 \nn1 n2 n3 \nn4 n5 n6 \n \n< \n     n2 n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n          n3 \nn4 n5      \n \n \n          n3 \nn4 n5 n6 \nn7 n8      > \n     n2 n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      r4 \n \n \n \n∨ \n \n \n \n∨ \n \n∧ \n \n∨ \n \n∧ \n \n \n \n \n \nr5 \nn1 n2 n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \n \n \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n     n2 n3 \nn4           \n \n \n \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5 n6 \n \n \n     n2 n3 \nn4 n5 n6 \nn7 n8 n9 > \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 r5 \n \n∧      \n∨       \n \n \n \n \n \nr6 \n     n2 n3 \nn4 n5 n6 \nn7 n8       \n \n \nn7 n8 n9 > \n \n          n6 \nn7 n8       \nn1 n2 n3 \n \n \n< \n     n2 n3 \nn4 n5 n6 \nn7 n8       \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \n          n3 \nn4 n5 n6 \nn7 n8 n9 > \n     n2 n3 \nn4 n5 n6 \nn7 n8      > \nn1 n2 n3 \nn4 n5 n6 \nn7           r6 \n \n∧    \n∨    \n∧  \n∧   \n \n \n \n∧ \n \nr7 \n           \n     n5 n6 \nn7 n8 n9 > \n \nn4 n5 n6 \n \n< \n \n     n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      < \n          n3 \nn4 n5 n6 \nn7 n8 n9  \n     n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n     n2 n3 \nn4 n5 n6 \nn7 n8 n9 > \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \n     n2 n3 \nn4 n5 n6 \nn7 n8 n9 r7 \n \n \n \n∨ \n \n \n \n \n \n \n \n∨ \n \n \n \n \n \n∨ \n \nr8 \nn1 n2 n3 \nn4           \n \n< \n          n3 \nn4 n5      \n \n \n     n2 n3 \nn4 n5 n6 \nn7           < \n          n3 \nn4 n5 n6 \nn7 n8      > \n     n2 n3 \nn4 n5 n6 \nn7           > \nn1 n2 n3 \nn4 n5 n6 \n  \n \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      r8 \n \n \n \n∨  \n∨  \n∧    \n∧   \n \n∧ \n \n \n \nr9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n     n2 n3 \nn4           \n \n> \nn1 n2 n3 \n \n \n \n \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n     n2 n3 \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n     n2 n3 \nn4 n5 n6 \nn7 n8      < \n          n3 \nn4 n5 n6 \nn7 n8 n9 r9 \n \nc1 \n \nc2 \n \nc3 \n \nc4 \n \nc5 \n \nc6 \n \nc7 \n \nc8 \n \nc9 \n \nFigure 14.8. State RS1 of a 9×9 Futoshiki puzzle (clues of H1117 from atksolutions.com) \n\n14. Transitive constraints and Futoshiki     \n391 \nLet us now see how g-labels appear in practice in g-whips and g-braids. These \nare the means by which ascending (or “descending”) chains can both be made \n“contextual” (depending on the target and the previous right-linking candidates) and \nbe included as parts of whip-like or braid-like patterns. \nConsider the puzzle defined by the set of inequality signs in Figure 14.8. This \nhard puzzle cannot be solved by whips, braids or g-whips, even taken together; it \nrequires g-braids. We conjecture that, as in Sudoku, this is an exceptional instance, \nbut there is no available large collection of Futoshiki puzzles that would allow to \ntest this. Figure 14.8 displays the state RS1 reached after all the obvious weak \nascending chain eliminations have been done. \nAfter RS1, one has, as is usual, a series of singles, strong ascending chains, hills \nand valleys, due to the interactions between different chains. \n \n*****\t\r  \t\r  FutoRules\t\r  1.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2\t\r  ,\t\r  config:\t\r  gB+S\t\r  \t\r  \t\r  *****\t\r  \n.................................................................................\t\r  \t\r  \n-­‐-­‐-­‐<-­‐<-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐>>>-­‐-­‐-­‐-­‐<>-­‐<-­‐-­‐-­‐>-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐>-­‐-­‐>-­‐<-­‐-­‐>>><-­‐<-­‐-­‐>-­‐<-­‐<>>-­‐-­‐-­‐-­‐>-­‐-­‐-­‐-­‐-­‐<\t\r  \t\r  \n<-­‐-­‐-­‐<<-­‐-­‐-­‐>>>-­‐-­‐>>-­‐<-­‐-­‐-­‐>-­‐>>>>>>-­‐-­‐<-­‐-­‐><-­‐<-­‐-­‐-­‐-­‐-­‐>-­‐<><-­‐-­‐><-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐<<-­‐>-­‐-­‐<>-­‐\t\r  \n0\t\r  givens,\t\r  729\t\r  candidates,\t\r  8748\t\r  csp-­‐links\t\r  and\t\r  10728\t\r  links.\t\r  Initial\t\r  density\t\r  =\t\r  1.01\t\r  \n… Starting from resolution state RS1 \nsingles\t\r  ==>\t\r  r9c4\t\r  =\t\r  9,\t\r  r8c7\t\r  =\t\r  9,\t\r  r6c2\t\r  =\t\r  9\t\r  \nstr-­‐asc[1]:\t\r  r1c6<r1c7\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  8;\t\r  str-­‐asc[1]:\t\r  r3c6<r3c7\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  8\t\r  \nstr-­‐asc[1]:\t\r  r3c8<r3c7\t\r  ==>\t\r  r3c8\t\r  ≠\t\r  8;\t\r  str-­‐asc[1]:\t\r  r3c2<r2c2\t\r  ==>\t\r  r3c2\t\r  ≠\t\r  8\t\r  \nstr-­‐asc[2]:\t\r  r4c1<r4c2<r3c2\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  7;\t\r  str-­‐asc[2]:\t\r  r4c1<r4c2<r3c2\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  6\t\r  \nstr-­‐asc[1]:\t\r  r5c8<r5c7\t\r  ==>\t\r  r5c8\t\r  ≠\t\r  8\t\r  ;\t\r  str-­‐asc[1]:\t\r  r6c8<r6c7\t\r  ==>\t\r  r6c8\t\r  ≠\t\r  8\t\r  \nstr-­‐asc[1]:\t\r  r6c9<r6c8\t\r  ==>\t\r  r6c9\t\r  ≠\t\r  7;\t\r  str-­‐asc[1]:\t\r  r7c8<r7c7\t\r  ==>\t\r  r7c8\t\r  ≠\t\r  8\t\r  \nstr-­‐asc[2]:\t\r  r5c2<r4c2<r3c2\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  6;\t\r  str-­‐asc[1]:\t\r  r4c7<r3c7\t\r  ==>\t\r  r4c7\t\r  ≠\t\r  8\t\r  \nstr-­‐asc[1]:\t\r  r9c8<r9c9\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  8;\t\r  str-­‐asc[1]:\t\r  r8c8<r9c8\t\r  ==>\t\r  r8c8\t\r  ≠\t\r  7\t\r  \nstr-­‐asc[1]:\t\r  r2c8<r2c7\t\r  ==>\t\r  r2c8\t\r  ≠\t\r  8;\t\r  str-­‐asc[2]:\t\r  r1c9<r2c9<r2c8\t\r  ==>\t\r  r2c9\t\r  ≠\t\r  7\t\r  \nstr-­‐asc[2]:\t\r  r1c9<r2c9<r2c8\t\r  ==>\t\r  r1c9\t\r  ≠\t\r  6\t\r  \nhill[2]:\t\r  r6c9<r7c9>r8c9\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  2\t\r  \nhill[2]:\t\r  r6c6<r7c6>r8c6\t\r  ==>\t\r  r7c6\t\r  ≠\t\r  2\t\r  \nvalley[2]:\t\r  r3c5>r4c5<r5c5\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  8\t\r  \nstr-­‐asc[2]:\t\r  r5c6<r4c6<r4c5\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  6,\t\r  r4c6\t\r  ≠\t\r  7\t\r  \nhill[3]:\t\r  r8c3<r8c4>r8c5>r8c6\t\r  ==>\t\r  r8c4\t\r  ≠\t\r  3\t\r  \nhill[2]:\t\r  r3c6<r3c7>r3c8\t\r  ==>\t\r  r3c7\t\r  ≠\t\r  2\t\r  \nstr-­‐valley[2]:\t\r  r3c7>r4c7<r5c7\t\r  ==>\t\r  r4c7\t\r  ≠\t\r  7\t\r  \n \n;;; Resolution state RS2, displayed in Figure 14.9. Notice that, until now, there is no \n“hole” in any of the sets of candidates for a cell. \nFollowing RS2, there appears a series of strong ascending chains, subsets, whips \nand braids, in the same vein as in the previous example. \n \nhidden-­‐pairs-­‐in-­‐a-­‐column\t\r  c8{n8\t\r  n9}{r1\t\r  r4}\t\r  ==>\t\r  r4c8\t\r  and\t\r  r1c8\t\r  ≠\t\r  7,\t\r  6,\t\r  5,\t\r  4,\t\r  3,\t\r  2,\t\r  1\t\r  \nwhip[2]:\t\r  r1c5{n8\t\r  n9}\t\r  –\t\r  r1c8{n9\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  8\t\r  \n\n392 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n \n \nc1 \n \nc2 \n \nc3 \n \nc4 \n \nc5 \n \nc6 \n \nc7 \n \nc8 \n \nc9 \n \nr1 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n \n          n6 \nn7 n8      < \n \n \nn7 n8 n9  \nn1 n2 n3 \nn4 n5 n6 \nn7           < \n     n2 n3 \nn4 n5 n6 \nn7 n8       \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5      \n \nr1 \n \n∧ \n \n \n \n \n \n∨ \n \n \n \n \n \n \n \n \n \n∧ \n \nr2 \n     n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n \nn4 n5 n6 \nn7 n8       \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \n \n     n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n \nn4 n5 n6 \nn7 n8      > \n          n3 \nn4 n5 n6 \nn7           > \n     n2 n3 \nn4 n5 n6 \n           r2 \n \n \n \n∨  \n∧  \n∨       \n \n \n \n \n \nr3 \n      \nn4 n5 n6 \nn7 n8 n9 > \n          n3 \nn4 n5 n6 \nn7            \n     n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n \nn4 n5 n6 \n \n \n \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5 n6 \nn7           < \n          n3 \nn4 n5 n6 \nn7           > \nn1 n2 n3 \nn4 n5 n6 \nn7            \n     n2 n3 \nn4 n5 n6 \nn7 n8 n9 r3 \n \n \n \n∨    \n∨  \n∨    \n∨ \n \n \n \n∨ \n \nr4 \nn1 n2 n3 \nn4 n5      \n \n< \n     n2 n3 \nn4 n5 n6 \n          \n \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n          n3 \nn4 n5      \n \n \n          n3 \nn4 n5 n6 \nn7           > \n     n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      r4 \n \n \n \n∨ \n \n \n \n∨ \n \n∧ \n \n∨ \n \n∧ \n \n \n \n \n \nr5 \nn1 n2 n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4 n5      \n \n \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n     n2 n3 \nn4           \n \n \n \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5      \n \n \n     n2 n3 \nn4 n5 n6 \nn7 n8      > \nn1 n2 n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 r5 \n \n∧      \n∨       \n \n \n \n \n \nr6 \n     n2 n3 \nn4 n5 n6 \nn7 n8       \n \nn9  \n         \n> \n \n          n6 \nn7 n8       \nn1 n2 n3 \n \n \n< \n     n2 n3 \nn4 n5 n6 \nn7 n8       \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \n          n3 \nn4 n5 n6 \nn7 n8      > \n     n2 n3 \nn4 n5 n6 \nn7           > \nn1 n2 n3 \nn4 n5 n6 \n           r6 \n \n∧    \n∨    \n∧  \n∧   \n \n \n \n∧ \n \nr7 \n           \n     n5 n6 \nn7 n8 n9 > \n \nn4 n5 n6 \n \n< \n \n     n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      < \n          n3 \nn4 n5 n6 \nn7 n8 n9  \n          n3 \nn4 n5 n6 \nn7 n8 n9  \n     n2 n3 \nn4 n5 n6 \nn7 n8      > \nn1 n2 n3 \nn4 n5 n6 \nn7            \n          n3 \nn4 n5 n6 \nn7 n8 n9 r7 \n \n \n \n∨ \n \n \n \n \n \n \n \n∨ \n \n \n \n \n \n∨ \n \nr8 \nn1 n2 n3 \nn4           \n \n< \n          n3 \nn4 n5      \n \n \n     n2 n3 \nn4 n5 n6 \nn7           < \n           \nn4 n5 n6 \nn7 n8      > \n     n2 n3 \nn4 n5 n6 \nn7           > \nn1 n2 n3 \nn4 n5 n6 \n  \n \n \nn9  \n         \n \nn1 n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      r8 \n \n \n \n∨  \n∨  \n∧    \n∧   \n \n∧ \n \n \n \nr9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \n     n2 n3 \nn4           \n \n> \nn1 n2 n3 \n \n \n \n \nn9  \n              \n \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \n     n2 n3 \nn4 n5 n6 \nn7 n8       \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \n     n2 n3 \nn4 n5 n6 \nn7           < \n          n3 \nn4 n5 n6 \nn7 n8      r9 \n \nc1 \n \nc2 \n \nc3 \n \nc4 \n \nc5 \n \nc6 \n \nc7 \n \nc8 \n \nc9 \n \nFigure 14.9. State RS2 of the 9×9 Futoshiki puzzle of Figure 14.8. \nstr-­‐asc[5]:\t\r  r6c4<r5c4<r4c4<r3c4<r2c4<r1c4\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  3,\t\r  r5c4\t\r  ≠\t\r  4,\t\r  r4c4\t\r  ≠\t\r  5,\t\r  r3c4\t\r  ≠\t\r  6,\t\r  r2c4\t\r  ≠\t\r  7\t\r  \nwhip[2]:\t\r  r6c4{n2\t\r  n1}\t\r  –\t\r  r6c9{n1\t\r  .}\t\r  ==>\t\r  r6c8\t\r  ≠\t\r  2\t\r  \nstr-­‐asc[1]:\t\r  r6c8<r6c7\t\r  ==>\t\r  r6c7\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  c2n7{r2\t\r  r1}\t\r  –\t\r  c2n8{r1\t\r  .}\t\r  ==>\t\r  r2c2\t\r  ≠\t\r  6,\t\r  5,\t\r  4\t\r  \nwhip[2]:\t\r  r2c2{n7\t\r  n8}\t\r  –\t\r  r2c7{n8\t\r  .}\t\r  ==>\t\r  r2c8\t\r  ≠\t\r  7\t\r  \nstr-­‐asc[2]:\t\r  r1c9<r2c9<r2c8\t\r  ==>\t\r  r2c9\t\r  ≠\t\r  6,\t\r  r1c9\t\r  ≠\t\r  5\t\r  \nwhip[2]:\t\r  r2c4{n5\t\r  n6}\t\r  –\t\r  r2c8{n6\t\r  .}\t\r  ==>\t\r  r2c9\t\r  ≠\t\r  5\t\r  \nstr-­‐asc[1]:\t\r  r1c9<r2c9\t\r  ==>\t\r  r1c9\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  r7n2{c8\t\r  c4}\t\r  –\t\r  r7n1{c4\t\r  .}\t\r  ==>\t\r  r7c8\t\r  ≠\t\r  3,\t\r  4,\t\r  5,\t\r  6,\t\r  7\t\r  \nwhip[2]:\t\r  r7c8{n2\t\r  n1}\t\r  –\t\r  r8c8{n1\t\r  .}\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  2\t\r  \n\n14. Transitive constraints and Futoshiki     \n393 \nstr-­‐asc[1]:\t\r  r9c8<r9c9\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  r8n7{c4\t\r  c9}\t\r  –\t\r  r8n8{c9\t\r  .}\t\r  ==>\t\r  r8c4\t\r  ≠\t\r  6,\t\r  5,\t\r  4\t\r  \nwhip[3]:\t\r  c4n8{r8\t\r  r7}\t\r  –\t\r  r7c5{n8\t\r  n9}\t\r  –\t\r  r7c9{n9\t\r  .}\t\r  ==>\t\r  r8c9\t\r  ≠\t\r  8\t\r  \nhidden-­‐single-­‐in-­‐a-­‐row\t\r  ==>\t\r  r8c4\t\r  =\t\r  8\t\r  \nwhip[3]:\t\r  r1c7{n7\t\r  n8}\t\r  –\t\r  r1c5{n8\t\r  n9}\t\r  –\t\r  r1c8{n9\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  r6c8{n6\t\r  n7}\t\r  –\t\r  r6c7{n7\t\r  n8}\t\r  –\t\r  r6c3{n8\t\r  .}\t\r  ==>\t\r  r6c9\t\r  ≠\t\r  6\t\r  \n \n;;; this is now the first place a “hole” is introduced in a cell: \nwhip[4]:\t\r  r5c4{n3\t\r  n2}\t\r  –\t\r  r5c8{n2\t\r  n1}\t\r  –\t\r  r7n1{c8\t\r  c4}\t\r  –\t\r  r6c4{n1\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  3\t\r  \t\r  \nwhip[4]:\t\r  r1c4{n6\t\r  n7}\t\r  –\t\r  r1c7{n7\t\r  n8}\t\r  –\t\r  r1c5{n8\t\r  n9}\t\r  –\t\r  r1c8{n9\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  6\t\r  \nwhip[4]:\t\r  c2n8{r2\t\r  r1}\t\r  –\t\r  c8n8{r1\t\r  r4}\t\r  –\t\r  r4n9{c8\t\r  c3}\t\r  –\t\r  r3c3{n9\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  8\t\r  \n \n;;; this is the second place a “hole” is introduced in a cell (exercise: find the next \nones) \nwhip[5]:\t\r  r3n1{c6\t\r  c8}\t\r  –\t\r  r7n1{c8\t\r  c4}\t\r  –\t\r  c4n5{r7\t\r  r2}\t\r  –\t\r  c4n6{r2\t\r  r1}\t\r  –\t\r  c4n7{r1\t\r  .}\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  5\t\r  \t\r  \nbraid[6]:\t\r  c2n8{r1\t\r  r2}\t\r  –\t\r  r2c1{n8\t\r  n9}\t\r  –\t\r  r1c8{n8\t\r  n9}\t\r  –\t\r  r1c5{n8\t\r  n7}\t\r  –\t\r  c2n7{r1\t\r  r3}\t\r  –\t\r  r3c1{n9\t\r  .}\t\r  ==>\t\r  \nr1c1\t\r  ≠\t\r  8\t\r  \nwhip[7]:\t\r  r3c4{n4\t\r  n5}\t\r  –\t\r  r2c4{n5\t\r  n6}\t\r  –\t\r  r1c4{n6\t\r  n7}\t\r  –\t\r  c2n7{r1\t\r  r2}\t\r  –\t\r  c2n8{r2\t\r  r1}\t\r  –\t\r  r1c5{n8\t\r  n9}\t\r  –\t\r  \nr1c8{n9\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  4,\t\r  r3c2\t\r  ≠\t\r  4\t\r  ;;;\t\r  third\t\r  hole\t\r  (in\t\r  r3c2)\t\r  \nwhip[7]:\t\r  r4c4{n4\t\r  n3}\t\r  –\t\r  r4c6{n3\t\r  n2}\t\r  –\t\r  r5c6{n2\t\r  n1}\t\r  –\t\r  r3n1{c6\t\r  c8}\t\r  –\t\r  r7n1{c8\t\r  c4}\t\r  –\t\r  r6c4{n1\t\r  n2}\t\r  –\t\r  \nr5c4{n2\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  4\t\r  \nwhip[3]:\t\r  r3c4{n5\t\r  n4}\t\r  –\t\r  r4c4{n4\t\r  n3}\t\r  –\t\r  r4c5{n3\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  5\t\r  \nwhip[7]:\t\r  r3n1{c6\t\r  c8}\t\r  –\t\r  r7n1{c8\t\r  c4}\t\r  –\t\r  c4n7{r7\t\r  r1}\t\r  –\t\r  c2n7{r1\t\r  r2}\t\r  –\t\r  c2n8{r2\t\r  r1}\t\r  –\t\r  r1c5{n8\t\r  n9}\t\r  –\t\r  \nr1c8{n9\t\r  .}\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  c6n9{r7\t\r  r2}\t\r  –\t\r  c6n8{r2\t\r  r9}\t\r  –\t\r  c6n7{r9\t\r  .}\t\r  ==>\t\r  r7c6\t\r  ≠\t\r  6,\t\r  5,\t\r  4,\t\r  3\t\r  \nbraid[7]:\t\r  r4n9{c3\t\r  c8}\t\r  –\t\r  r4n8{c8\t\r  c9}\t\r  –\t\r  r4n7{c9\t\r  c5}\t\r  –\t\r  r1c8{n9\t\r  n8}\t\r  –\t\r  r1c5{n7\t\r  n9}\t\r  –\t\r  r3c5{n4\t\r  n8}\t\r  –\t\r  \nr5c5{n9\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  6,\t\r  5,\t\r  4,\t\r  3,\t\r  2,\t\r  1\t\r  \nbraid[7]:\t\r  r7n1{c4\t\r  c8}\t\r  –\t\r  r7n2{c8\t\r  c7}\t\r  –\t\r  r7n3{c7\t\r  c9}\t\r  –\t\r  c4n1{r7\t\r  r6}\t\r  –\t\r  r6c9{n5\t\r  n2}\t\r  –\t\r  r1c9{n2\t\r  n1}\t\r  –\t\r  \nr8c9{n7\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  7\t\r  \nhidden-­‐single-­‐in-­‐a-­‐column\t\r  ==>\t\r  r1c4\t\r  =\t\r  7\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐row\t\r  r1{c5\t\r  c8}{n8\t\r  n9}\t\r  ==>\t\r  r1c7\t\r  ≠\t\r  8,\t\r  r1c3\t\r  ≠\t\r  9,\t\r  r1c3\t\r  ≠\t\r  8,\t\r  r1c2\t\r  ≠\t\r  8\t\r  \nsingles\t\r  ==>\t\r  r2c2\t\r  =\t\r  8,\t\r  r3c2\t\r  =\t\r  7\t\r  \nwhip[2]:\t\r  r7c1{n8\t\r  n9}\t\r  –\t\r  r3c1{n9\t\r  .}\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  8\t\r  \nstr-­‐asc[1]:\t\r  r5c1<r6c1\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  7\t\r  \nwhip[2]:\t\r  r7c5{n8\t\r  n9}\t\r  –\t\r  r1c5{n9\t\r  .}\t\r  ==>\t\r  r6c5\t\r  ≠\t\r  8\t\r  \n \n;;; Resolution state RS3, displayed in Figure 14.10. This is where this example \nbecomes really interesting, because the first g-whips and g-braids appear now (g-\nlabels appear in cells r3c5 and r3c9). \n \ng-­‐whip[6]:\t\r  r3c1{n8\t\r  n9}\t\r  –\t\r  r3c9{n9\t\r  n7-­‐}\t\r  –\t\r  r4n8{c9\t\r  c8}\t\r  –\t\r  r4n9{c8\t\r  c3}\t\r  –\t\r  r4n7{c3\t\r  c5}\t\r  –\t\r  r3c5{n4\t\r  .}\t\r  \n==>\t\r  r3c3\t\r  ≠\t\r  8\t\r  \ng-­‐whip[5]:\t\r  r3c3{n2\t\r  n9}\t\r  –\t\r  r3c1{n9\t\r  n8}\t\r  –\t\r  r3c5{n8\t\r  n7-­‐}\t\r  –\t\r  r4n7{c5\t\r  c9}\t\r  –\t\r  r3c9{n2\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  7\t\r  \ng-­‐braid[6]:\t\r  r3c1{n9\t\r  n8}\t\r  –\t\r  r3c9{n8\t\r  n7-­‐}\t\r  –\t\r  r4n9{c3\t\r  c8}\t\r  –\t\r  r4n8{c9\t\r  c3}\t\r  –\t\r  r4n7{c9\t\r  c5}\t\r  –\t\r  r3c5{n9\t\r  .}\t\r  \n==>\t\r  r3c3\t\r  ≠\t\r  9\t\r  \nstr-­‐asc[1]:\t\r  r2c3<r3c3\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  6\t\r  \ng-­‐braid[6]:\t\r   r3c1{n8\t\r   n9}\t\r   –\t\r   r3c5{n9\t\r   n7-­‐}\t\r   –\t\r   r3c9{n9\t\r   n7-­‐}\t\r   –\t\r   r4n7{c9\t\r   c3}\t\r   –\t\r   r4n8{c9\t\r   c8}\t\r   –\t\r  \nr4n9{c8\t\r  .}\t\r  ==>\t\r  r3c7\t\r  ≠\t\r  8\t\r  \n\n394 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nExercise: check all the z- and t-candidates of these g-whips and g-braids; also \ncheck their right-to-left links. \n \n \n \n \nc1 \n \nc2 \n \nc3 \n \nc4 \n \nc5 \n \nc6 \n \nc7 \n \nc8 \n \nc9 \n \nr1 \nn1 n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5 n6 \nn7            \n \nn7  \n         \n< \n \n \n     n8 n9  \nn1 n2 n3 \nn4 n5      \n           < \n     n2 n3 \nn4 n5 n6 \n           \n \n \n \n     n8 n9  \nn1 n2 n3 \n           \n \nr1 \n \n∧ \n \n \n \n \n \n∨ \n \n \n \n \n \n \n \n \n \n∧ \n \nr2 \n     n2 n3 \nn4 n5 n6 \nn7      n9  \n \nn8  \n    \n \nn1 n2 n3 \nn4 n5 n6 \nn7            \n \n     n5 n6 \n           \n \nn1 n2 n3 \nn4 n5 n6 \nn7      n9  \nn1 n2 n3 \nn4 n5 n6 \nn7      n9  \n \nn4 n5 n6 \nn7           > \n          n3 \nn4 n5 n6 \n           > \n     n2 n3 \nn4           \n           r2 \n \n \n \n∨  \n∧  \n∨       \n \n \n \n \n \nr3 \n      \n       \n     n8 n9 > \n \nn7  \n    \n \n     n2 n3 \nn4 n5 n6 \n     n8 n9  \n \nn4 n5      \n \n \n \nn4      n6 \n     n8 n9  \nn1 n2 n3 \nn4      n6 \n           < \n          n3 \nn4 n5 n6 \n           > \nn1 n2 n3 \nn4 n5 n6 \n           \n \n     n2 n3 \nn4 n5 n6 \n     n8 n9 r3 \n \n \n \n∨    \n∨  \n∨    \n∨ \n \n \n \n∨ \n \nr4 \nn1 n2 n3 \nn4 n5      \n \n< \n     n2 n3 \nn4 n5 n6 \n          \n \n \n \nn7 n8 n9  \n          n3 \nn4           \n \n \n          n3 \nn4      n6 \nn7           > \n     n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5 n6 \n           \n \n \n \n     n8 n9  \nn1 n2 n3 \nn4 n5 n6 \nn7 n8      r4 \n \n \n \n∨ \n \n \n \n∨ \n \n∧ \n \n∨ \n \n∧ \n \n \n \n \n \nr5 \nn1 n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5      \n \n \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9  \n     n2 n3 \n           \n \n \n \nn4 n5 n6 \nn7 n8 n9  \nn1 n2 n3 \nn4 n5      \n \n \n     n2     \nn4 n5 n6 \nn7 n8      > \nn1 n2 n3 \nn4 n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \nn7 n8 n9 r5 \n \n∧      \n∨       \n \n \n \n \n \nr6 \n     n2 n3 \nn4 n5 n6 \nn7            \n \nn9  \n         \n> \n \n          n6 \nn7 n8       \nn1 n2      \n \n \n< \n     n2 n3 \nn4 n5 n6 \nn7            \nn1 n2      \n \nn7 n8       \n           \nn4 n5 n6 \nn7 n8      > \n          n3 \nn4 n5 n6 \nn7           > \nn1 n2 n3 \nn4 n5      \n           r6 \n \n∧    \n∨    \n∧  \n∧   \n \n \n \n∧ \n \nr7 \n           \n     n5 n6 \nn7 n8 n9 > \n \nn4 n5 n6 \n \n< \n \n     n5 n6 \nn7            \nn1 n2 n3 \nn4 n5 n6 \n           < \n          n3 \nn4 n5 n6 \nn7 n8 n9  \n          n3 \nn4 n5 n6 \nn7 n8 n9  \n     n2 n3 \nn4 n5 n6 \nn7 n8      > \nn1 n2      \n \n           \n \n          n3 \nn4 n5 n6 \nn7 n8 n9 r7 \n \n \n \n∨ \n \n \n \n \n \n \n \n∨ \n \n \n \n \n \n∨ \n \nr8 \nn1 n2 n3 \nn4           \n \n< \n          n3 \nn4 n5      \n \n \n     n2 n3 \nn4 n5 n6 \nn7           < \n \nn8  \n         \n> \n     n2 n3 \nn4 n5 n6 \nn7           > \nn1 n2 n3 \nn4 n5 n6 \n  \n \n \nn9  \n         \n \nn1 n2 n3 \nn4 n5 n6 \n           \n \nn1 n2 n3 \nn4 n5 n6 \nn7           r8 \n \n \n \n∨  \n∨  \n∧    \n∧   \n \n∧ \n \n \n \nr9 \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \n     n2 n3 \nn4           \n \n> \nn1 n2 n3 \n \n \n \n \nn9  \n              \n \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \n     n2 n3 \nn4 n5 n6 \nn7 n8       \nn1 n2 n3 \nn4 n5 n6 \nn7 n8       \n          n3 \nn4 n5 n6 \nn7           < \n           \nn4 n5 n6 \nn7 n8      r9 \n \nc1 \n \nc2 \n \nc3 \n \nc4 \n \nc5 \n \nc6 \n \nc7 \n \nc8 \n \nc9 \n \nFigure 14.10. State RS3 of the 9×9 Futoshiki puzzle of Figure 14.8. The g-candidates n7-\nr3c5 \nand n7-\nr3c9 used in the subsequent g-whips and g-braids are underlined \nstr-­‐asc[1]:\t\r  r4c7<r3c7\t\r  ==>\t\r  r4c7\t\r  ≠\t\r  6;\t\r  str-­‐asc[1]:\t\r  r3c8<r3c7\t\r  ==>\t\r  r3c8\t\r  ≠\t\r  6\t\r  \nstr-­‐asc[1]:\t\r  r3c6<r3c7\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  6\t\r  \nbraid[7]:\t\r  r7n1{c4\t\r  c8}\t\r  –\t\r  r7n2{c8\t\r  c7}\t\r  –\t\r  r7n3{c7\t\r  c9}\t\r  –\t\r  c4n1{r7\t\r  r6}\t\r  –\t\r  r6c9{n5\t\r  n2}\t\r  –\t\r  r1c9{n2\t\r  n1}\t\r  –\t\r  \nr8c9{n7\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  6\t\r  \nhidden-­‐single-­‐in-­‐a-­‐column\t\r  ==>\t\r  r2c4\t\r  =\t\r  6\t\r  \n\n14. Transitive constraints and Futoshiki     \n395 \nwhip[7]:\t\r  c4n5{r3\t\r  r7}\t\r  –\t\r  r7n1{c4\t\r  c8}\t\r  –\t\r  r7n2{c8\t\r  c7}\t\r  –\t\r  r7n3{c7\t\r  c9}\t\r  –\t\r  c9n9{r7\t\r  r5}\t\r  –\t\r  c9n6{r5\t\r  r9}\t\r  –\t\r  \nc9n8{r9\t\r  .}\t\r  ==>\t\r  r3c9\t\r  ≠\t\r  5\t\r  \nbraid[7]:\t\r  r7n1{c4\t\r  c8}\t\r  –\t\r  r7n2{c8\t\r  c7}\t\r  –\t\r  r7n3{c7\t\r  c9}\t\r  –\t\r  c4n1{r7\t\r  r6}\t\r  –\t\r  r6c9{n5\t\r  n2}\t\r  –\t\r  r1c9{n2\t\r  n1}\t\r  –\t\r  \nr8c9{n7\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  5\t\r  \nhidden-­‐single-­‐in-­‐a-­‐column\t\r  ==>\t\r  r3c4\t\r  =\t\r  5\t\r  \nwhip[7]:\t\r  c4n4{r4\t\r  r7}\t\r  –\t\r  r7n1{c4\t\r  c8}\t\r  –\t\r  r7n2{c8\t\r  c7}\t\r  –\t\r  r7n3{c7\t\r  c9}\t\r  –\t\r  r2c9{n3\t\r  n2}\t\r  –\t\r  r1c9{n3\t\r  n1}\t\r  –\t\r  \nr8c9{n1\t\r  .}\t\r  ==>\t\r  r4c9\t\r  ≠\t\r  4\t\r  \nbraid[7]:\t\r  r7n1{c4\t\r  c8}\t\r  –\t\r  r7n2{c8\t\r  c7}\t\r  –\t\r  r7n3{c7\t\r  c9}\t\r  –\t\r  c4n1{r7\t\r  r6}\t\r  –\t\r  r6c9{n5\t\r  n2}\t\r  –\t\r  r1c9{n2\t\r  n1}\t\r  –\t\r  \nr8c9{n7\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  4\t\r  \nhidden-­‐single-­‐in-­‐a-­‐column\t\r  ==>\t\r  r4c4\t\r  =\t\r  4\t\r  \ng-­‐braid[7]:\t\r   r3c1{n9\t\r   n8}\t\r   –\t\r   r3c9{n8\t\r   n7-­‐}\t\r   –\t\r   r1n9{c5\t\r   c8}\t\r   –\t\r   r4n9{c8\t\r   c3}\t\r   –\t\r   r4n7{c9\t\r   c5}\t\r   –\t\r  \nr1c5{n9\t\r  n8}\t\r  –\t\r  r5c5{n9\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r3c5{n4\t\r  n8}\t\r  –\t\r  r5c5{n8\t\r  n9}\t\r  –\t\r  r1c5{n9\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  7\t\r  \nstr-­‐asc[2]:\t\r  r5c6<r4c6<r4c5\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  5,\t\r  r4c6\t\r  ≠\t\r  6\t\r  \nhidden-­‐triplets-­‐in-­‐a-­‐row\t\r  r4{n7\t\r  n8\t\r  n9}{c3\t\r  c9\t\r  c8}\t\r  ==>\t\r  r4c9\t\r  ≠\t\r  6,\t\r  5,\t\r  3,\t\r  2,\t\r  1\t\r  \nstr-­‐asc[1]:\t\r  r4c9<r3c9\t\r  ==>\t\r  r3c9\t\r  ≠\t\r  6,\t\r  4,\t\r  3,\t\r  2\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐row\t\r  r3{c1\t\r  c9}{n8\t\r  n9}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  8\t\r  \nstr-­‐asc[1]:\t\r  r4c5<r3c5\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  6\t\r  \nhidden-­‐single-­‐in-­‐a-­‐row\t\r  ==>\t\r  r4c2\t\r  =\t\r  6\t\r  \nstr-­‐asc[2]:\t\r  r8c1<r8c2<r7c2\t\r  ==>\t\r  r8c2\t\r  ≠\t\r  5,\t\r  r8c1\t\r  ≠\t\r  4;\t\r  str-­‐asc[2]:\t\r  r9c3<r9c2<r8c2\t\r  ==>\t\r  r9c3\t\r  ≠\t\r  3,\t\r  4\t\r  \nstr-­‐asc[2]:\t\r  r5c6<r4c6<r4c5\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  4,\t\r  5;\t\r  str-­‐asc[1]:\t\r  r5c6<r4c6\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  r5c8{n2\t\r  n1}\t\r  –\t\r  r5c6{n1\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  r8c6{n2\t\r  n1}\t\r  –\t\r  r5c6{n1\t\r  .}\t\r  ==>\t\r  r9c6\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  r2c3{n2\t\r  n1}\t\r  –\t\r  r9c3{n1\t\r  .}\t\r  ==>\t\r  r3c3\t\r  ≠\t\r  2\t\r  \nhidden-­‐pairs-­‐in-­‐a-­‐row\t\r  r3{n1\t\r  n2}{c6\t\r  c8}\t\r  ==>\t\r  r3c8\t\r  ≠\t\r  4,\t\r  3\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐column\t\r  c8{r3\t\r  r7}{n1\t\r  n2}\t\r  ==>\t\r  r8c8\t\r  ≠\t\r  2,\t\r  1\t\r  \nstr-­‐asc[1]:\t\r  r8c8<r9c8\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  3;\t\r  str-­‐asc[1]:\t\r  r9c8<r9c9\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  4\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐column\t\r  c8{r3\t\r  r7}{n1\t\r  n2}\t\r  ==>\t\r  r5c8\t\r  ≠\t\r  2,\t\r  1\t\r  \nhidden-­‐pairs-­‐in-­‐a-­‐row\t\r  r3{n1\t\r  n2}{c6\t\r  c8}\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  4,\t\r  3\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐column\t\r  c6{r3\t\r  r5}{n1\t\r  n2}\t\r  ==>\t\r  r8c6\t\r  ≠\t\r  2,\t\r  1\t\r  \nstr-­‐asc[1]:\t\r  r8c6<r8c5\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  3,\t\r  2;\t\r  str-­‐asc[1]:\t\r  r8c6<r9c6\t\r  ==>\t\r  r9c6\t\r  ≠\t\r  3\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐column\t\r  c6{r3\t\r  r5}{n1\t\r  n2}\t\r  ==>\t\r  r6c6\t\r  ≠\t\r  2,\t\r  1,\t\r  r4c6\t\r  ≠\t\r  2\t\r  \nsingles:\t\r  r4c6\t\r  =\t\r  3,\t\r  r4c5\t\r  =\t\r  5,\t\r  r3c5\t\r  =\t\r  6\t\r  \nstr-­‐asc[1]:\t\r  r2c3<r3c3\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  5,\t\r  4;\t\r  str-­‐asc[1]:\t\r  r8c6<r9c6\t\r  ==>\t\r  r9c6\t\r  ≠\t\r  4\t\r  \nstr-­‐asc[1]:\t\r  r8c6<r8c5\t\r  ==>\t\r  r8c5\t\r  ≠\t\r  4\t\r  \nnaked-­‐single\t\r  ==>\t\r  r8c5\t\r  =\t\r  7\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐column\t\r  c5{r1\t\r  r5}{n8\t\r  n9}\t\r  ==>\t\r  r9c5\t\r  ≠\t\r  8,\t\r  r7c5\t\r  ≠\t\r  9,\t\r  8\t\r  \nstr-­‐asc[1]:\t\r  r6c5<r7c5\t\r  ==>\t\r  r6c5\t\r  ≠\t\r  4\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐column\t\r  c5{r1\t\r  r5}{n8\t\r  n9}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  9\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐column\t\r  c6{r3\t\r  r5}{n1\t\r  n2}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  2,\t\r  1,\t\r  r1c6\t\r  ≠\t\r  2,\t\r  1\t\r  \nstr-­‐asc[1]:\t\r  r1c6<r1c7\t\r  ==>\t\r  r1c7\t\r  ≠\t\r  4,\t\r  3,\t\r  2\t\r  \nwhip[2]:\t\r  r5c1{n2\t\r  n1}\t\r  –\t\r  r4c1{n1\t\r  .}\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  r1c1{n2\t\r  n1}\t\r  –\t\r  r4c1{n1\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  r1c6{n5\t\r  n4}\t\r  –\t\r  r8c6{n4\t\r  .}\t\r  ==>\t\r  r9c6\t\r  ≠\t\r  5\t\r  \nswordfish-­‐in-­‐columns\t\r  n9{c3\t\r  c5\t\r  c8}{r4\t\r  r5\t\r  r1}\t\r  ==>\t\r  r5c9\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r9c3{n2\t\r  n1}\t\r  –\t\r  c7n1{r9\t\r  r4}\t\r  –\t\r  r4n2{c7\t\r  .}\t\r  ==>\t\r  r9c1\t\r  ≠\t\r  2\t\r  \nwhip[3]:\t\r  r6c5{n3\t\r  n2}\t\r  –\t\r  r6c9{n2\t\r  n1}\t\r  –\t\r  r6c4{n1\t\r  .}\t\r  ==>\t\r  r6c8\t\r  ≠\t\r  3\t\r  \n\n396 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nstr-­‐asc[1]:\t\r  r6c8<r6c7\t\r  ==>\t\r  r6c7\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  c4n3{r5\t\r  r7}\t\r  –\t\r  r7n1{c4\t\r  c8}\t\r  –\t\r  r3n1{c8\t\r  c6}\t\r  –\t\r  c6n2{r3\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  2\t\r  \nnaked-­‐single\t\r  ==>\t\r  r5c4\t\r  =\t\r  3\t\r  \nstr-­‐asc[1]:\t\r  r5c8<r5c7\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  4\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐row\t\r  r7{c4\t\r  c8}{n1\t\r  n2}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  2\t\r  \nhidden-­‐pairs-­‐in-­‐a-­‐column\t\r  c7{n1\t\r  n2}{r4\t\r  r9}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  8,\t\r  7,\t\r  6,\t\r  5,\t\r  4,\t\r  3\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐row\t\r  r9{c3\t\r  c7}{n1\t\r  n2}\t\r  ==>\t\r  r9c5\t\r  ≠\t\r  2,\t\r  1\t\r  \nsingles:\t\r  r2c5\t\r  =\t\r  1,\t\r  r6c5\t\r  =\t\r  2,\t\r  r6c4\t\r  =\t\r  1,\t\r  r7c4\t\r  =\t\r  2,\t\r  r7c8\t\r  =\t\r  1,\t\r  r3c8\t\r  =\t\r  2,\t\r  r3c6\t\r  =\t\r  1,\t\r  r5c6\t\r  =\t\r  2\t\r  \nstr-­‐asc[1]:\t\r  r6c9<r7c9\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  3\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐row\t\r  r9{c3\t\r  c7}{n1\t\r  n2}\t\r  ==>\t\r  r9c2\t\r  ≠\t\r  2\t\r  \nsingles:\t\r  r9c2\t\r  =\t\r  3,\t\r  r8c2\t\r  =\t\r  4,\t\r  r7c2\t\r  =\t\r  5,\t\r  r5c2\t\r  =\t\r  1,\t\r  r1c2\t\r  =\t\r  2,\t\r  r9c5\t\r  =\t\r  4,\t\r  r7c5\t\r  =\t\r  3,\t\r  r3c7\t\r  =\t\r  3,\t\r  r3c3\t\r  =\t\r  4\t\r  \nstr-­‐asc[1]:\t\r  r9c8<r9c9\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  5;\t\r  str-­‐asc[1]:\t\r  r5c1<r6c1\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  4,\t\r  3\t\r  \nsingles:\t\r  r6c9\t\r  =\t\r  3,\t\r  r1c9\t\r  =\t\r  1,\t\r  r8c1\t\r  =\t\r  1,\t\r  r4c1\t\r  =\t\r  2,\t\r  r4c7\t\r  =\t\r  1,\t\r  r9c7\t\r  =\t\r  2,\t\r  r9c3\t\r  =\t\r  1\t\r  \nstr-­‐asc[1]:\t\r  r1c1<r2c1\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  3\t\r  \nsingles:\t\r  r1c1\t\r  =\t\r  3,\t\r  r1c6\t\r  =\t\r  4,\t\r  r6c8\t\r  =\t\r  4,\t\r  r5c7\t\r  ≠\t\r  5,\t\r  r6c3\t\r  ≠\t\r  6\t\r  \nhidden-­‐pairs-­‐in-­‐a-­‐column\t\r  c3{n2\t\r  n3}{r2\t\r  r8}\t\r  ==>\t\r  r8c3\t\r  ≠\t\r  6,\t\r  5\t\r  \nwhip[2]:\t\r  r2c8{n5\t\r  n3}\t\r  –\t\r  r8c8{n3\t\r  .}\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  5\t\r  \nhidden-­‐single-­‐in-­‐a-­‐row\t\r  ==>\t\r  r9c1\t\r  =\t\r  5\t\r  \nstr-­‐asc[1]:\t\r  r6c1<r7c1\t\r  ==>\t\r  r7c1\t\r  ≠\t\r  6;\t\r  str-­‐asc[1]:\t\r  r9c8<r9c9\t\r  ==>\t\r  r9c9\t\r  ≠\t\r  6\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐column\t\r  c9{r4\t\r  r9}{n7\t\r  n8}\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  8,\t\r  7,\t\r  r5c9\t\r  ≠\t\r  8,\t\r  7,\t\r  r3c9\t\r  ≠\t\r  8\t\r  \nsingles:\t\r  r3c9\t\r  =\t\r  9,\t\r  r3c1\t\r  =\t\r  8\t\r  \nstr-­‐asc[1]:\t\r  r8c9<r7c9\t\r  ==>\t\r  r8c9\t\r  ≠\t\r  6\t\r  \nx-­‐wing-­‐in-­‐rows\t\r  n6{r8\t\r  r9}{c6\t\r  c8}\t\r  ==>\t\r  r6c6\t\r  ≠\t\r  6,\t\r  r5c8\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  r7c9{n6\t\r  n4}\t\r  –\t\r  c9n5{r8\t\r  .}\t\r  ==>\t\r  r5c9\t\r  ≠\t\r  6\t\r  \nsingles\t\r  and\t\r  a\t\r  whip[2]\t\r  (r2n3{c8\t\r  c3}\t\r  –\t\r  r2n2{c3\t\r  .}\t\r  ==>\t\r  r2c9\t\r  ≠\t\r  4)\t\r  to\t\r  the\t\r  end\t\r  \n14.6. Modelling transitive constraints \nLet us now discuss our modelling of Futoshiki and see how it can be generalised \nto transitive constraints in any CSP. \nDefinition: a constraint c is transitive if, whenever one has linked-by(l1, l2, c) \nand linked-by(l2, l3, c) for labels l1, l2 and l3, then one also has linked-by(l1, l3, c).  \nAn ascending chain has been given the same rating as a whip[1], independently \nof its length, but, in the current approach, if it appears as a part of a whip or a braid, \nit still contributes to the length of the whip by its real length. (This did not appear in \nthe example of section 14.5, because all the g-whips and g-braids included only \ninequality sub-chains of length one.) This may seem inconsistent. However, there is \na very simple way out of this dilemma: instead of modelling the inequality \nconstraints by defining direct contradiction links only between candidates in \nadjacent cells related by an inequality sign, one can define contradiction links \nbetween candidates in any two cells belonging to an ascending chain.  \n\n14. Transitive constraints and Futoshiki     \n397 \nThus, in an n×n Futoshiki, if C0, C1, …, Ck, is an ascending chain and ni is any \nNumber, niC0 would not only  be linked by < to n1C1, n2C1, …, niC1, but also to \nn1C2, n2C2, …, ni+1C2, to n1C3, n2C3, …, ni+2C3 and so on.  \nAs a result of using these new direct links, the whole notion of an ascending \nchain could disappear from the resolution paths (but not the notions of a hill and a \nvalley). What is used here is only the transitivity property of the < constraint; the \nunderlying order does not even have to be total. Obviously, this technique can be \napplied to any transitive constraint in any CSP and it may seem to be an appropriate \ngeneral way of dealing with the propagation of such constraints. \nHowever, which of the above two representations one should choose for a \ntransitive constraint, with the consequence of modifying in possibly radical ways the \nrating of all the chain patterns relying partly on such constraints, is ultimately a \nmodelling decision. In the Futoshiki CSP, the decision should take into account \nwhich kinds of readers or players are aimed at: keeping in mind our requirement that \neach step in the resolution path should be understandable, it would certainly be a \nvery bad idea for beginners; but for advanced players, it may be compulsory in order \nto avoid the boredom of displaying so many obvious steps. \nNotice that, even if these additional links are adopted as primary constraints, it \ndoes not entail that a g-whip or g-braid will never have to consider several parts of \nan ascending chain: it may need to justify t-candidates in its subsequent parts by the \nexplicit presence of an intermediate right-linking candidate. \n14.7. Hints for further studies on Futoshiki \nAs an abstract CSP, pure n×n Futoshiki could become an interesting topic for a \ndetailed case study in the same vein as what we have done for Sudoku, with two \nadditional possibilities: 1) as grid size n can take any value (it does not have to be a \nsquare m2), it should be easier to analyse how its statistical properties vary with it, in \nparticular what the ratios of minimal instances having various T&E depths are; 2) \nfor any fixed size n, the “geometry” of constraints and therefore their initial density \nand tightness can be varied with much more freedom. (See section 17.2.2 for a \ndefinition and a discussion of these two notions.) We shall leave all this to \nmotivated readers, but let us make a few remarks on the generation of minimal \npuzzles. \nGiven a complete n×n Latin Square LS (all the cells filled with values), it can be \ncompleted further into a complete “impure” Futoshiki grid by adding the correct \ninequality sign between any pair of cells adjacent in a row or a column; there are \nN = 2n(n-1) such signs. Now forgetting all the values in the cells, one gets a \ncomplete “pure” Futoshiki grid FP. FP is guaranteed by construction to have a \n\n398 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nFutoshiki solution, but it is not guaranteed to have a unique one. It would be nice to \nhave some theorem like: “an n×n pure Futoshiki puzzle in which all the inequalities \nbetween adjacent cells are specified has a unique solution”. But we have not been \nable to find a simple proof of this. Indeed, we did not try hard, because we  can \nmerely discard such an instance if it does not have a unique solution.  \nIn any case, any minimal pure Futoshiki puzzle can be obtained from a complete \nLatinSquare by applying this process followed by a top-down algorithm similar to \nthat described in chapter 6. \nGiven such a top-down generator, it would be easy to adapt it as in chapter 6 to \nmake it controlled-bias (but there is currently no available source code). A formula \nsimilar to that in chapter 6 can be proven; in n×n Futoshiki, the number of inequality \nsigns in a complete grid is N = 2n(n-1) and N plays the role of the number of cells in \nSudoku. If k is the number of remaining clues, one has the “controlled-bias” \nformula: P(k+1) / P(k) = (k+1) / (N-k), which allows to compute unbiased statistics \nfrom those obtained with collection provided by the controlled-bias generator. \n14.7.1. Combining the Sudoku and Futoshiki constraints: Sudoshiki \nWe think Futoshiki, as a game, will never become as popular as Sudoku:  \n– an inequality constraint is too weak; it entails too few consequences when a \ncandidate is asserted (contrary to a Sudoku constraint of bn type), unless it is \nincluded in a long ascending chain. The maximal length of ascending chains is n-1 \n(in which case all the cells in the chain are completely solved). If the length is close \nto this value, the chain will “most of the time” make parts of the puzzle close to \ntrivial. As a result, there cannot be many long chains in a non easy puzzle and \nhaving to use repeatedly the inequality constraint (even if written in the extended \nform introduced in section 14.6) for many short ones is quite tedious. \n– g-labels also are too weak; their action is too local (only between cells \nconnected by an inequality). g-labels in Sudoku or N-Queens are more exciting. \n– besides ascending chains, hills and valleys, there does not seem to be many \npossibilities of finding Futoshiki-specific resolution rules. \nIn this perspective, another game we think worth exploring could be called \n“Sudoshiki” in fake-japanese: restrict grid size in the same way as in Sudoku \n(n=m2) and combine the constraints of Sudoku and Futoshiki, i.e. add to Futoshiki \nthe block constraints. This should palliate the above-mentioned weakness of the \ninequality constraints. Sudoshiki has all the g-labels of Sudoku plus those of \nFutoshiki. Probably, for better complementarity with Sudoku, the most interesting \nform would be “pure” Sudoshiki, in which clues can only be inequalities. Pure \nSudoshiki has the same controlled-bias formula as Futoshiki, which opens the door \nto statistical analyses. \n\n \n15. Non-binary arithmetic constraints and Kakuro \nThe logico-arithmetic game of Kakuro (abbreviation of japanese “kasan kurosu”, \nbest translated as “cross sums”, by analogy with crosswords) is often presented as \nthe numerical, “cross-cultural” analogue of crosswords. Obviously, this can only \napply to the structure of the grid, not to the game itself: deprived of any linguistic or \ncultural aspect similar to wordplay and knowledge about vocabulary, it may look to \ncrosswords addicts as a very poor analogue. Nevertheless, this is irrelevant to our \npurposes. In the context of the present book, Kakuro is indeed worth some \nconsideration, for the following two main reasons: \n–  unlike all our previous examples, in its natural formulation, it has non-binary \narithmetic constraints; in the first page of the Introduction we only alluded to the \npossibility of reducing such constraints to binary ones by introducing new CSP \nvariables; we shall now show how this general idea can be made to work in practice; \nnotice that this must be done as far as possible in such a way that the additional CSP \nvariables do not have too large domains – i.e. in an application-specific way; \n– it has g-labels that are more complex than in our previous examples and that \nrequire some theoretical analysis in order to provide them with a simplified \nrepresentation; above all, these g-labels illustrate the importance of the “saturation” \ncondition introduced in the definition of chapter 7 with respect to efficiency. \nThere are also more technical reasons: \n– in addition to its set of “natural” ones, Kakuro has additional CSP variables \nthat depend on the instance under consideration; (in all our previous examples, the \nCSP variables were not concerned by such dependency, even if the other constraints \nwere); these variables are intrinsically related to the non-binary constraints; \n– the links between the labels for the “natural” CSP variables and for the \nadditional ones may seem to be non-symmetric (they are based on set-theoretic \nmembership), but this will allow to illustrate the difference between the abstract \nrelation “linked” (which must be symmetric) and the semantic relations on which it \nmay be based; (in Futoshiki, the initial “<” relation between two cells was also non-\nsymmetric but it was replaced in a rather obvious way by an equivalent set of \nsymmetric non-equality links between labels for these cells); \n– given an instance, g-labels do not depend on its resolution state, in \nconformance with our general definition (g-labels are structural); but they depend on \nthe instance under consideration;  \n\n400 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– it has Naked Subsets, but it does not have systematically corresponding \nHidden ones; and it has no Super-Hidden ones if we strictly apply the general \ndefinitions of chapter 8, although more complex similar patterns could be defined.  \nNotice that there is a straightforward translation of a Kakuro puzzle into a linear \nprogramming problem, a kind of problem for which there are very efficient (widely \nand freely available) programs – much more efficient in this case than any general \nCSP solving program. As mentioned in the general CSP case, if solving efficiency \nwas our only requirement, all of this chapter would be totally irrelevant. \n15.1. Introducing Kakuro \n15.1.1. Definition of Kakuro \nKakuro is played on a k×k square grid (with arbitrary k), with two types of cells, \ncalled “black” and “white”. As in crosswords, black cells are used both as separators \nand as clue holders (in crosswords, they hold references to the clues rather than the \nclues themselves, but this is irrelevant). The upper row and the leftmost column \ncontain only black cells. \nFigure 15.1 shows the (standard) graphical representation of a Kakuro puzzle \nthat will be used in this book. “Black” cells are in light grey; they are either empty \nor separated into two parts by a descending diagonal. A horizontal [respectively a \nvertical] clue, if any, occupies the upper rightmost [resp. lower leftmost] half of the \ncell. As in all our previous examples, the white cells can be pre-filled with small \ndigits representing their possible values, i.e. with candidate-Numbers. Why we have \nunderlined some of the clues will be explained in section 15.1.3. \nIn the following definitions, although “block” is often used instead, we adopt the \nword “sector”, in order to avoid confusion with blocks in Sudoku: sectors in Kakuro \ncannot be used in the same ways as blocks in Sudoku and they do not have the same \nrelationship with g-labels and whips[1].  \nDefinitions: a horizontal sector [respectively a vertical sector]  is a maximal set \nof contiguous white cells in the same row [resp. column].  \nA horizontal [resp. vertical] sector is thus always delimited by two black cells or \nby one black cell and the right end of a row [resp. the bottom of a column]; \n“contiguous” means that there is no black cell between any two of its white cells.  \nDefinition: The black cell horizontally [resp. vertically] just before the first cell \nof a sector is called the horizontal [resp. vertical] controller of this sector; we also \nsay it is the controller of each cell in the sector. \n\n15. Non-binary arithmetic constraints and Kakuro     \n401 \nAs far as we know, this notion of a controller has not been made explicit before, \nbut we find it very convenient for many of our forthcoming definitions. Obviously, \neach white cell belongs to one and only one horizontal [resp. vertical] sector and it \nhas one and only one horizontal [resp. vertical] controller, whether or not this \ncontroller contains a clue (as defined below) for it.  \n \n \n K \n  \n \n      \n 11 \n \n      \n 45 \n  \n \n      \n 11 \n \n      \n 7 \n \n \n  \n \n \n      \n 10 \n \n      \n 13 \n \n  \n \n     12 \n 16 \n \n \n \n \n \n \n      \n 4 \n \n     15 \n 45 \n \n \n \n     35 \n  \n \n \n \n \n \n \n     11 \n 19 \n \n \n \n \n \n     11 \n  \n \n \n \n \n      \n 7 \n \n     11 \n 34 \n \n \n \n \n      \n 7 \n \n      \n 15 \n \n     38 \n  \n \n \n \n \n \n \n \n      9 \n  \n \n \n \n \n  \n \n      \n 4 \n \n     12 \n 13 \n \n \n \n \n \n     18 \n 4 \n \n \n \n \n     15 \n  \n \n \n \n \n     24 \n  \n \n \n \n \n \n      \n 25 \n \n      \n 7 \n \n        8 \n  \n \n \n \n \n     24 \n 25 \n \n \n \n \n \n \n \n \n      \n 5 \n \n      7 \n 13 \n \n \n \n \n      \n 16 \n \n     21 \n 7 \n \n \n \n \n     15 \n  \n \n \n \n \n \n     17 \n  \n \n \n \n \n \n \n     11 \n  \n  \n \n \n \n \n  \n \n     29 \n  \n \n \n \n \n \n  \n \nFigure 15.1. An 11×11 Kakuro puzzle (clues of #M72601, from atksolutions.com) \nIn a Kakuro puzzle, all the white cells are initially empty and the goal is to find \nfor each of them a value in the set of digits {1, …, 9} (independent of grid size) \nsuch that these values satisfy the following two types of constraints: \n–  the constraints of “mutual exclusion” in each sector: in any (horizontal or \nvertical) sector, the same digit may not appear twice; but, contrary to all our \nprevious examples, there is no such constraint globally in each row or column (in \nany case, it would be impossible to satisfy it for grids of size larger than nine – \nunless the set of digits is extended beyond 9); \n– the sum constraints defined by the clues in the black cells, as follows.  \n\n402 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nA black cell C may contain zero, one or two types of clues: \n– a horizontal clue S is an integer in the uppermost right corner of C meaning \nthat the sum of the digits in the horizontal sector it controls must be equal to S;  \n– a vertical clue S is an integer in the lowermost left corner of C meaning that \nthe sum of the digits in the vertical sector it controls must be equal to S. \nAs a result of the above definitions, the maximal size of any sector is nine. If \nthere is a horizontal [resp. vertical] clue S in a black cell, we also say that this clue \ncontrols the horizontal [resp. vertical] sector controlled by the black cell. If p is the \nsize of the sector, we call (S, p) the parameters of the sector or of the clue.  We say \nthat a digit is (S, p)-compatible if there exists at least one combination of p digits \nwith sum S.  \n15.1.2. Miscellaneous remarks on Kakuro \nAs in all our previous examples, a well-formed Kakuro puzzle is supposed to \nhave one and only one solution. This is “guaranteed” by most of the websites \nproposing Kakuro puzzles and all the examples we shall deal with do satisfy it (but \nno minimality condition is ever evoked). \nEven if the global grid is square, the “real” one, i.e. the set of white cells, can \nhave any shape one may want: it suffices to put enough black cells in the rightmost \ncolumns and/or in the lower rows. In particular, rectangular grids will often appear. \nThe grid does not have to be simply connected (i.e. it may have an ulimited number \nof holes, made of isolated or grouped black cells). However, it must be connected (if \nblack cells are considered as the ocean, it may have neither separate “continents” \nnor “islands” in the holes), otherwise it would be equivalent to several independent \ngrids (see section 15.7 for a more formal definition). \nA horizontal or vertical clue cannot be greater than 45. In case it is 45 (which \nimplies that it controls 9 cells), considering the general constraint that all the \ncandidate-Numbers in the sector must be different, it does not convey any content \nbeyond the boundary information. Some websites adopt the convention of \ndiscarding it, but a few things will be easier to formulate if, on the contrary, we \nmake it compulsory. \nThere is often a convention that no clue bears on only one white cell; we adopt it \nfor definiteness, but this does not have much impact on our forthcoming analyses. In \nany case, this situation would fall under those examined in section 15.7. \nThere is also sometimes an implicit convention that every sector has an explicit \nclue; the reason is that sectors with no clue allow many more possibilities for their \ncells (with no sum restriction in a sector of size p, any of the 9!(9-p)!/p! \n\n15. Non-binary arithmetic constraints and Kakuro     \n403 \ncombinations of p different values is allowed), which makes the puzzle much more \ndifficult to solve. As it has no impact on our theoretical analyses, we do not adopt it. \nThere is a total of 120 different legitimate clues in a puzzle, i.e. of (S, p) \ncompatible pairs. As these are easily computable or available on many websites, we \ndo not list them here. Following the vocabulary used on some websites, we shall \nalso speak of an (S, p) clue as an “S-in-p”. \n15.1.3. “Magic” sectors \nCombinations of digits that can appear in a sector will play a major role in the \nsequel. For certain clues, depending on the (S, p) pair of the sector they control, \nthere is only one possible combination of Numbers fulfilling the sum constraint \n(notwithstanding all the possible permutations of these Numbers within the \ncontrolled cells). There are thirty four such “magic” cases (that can easily be \ncomputed or found on several Kakuro websites). By abuse of language, when the \ncontext is clear, we shall speak of “magic” sectors and “magic” sums, but what’s \n“magic” is only the (S, p) pair. \n \n \nSector  \nSum \nCombination \nsize \n \n \n \n2 \n3 \n12 \n2 \n4 \n13 \n2 \n16 \n79 \n2 \n17 \n89 \n3 \n6 \n123 \n3 \n7 \n124 \n3 \n23 \n689 \n3 \n24 \n78 9 \n4 \n10 \n1234 \n4 \n11 \n1235 \n4 \n29 \n5789 \n4 \n30 \n6789 \n5 \n15 \n12345 \n5 \n16 \n12346 \n5 \n34 \n46789 \n5 \n35 \n56789 \n6 \n21 \n123456 \n \nSector  \nSum \nCombination  \nsize \n6 \n22 \n123457 \n6 \n38 \n356789 \n6 \n39 \n456789 \n7 \n28 \n1234567 \n7 \n29 \n1234568 \n7 \n41 \n2456789 \n7 \n42 \n3456789 \n8 \n36 \n12345678 \n8 \n37 \n12345679 \n8 \n38 \n12345689 \n8 \n39 \n12345789 \n8 \n40 \n12346789 \n8 \n41 \n12356789 \n8 \n42 \n12456789 \n8 \n43 \n13456789 \n8 \n44 \n23456789 \n9 \n45 \n123456789 \nTable 15.1. The 34 “magic” combinations \nAs these cases are the main starting points for the solution of many puzzles and \nthey will play a particular role in our modelling choices, they will always be \n\n404 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nunderlined in our graphical representations (as in Figure 15.1). Table 15.1 gives the \nfull list of these thirty four “magic” cases, ordered by sector size. Notice that the 34 \ncorresponding combinations constitute only a very small part of all the possible \ncombinations (502), for sector-size p varying from 2 to 9 and sum S from 3 to 45. \nOf course, the only “magic” here is no more than pure arithmetic – typical \nexamples of propositions that Kant would have classified as synthetic a priori. In \nmodern philosophy, especially after the development of formal logic since the \nbeginning of the twentieth century, there has been a strong resistance to the idea that \nsome mathematical propositions could be synthetic a priori. This is often based on \nboth an implicit overly formalistic ideology and a misunderstanding of the meaning \nof these words in Kant’s view. \nFor Kant, synthetic means that these propositions increase knowledge (with \nrespect to the original concepts); a priori means that they are anterior to experience \n(i.e. they are logically anterior to observation or experimentation, they can be \nreached without them). From this logical anteriority, formalists argue that these \npropositions are analytic, because they can be (formally) deduced from the axioms. \nBut what “analytic” means for Kant cannot be expressed in such anachronically \nformalistic terms as “provable from the definitions and axioms by a more or less \ncomplex proof”. It means included in the very idea of the concepts involved, \nreachable by mentally analysing this very idea. [This is not to suggest that the “very \nidea” of these concepts should be construed as some eternal essence (a meaningless \nnotion in our view); perhaps the best way of approximating it in modern terms is to \nsay that it should be intuitively conceivable to choose it as an axiom in some \nreasonable axiom system.] \nDepending on how arithmetic and addition are conceived, it may be debated \nwhether commutativity of addition should be considered as analytic or synthetic. \nBut why, for some values of S and p, there is only one possible combination of p \ndifferent digits with sum S, and why there are exactly 34 such cases, this is \nundoubtedly not included in the “very idea” of addition, even though this can easily \nbe proven from (any formalisation of) the definition of addition.  \nSimilarly, the very idea of addition, in and of itself, does not include any reason \nwhy there are exactly one hundred and twenty (S, p) pairs such that there is at least \none combination of p digits with sum S. Or why, for any value of q with 2 ≤ q ≤ 12, \nthere exist (S, p) pairs allowing exactly q different combinations of p different digits \nwith sum S, except for q = 10, in which case there is no such (S, p) pair (see \nsubsection 15.1.4). Generally speaking, theorems (or such exotic properties as above \nor as those that will appear when we study g-labels) have a cost (in terms of proof \ncomplexity) and the most interesting ones are generally not “mentally included” in \nthe basic concepts and axioms of the theories. \n\n15. Non-binary arithmetic constraints and Kakuro     \n405 \n15.1.4. Non-magic sectors \nFor our forthcoming modelling of Kakuro as a CSP, it must be noted that, \nbeyond the above “magic” cases admitting only one combination, the number q of \ndifferent combinations of p different digits having sum S remains bounded by 12 for \nany consistent (S, p) pair. The largest numbers of combinations are obtained when \np = 5, 4 and 6; and the number q is 12 in only two cases:  \n(20, 4) → {1289 1379 1469 1478 1568 2369 2378 2459 2468 2567 3458 3467} \n(25, 5)→ {12589 12679 13489 13579 13678 14569 14578 23479 23569 23578 24568 34567} \nFor 1 ≤ q ≤ 12, Table 15.2 gives the number N(q) of (S, p) pairs allowing q \ndifferent combinations of p different digits with sum S. The total Σ(q=1,…,12) q×N(q) is \nequal to 502, the number of possible digit combinations, for any S and p. This may \ngive the impression that one has to deal with only small numbers of possibilities for \neach value of (S, p), but this would be forgetting that any (S, p) pair can appear in a \npuzzle, so that: 1) there are globally 502 possible combinations one may have to \nconsider and 2) some of these give rise to huge numbers of permutations. \n \n \nq \n1 \n2 \n3 \n4 \n5 \n6 \n7 \n8 \n9 \n10 11 12 \nNumber N(q) of \n(S, p) pairs having q \ndigit combinations \n34 16 16 10 \n8 \n4 \n8 \n10 \n4 \n0 \n8 \n2 \nTable 15.2. Number N(q) of (S, p) pairs that are instantiated by q digit combinations. \nAs for the sectors that have no clue, the relevant data appearing in Table 15.3 \nmay seem much less enticing: in a sector of size n, there are C(9, n) possible \ncombinations, i.e. upto 126 in the worst cases (which do not occur for the largest \nsector sizes). This is why most puzzles proposed as games have no sector deprived \nof a clue. However, possible combinations for such no-clue sectors convey no \ninformation beyond that defined by mutual exclusion within the boundaries and it \nwill not be necessary to take them explicitly into consideration in our theoretical \nanalyses. \n \n \nSector size p \n1 \n2 \n3 \n4 \n5 \n6 \n7 \n8 \n9 \nNumber  of combinations \nC(9, p) = 9! / p! / (9-p)! \n9 \n36 84 126 126 84 36 \n9 \n1 \nTable 15.3. Number of combinations with non-predefined sum, as a function of sector size. \n\n406 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n15.1.5. Pseudo-magic cases \nThere are 34 magic cases and there are also twenty-eight cases, given in Table \n15.4, of non-magic (S, p) pairs that have digits (up to five) common to all their \ncombinations. This happens only when there are no more than five combinations. \nThese cases will also play a particular role in our modelling of Kakuro as a CSP, \nbecause digits common to all the (S, p)-compatible combinations are as good for \nmany purposes as all the (S, p)-compatible digits in the “magic” cases. As far as we \nknow, these “pseudo-magic” cases have never before been explicitly considered as \nforming a family worth of interest (although each may have been used implicitly in \nresolution, in the form: “this digit must be somewhere in this sector, therefore …”). \n \n(p, S)  \npseudo-magic \ncombinations \n \n \ndigits \n(3,\t\r  8)\t\r  \t\r  \t\r  \n1\t\r  \t\r  \n\t\r  \n125\t\r  \t\r  134\t\r  \n(4,\t\r  12)\t\r  \t\r  \n1,\t\r  2\t\r  \n\t\r  \n1236\t\r  \t\r  1245\t\r  \n(4,\t\r  13)\t\r  \t\r  \n1\t\r  \t\r  \n\t\r  \n1237\t\r  \t\r  1246\t\r  \t\r  1345\t\r  \n(5,\t\r  17)\t\r  \t\r  \n1,\t\r  2,\t\r  3\t\r  \t\r  \n\t\r  \n12347\t\r  \t\r  12356\t\r  \n(5,\t\r  18)\t\r  \t\r  \n1,\t\r  2\t\r  \n\t\r  \n12348\t\r  \t\r  12357\t\r  \t\r  12456\t\r  \n(5,\t\r  19)\t\r  \t\r  \n1\t\r  \t\r  \n\t\r  \n12349\t\r  \t\r  12358\t\r  \t\r  12367\t\r  \t\r  12457\t\r  \t\r  13456\t\r  \n(5,\t\r  31)\t\r  \t\r  \n9\t\r  \t\r  \n\t\r  \n16789\t\r  \t\r  25789\t\r  \t\r  34789\t\r  \t\r  35689\t\r  \t\r  45679\t\r  \n(5,\t\r  32)\t\r  \t\r  \n9\t\r  \n\t\r  \n26789\t\r  \t\r  35789\t\r  \t\r  45689\t\r  \n(5,\t\r  33)\t\r  \t\r  \n9\t\r  \t\r  \n\t\r  \n36789\t\r  \t\r  45789\t\r  \n(6,\t\r  23)\t\r  \t\r  \n1,\t\r  2,\t\r  3,\t\r  4\t\r  \t\r   \t\r  \n123458\t\r  \t\r  123467\t\r  \n(6,\t\r  24)\t\r  \t\r  \n1,\t\r  2,\t\r  3\t\r  \t\r  \n\t\r  \n123459\t\r  \t\r  123468\t\r  \t\r  123567\t\r  \n(6,\t\r  25)\t\r  \t\r  \n1,\t\r  2\t\r  \t\r  \n\t\r  \n123469\t\r  \t\r  123478\t\r  \t\r  123568\t\r  \t\r  124567\t\r  \n(6,\t\r  26)\t\r  \t\r  \n1\t\r  \t\r  \n\t\r  \n123479\t\r  \t\r  123569\t\r  \t\r  123578\t\r  \t\r  124568\t\r  \t\r  134567\t\r  \n(6,\t\r  34)\t\r  \t\r  \n9\t\r  \t\r  \n\t\r  \n136789\t\r  \t\r  145789\t\r  \t\r  235789\t\r  \t\r  245689\t\r  \t\r  345679\t\r  \n(6,\t\r  35)\t\r  \t\r  \n8,\t\r  9\t\r  \t\r  \n\t\r  \n146789\t\r  \t\r  236789\t\r  \t\r  245789\t\r  \t\r  345689\t\r  \n(6,\t\r  36)\t\r  \t\r  \n7,\t\r  8,\t\r  9\t\r  \t\r  \n\t\r  \n156789\t\r  \t\r  246789\t\r  \t\r  345789\t\r  \n(6,\t\r  37)\t\r  \t\r  \n7,\t\r  8,\t\r  9\t\r  \t\r  \n\t\r  \n256789\t\r  \t\r  346789\t\r  \n(7,\t\r  30)\t\r  \t\r  \n1,\t\r  2,\t\r  3,\t\r  4,\t\r  5\t\r  \t\r  \n1234569\t\r  \t\r  1234578\t\r  \n(7,\t\r  31)\t\r  \t\r  \n1,\t\r  2,\t\r  3,\t\r  4,\t\r  7\t\r  \t\r  \n1234579\t\r  \t\r  1234678\t\r  \n(7,\t\r  32)\t\r  \t\r  \n1,\t\r  2,\t\r  3\t\r  \n\t\r  \n1234589\t\r  \t\r  1234679\t\r  \t\r  1235678\t\r  \n(7,\t\r  33)\t\r  \t\r  \n1,\t\r  2,\t\r  6\t\r  \n\t\r  \n1234689\t\r  \t\r  1235679\t\r  \t\r  1245678\t\r  \n(7,\t\r  34)\t\r  \t\r  \n1\t\r  \n\t\r  \n1234789\t\r  \t\r  1235689\t\r  \t\r  1245679\t\r  \t\r  1345678\t\r  \n(7,\t\r  35)\t\r  \t\r  \n5\t\r  \n\t\r  \n1235789\t\r  \t\r  1245689\t\r  \t\r  1345679\t\r  \t\r  2345678\t\r  \n(7,\t\r  36)\t\r  \t\r  \n9\t\r  \n\t\r  \n1236789\t\r  \t\r  1245789\t\r  \t\r  1345689\t\r  \t\r  2345679\t\r  \n(7,\t\r  37)\t\r  \t\r  \n4,\t\r  8,\t\r  9\t\r  \n\t\r  \n1246789\t\r  \t\r  1345789\t\r  \t\r  2345689\t\r  \n(7,\t\r  38)\t\r  \t\r  \n7,\t\r  8,\t\r  9\t\r  \n\t\r  \n1256789\t\r  \t\r  1346789\t\r  \t\r  2345789\t\r  \n(7,\t\r  39)\t\r  \t\r  \n3,\t\r  6,\t\r  7,\t\r  8,\t\r  9\t\r  \t\r  \n1356789\t\r  \t\r  2346789\t\r  \n(7,\t\r  40)\t\r  \t\r  \n5,\t\r  6,\t\r  7,\t\r  8,\t\r  9\t\r  \n1456789\t\r  \t\r  2356789\t\r  \nTable 15.4. The 28 “pseudo-magic” (sector size, sum) pairs with digits common to all their \ncombinations \n\n15. Non-binary arithmetic constraints and Kakuro     \n407 \nIt should now be noted that, if the analogy with crosswords had to be pushed \nfurther than mere grid structure, knowledge about words would have to be compared \nwith knowledge about magic sectors (Table 15.1) and pseudo-magic cases (Table \n15.4) [and also about g-combinations – see section 15.5]. This appears to us as the \nmain limitation of Kakuro as a game: from a player’s point of view, we can easily \nimagine that there is some pleasure in crosswords (because words are the stuff our \nlives are made of and good crosswords propose unexpected definitions of them); we \ncan also imagine that there is some pleasure in finding complex patterns in a Sudoku \ngrid, because such patterns rely on some fixed visible grid structure; but it is hard to \nimagine that there could be any pleasure in memorising so many combinations of \ndigits or in spending time in consulting tables containing  them (however, this may \nbe due to our lack of imagination in this domain). In any case, this digression does \nnot lessen the theoretical interest of Kakuro in itself or for the purposes of this book. \n15.2. Modelling Kakuro as a CSP \nIn this section, we show how Kakuro can be modelled as a CSP according to the \ngeneral principles of Part I, in spite of having non-binary constraints (they can \nindeed be very far from binary, as some of them can bear on up to nine variables). \n15.2.1. Sorts and CSP variables of the Kakuro CSP \nFor Kakuro on a k×k grid, we adopt the same Row and Column sorts as for \nLatinSquare, but with domains adjusted to grid size, i.e. with respective sets of \nconstant symbols {r1, …, rk} and {c1, …, ck}. We also adopt a sort Number \nindependent of grid size, with set of constant symbols {n1, n2, …, n9}. Depending \non how we initialise the CSP variables, we can also introduce a sort \nCompatSH,pH,SV,pV instead of Number for each legitimate  (SH, pH) and (SV, pV) pairs, \nwith set of constant symbols Compat(SH, pH, SV, pV), the set of (SH, pH)-compatible \nand (SV, pV)-compatible digits. In the sequel, we shall adopt this latter possibility. \nWe define a sort Combination, with set of constant symbols the set Comb of all \nthe symbols n1n2… made by glueing p (for any p with 1 ≤ p ≤ 9) different digits in \nincreasing order; see the examples for (S, p) = (20, 4) and (S, p) = (25, 5) in section \n15.1.4. \nIn relation with sectors having no clue, we introduce a sub-sort Combinationp of \nCombination, with set of constant symbols the set Comb(p) of all the symbols \nn1n2…np made by glueing together exactly p different digits in increasing order \n(with no sum constraint).  \nLast but nor least, for each digit p and sum S, we also define a sub-sort \nCombinationS,p of Combination (and of Combinationp), with set of constant symbols \n\n408 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nthe set Comb(S, p) of all the symbols n1n2…np made by glueing together exactly p \ndifferent (S, p)-compatible digits in increasing order and with sum S. The elements \nin Comb(S, p) represent all the possibilities for a sector controlled by parameters \n(S, p), notwithstanding the order of the digits. \nRemarks:  \n– adopting an increasing order for the constant symbols of sorts Combination, \nCombinationp and CombinationS,p is a mere notational choice, unrelated with any \nconsideration about permutations; \n– we shall make an abuse of language by almost systematically identifying an \nabstract symbol in Comb, Comb(p) or Comb(S, p) with the subset of digits from \nwhich it is built.  \n15.2.1.1. The “natural” Xrc CSP variables \nThe “natural” CSP variables of k×k Kakuro, corresponding to the original \nproblem formulation, are all the Xr°c° such that r° is in {r1, …, rk}, c° is in \n{c1, …, ck} and cell (r°, c°) is white. They are thus different for different patterns of \nblack cells. The domain of variable Xrc is Compat(SH, pH, SV, pV), where (SH, pH) \nand (SV, pV) are its horizontal and vertical parameters. It should be noticed that this \nentails in practice that most of the obvious initial domain restrictions of the white \ncells (which may be the main stuff for beginners to deal with) are supposed to be \ndone before the start of the resolution process proper. Our main purpose in this \nchoice is to avoid endless boring eliminations at the start. \n15.2.1.2. The Xrn and Xcn CSP variables \nContrary to the previous Sudoku and Futoshiki examples, there are in general no \nXr°n° or Xc°n° CSP variables associated with all the (Row, Number) or (Column, \nNumber) pairs, even limited to sectors, because there is in general no constraint \nrelative to the presence of each Number in each Row or Column.  \nHowever, there is a major exception and it is related to the “magic” sectors. \nGiven a horizontal “magic” sector of size p, controlled by black cell (r°, c°) with \nhorizontal clue S and associated with the unique combination C = {n1, …, np} of \ndigits defined in Table 15.1, for each n° in C, and only for these Numbers, we \nintroduce a CSP variable Hr°c°n°, with domain the set of columns in the magic \nsector. We introduce similar Vr°c°n° CSP variables for the “magic” vertical sectors. \nThe reason why we have kept the special “45-in-9” magic case (contrary to usual \nconventions and although it conveys no information) should now be clear: we did \nnot want to exclude it from generating such Hr°c°n° and/or Vr°c°n° variables. \nNotice that these variables cannot be called Hr°n° or Vc°n° as they would be in \nSudoku or LatinSquare, because there may be several magic sectors in the same row \n(or column) and we need a means of distinguishing the associated variables. \n\n15. Non-binary arithmetic constraints and Kakuro     \n409 \nThere is also a secondary exception, related to the twenty-eight “pseudo-magic” \ncases given in Table 15.4. Given a horizontal “pseudo-magic” sector controlled by \nblack cell (r°, c°) with parameters (S, p), for each n° in the set of digits common to \nall the (S, p)-compatible combinations, as defined in Table 15.4, and only for these \nNumbers, we introduce a CSP variable Xr°c°n°, with domain the set of columns in \nthe magic sector. Of course, similar Xr°c°n° CSP variables are introduced for the \nvertical “pseudo-magic” sectors.  \n \n15.2.1.3. The Hrc and Vrc CSP variables \nWe must also introduce additional CSP variables that will allow to take the sum \nconstraints into account. For each horizontal [resp. vertical] clue, we define a CSP \nvariable representing the global content of the cells in the sector it controls, this \ncontent being considered as a set or a combination of different digits. We shall then \nalso say that this new CSP variable controls the sector. More precisely: \n– for each black cell (r°, c°) containing a horizontal clue S, if the sector it \ncontrols in row r° has length p, then we define CSP variable Hr°c°, with domain the \nset of combinations of p different Numbers with sum S, i.e. CombinationS,p; \n– similarly, for each black cell (r°, c°) containing a vertical clue S, if the sector it \ncontrols in column c° has length p, then we define CSP variable Vr°c°, with domain \nCombinationS,p. \nIn less formal terms, each of these new CSP variables allows to manage the \npossible combinations of Numbers in the sector it controls. A candidate for such a \nCSP variable is a possible combination of digits for the sector it controls; along the \nresolution process, the number of these global possibilities for the sector will \ndecrease in a way consistent with the possibilities remaining in the white cells. The \nhorizontal [respectively vertical] magic sectors correspond to Hrv [resp. Vrc] CSP \nvariables with domains having only one value. \n15.2.1.4. Miscellaneous remarks \nThe Hrc and Vrc CSP variables are not “natural” in the sense that they would \ndirectly correspond to the original problem formulation: “find a value for each white \ncell such that …”; only the Xrc are “natural” in this sense. But they are natural in the \nlarger sense that they are a mere formalisation of the classical idea that one must \nkeep track of the combinations still possible for each sector. In this extended sense, \nthe Xrn and Xcn variables are much less natural than the Hrc and Vrc. \nThe two new sets of Hrc and Vrc CSP variables are mutually disjoint, and \ndisjoint from the sets of Xrc, Xrn and Xcn, thanks to the presence of prefix H or V \nin their names. \nOne can consider that there are 5 CSP-Variable-Types: rc, rn, cn, hrc, vrc. \n\n410 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nEach of the possible values for each of the Hrc or Vrc CSP variables is a set (a \ncombination); as each of these sets represents the whole set of values for cells in the \nsector it controls, these variables are highly redundant with the “natural” ones, as is \nusual in our approach. \nAfter Table 15.2, the cardinalities of the domains of the new Hrc or Vrc CSP \nvariables are not much larger than those of the “natural” Xrc ones (the maximum is \n12); in most of the cases, they are even smaller. We have therefore avoided the \ncomplexity pitfall that generally goes with the replacement of non-binary constraints \nby binary ones. \nNo CSP variable is introduced for sectors defined only by their boundaries, with \nno sum constraint. This is first of all a natural modelling choice: such variables \nwould not carry any useful information. But, considering the data in Table 15.3, this \nalso has the fortunate consequence that we need not introduce any CSP variable \nwith a domain much larger (up to 126) than those of the “natural” ones. \nThere is another implicit modelling choice: instead of choosing for domains of \nthe new CSP variables the sets (i.e. combinations) of n different Numbers with sum \nS, one could have chosen the sequences (i.e. permutations) of n different Numbers. \nThe cardinalities would have been much larger, upto 9! = 362,880. This would still \nhave been manageable for a computer, although probably not for a human solver, \nbut, as shown by theorem 15.1 below, this would have brought nothing more with \nrespect to the expression of sum constraints. This choice is consistent with (and was \ninspired by) the way the usual resolution techniques are described on various \nwebsites, where it is mentioned that one must track combinations of digits. \nThese new CSP variables (together with the definition of their domains) depend \nin an essential way on the set of clues. \n15.2.2. Labels of the Kakuro CSP \nFor a white cell (r°, c°), labels for CSP variable Xr°c° are defined as all the \n(n°, r°, c°) triplets (also notated n°r°c°) with r° in Row, c° in Column and n° in \nCompat(S°H, p°H, S°V, p°V), similarly to the Sudoku or LatinSquare cases. But \ncontrary to these CSPs, label n°r°c° is generally the equivalence class of only one \npre-label: <Xr°c°, n°> because there are no Xr°n° or Xc°n° CSP variables. The main \nexception is for the “magic” sectors: if (r°, c°) belongs to a horizontal magic sector \ncontrolled by cell (r°, c’°) and/or a vertical magic sector controlled by cell (r’°, c°), \nthen there are pre-labels <Hn°r°c’°, c°> and/or <Vn°r’°c°, r°> equivalent to \n<Xr°c°, n°>. The secondary exception is for a “pseudo-magic” (S, p) pair and a digit \ncommon to all its combinations (and only such a digit). \nLabels for CSP variable Hr°c° controlling a horizontal sector with parameters \n(S, p) are defined as all the symbols H[n1 … np]r°c°, where {n1, …, np} is a possible \n\n15. Non-binary arithmetic constraints and Kakuro     \n411 \nvalue for Hr°c°, i.e. a combination of p digits with sum S; for the purpose of having \na well defined naming scheme for these labels, we always suppose that they are \nwritten with n1 < … < np. Informally, label H[n1, …, np]r°c° represents the fact that \n{n1, …, np} is exactly the set of values appearing somewhere (in any order) in the \nhorizontal sector controlled by (r°, c°). Each of these labels is the equivalence class \nof only one pre-label <Hr°c°, {n1, …, np}>; there is therefore a one-to-one \ncorrespondence between labels for Hr°c° and elements of Comb(S, p).  \nLabels for CSP variable Vr°c° are defined similarly, using prefix V instead of H. \n15.2.3. Constraints and Constraint-Types of the Kakuro CSP \nWe shall use seven Constraint-Types: rc, hrc, vrc, rn, cn, hS, vS.  \nConstraints of type rc, hrc and vrc are associated with the above-defined three \nclasses of CSP variables (Xrc, Hrc and Vrc) and they mean as usual that two \ndifferent values for the same CSP variable are incompatible. This distinction \nbetween three different types is not essential from the point of view of logic, but it \nmay be useful if one wants to distinguish different types of Singles and assign the \nassociated rules different priorities: e.g. Singles for Xrc variables may be considered \nas “easier” to spot on the grid than Singles for Hrc or Vrc variables. \nConstraints of type rn [respectively cn] express that two white cells in the same \nhorizontal [resp. vertical] sector cannot have the same value. As previously noticed, \nexcept in the “magic” or “pseudo-magic” cases, these constraints cannot generally \nbe associated with “global” Xrn [resp. Xcn] CSP variables in the row [resp. \ncolumn], not even with “local” Xrc’n [resp. Xr’cn] CSP variables restricted to the \nproper sectors. This will have concrete consequences, e.g. when we evoke Hidden or \nSuper-Hidden Subset rules (see section 15.3.2). Notice that we use the same rn and \ncn constraint types, whether there is an underlying CSP variable or not, as this can \nintroduce no confusion. \nConstraints of type hS [respectively vS] link the labels for the “natural” CSP \nvariables with the labels for the additional “horizontal” ones. They mean that the \ninformation conveyed by the two labels is inconsistent, i.e. that the value of the label \nfor the white cell is not one of the values allowed by the combination in the label for \nits horizontal controller cell. More precisely, we introduce a (symmetric) constraint \nof type hS between label H[n1 … np]rc for CSP variable Hrc and label n’r’c’ for \nCSP variable Hr’c’ whenever:  \n– r’ = r,  \n– c’ is in the horizontal sector controlled by (r, c),  \n– and n’ ∉ {n1, …, np}.  \nThis constraint is expressed by predicate:  \n\n412 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nlinked-by(H[n1…np]rc, r’c’, hS) ∧ linked-by(r’c’, H[n1…np]rc, hS). \nConstraints of type vS linking the labels for the “natural” CSP variables with the \nlabels for the additional “vertical” ones are defined similarly. \nThese different types of constraints may be used to assign a preference to ECP \nbased on rn and cn constraints, with respect to ECP based on hS or vS constraints. \n15.2.4. Givens and domain assignments in the Kakuro CSP \nIn the first section, we said that the clues of a Kakuro puzzle are horizontal or \nvertical sums in the black cells. In our formal CSP re-formulation, these correspond \nto assigning values for the additional CSP variables only in the case of “magic” \nsectors; in any other case, they only correspond to an initial restriction on the set of \nall the possible combinations of p digits (i.e. candidates) for these new variables. \nThis does not change our model of resolution; the initial resolution state must only \nbe defined in a less direct way than in the previous cases, by assigning each of the \nHrc and Vrc variables a domain CombinationS,p consistent with its (S, p) pair. The \nway domains are assigned to the Xrc variables has been discussed previously. \n15.2.5. Re-formulation of Kakuro as a CSP \nThe motivation for the above detailed definitions lies in the following theorem: \nTheorem 15.1: a solution of a Kakuro puzzle is equivalent to a solution of the \nCSP defined by the natural Xrc and additional Xrn, Xcn, Hrc and Vrc CSP \nvariables (together with their allowed domains of values) with all the above-\ndefined constraints, namely (all the “strong” constraints and): \n– in each sector, the constraints of mutual exclusion (along rn and cn links), \n– for the additional CSP variables the constraints associated with their above \ndefined contradiction links (hS and vS links) with the natural ones. \nProof: the “natural ⇒ CSP” part is obvious. Let us prove the converse.  \nFirst, in a sector with no sum constraint, the only constraints for cells in this \nsector specified by the original puzzle data are the constraints of mutual exclusion \nand nothing needs be added. \nConsider now any fixed clue in the original puzzle, with sum S for a sector of \nsize n. Consider the associated additional CSP variable, say X. The value of X, \nwhich is a combination C of n different digits, means that these n digits have the \nrequired sum S. The fact that this CSP variable X satisfies the contradiction links \nwith all the natural variables in the sector it controls means that each of the values \nfor these variables is among those in C. The fact that the natural CSP variables in \n\n15. Non-binary arithmetic constraints and Kakuro     \n413 \nthe sector satisfy the mutual exclusion constraints in the sector means that they are \nall different. As a result, they constitute a realisation of combination C, their sum is \nS and the original clue is satisfied. The same proof works for any clue. q.e.d. \nThe theorem says that, as far as the problem formulation and solution are \nconcerned, the original non-binary arithmetic constraints can be completely replaced \nby the above-defined Hrc and Vrc variables together with their contradiction links \nwith the Xrc variables (and the links between the latter). Although a little more \ncomplex, this is similar to the Futoshiki case, in which each inequality was replaced \nby an equivalent set of links. The intuitive meaning is that, in theory, one needs do \nno more arithmetic, but only find a solution with consistent values for combinations \nand rc-cells. However, there are two limitations to the practical interpretation of the \ntheorem:  \n– it does not mean that a little more arithmetic may not make the resolution \nsimpler in practice; we shall consider some aspects of this question later (see section \n15.7); \n– it does not mean that the hS and vS links of the new formulation are sufficient \nto express all the mathematical content  of the sum constraints (see in section 15.3.2 \nhow we shall palliate this limitation by adding six coupling rules). \nRemarks:  \n– indirectly, the theorem also says that it would be useless to introduce CSP \nvariables whose domains would be sets of permutations instead of sets of \ncombinations; the next sections will show how to exploit concretely the interplay \nbetween the natural Xrc variables on the one hand and the additional Hrc and Vrc \nvariables on the other hand; \n– as far as can be seen from the existing websites, the idea of considering and \ntracking combinations of numbers for each sector is standard in Kakuro; but we \nhave been able to find neither the origin of this idea, nor any formalisation of it, nor \nany mention that this could completely replace (in theory) the sum information; \n– several Kakuro websites propose only instances whose non-magic sectors are \nrestricted to N(q) = 2; this corresponds to having only bivalue additional CSP \nvariables, which makes the puzzles much easier; as there are only sixteen (S, p) \npairs with N(q) = 2 (see Table 15.2), this is a strong limitation on possible puzzles. \n15.3. Elementary Kakuro resolution rules and theories \n15.3.1. The Basic Kakuro Resolution Theory \nThere is nothing special to say about the Basic Kakuro Resolution Theory, \nexcept that, as the “magic” additional CSP variables have their values assigned at \nthe start, they often allow obvious additional assertions. \n\n414 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nConsider the case when a sum of 16 [respectively 17] bears on a sector with only \ntwo cells: the “magic” CSP variable has value {7 9} [resp. {8 9}] and all the \ncandidate-Numbers with values other than 7 and 9 [resp. 8 and 9] are therefore \nabsent from the initial resolution state. The opposite case is a clue with sum 45 \nbearing on nine cells: the only possible combination is {1 2 3 4 5 6 7 8 9} and it \nallows no elimination in its sector. \nOn some Kakuro websites, the following special “rule” is proposed: if a sector of \ntwo cells in a row has a sum of 16 and a sector of two cells in a column has a sum of \n17 and if cell (r, c) belongs to the two sectors, then (r, c) = 9. But the result of this \ncombination of magic sectors can be obtained by rules in BRT: as the horizontal \ncontroller has value {7, 9} and the vertical controller has value {8, 9}, the initial \nstate can only contain one candidate (9) and rule S can conclude that (r, c) = 9.  \n15.3.2. Coupling rules between controller and controlled variables \nAs mentioned in our interpretation of theorem 15.1, having transformed the \noriginal arithmetic formulation into a binary one based on combinations and \nassociated contradiction links between labels for controller and controlled CSP \nvariables is not quite enough to make Kakuro fully amenable to our approach. One \npoint is, when one introduces CSP variables that are not inherent in the formulation \nof the CSP, their relationship with the natural ones must somehow be specified. This \nquestion was almost hidden in our previous examples by the straightforward way \nequivalence relations between pre-labels for the different types (Xrc, Xrn, Xcn [and \nXbn]) of CSP variables were defined to make labels. For Kakuro, a more explicit \ncoupling between the CSP variables must be defined. \nAt this point, the links defined between “natural” and “controller” CSP variables \nallow only to eliminate via standard ECP: \n– candidates in a white cell that are not compatible with the sum of one of its \nhorizontal or vertical controllers, when one has been set; \n– candidates in a controller cell that are not compatible with the value of a \ncontrolled cell, when one has been set.  \nBut they do not allow any elimination before a variable value has been found. \nThey can only be made fully operational if we consider the following four \nelementary resolution rules, that we shall call the W1-coupling rules: \n– ctr-to-horiz-sector (from horizontal controller to cells in the sector it controls): \nin any resolution state, if a candidate-Number is absent from all the combinations \nfor a horizontal sector, then delete it from any cell in this sector; notice that, given \nour definitions of links and CSP variables, this elimination can be done by a whip[1] \nwith the horizontal controller as its CSP variable; \n\n15. Non-binary arithmetic constraints and Kakuro     \n415 \n– cell-to-horiz-ctr (from a cell to its horizontal controller): in any resolution \nstate, if a cell contains no digit of a combination C, then delete C from its horizontal \ncontroller; here again, this elimination can be done by a whip[1] with the cell as its \nCSP variable; \n– the corresponding two “vertical” rules. \nAt this point, it may be useful to notice that, if a solution to the CSP formulation \nis given, one never needs these rules in order to prove by standard mathematical \nmeans that it is a solution to the initial problem (as can be seen from the proof of \ntheorem 15.1). However, they are required if a solution has to be built constructively \nfrom an initial state in which some of the variables have several possible \ncombinations; this is the difference between checking a solution and building one. \nIt is easy to see that the four coupling rules are whips[1] and they are the only \npossible types of whips[1]. Adopting them systematically is thus equivalent to using \nW1 as our minimal resolution theory instead of BRT. \nOne must also consider another type of coupling rule: \n– horiz-sector-to-ctr (from horizontal sector to controller): in any resolution \nstate, if a candidate-Number is absent from all the cells of a horizontal sector, then \ndelete from the horizontal controller CSP variable any candidate-combination \ncontaining it; notice that, as there are in general no Hrcn CSP variables, this cannot \nbe considered as a whip[1] (even a generalised one with missing llc1), although it is \nakin to a whip[1] and it has the effect of a whip[1]; and, in the (magic and pseudo-\nmagic) cases where there is an Hrcn CSP variable, the conditions of the rule can \nnever be satisfied; as appears from the resolution paths, this rule is activated much \nless often than the previous ones if it is given lower priority. Of course, there is also \na verti-sector-to-ctr rule. \nOne may wonder whether this introduces a new kind of rule; but it is easy to see \nthat, for a sector of length p, it is equivalent to an Sp-1-braid[p] – although it appears \nas a much simpler and natural structure when considered as a coupling rule. \nThe sequel will show that the six coupling rules are enough to ensure the full \nresolution potential of the above defined CSP variables and links. We call BRT+ the \nunion of BRT with these six coupling rules (BRT+ is thus an extension of W1); more \ngenerally, for any resolution theory T, we call T+ the union of T with these six rules. \nAs the last two coupling rules are obviously stable for confluence, BRT+ has the \nconfluence property; similarly, if T has the confluence property, so has T+. \n15.3.3. Subset rules in Kakuro \nKakuro has Subset rules, but, due to the presence of sectors, they are a little \nmore complex than in our previous examples. \n\n416 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n15.3.3.1. Strict Subset rules \nStrictly speaking (i.e. according to the general definitions of Subsets in chapter \n8), there are only three kinds of Subset rules: \n– “Naked” Subset rules, both in rows and columns (based either on Xrci CSP \nvariables with transversal rnj constraints or on Xric CSP variables with transversal \ncnj constraints); \n– “Hidden” Subset rules (based on Xrni CSP variables, with transversal rcj \nconstraints) in rows for horizontal magic sectors or for horizontal pseudo-magic \nsector-digit cases; \n– “Hidden” Subset rules (based on Xcni CSP variables, with transversal rcj \nconstraints) in columns for vertical magic sectors or for vertical pseudo-magic \nsector-digit cases. \nGiven the definition of the rc, rn and cn constraints, all these rules can only be \napplied locally within a sector, not globally in a row or a column. Thus, given three \ncells in a sector in a row, if their candidate-Numbers belong to a same set of three \n(formally, they are related by three different contraints of type rn), these Numbers \ncan be eliminated by Naked-Triplets-in-a-row from other cells in the same sector \n(but not from other cells in the same row outside this sector). \n15.3.3.2. Extended Hidden Subset rules \nStrictly speaking, there are no other Hidden Subset rules (in the sense that they \nwould appear as mere Subset rules when considering the proper CSP variables) than \nthose associated with magic or pseudo-magic sectors (and restricted to the \nappropriate digits in the latter case). We insist on this point, not for the theoretical \nreason of making formal distinctions, but mainly for the practical one that the way \nHidden Subset rules are presented on Kakuro websites as similar to those of Sudoku \nmay be very misleading.  \nIn the non-magic and non-pseudo-magic cases, one can indeed define \nelimination rules similar to Hidden Subset rules, with the same sector restriction as \nin the Naked case. But, because there are no Xrn (or Xcn) CSP variables in these \ncases, even limited to the sector, such a rule must have the additional restriction that \nit must have already been proven that all the candidate-Numbers the pattern bears on \nmust be present in the sector (this is never stated on any of the websites we have \nseen). This happens for instance when all the cells in the sector have been restricted \nby previous rules to the same p candidate-Numbers, where p is the size of the sector. \nBut this condition is not necessary; it is enough to know that all the candidate-\ncombinations remaining for the controller CSP-variable contain these candidate-\nNumbers. The problem is, this condition on combinations is more complex than the \ndefining conditions of a Naked Subset; such a “Dynamic Hidden Subset” rule can \ntherefore not be considered as a counterpart of the Naked one for Subsets of same \n\n15. Non-binary arithmetic constraints and Kakuro     \n417 \nsize. The practical question is: in such cases, is it worth introducing these rules or is \nit better to rely on Naked vs Hidden complementarity and use only Naked Subsets? \nAs we have not programmed such extensions in KakuRules and as Quads are \nalready rare patterns, we leave it open. \n15.3.3.3. Extended Super Hidden Subset rules \nStrictly speaking, there are no Super-Hidden Subset (Fish) rules. One can \nintroduce something similar, a “Dynamic” Super-Hidden Subset, although its \napplication is still more restricted than in the Hidden case: for a “Dynamic” Super-\nHidden Subset in rows [respectively columns], all the cells in each row and column \ninvolved in the pattern must be in the same sector [it is “in each row and column” \nfor both horizontal and vertical cases, not respectively for each one]; moreover, it \nmust already have been proven that the candidate-Number involved in the pattern \nmust appear in each of the horizontal [resp. vertical] sectors containing cells of the \npattern (the only way this can be granted is when all the combinations remaining for \neach horizontal [resp. vertical] sector all contain this candidate-Number – as in the \nHidden Subset case). A target in a column [resp. a row] must be in the same vertical \n[resp. horizontal] sector as some cells in the pattern. However, nothing prevents \nblacks cells to appear in the convex hull of the pattern, outside its rows and \ncolumns. The direct proof of this rule is exactly as in Sudoku. \nThe additional conditions (with respect to the standard formulation of Subset \nrules) for this extension are the same as for Hidden Subsets: the presence of a \ncandidate-Number in a sector can only be ascertained when all the combinations \nremaining for the sector all contain this Number. \n15.4. Bivalue-chains, whips and braids in Kakuro \nThere are two main remarks about bivalue-chains, whips or braids in Kakuro: \n– they entertwine “natural” Xrc and additional Hrc and Vrc CSP variables in an \nessential way; \n– one can observe the same phenomenon as in Sudoku and Futoshiki: when \nwhips and braids are both active, whips are given a higher priority than braids of \nsame length (as in our standard complexity hierarchy) and the simplest-first strategy \nis used, non-whip braids rarely appear. \nAs mentioned in the Introduction, when we want to display the resolution path of \nan instance in a way that allows to consider it as a full proof of the solution, we face \nthe problem of the trivial steps, in particular the boring sequences of eliminations \ndue to direct constraint propagation. In Sudoku, the problem was easily dealt with \nbecause the eliminations done by ECP rules are quite obvious and can be omitted \nwith no harm. In Futoshiki, in addition to ECP, we had to deal with ascending \n\n418 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nchains and the compromise between being boring and being unclear because of \ndiscarding too many steps was to “forget” such chains only at the start. \nIn Kakuro, in addition to ECP (which will never be displayed, even between \ndifferent types of variables), the interplay between controller and controlled \nvariables (formalised in the coupling rules) is an essential part of the resolution \nprocess, at any stage of it (as can be seen from the resolution paths below), and it \nwould be queer not to display the corresponding steps, especially as all the puzzles \nproposed to beginners can be solved using only these rules.  \nThe convention we shall adopt is that all the obvious eliminations whose effect \nis to restrict the domains of the natural CSP variables are already done in the initial \nresolution state RS1, before any application of the Single rule. This can be viewed \neither as adopting the domain definitions given in section 15.2.4 or as allowing the \nctr-to-horiz-sector and ctr-to-verti-sector coupling rules to apply before Singles \n(until RS1 is reached), even though they do not belong to BRT (they are whips[1] \nand pseudo-whips[1]). As a result of this initialisation choice, Single assertions that \ncould be available earlier (e.g. as in the case described at the end of section 15.3.1) \nwill appear only after RS1. In practice, this amounts to delaying any Single \napplication a human player is likely to do during this initialisation phase.  \nWe also adopt the convention that constraints in magic sectors are transformed \nfrom the start (after the above Xrc domain restrictions) into given values for the \nassociated Hrc or Vrc variables and identified as such in the first two lines of the \nresolution path. \nAfter this initialisation phase, it is natural to grant Singles a higher priority than \ncoupling rules and it would be misleading not to display all of the instances of the \nlatter. [As all the interesting resolution theories must contain the coupling rules and \nas only easy puzzles can be solved at such levels, this priority has no impact on our \nfurther analyses of harder puzzles and on their classifications.] The resolution path \nwill generally start with a series of Singles for the Xrc, Hrc and Vrc variables. \n15.4.1. Full resolution path of the puzzle in Figure 15.1 \nThis section gives the full resolution path of the puzzle in Figure 15.1. Braids, \nwhips, bivalue chains, Naked and Hidden Subsets (in magic sectors) are active. We \nhave chosen this moderately difficult example because it has Naked and Hidden \nSubsets (although these instances could be replaced by whips). Although active, \nbraids do not appear. The most interesting steps are in bold. \nIt should be noticed how Naked Singles for “natural” Xrc and for Hrc and Vrc \nvariables are entertwined: in Kakuro, there is a permanent interplay between the two \ntypes of variables. It is thus worth for the reader to spend some time on checking (at \n\n15. Non-binary arithmetic constraints and Kakuro     \n419 \nleast in the bivalue-chains[2] and whips[2]) how this general idea is materialised in \nmost of the chains appearing in the resolution path.  \n \n*****\t\r  \t\r  KakuRules\t\r  1.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  B+\t\r  \t\r  \t\r  *****\t\r  \nhorizontal-­‐magic-­‐sectors\t\r  ==>\t\r  hr11c6\t\r  =\t\r  5789,\t\r  hr9c3\t\r  =\t\r  124,\t\r  hr5c1\t\r  =\t\r  356789,\t\r  hr3c7\t\r  =\t\r  1235,\t\r  \nhr3c1\t\r  =\t\r  56789\t\r  \nvertical-­‐magic-­‐sectors\t\r   ==>\t\r   vr7c11\t\r   =\t\r   124,\t\r   vr2c9\t\r   =\t\r   123456789,\t\r   vr6c8\t\r   =\t\r   13,\t\r   vr2c8\t\r   =\t\r   13,\t\r  \nvr9c7\t\r  =\t\r  79,\t\r  vr4c6\t\r  =\t\r  46789,\t\r  vr1c4\t\r  =\t\r  123456789,\t\r  vr1c3\t\r  =\t\r  1235,\t\r  vr6c2\t\r  =\t\r  13\t\r  \nnaked-­‐singles\t\r   ==>\t\r   r11c8\t\r   =\t\r   5,\t\r   r10c7\t\r   =\t\r   7,\t\r   r11c7\t\r   =\t\r   9,\t\r   r9c11\t\r   =\t\r   4,\t\r   r9c6\t\r   =\t\r   4,\t\r   r6c6\t\r   =\t\r   6,\t\r   r5c11\t\r   =\t\r   6,\t\r  \nr3c11\t\r  =\t\r  5,\t\r   r3c3\t\r   =\t\r   5,\t\r   r3c6\t\r   =\t\r   6,\t\r   r5c3\t\r   =\t\r   3,\t\r   vr1c6\t\r   =\t\r   16,\t\r   r2c6\t\r   =\t\r   1,\t\r   r2c3\t\r   =\t\r   2,\t\r   r4c3\t\r   =\t\r   1,\t\r   vr1c11\t\r   =\t\r   58,\t\r  \nr2c11\t\r  =\t\r  8,\t\r  hr2c9\t\r  =\t\r  78,\t\r  r2c10\t\r  =\t\r  7,\t\r  vr1c10\t\r  =\t\r  37,\t\r  r3c10\t\r  =\t\r  3,\t\r  r3c8\t\r  =\t\r  1,\t\r  r3c9\t\r  =\t\r  2,\t\r  r4c8\t\r  =\t\r  3,\t\r  hr5c8\t\r  =\t\r  126,\t\r  \nr5c9\t\r   =\t\r   1,\t\r   r5c10\t\r   =\t\r   2,\t\r   vr4c10\t\r   =\t\r   25,\t\r   r6c10\t\r   =\t\r   5,\t\r   vr4c11\t\r   =\t\r   69,\t\r   r6c11\t\r   =\t\r   9,\t\r   hr6c8\t\r   =\t\r   459,\t\r   r6c9\t\r   =\t\r   4,\t\r  \nhr6c3\t\r  =\t\r  1236,\t\r   hr9c8\t\r   =\t\r   489,\t\r   hr10c6\t\r   =\t\r   12347,\t\r   r10c9\t\r   =\t\r   3,\t\r   vr9c8\t\r   =\t\r   25,\t\r   r10c8\t\r   =\t\r   2,\t\r   r10c11\t\r   =\t\r   1,\t\r  \nr10c10\t\r  =\t\r  4,\t\r  r8c11\t\r  =\t\r  2\t\r  \nctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r4c7\t\r  ≠\t\r  8,\t\r  r4c9\t\r  ≠\t\r  8,\t\r  r4c7\t\r  ≠\t\r  4,\t\r  r4c7\t\r  ≠\t\r  5,\t\r  r4c9\t\r  ≠\t\r  5\t\r  \nctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r4c2\t\r  ≠\t\r  5,\t\r  r4c4\t\r  ≠\t\r  5\t\r  ;\t\r  ctr-­‐to-­‐verti-­‐sector\t\r  \t\r  ==>\t\r  r8c10\t\r  ≠\t\r  1,\t\r  r8c10\t\r  ≠\t\r  3\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr7c1\t\r  ≠\t\r  249,\t\r  hr7c1\t\r  ≠\t\r  258,\t\r  hr7c1\t\r  ≠\t\r  267\t\r  ;\t\r  ctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r7c4\t\r  ≠\t\r  2\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr7c1\t\r  ≠\t\r  456\t\r  ;\t\r  cell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr7c5\t\r  ≠\t\r  2589,\t\r  hr7c5\t\r  ≠\t\r  2679\t\r  \nctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r7c7\t\r  ≠\t\r  2\t\r  ;\t\r  cell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr7c5\t\r  ≠\t\r  4569,\t\r  hr7c5\t\r  ≠\t\r  4578\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr11c1\t\r  ≠\t\r  56\t\r  ;\t\r  ctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r11c3\t\r  ≠\t\r  5,\t\r  r11c3\t\r  ≠\t\r  6\t\r  \ncell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr1c5\t\r  ≠\t\r  29\t\r  ;\t\r  ctr-­‐to-­‐verti-­‐sector\t\r  \t\r  ==>\t\r  r3c5\t\r  ≠\t\r  9\t\r  ;\t\r  cell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr4c5\t\r  ≠\t\r  34\t\r  \t\r  \nctr-­‐to-­‐verti-­‐sector\t\r  \t\r  ==>\t\r  r6c5\t\r  ≠\t\r  3\t\r  ;\t\r  cell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr1c5\t\r  ≠\t\r  56\t\r  \nctr-­‐to-­‐verti-­‐sector\t\r  \t\r  ==>\t\r  r2c5\t\r  ≠\t\r  5,\t\r  r2c5\t\r  ≠\t\r  6\t\r  ;\t\r  cell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr6c3\t\r  ≠\t\r  67\t\r  \nctr-­‐to-­‐verti-­‐sector\t\r  \t\r  ==>\t\r  r7c3\t\r  ≠\t\r  6,\t\r  r7c3\t\r  ≠\t\r  7\t\r  ;\t\r  verti-­‐sector-­‐to-­‐ctr\t\r  \t\r  ==>\t\r  vr2c2\t\r  ≠\t\r  178,\t\r  vr2c2\t\r  ≠\t\r  169\t\r  \nbiv-­‐chain[2]:\t\r  r8n3{c7\t\r  c8}\t\r  –\t\r  r8n1{c8\t\r  c7}\t\r  ==>\t\r  r8c7\t\r  ≠\t\r  9,\t\r  r8c7\t\r  ≠\t\r  8,\t\r  r8c7\t\r  ≠\t\r  7,\t\r  r8c7\t\r  ≠\t\r  6,\t\r  r8c7\t\r  ≠\t\r  5,\t\r  r8c7\t\r  ≠\t\r  4\t\r  \nhoriz-­‐sector-­‐to-­‐ctr\t\r  \t\r  ==>\t\r  hr8c5\t\r  ≠\t\r  123468\t\r  ;\t\r  ctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r8c6\t\r  ≠\t\r  8,\t\r  r8c9\t\r  ≠\t\r  8,\t\r  r8c10\t\r  ≠\t\r  8\t\r  \nhoriz-­‐sector-­‐to-­‐ctr\t\r  \t\r  ==>\t\r  hr8c5\t\r  ≠\t\r  123459\t\r  \nnaked-­‐singles\t\r  ==>\t\r  hr8c5\t\r  =\t\r  123567,\t\r  r8c6\t\r  =\t\r  7\t\r  \nbiv-­‐chain[2]:\t\r  vr7c10{n4579\t\r  n4678}\t\r  –\t\r  r9c10{n9\t\r  n8}\t\r  ==>\t\r  r11c10\t\r  ≠\t\r  8\t\r  \nnaked-­‐singles\t\r  ==>\t\r  r11c10\t\r  =\t\r  7,\t\r  r11c9\t\r  =\t\r  8,\t\r  r9c9\t\r  =\t\r  9,\t\r  r9c10\t\r  =\t\r  8,\t\r  vr7c10\t\r  =\t\r  4678,\t\r  r8c10\t\r  =\t\r  6,\t\r  r8c9\t\r  =\t\r  5\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr7c5\t\r  ≠\t\r  3489\t\r  ;\t\r  ctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r7c7\t\r  ≠\t\r  4\t\r  \nverti-­‐sector-­‐to-­‐ctr\t\r  \t\r  ==>\t\r  vr3c7\t\r  ≠\t\r  13456,\t\r  vr3c7\t\r  ≠\t\r  12457,\t\r  vr3c7\t\r  ≠\t\r  12349\t\r  \nctr-­‐to-­‐verti-­‐sector\t\r  \t\r  ==>\t\r  r5c7\t\r  ≠\t\r  9,\t\r  r7c7\t\r  ≠\t\r  9\t\r  \nbiv-­‐chain[2]:\t\r  vr8c5{n14\t\r  n23}\t\r  –\t\r  r9c5{n1\t\r  n2}\t\r  ==>\t\r  r10c5\t\r  ≠\t\r  2\t\r  \nbiv-­‐chain[2]:\t\r  vr6c3{n49\t\r  n58}\t\r  –\t\r  r8c3{n4\t\r  n5}\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  5\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr7c1\t\r  ≠\t\r  357\t\r  ;\t\r  ctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r7c4\t\r  ≠\t\r  7\t\r  \nbiv-­‐chain[2]:\t\r  hr8c1{n125\t\r  n134}\t\r  –\t\r  r8c3{n5\t\r  n4}\t\r  ==>\t\r  r8c4\t\r  ≠\t\r  4\t\r  \nbiv-­‐chain[2]:\t\r  hr4c6{n137\t\r  n236}\t\r  –\t\r  r4c9{n7\t\r  n6}\t\r  ==>\t\r  r4c7\t\r  ≠\t\r  6\t\r  \nbiv-­‐chain[2]:\t\r  hr2c2{n1236\t\r  n1245}\t\r  –\t\r  r2c5{n3\t\r  n4}\t\r  ==>\t\r  r2c4\t\r  ≠\t\r  4\t\r  \nbiv-­‐chain[2]:\t\r  r9c5{n1\t\r  n2}\t\r  –\t\r  vr8c5{n14\t\r  n23}\t\r  ==>\t\r  r10c5\t\r  ≠\t\r  1\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr10c1\t\r  ≠\t\r  1257\t\r  \nbiv-­‐chain[2]:\t\r  r8c3{n4\t\r  n5}\t\r  –\t\r  vr6c3{n49\t\r  n58}\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  4\t\r  \nbiv-­‐chain[2]:\t\r  r2c5{n3\t\r  n4}\t\r  –\t\r  hr2c2{n1236\t\r  n1245}\t\r  ==>\t\r  r2c4\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  r4c9{n7\t\r  n6}\t\r  –\t\r  hr4c6{n137\t\r  .}\t\r  ==>\t\r  r4c7\t\r  ≠\t\r  7\t\r  \nwhip[2]:\t\r  r7c2{n1\t\r  n3}\t\r  –\t\r  hr7c1{n168\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  1\t\r  \nwhip[2]:\t\r  r7c2{n3\t\r  n1}\t\r  –\t\r  hr7c1{n348\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  r7c3{n8\t\r  n9}\t\r  –\t\r  hr7c1{n348\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  8\t\r  \n\n420 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[2]:\t\r  r7c3{n9\t\r  n8}\t\r  –\t\r  hr7c1{n159\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  9\t\r  \nwhip[2]:\t\r  r7c8{n1\t\r  n3}\t\r  –\t\r  hr7c5{n1689\t\r  .}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  1\t\r  \nwhip[2]:\t\r  r7c8{n3\t\r  n1}\t\r  –\t\r  hr7c5{n3678\t\r  .}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  r8c3{n5\t\r  n4}\t\r  –\t\r  hr8c1{n125\t\r  .}\t\r  ==>\t\r  r8c4\t\r  ≠\t\r  5\t\r  \nwhip[2]:\t\r  hr10c1{n1248\t\r  n1239}\t\r  –\t\r  r10c3{n4\t\r  .}\t\r  ==>\t\r  r10c4\t\r  ≠\t\r  9\t\r  \nwhip[2]:\t\r  hr11c1{n29\t\r  n47}\t\r  –\t\r  r11c2{n2\t\r  .}\t\r  ==>\t\r  r11c3\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  r5c2{n8\t\r  n9}\t\r  –\t\r  r3c2{n9\t\r  .}\t\r  ==>\t\r  vr2c2\t\r  ≠\t\r  349\t\r  \nwhip[2]:\t\r  vr2c2{n457\t\r  n259}\t\r  –\t\r  r3c2{n7\t\r  .}\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  9\t\r  \nwhip[2]:\t\r  vr9c2{n23\t\r  n14}\t\r  –\t\r  r11c2{n2\t\r  .}\t\r  ==>\t\r  r10c2\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  vr9c3{n49\t\r  n58}\t\r  –\t\r  r11c3{n7\t\r  .}\t\r  ==>\t\r  r10c3\t\r  ≠\t\r  8\t\r  \nwhip[2]:\t\r  r10c5{n3\t\r  n4}\t\r  –\t\r  r10c3{n4\t\r  .}\t\r  ==>\t\r  hr10c1\t\r  ≠\t\r  1248\t\r  \nctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r10c4\t\r  ≠\t\r  8\t\r  \nwhip[2]:\t\r  vr9c3{n49\t\r  n67}\t\r  –\t\r  r11c3{n8\t\r  .}\t\r  ==>\t\r  r10c3\t\r  ≠\t\r  7\t\r  \nwhip[2]:\t\r  vr9c3{n58\t\r  n49}\t\r  –\t\r  r11c3{n7\t\r  .}\t\r  ==>\t\r  r10c3\t\r  ≠\t\r  9\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr10c1\t\r  ≠\t\r  1239\t\r  \nnaked-­‐triplets-­‐in-­‐a-­‐column\t\r   c4{r6\t\r   r8\t\r   r9}{n2\t\r   n3\t\r   n1}\t\r   ==>\t\r   r10c4\t\r   ≠\t\r   3,\t\r   r10c4\t\r   ≠\t\r   2,\t\r   r10c4\t\r   ≠\t\r   1,\t\r  \nr4c4\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  hr4c1{n128\t\r  n137}\t\r  –\t\r  r4c4{n8\t\r  .}\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  7\t\r  \nnaked-­‐triplets-­‐in-­‐a-­‐column\t\r  c4{r6\t\r  r8\t\r  r9}{n2\t\r  n3\t\r  n1}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  hr4c1{n137\t\r  n128}\t\r  –\t\r  r4c4{n7\t\r  .}\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  r5c6{n8\t\r  n9}\t\r  –\t\r  c4n9{r5\t\r  r3}\t\r  –\t\r  r3c2{n9\t\r  n7}\t\r  –\t\r  vr2c2{n358\t\r  .}\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  vr3c7{n12367\t\r  n12358}\t\r  –\t\r  r5c7{n7\t\r  n8}\t\r  –\t\r  c6n8{r5\t\r  r7}\t\r  –\t\r  hr7c5{n3579\t\r  .}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  5\t\r  \nhoriz-­‐sector-­‐to-­‐ctr\t\r  \t\r  ==>\t\r  hr7c5\t\r  ≠\t\r  3579\t\r  \nwhip[2]:\t\r  vr3c7{n12367\t\r  n12358}\t\r  –\t\r  r7c7{n7\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  8\t\r  \nhidden-­‐pairs-­‐in-­‐a-­‐row\t\r  r5{n8\t\r  n9}{c4\t\r  c6}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  7,\t\r  r5c4\t\r  ≠\t\r  6,\t\r  r5c4\t\r  ≠\t\r  5\t\r  \nbiv-­‐chain[5]:\t\r  c8n3{r7\t\r  r8}\t\r  –\t\r  r8n1{c8\t\r  c7}\t\r  –\t\r  r4c7{n1\t\r  n2}\t\r  –\t\r  hr4c6{n137\t\r  n236}\t\r  –\t\r  c9n7{r4\t\r  r7}\t\r  ==>\t\r  \nhr7c5\t\r  ≠\t\r  1689\t\r  \nnaked-­‐singles\t\r  ==>\t\r  hr7c5\t\r  =\t\r  3678,\t\r  r7c8\t\r  =\t\r  3,\t\r  r8c8\t\r  =\t\r  1,\t\r  r8c7\t\r  =\t\r  3,\t\r  r7c6\t\r  =\t\r  8,\t\r  r5c6\t\r  =\t\r  9,\t\r  r5c4\t\r  =\t\r  8\t\r  \nhidden-­‐single-­‐in-­‐magic-­‐verti-­‐sector\t\r  ==>\t\r  r3c4\t\r  =\t\r  9\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr4c1\t\r  ≠\t\r  128\t\r  ;\t\r  ctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r4c2\t\r  ≠\t\r  2\t\r  \ncell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr2c2\t\r  ≠\t\r  259\t\r  ;\t\r  cell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr3c7\t\r  ≠\t\r  12358\t\r  \nnaked-­‐single\t\r  ==>\t\r  vr3c7\t\r  =\t\r  12367\t\r  \nverti-­‐sector-­‐to-­‐ctr\t\r  \t\r  ==>\t\r  vr2c2\t\r  ≠\t\r  268\t\r  \nnaked-­‐pairs-­‐in-­‐a-­‐row\t\r  r6{c5\t\r  c7}{n1\t\r  n2}\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  2,\t\r  r6c4\t\r  ≠\t\r  1\t\r  \nnaked-­‐single\t\r  ==>\t\r  r6c4\t\r  =\t\r  3\t\r  \nwhip[2]:\t\r  r3c2{n7\t\r  n8}\t\r  –\t\r  vr2c2{n457\t\r  .}\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  7\t\r  \nhidden-­‐single-­‐in-­‐magic-­‐horiz-­‐sector\t\r  ==>\t\r  r5c7\t\r  =\t\r  7\t\r  \nnaked-­‐singles\t\r  ==>\t\r  r7c7\t\r  =\t\r  6,\t\r  r7c9\t\r  =\t\r  7,\t\r  r4c9\t\r  =\t\r  6,\t\r  hr4c6\t\r  =\t\r  236,\t\r  r4c7\t\r  =\t\r  2,\t\r  r6c7\t\r  =\t\r  1,\t\r  r6c5\t\r  =\t\r  2,\t\r  vr4c5\t\r  =\t\r  25,\t\r  \nr5c5\t\r  =\t\r  5,\t\r  r5c2\t\r  =\t\r  6,\t\r  vr2c2\t\r  =\t\r  367,\t\r  r4c2\t\r  =\t\r  3,\t\r  r3c2\t\r  =\t\r  7,\t\r  r3c5\t\r  =\t\r  8,\t\r  vr1c5\t\r  =\t\r  38,\t\r  r2c5\t\r  =\t\r  3,\t\r  hr2c2\t\r  =\t\r  1236,\t\r  r2c4\t\r  \n=\t\r  6,\t\r  hr4c1\t\r  =\t\r  137,\t\r  r4c4\t\r  =\t\r  7\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr7c1\t\r  ≠\t\r  168\t\r  ;\t\r  horiz-­‐sector-­‐to-­‐ctr\t\r  \t\r  ==>\t\r  hr10c1\t\r  ≠\t\r  1347\t\r  \nbiv-­‐chain[2]:\t\r  hr10c1{n1356\t\r  n2346}\t\r  –\t\r  r10c4{n5\t\r  n4}\t\r  ==>\t\r  r10c5\t\r  ≠\t\r  4\t\r  \nnaked-­‐singles\t\r   ==>\t\r   r10c5\t\r   =\t\r   3,\t\r   vr8c5\t\r   =\t\r   23,\t\r   r9c5\t\r   =\t\r   2,\t\r   r9c4\t\r   =\t\r   1,\t\r   r8c4\t\r   =\t\r   2,\t\r   hr8c1\t\r   =\t\r   125,\t\r   r8c2\t\r   =\t\r   1,\t\r  \nr7c2\t\r  =\t\r  3,\t\r  r8c3\t\r  =\t\r  5,\t\r  vr6c3\t\r  =\t\r  58,\t\r  r7c3\t\r  =\t\r  8,\t\r  hr7c1\t\r  =\t\r  348,\t\r  r7c4\t\r  =\t\r  4,\t\r  r10c4\t\r  =\t\r  5,\t\r  hr10c1\t\r  =\t\r  1356,\t\r  r10c2\t\r  =\t\r  1,\t\r  \nr10c3\t\r  =\t\r  6,\t\r  vr9c3\t\r  =\t\r  67,\t\r  r11c3\t\r  =\t\r  7,\t\r  hr11c1\t\r  =\t\r  47,\t\r  r11c2\t\r  =\t\r  4,\t\r  vr9c2\t\r  =\t\r  14\t\r  \nGrid\t\r  solved.\t\r  Hardest\t\r  step:\t\r  Bivalue-­‐Chain[5].\t\r  \n\n15. Non-binary arithmetic constraints and Kakuro     \n421 \n15.5. Theory of g-labels in Kakuro \nApplying the general definition of a g-label to Kakuro is not as straightforward \nas in our previous CSP examples; in particular, we need investigate how the general \ncondition of “saturation” or “local maximality” concretely appears when applied to \nsets of digits and sets of combinations.  \nAs there can be no g-label in magic sectors, in all this section we suppose that \n(S, p) is a non-magic pair. \n15.5.1. General preliminaries \nFor convenience, let us first repeat the definition of a g-label given in section \n7.1.1.1. A potential-g-label is a pair <V, g>, where V is a CSP variable and g is a set \nof labels for V, such that: \n– the cardinality of g is greater than one, but g is not the full set of labels for V; \n– there is at least one label l such that l is not a label for V and l is linked \n(possibly by different constraints) to all the labels in g. \nA g-label is a potential-g-label <V, g> that is “saturated” or “locally maximal” in \nthe sense that, for any potential g-label <V, g’> with g’ strictly larger than g (as sets \nof labels), there is a label l that is not a label for V and that is linked to all the \nelements of g but not to all the elements of g’. \nThe following three remarks show that the definition of g-labels is completely \ntaken care of by the next sub-sections. \n1) There is always a one-to-one correspondence between the labels <X, v> for a \nCSP variable X and the elements v of its domain (by the construction of pre-labels). \nWe shall use it freely (i.e. we shall make no distinction at all between the \ncorresponding elements) in the following two cases: \n– for a fixed Xrc variable with parameters (SH, pH) and (SV, pV), the obvious \ncorrespondence between labels for Xrc and (SH, pH)-compatible and (SV, pV)-\ncompatible digits; \n– for a fixed Hrc [or Vrc] variable in a sector with parameters (S, p), the obvious \nlabel-to-combination correspondence, in which case we shall also use freely the \nobvious correspondences between symbols n1…np appearing in the labels, \ncombinations in Comb(S, p) and subsets {n1, … np} of p (S, p)-compatible digits. \n2) For each sector, a g-label for the controller variable will be g-linked to a label \nfor a cell in the sector, depending only on their values (respectively set of \ncombinations and digit), not on the exact position of the cell in the sector. Similarly, \na g-label for a cell in the sector will be g-linked to a label for the controller variable, \ndepending only on their values (respectively set of digits and combination). \n\n422 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n3) As mentioned in chapter 7, the saturation condition in the definition of a g-\nlabel is there mainly for reasons of efficiency. Too many useless g-labels would lead \nto too many redundant partial g-whips, many of which would differ only by g-labels \nthat exclude the same candidates. When it was first introduced and illustrated by the \nSudoku case, this condition did not make a spectacular difference. But we shall see \nthat it is essential in practice for Kakuro. \n15.5.2. Mutual exclusion between sets of combinations and sets of digits \nFor a legitimate (S, p) pair, we defined at the end of section 15.1.1 the set \nComb(S, p) of all the (S, p)-compatible combinations, i.e. of all the combinations of \np different digits with sum S. As can be seen from Table 15.2, the number of such \ncombinations is always an integer in the range [1, …, 12]. Table 15.1 shows that \nthere are thirty four “magic” (S, p) pairs that have only one combination and Table \n15.4 shows that there are fifteen “pseudo-magic” (S, p) pairs that have digits (up to \nfive) common to all their combinations. We shall now study more complex \nproperties of Comb(S, p). \nWe shall be interested in particular subsets of Comb(S, p) and particular subsets \nof Compat(S, p) that exclude each other, the sets gComb(S, p) and gDig(S, p). They \nwill play a major role in the definition of g-labels and their g-links.  \n15.5.2.1. Mutual exclusion of digits and combinations \nDefinition: a digit i ∈ Compat(S, p) and a combination C ∈ Comb(S, p) exclude \neach other if i ∉ C. We also say that C excludes i or that i excludes C, but this basic \nexclusion relation is fundamentally symmetric. \nDefinition: a set of digits gD ⊂ Compat(S, p) excludes a combination C if every \ndigit i ∈ gD excludes C, i.e. if  gD ⊂ Cc. A set of digits gD ⊂ Compat(S, p) excludes \na set of combinations gC ⊂ Comb(S, p) if it excludes every combination C ∈ gC, \ni.e. if gD ⊂ ∩{Cc, C ∈ gC}. Here, complementation is taken in Compat(S, p) and \n“⊂” is understood in the non-strict sense. \nDefinition: a set of combinations gC ⊂ Comb(S, p) excludes a digit i if every \ncombination C ∈ gC excludes i, i.e. if i ∈ ∩{Cc, C ∈ gC}. A set of combinations \ngC ⊂ Comb(S, p) excludes a set of digits gD ⊂ Compat(S, p) if it excludes every \ndigit i ∈ gD, i.e. if gD ⊂ ∩{Cc, C ∈ gC}. \nExclusion between a set of digits and a set of combinations is obviously a \nsymmetric relation, but in the context of g-labels we shall generally use it in \nunsymmetric ways, whence the separate definitions. \nIf gD ⊂ Compat(S, p), we note D-Excl(gD) the set of combinations in \nComb(S, p) excluded by gD. If gC ⊂ Comb(S, p), we note C-Excl(gC) the set of \n\n15. Non-binary arithmetic constraints and Kakuro     \n423 \ndigits in Compat(S, p) excluded by gC. D-Excl is thus a function from subsets of \nCompat(S, p) to subsets of Comb(S, p) and C-Excl a function from subsets of \nComb(S, p) to subsets of Compat(S, p). As which of the two is concerned is obvious \nfrom the argument, we shall often write them loosely as Excl(gD) and Excl(gC). \n15.5.2.2. Envelopes \nIt is obvious that D-Excl and C-Excl are decreasing functions: if gD1 ⊂ gD2, then \nD-Excl(gD2) ⊂ D-Excl(gD1); if gC1 ⊂ gC2, then C-Excl(gC2) ⊂ C-Excl(gC1). This \nremark justifies the following definitions. \nDefiniton: the envelope Env(gD) of a set of digits gD ⊂ Compat(S, p) is the \nmaximum superset of gD in Compat(S, p) that excludes the same combinations as \ngD. It is obviously the set of all the digits in Compat(S, p) that exclude Excl(gD). \nDefinition: the envelope Env(gC) of a set of combinations gC ⊂ Comb(S, p) is \nthe maximum superset of  gC in Comb(S, p) that excludes the same digits as gC. It \nis obviously the set of all the combinations in Comb(S, p) that exclude Excl(gC). \nIt is obvious that mutual exclusion of a set of combinations gC ⊂ Comb(S, p) \nand a set of digits gD ⊂ Compat(S, p) entails mutual exclusion of their envelopes.  \nWe now turn our attention to “saturated” or “locally maximum” subsets of digits \nand combinations. \n15.5.2.2. gDigs \nDefinition: a potential-g-digit(S, p) is a subset gD of Compat(S, p): \n– containing at least two elements of Compat(S, p) but not all of Compat(S, p), \n– excluding at least one combination C ∈ Comb(S, p).  \nDefinition: a g-digit(S, p) is a potential g-digit(S, p) that is “saturated” or \n“locally maximal” in the sense that any strictly larger (with respect to set-theoretic \ninclusion) potential-g-digit(S, p), if any, excludes a strictly smaller subset of \nComb(S, p). Equivalently: a g-digit is a potential-g-digit that is equal to its \nenvelope. We call this the “saturation” or “local-maximality” property of g-digits. \nWe define gDig(S, p) as the set of all the g-digits(S, p).  \nRemarks:  \n– any C ∈ Comb(S, p), if considered as a subset of Compat(S, p), is a g-\ndigit(S, p) as soon as the sector is not magical; but we shall see that there are many \nother cases of g-digits; \n– any g-digit contains all the digits common to all the combinations in \nComb(S, p). \nTheorem 15.2: if gD ∈ gDig(S, p), then Excl(Excl(gD)) = gD. \n\n424 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nRemark: as exclusion is a symmetric relation, we already know that any digit in \ngD is excluded by the set of combinations Excl(gD), i.e. that gD ⊂ Excl(Excl(gD). \nWhat the theorem says is that there are no other digits excluded by Excl(gD). \nProof: by the saturation of gD, for any digit i ∈ Compat(S, p) such that i ∉ gD, \ni ∪ gD excludes a set of combinations strictly smaller than Excl(gD). There is \ntherefore some combination C in Excl(gD) such that C is not excluded by i ∪ gD. \nAs C is excluded by gD (i.e. by every digit in gD), it can only mean that C is not \nexcluded by i. By the symmetry of exclusion, i is not excluded by C. Therefore i is \nnot excluded by Excl(gD). qed. \n15.5.2.3. gCombs \nWe can now repeat for sets of combinations all that was done for sets of digits. \nDefinition: a potential-g-combination(S, p) is a subset gC of Comb(S, p): \n– containing at least two elements of Comb(S, p) but not all of Comb(S, p), \n– excluding at least one digit i ∈ Compat(S, p). \nDefinition: a g-combination(S, p) is a potential-g-combination(S, p) such that \nany strictly larger (with respect to set-theoretic inclusion) potential-g-\ncombination(S, p), if any, excludes a strictly smaller set of digits. Equivalently: a g-\ncombination is a potential-g-combination that is equal to its envelope. We call this \nthe “saturation” or “local-maximality” property of g-combinations. We define \ngComb(S, p) as the set of all the g-combinations(S, p). \nTheorem 15.3: if gC ∈ gComb(S, p), then Excl(Excl(gC)) = gC. \nRemark: as exclusion is a symmetric relation, we already know that any \ncombination in gC is excluded by the set of digits Excl(gC), i.e. that \ngC ⊂ Excl(Excl(gC). What the theorem says is that there are no other combinations \nexcluded by Excl(gC). \nProof: by the saturation of gC, for any combination D in Comb(S, p) such that \nD ∉ gC, D ∪ gC excludes a set of digits strictly smaller than C-Excl(gC). There is \ntherefore some digit i in C-Excl(gC) such that i is not excluded by D ∪ gC. As i is \nexcluded by gC (i.e. by every combination in gC), it can only mean that i is not \nexcluded by D. By the symmetry of exclusion, D is not excluded by i. Therefore D \nis not excluded by C-Excl(gC). qed. \n15.2.3.4. Relationship between gDigs and gCombs \nThe previous three sub-sections illustrate the duality between g-digits and g-\ncombinations. The following theorem pushes it further.  \n\n15. Non-binary arithmetic constraints and Kakuro     \n425 \nWe first need to set apart the cases in which only one label would be excluded. \nLet us therefore define gDig-(S, p) as the subset of elements gD of gDig(S, p) such \nthat gD excludes at least two combinations from Comb(S, p). Similarly, define \ngComb-(S, p) as the subset of elements gC of gComb(S, p) such that gC excludes at \nleast two digits from Compat(S, p). \nTheorem 15.4: if gD ∈ gDig-(S, p), then Excl(gD) ∈ gComb-(S, p). If \ngC ∈ gComb-(S, p), then Excl(gC) ∈ gDig-(S, p). D-Excl defines a one-to-one \ncorrespondence between gDig-(S, p) and gComb-(S, p); C-Excl defines the inverse \none-to-one correspondence between gComb-(S, p) and gDig-(S, p). \nProof: we shall prove only the first part; the second part is easily obtained by \nduality; and the third is an obvious corollary to the first two. Suppose that gD is a g-\ndigit(S, p) excluding at least two combinations C1 and C2 and consider the set of \ncombinations Excl(gD). It contains at least two elements (namely C1 and C2) but it \nis not the full set Comb(S, p) because no digit in Compat(S, p) can exclude all of \nComb(S, p). Excl(gD) excludes at least two digits in Compat(S, p), indeed it \nexcludes all the digits in gD. There remains only to show that it is saturated. But, for \nany combination C excluding all of gD, i.e. C ∈ Excl(Excl(gD)), theorem 15.2 \nshows that C ∈ gD. \n15.5.3. Representation of a g-combination as a number \nThe definition of a g-digit(S, p) leads to easy computations. However, a \ngComb(S, p), say gC, is a set of sets of digits and we still miss a simple way of \nrepresenting it. This can easily be palliated by defining Env’(gC) as the set of digits \ncompatible with gC [or, equivalently, with Env(gC)]. It is obvious that two different \ng-combs have different Env’ values; we can therefore represent gC by Env’(gC) – \nmore precisely by the number Env*(gC) obtained by glueing together, in ascending \norder, the elements of Env’(gC). This is convenient because the digits excluded by \ngC will be the complement of Env’(gC) in Compat(S, p). \n15.5.4. More on gComb(S, p) \nThe definition of a gComb(S, p) leads to easy computations, showing that there \nare 63 (S, p) pairs (out of the 120 legitimate ones) that have g-combs. When an \n(S, p) pair has g-combs, it has at least 3 and at most 77. The latter happens in only \nfour cases: (14, 3),  (15, 3),  (16, 3)  and (20, 4). There are more than 10 g-combs in \n49 cases. We cannot display all the possibilities here, but the following simple \nexample illustrates the notion of saturation of g-combs in a concrete case.  \n \nPair\t\r  (p,\t\r  S)\t\r  =\t\r  (3,\t\r  10\t\r  )\t\r  has\t\r  4\t\r  combs:\t\r  {127\t\r  136\t\r  145\t\r  235}\t\r  and\t\r  9\t\r  g-­‐combs\t\r  :\t\r  \ng-­‐comb\t\r  12345\t\r  contains\t\r  combs\t\r  (145\t\r  235)\t\r  and\t\r  excludes\t\r  digits\t\r  (6\t\r  7)\t\r  \ng-­‐comb\t\r  12356\t\r  contains\t\r  combs\t\r  (136\t\r  235)\t\r  and\t\r  excludes\t\r  digits\t\r  (4\t\r  7)\t\r  \n\n426 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ng-­‐comb\t\r  12357\t\r  contains\t\r  combs\t\r  (127\t\r  235)\t\r  and\t\r  excludes\t\r  digits\t\r  (4\t\r  6)\t\r  \ng-­‐comb\t\r  12367\t\r  contains\t\r  combs\t\r  (127\t\r  136)\t\r  and\t\r  excludes\t\r  digits\t\r  (4\t\r  5)\t\r  \ng-­‐comb\t\r  12457\t\r  contains\t\r  combs\t\r  (127\t\r  145)\t\r  and\t\r  excludes\t\r  digits\t\r  (3\t\r  6)\t\r  \ng-­‐comb\t\r  13456\t\r  contains\t\r  combs\t\r  (136\t\r  145)\t\r  and\t\r  excludes\t\r  digits\t\r  (2\t\r  7)\t\r  \ng-­‐comb\t\r  123456\t\r  contains\t\r  combs\t\r  (136\t\r  145\t\r  235)\t\r  and\t\r  excludes\t\r  digit\t\r  (7)\t\r  \ng-­‐comb\t\r  123457\t\r  contains\t\r  combs\t\r  (127\t\r  145\t\r  235)\t\r  and\t\r  excludes\t\r  digit\t\r  (6)\t\r  \ng-­‐comb\t\r  123567\t\r  contains\t\r  combs\t\r  (127\t\r  136\t\r  235)\t\r  and\t\r  excludes\t\r  digit\t\r  (4)\t\r  \nIt is interesting to consider the two g-combs 12345 and 123456 (or 123457): \nthey show that, in accordance with our general definition, saturation does not mean \nan absolute but a local maximum. 123456 (or 123457) contains more combs than \n12345, but it excludes fewer digits. \nNotice that, with this (p, S) = (3, 10) example, there are 4 combinations, which \ncould lead to considering 24-4 = 12 subsets of more than one combinations if we did \nnot have the saturation condition, whereas it is useful to consider only 9 such \nsubsets, namely the 9 g-combs.  \nThe reduction is still more impressive with a pair such as (5, 25): it has 12 \ncombinations and therefore 212-12 = 4084 subsets of more than one combinations, \nbut only 37 g-combs. This shows that, in Kakuro, the saturation condition is \nessential for the practical use of g-labels. \n15.5.5. Missing an example with g-bivalue-chains, g-whips and g-braids \nThis sub-section will remain (almost) blank as a reminder that an example with \ng-whips is missing. Although we have programmed g-labels compliant with the \nabove theory16, we have found no Kakuro puzzle with a g-whip elimination in all \nthose we have tried. This is almost certainly not due to some bug in our \nimplementation: for any length, lots of partial g-whips that are not partial-whips are \nfound (and we have checked that they are correct). We face here the problem \nevoked in the Introduction. Very little is known about CSPs other than Sudoku: no \nexceptionally hard cases, no instances with specific patterns, no forums where to \nsubmit problems… The same remarks will apply to the Numbrix® and Hidato® \npuzzles in the next chapter. \n15.6. Application-specific rules in Kakuro: surface sums \nThe only type of application-specific rule we have met on all the Kakuro \nwebsites we have visited and in all the available literature we have seen is what we \nshall call “surface sums”. But the simplest and most general way of expressing it is \n                               \n16 g-whips and g-braids are present in CSP-rules as generic rules, but they must be fed by the \napplication-specific definition of g-labels. \n\n15. Non-binary arithmetic constraints and Kakuro     \n427 \nin terms of a cut in the graph underlying the puzzle (as defined below). It is a \nspecificity of Kakuro, with respect to our previous examples, that some puzzles can \nbe reduced, in rather straightforward ways, to several (easier) sub-puzzles. It raises \nthe question of whether the condition of well-formedness should exclude \nreducibility. \n15.6.1. Graph underlying a Kakuro puzzle \nDefinition: the (undirected) graph underlying a Kakuro puzzle P is composed of: \n– a set of vertices (or nodes): one for each white cell of P; \n– a set of edges (or arcs): there is an (undirected) edge between two nodes if and \nonly if the corresponding white cells are (horizontally or vertically) adjacent. \nDefinitions (standard from graph theory): in an undirected graph, a path between \ntwo nodes C1 and C2 is a sequence of nodes starting in C1 and ending in C2, such \nthat there is an arc between any two consecutive nodes in the sequence. Two nodes \nare connected if there is a path between them. A graph is connected if there is a path \nbetween any two nodes. \nDefinitions (standard from graph theory): a cut is a set of nodes whose removal \nmakes the graph disconnected. A graph is k-connected if no cut of k-1 (or fewer) \nnodes can disconnect it. The connectivity of a graph is the smallest k such that there \nis a cut of size k disconnecting it. \nThe above definitions can be transferred to any Kakuro puzzle via its underlying \ngraph: a Kakuro puzzle is connected if its underlying graph is connected. As already \nmentioned, if a puzzle is not connected, it is often reducible to several independent \npuzzles (see details in the forthcoming examples). But, even a connected puzzle can \nsometimes be decomposed into independent ones. \nDefinition: a cell C disconnects a Kakuro puzzle into two parts S1 and S2 if any \npath from any cell C1 ∈ S1 to any cell C2 ∈ S2 passes through C. In terms of graphs, \nthis is equivalent to saying that C is a cut of the underlying graph. \nA Kakuro puzzle cannot be disconnected by any cell if and only if its underlying \ngraph is 2-connected. \n15.6.2. The “surface sum” rule \nMany websites mention a “surface sum” rule dealing with almost closed surfaces \nin which a cell C is included in the horizontal sums of the sectors making the surface \nbut not in the vertical ones [or conversely]. Figure 15.4 shows two such situations, \nthe simplest possible and one more complex. In these cases, the sum of the cells on \nthe surface can be computed in two ways: sum of horizontal clues (including C) and \n\n428 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nsum of vertical clues (excluding C). The value of C is then obtained directly as the \ndifference between these two sums. By transposing rows and columns, one obtains \nsimilar examples. In each case, the condition for the rule to work is that any sector \ncompletely included in the surface (i.e. all except at most one containing C) has a \nclue. In all the websites we have seen, this situation is described by examples but \nnot formalised in the general and much simpler terms allowed by graph theory. \n \n \n \n      \n v1 \n \n      \n v2 \n \n  \n \n  \n \n  \n \n  \n \n      \n v1 \n \n      \n v2 \n \n  \n \n      \n v5 \n \n      \n v7 \n \n  \n \n  \n \n     h1 \n  \n \n  \n \n \n \n \n  \n \n     h1 \n  \n \n  \n \n      \n  \n \n     h2 \n v3 \n \n  \n  \n \n  \n \n  \n \n     h2 \n  \n \n \n \nx \n  \n \n  \n \n     h3 \n  \n \n  \n \n  \n \n      \n  \n \n \n  \n \n  \n \n  \n \n  \n \n \n \n  \n \n  \n \n  \n \n     h4 \n  \n \n \n  \n \n \n  \n \n  \n \nx \n  \n \n  \n \n  \n \n \n \n  \n \n  \n \n      \n  \n \n     h5 \n  \n  \n \n      \n  \n \n      \n  \n \n      \n v6 \n  \n \n \n  \n \nUp: whatever v1, v2, h1, h2,  \none has: \nx =  (h1+h2) - (v1+v2) \n  \n  \n  \n \n  \n \n  \n \n     h6 \n v2 \n \n  \n \n \n      \n  \n \n      \n v8 \n \n  \n \n  \n  \n \n \n     h7 \n  \n \n \n \n     h8 \n v4 \n \n \n      \n  \n \n      \n v9 \n \n \n  \nRight: whatever v1, …, v9  \nand h1, …, h10, one has: \n x = (h1+ …+ h10) \n       - (v1+ … v9) \n  \n  \n  \n  \n  \n  \n \n \n     h9 \n  \n \n \n \n \n \n \n \n \n  \n \n    h10 \n  \n \n \n \n  \n \n  \n \n \n \n \n  \n \n \n      \n  \n \n \n  \n \n  \n \n  \n \n  \n \n  \n \nFigure 15.4. Two examples of the domain sum rule (only the relevant parts of the puzzles are \nshown; indicated h and v values and black cells are compulsory; black cells without explicit \nclues may have clues or not; all the rest of the puzzle, i.e. the part not shown here, is free; in \nparticular, there may be white cells under x; inner cell with clues h8/v4 is not a problem).  \n15.6.3. The “cut rule” \nThe above “surface rule” has a much more general counterpart, based on the \nnotion of a cut. It has different conditions and conclusions, but it does not have to be \nrestricted to unions of horizontal  and vertical sectors that differ by only one cell.  \nTheorem 15.6 (the strong cut rule): if in a Kakuro puzzle P there is a cell C \nthat disconnects P (i.e. its underlying graph) into two parts P1 and P’1 such that:  \n– all the sectors meeting P1 have a clue,  \n\n15. Non-binary arithmetic constraints and Kakuro     \n429 \n– one and only one of the horizontal or vertical sectors of C is entirely in P1, \n– each of P1 and P’1 has a unique solution, \nthen P is equivalent to two independent Kakuro sub-puzzles with respective white \ncells those of P1 and P’1; the clues for the newly created sector in each of P1 and \nP’1 are obtained by computing the differences in the vertical and horizontal sums \nof all the sectors at least partly in P1. \nNotice that this general graph-based formulation does not prevent black cells to \nappear between white ones in the surface (as in the rightmost part of Figure 15.4), \nprovided that they have clues for all the sectors they control. Also, this puts no \nconstraint on the place of C in its row or column.  \nIt should be noticed that uniqueness of the sub-puzzles (without any reference to \ntheir origin) is not a consequence of uniqueness of the initial puzzle. One way to \nunderstand this is that some digits that were not compatible with the global sum may \nbecome compatible with either of the split sums. See the examples below. \nIn practice, as shown by the example below, the above theorem may still be too \nrestrictive and the uniqueness condition for P1 and P’1 can be relaxed, if either one \ngives up full independence of the sub-puzzles or one adds some condition to ensure \nthat their solutions are compatible (i.e. that the parts of the sector that has been split \ninto two must have different digits). For instance, if only one of the two sub-puzzles \nhas a unique solution, the information relative to the values of the cells of its half \nsector in the solution must be transferred to the complementary half sector in the \nother sub-puzzle or the solution of the values of the solved sub-puzzle cells can \nmerely be re-injected into the global one.  \nInstead of giving a formal proof of the theorem, which would require boring \ntechnicalities but would not bring much insight into the elementary way this rule can \nbe used, we shall illustrate how it works on the puzzle P in Figure 15.5. (To preserve \nthe square grid hypothesis, one can always assume that five black columns are \nadded to the right). \nThe generalised cut rule can be applied repeatedly six times (cells C1 to C6 are \nshown in Figure 15.5), leading to the situation represented in Figure 15.6: \n– C1 disconnects P into two sub-puzzles: the first (small) part P1 consists of the \n4×4 sub-puzzle made of the first four rows and columns, with horizontal clue 32 in \ncell r4c1 replaced by clue (15+23+9) - (10+15) = 22; the second (and main) part P’1 \nis obtained by replacing all the cells in P1 by black cells with no clues, except an \nhorizontal clue 10 = 32 - 22 in cell r4c4; \n– C2 disconnects P’1 into a small part P2 with vertical clue (15+16) - (16) = 15 in \nr8c3 and a second sub-puzzle P’2 with vertical clue 35 in r5c3 replaced 35-15 = 20; \n– C3 disconnects P’2 into a small part P3 with horizontal clue 16 in r8c2 replaced \nby (10+20+6) - (8+19) = 9 and a third sub-puzzle P’3 with horizontal clue 16-9 = 7 \n\n430 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n in r8c4; \n– C4 disconnect P’3 into a small P4 with horizontal clue (24+12+7) – (11+16) = \n16 in r12c8 and a fourth sub-puzzle P’4 with horizontal clue 33 in cell r12c6 \nreplaced by 33-16 = 17; \n– C5 disconnect P’4 into a small part P5 with vertical clue 24 in r7c11 replaced \nby (11+5) - 13 = 3 and a fifth sub-puzzle P’5 with vertical clue 24-3 = 21 in r9c10;  \n \n \n K \n      \n 15 \n \n      \n 23 \n \n      \n 9 \n \n  \n \n  \n \n      \n 14 \n \n      \n 16 \n \n  \n \n      \n 34 \n \n      \n 7 \n \n     10 \n  \n \n  \n \n \n  \n \n  \n \n     12 \n 20 \n \n  \n \n \n     11 \n 20 \n \n  \n \n \n     15 \n  \n \n  \n \n \n  \n \n     22 \n 3 \n \n  \n \n \n  \n \n  \n \n \n  \n \n     32 \n  \n \n  \n \n \nC1 \n \n  \n \n     23 \n 41 \n \n  \n \n  \n \n \n      \n 4 \n \n  \n \n      \n 10 \n \n       \n 35 \n \n     18 \n 6 \n \n  \n \n  \n \n \n     14 \n 10 \n \n  \n \n \n  \n \n       8 \n  \n \n  \n \n \n  \n \n  \n \n     15 \n 31 \n \n  \n \n  \n \n \n  \n \n \n     19 \n  \n \n  \n \n \n  \n \n     26 \n 7 \n \n  \n \n  \n \n \n  \n \n       \n 24 \n \n      \n 13 \n \n  \n \n     16 \n 16 \n \n \nC3 \n \n \n  \n \n       \n 17 \n \n     5 \n  \n \n  \n \n \n     15 \n  \n \n  \n \nC2 \n     29 \n  \n \n  \n \n \n  \n \n \n     11 \n 7 \n \nC5  \n \n \n     16 \n  \n \n  \n \n \n      \n 17 \n \n     18 \n 13 \n \n  \n \n  \n \n \n  \nC6 \n \n      \n 9 \n \n  \n \n       \n 17 \n \n     27 \n 26 \n \n  \n \n \n  \n \n \n     21 \n  \n \n  \n \n \n  \n \n     23 \n  \n \n  \n \n  \n \n \n  \n \n \n       \n 17 \n \n     11 \n 12 \n \n  \n \n \n  \n \n     24 \n  \n \n  \n \n \n  \n \n     13 \n 21 \n \n  \n \n \n  \n \n       \n 24 \n \n      \n 12 \n \n       \n 7 \n \n  \n \n     11 \n 8 \n \n  \n \n \n  \n \n     33 \n 4 \n \n  \n \n \nC4 \n  \n \n \n     32 \n  \n \n  \n \n \n  \n \n \n  \n \n \n     11 \n  \n \n  \n \n \n  \n \n       6 \n  \n \n  \n \n \n     6 \n  \n \n  \n \n \n \n     16 \n  \n \n  \n \n \n  \n \nFigure 15.5. A 16×11 puzzle (of unknown origin) with 6 cuts \n\n15. Non-binary arithmetic constraints and Kakuro     \n431 \n– C6 disconnect P’5 into a small part P6 with horizontal clue (7+21+9)-(21+11) = \n5 in r10c8 and a sixth sub-puzzle P’6 with horizontal clue 18 in r10c5 replaced by \n18-5 = 13.  \n \n \n K \n      \n  \n \n      \n  \n \n      \n \n \n  \n \n  \n \n      \n 14 \n \n      \n 16 \n \n  \n \n      \n 34 \n \n      \n 7 \n \n      \n  \n \n  \n \n \n  \n \n  \n \n     12 \n 20 \n \n  \n \n \n     11 \n 20 \n \n  \n \n \n      \n  \n \n  \n \n \n  \n \n     22 \n 3 \n \nD1 \n \n  \n \n  \n \nC7 \n  \n \n      \n  \n \n  \n \n \n     10 \n  \n \n \n  \n \n     23 \n 41 \n \n  \n \n  \n \n \n      \n 4 \n \n  \n \n      \n  \n \n       \n  \n \n     18 \n  \n \n  \n \n  \n \n \n     14 \n 10 \n \n  \n \n \n  \n \n        \n  \n \n  \n \n \n  \n \n  \n \n     15 \n 31 \n \n  \n \n  \n \nD’1 \n  \n \n \n      \n  \n \n  \n \n \n  \n \n     26 \n 7 \n \n  \n \nC8 \n \n  \n \n       \n  \n \n      \n  \n \n  \n \n      \n  \n \n \n       7 \n  \n \n  \n \n \n  \n \n       \n 17 \n \n      \n  \n \n  \n \n \n      \n  \n \n  \n \n \n     29 \n  \n \n  \n \n \n  \n \n \n      \n  \n \n       \n  \n \n \n      \n  \n \n  \n \n \n      \n 17 \n \n     13 \n 13 \n \n  \n \n  \n \n \n  \n \n \n      \n  \n \n  \n \n       \n 17 \n \n     27 \n 26 \n \n  \n \n \nC9 \n \n      \n  \n \n  \n \n \n  \n \n     23 \n  \n \n  \n \n  \n \nD2 \n  \n \n \n       \n 17 \n \n      \n 12 \n \n  \n \n \n  \n \n     24 \n  \n \n  \n \n \n  \n \n     13 \n 21 \n \nD’2 \n \n  \n \n       \n  \n \n      \n  \n \n       \n  \n \n  \n \n     11 \n 8 \n \n  \n \n \n  \n \n     17 \n 4 \n \n  \n \n \n \n  \n \n \n     32 \n  \n \n  \n \nC10 \n  \n \n \n  \n \nD’’2 \n      \n  \n \n  \n \n \n  \n \n       6 \n  \n \n  \n \n \n     6 \n  \n \n  \n \n \n \n      \n  \n \n  \n \n \n  \n \nFigure 15.6. P’6, the puzzle of Figure 15.5 after the 6 cuts have been applied \nNotice that, in Figure 15.6, each of C7, C8, C9 and C10 also disconnects the \nremaining puzzle P’6 into two parts, but they do not satisfy the additional condition \n\n432 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nthat one of the sectors containing C is totally in one of the two parts. [In such cases, \nthe surface sum information could nevertheless be used, e.g. to introduce new Hrc \nand Vrc CSP variables in intermediate virtual cells together with equalities between \ntheir sums, but this is another topic.]  \nNotice also the particular situation of pairs of cells (D1, D’1), (D2, D’2) and \n(D2, D’’2): each pair has a potential of separating the puzzle into two sub-puzzles; \nbut this information cannot be used as such, without additional conditions. However, \nin the two cases, as cells C7, C8, C9 and C10 or pairs (D1, D’1), (D2, D’2) and \n(D2, D’’2) are the key for splitting the puzzle into smaller ones, a reasonable \nheuristic would suggest to start by trying to find their values. \n15.6.4. What is the effect of the cut rule on a whip based solution? \nThere now arises a natural question about the effect of the cut rule on the \ndifficulty of solving a puzzle. Depending on how the original puzzle is split into \npieces, it can have very different consequences.  \nIn most of the cases we have seen, applying the cut rule at the start made it \nsignificantly simpler or it even turned it into an almost obvious instance. But no \nrigorous statistical meaning should be understood here: this remark is only based on \nthe examples we could find on Kakuro websites and it is probably because they \nwere intended for the enjoyment of human players and designed to do so.  \nHowever, the puzzle in Figure 15.5 presents an interesting case where the cut \nrule has no impact on the W+ rating: it is 6 for both the original and the reduced \npuzzles. One may think that it is due to the fact that the remaining main part P’6 still \nmakes a long diagonal white stripe, but the examination of the resolution path shows \nthat the whips[6] appear only after the upper part (above C8) has been solved. \nMoreover, the two whips[6] appearing in the resolution paths of P’6 and of the \noriginal puzzle lie completely in the lower part and are very similar.  \nWe give only the path for the reduced puzzle P’6 of Figure 15.6, where we track \ncells C7, C8 and C9 (but we have programmed no special rule to focus search on \nthem).  \n \n*****\t\r  \t\r  KakuRules\t\r  1.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  W+\t\r  \t\r  \t\r  *****\t\r  \nhorizontal-­‐magic-­‐sectors:\t\r   hr14c6\t\r   =\t\r   89,\t\r   hr13c1\t\r   =\t\r   789,\t\r   hr9c4\t\r   =\t\r   5789,\t\r   hr8c4\t\r   =\t\r   124,\t\r  \nhr6c6\t\r  =\t\r  12345,\t\r  hr4c7\t\r  =\t\r  689,\t\r  hr3c5\t\r  =\t\r  123457\t\r  \nvertical-­‐magic-­‐sectors:\t\r   vr4c11\t\r   =\t\r   13,\t\r   vr1c10\t\r   =\t\r   46789,\t\r   vr8c8\t\r   =\t\r   89,\t\r   vr4c7\t\r   =\t\r   2456789,\t\r  \nvr14c6\t\r  =\t\r  13,\t\r  vr3c5\t\r  =\t\r  12,\t\r  vr11c2\t\r  =\t\r  89\t\r  \nnaked-­‐singles\t\r  ==>\t\r  r16c6\t\r  =\t\r  1,\t\r  r15c6\t\r  =\t\r  3,\t\r  r13c4\t\r  =\t\r  7,\t\r  r9c5\t\r  =\t\r  5,\t\r  r6c10\t\r  =\t\r  4,\t\r  r3c10\t\r  =\t\r  7\t\r  (cell\t\r  C7),\t\r  r3c7\t\r  =\t\r  5,\t\r  \nvr1c7\t\r  =\t\r  59,\t\r  r2c7\t\r  =\t\r  9,\t\r  hr2c6\t\r  =\t\r  39,\t\r  r2c8\t\r  =\t\r  3,\t\r  vr7c5\t\r  =\t\r  25,\t\r  r8c5\t\r  =\t\r  2,\t\r  r8c7\t\r  =\t\r  4,\t\r  r8c6\t\r  =\t\r  1,\t\r  vr10c4\t\r  =\t\r  12347,\t\r  \nhr16c4\t\r  =\t\r  15,\t\r  r16c5\t\r  =\t\r  5,\t\r  vr13c5\t\r  =\t\r  579,\t\r  r14c5\t\r  =\t\r  7,\t\r  r15c5\t\r  =\t\r  9,\t\r  hr14c2\t\r  =\t\r  137\t\r  \nctr-­‐to-­‐verti-­‐sector\t\r  \t\r  ==>\t\r  r3c8\t\r  ≠\t\r  1,\t\r  r3c8\t\r  ≠\t\r  2\t\r  \n\n15. Non-binary arithmetic constraints and Kakuro     \n433 \nnaked-­‐singles\t\r  ==>\t\r  r3c8\t\r  =\t\r  4,\t\r  r3c6\t\r  =\t\r  3,\t\r  vr2c6\t\r  =\t\r  389,\t\r  vr1c8\t\r  =\t\r  349,\t\r  r4c8\t\r  =\t\r  9\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr4c4\t\r  ≠\t\r  46\t\r  ;\t\r  cell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr5c4\t\r  ≠\t\r  567\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr4c4\t\r  ≠\t\r  37\t\r  ;\t\r  cell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr11c3\t\r  ≠\t\r  5679\t\r  \nctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r11c5\t\r  ≠\t\r  5,\t\r  r11c6\t\r  ≠\t\r  5,\t\r  r11c7\t\r  ≠\t\r  5\t\r  ;\t\r  cell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr2c9\t\r  ≠\t\r  47\t\r  \nctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r2c11\t\r  ≠\t\r  4\t\r  ;\t\r  cell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr5c8\t\r  ≠\t\r  257,\t\r  hr5c8\t\r  ≠\t\r  347\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr5c4\t\r  ≠\t\r  369,\t\r  hr5c4\t\r  ≠\t\r  378,\t\r  hr5c4\t\r  ≠\t\r  459\t\r  ;\t\r  ctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r5c7\t\r  ≠\t\r  5\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr5c4\t\r  ≠\t\r  468\t\r  ;\t\r  ctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r5c7\t\r  ≠\t\r  6\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr5c8\t\r  ≠\t\r  248\t\r  ;\t\r  cell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr10c5\t\r  ≠\t\r  157,\t\r  hr10c5\t\r  ≠\t\r  247\t\r  \nctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r10c7\t\r  ≠\t\r  7,\t\r  r10c6\t\r  ≠\t\r  7\t\r  ;\t\r  cell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr10c5\t\r  ≠\t\r  256\t\r  \nctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r10c7\t\r  ≠\t\r  5,\t\r  r10c6\t\r  ≠\t\r  5\t\r  ;\t\r  cell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr10c5\t\r  ≠\t\r  346\t\r  \nctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r10c7\t\r  ≠\t\r  6,\t\r  r10c6\t\r  ≠\t\r  6\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr12c1\t\r  ≠\t\r  14567,\t\r  hr12c1\t\r  ≠\t\r  23567;\t\r  cell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr2c9\t\r  ≠\t\r  12359\t\r  \nctr-­‐to-­‐verti-­‐sector\t\r  \t\r  ==>\t\r  r5c9\t\r  ≠\t\r  9,\t\r  r7c9\t\r  ≠\t\r  9\t\r  ;\t\r  cell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr1c11\t\r  ≠\t\r  34\t\r  \nctr-­‐to-­‐verti-­‐sector\t\r  \t\r  ==>\t\r  r2c11\t\r  ≠\t\r  3\t\r  ;\t\r  cell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr2c9\t\r  ≠\t\r  38\t\r  \nctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r2c10\t\r  ≠\t\r  8\t\r  ;\t\r  cell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr11c3\t\r  ≠\t\r  24569,\t\r  vr11c3\t\r  ≠\t\r  24578\t\r  \ncell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr5c8\t\r  ≠\t\r  46\t\r  ;\t\r  ctr-­‐to-­‐verti-­‐sector\t\r  \t\r  ==>\t\r  r7c8\t\r  ≠\t\r  4,\t\r  r7c8\t\r  ≠\t\r  6\t\r  \ncell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr2c9\t\r  ≠\t\r  13457\t\r  ;\t\r  cell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr12c7\t\r  ≠\t\r  467\t\r  \ncell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr12c8\t\r  ≠\t\r  57\t\r  ;\t\r  ctr-­‐to-­‐verti-­‐sector\t\r  \t\r  ==>\t\r  r13c8\t\r  ≠\t\r  5,\t\r  r13c8\t\r  ≠\t\r  7\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr13c5\t\r  ≠\t\r  157,\t\r  hr13c5\t\r  ≠\t\r  256\t\r  ;\t\r  ctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r13c7\t\r  ≠\t\r  5,\t\r  r13c6\t\r  ≠\t\r  5\t\r  \nhoriz-­‐sector-­‐to-­‐ctr\t\r  \t\r  ==>\t\r  hr10c5\t\r  ≠\t\r  139\t\r  ;\t\r  ctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r10c6\t\r  ≠\t\r  9,\t\r  r10c7\t\r  ≠\t\r  9,\t\r  r10c8\t\r  ≠\t\r  9\t\r  \nnaked-­‐singles\t\r  ==>\t\r  r10c8\t\r  =\t\r  8,\t\r  r10c7\t\r  =\t\r  2,\t\r  r6c7\t\r  =\t\r  5,\t\r  r9c8\t\r  =\t\r  9,\t\r  hr10c5\t\r  =\t\r  238,\t\r  r10c6\t\r  =\t\r  3\t\r  \nverti-­‐sector-­‐to-­‐ctr\t\r  \t\r  ==>\t\r  vr14c2\t\r  ≠\t\r  35\t\r  ;\t\r  ctr-­‐to-­‐verti-­‐sector\t\r  \t\r  ==>\t\r  r15c2\t\r  ≠\t\r  5,\t\r  r16c2\t\r  ≠\t\r  5\t\r  \nbiv-­‐chain[2]:\t\r  vr1c11{n16\t\r  n25}\t\r  –\t\r  r3c11{n1\t\r  n2}\t\r  ==>\t\r  r2c11\t\r  ≠\t\r  2\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr2c9\t\r  ≠\t\r  29\t\r  \nnaked-­‐singles\t\r  ==>\t\r  hr2c9\t\r  =\t\r  56,\t\r  r2c10\t\r  =\t\r  6,\t\r  r2c11\t\r  =\t\r  5,\t\r  r4c10\t\r  =\t\r  8,\t\r  r4c9\t\r  =\t\r  6,\t\r  r5c10\t\r  =\t\r  9,\t\r  vr1c11\t\r  =\t\r  25,\t\r  \nr3c11\t\r  =\t\r  2,\t\r  r3c9\t\r  =\t\r  1\t\r  \n;;;\t\r  Resolution\t\r  state\t\r  RS1\t\r  \nAlthough the value of C7 (= r3c10) has been set long ago (almost at the \nbeginning), those of r2c10, r2c11 and r3c11 are set only now and the small upper \nrighmost graph that C7 separates from the rest is solved only now. The solution has \ninvolved a bivalue-chain[2]. In the present case, if the focus had been set on the \nsmall subgraph, it could have been solved earlier in the path – but without changing \nits overall complexity.  \n \nctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r5c9\t\r  ≠\t\r  5,\t\r  r5c9\t\r  ≠\t\r  8,\t\r  r5c9\t\r  ≠\t\r  7\t\r  ;\t\r  ctr-­‐to-­‐verti-­‐sector\t\r  \t\r  ==>\t\r  r7c9\t\r  ≠\t\r  5\t\r  \nbiv-­‐chain[2]:\t\r  hr5c8{n149\t\r  n239}\t\r  –\t\r  r5c11{n1\t\r  n3}\t\r  ==>\t\r  r5c9\t\r  ≠\t\r  3\t\r  \nbiv-­‐chain[2]:\t\r  vr12c8{n39\t\r  n48}\t\r  –\t\r  r14c8{n9\t\r  n8}\t\r  ==>\t\r  r13c8\t\r  ≠\t\r  8\t\r  \nbiv-­‐chain[2]:\t\r  vr14c2{n17\t\r  n26}\t\r  –\t\r  r16c2{n1\t\r  n2}\t\r  ==>\t\r  r15c2\t\r  ≠\t\r  2\t\r  \nbiv-­‐chain[2]:\t\r  hr16c1{n15\t\r  n24}\t\r  –\t\r  r16c2{n1\t\r  n2}\t\r  ==>\t\r  r16c3\t\r  ≠\t\r  2\t\r  \ncell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr11c3\t\r  ≠\t\r  23678\t\r  \nbiv-­‐chain[2]:\t\r  hr11c3{n3789\t\r  n4689}\t\r  –\t\r  r11c4{n3\t\r  n4}\t\r  ==>\t\r  r11c6\t\r  ≠\t\r  4,\t\r  r11c5\t\r  ≠\t\r  4\t\r  \nbiv-­‐chain[2]:\t\r  r16c2{n1\t\r  n2}\t\r  –\t\r  vr14c2{n17\t\r  n26}\t\r  ==>\t\r  r15c2\t\r  ≠\t\r  1\t\r  \nbiv-­‐chain[2]:\t\r  r16c2{n1\t\r  n2}\t\r  –\t\r  hr16c1{n15\t\r  n24}\t\r  ==>\t\r  r16c3\t\r  ≠\t\r  1\t\r  \ncell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr11c3\t\r  ≠\t\r  12689,\t\r  vr11c3\t\r  ≠\t\r  13679\t\r  \nwhip[2]:\t\r  r14c7{n8\t\r  n9}\t\r  –\t\r  vr12c7{n458\t\r  .}\t\r  ==>\t\r  r13c7\t\r  ≠\t\r  8\t\r  \nwhip[2]:\t\r  r14c7{n9\t\r  n8}\t\r  –\t\r  vr12c7{n359\t\r  .}\t\r  ==>\t\r  r13c7\t\r  ≠\t\r  9\t\r  \n\n434 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[2]:\t\r  r14c8{n9\t\r  n8}\t\r  –\t\r  vr12c8{n39\t\r  .}\t\r  ==>\t\r  r13c8\t\r  ≠\t\r  9\t\r  \nwhip[2]:\t\r  r14c7{n8\t\r  n9}\t\r  –\t\r  vr12c7{n458\t\r  .}\t\r  ==>\t\r  r15c7\t\r  ≠\t\r  8\t\r  \nwhip[2]:\t\r  vr10c5{n49\t\r  n58}\t\r  –\t\r  r11c5{n6\t\r  .}\t\r  ==>\t\r  r12c5\t\r  ≠\t\r  8\t\r  \nwhip[2]:\t\r  vr10c5{n58\t\r  n49}\t\r  –\t\r  r11c5{n6\t\r  .}\t\r  ==>\t\r  r12c5\t\r  ≠\t\r  9\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr12c1\t\r  ≠\t\r  12389\t\r  \nwhip[2]:\t\r  r12c2{n8\t\r  n9}\t\r  –\t\r  hr12c1{n23468\t\r  .}\t\r  ==>\t\r  r12c3\t\r  ≠\t\r  8,\t\r  r12c6\t\r  ≠\t\r  8\t\r  \nwhip[2]:\t\r  r12c2{n9\t\r  n8}\t\r  –\t\r  hr12c1{n23459\t\r  .}\t\r  ==>\t\r  r12c3\t\r  ≠\t\r  9,\t\r  r12c6\t\r  ≠\t\r  9\t\r  \nwhip[2]:\t\r  vr12c7{n179\t\r  n458}\t\r  –\t\r  r13c7{n1\t\r  .}\t\r  ==>\t\r  r15c7\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  vr5c8{n19\t\r  n37}\t\r  –\t\r  r6c8{n1\t\r  .}\t\r  ==>\t\r  r7c8\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  vr5c8{n19\t\r  n28}\t\r  –\t\r  r6c8{n1\t\r  .}\t\r  ==>\t\r  r7c8\t\r  ≠\t\r  2\t\r  \nbiv-­‐chain[3]:\t\r  r5c9{n2\t\r  n4}\t\r  –\t\r  vr2c9{n12368\t\r  n12467}\t\r  –\t\r  r6c9{n3\t\r  n2}\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  2\t\r  \nbiv-­‐chain[3]:\t\r  vr2c9{n12368\t\r  n12467}\t\r  –\t\r  r6c9{n3\t\r  n2}\t\r  –\t\r  r5c9{n2\t\r  n4}\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  4\t\r  \nwhip[3]:\t\r  r6c9{n3\t\r  n2}\t\r  –\t\r  r5c9{n2\t\r  n4}\t\r  –\t\r  vr2c9{n12368\t\r  .}\t\r  ==>\t\r  r7c9\t\r  ≠\t\r  3\t\r  \nhoriz-­‐sector-­‐to-­‐ctr\t\r  \t\r  ==>\t\r  hr7c5\t\r  ≠\t\r  3689\t\r  \nwhip[3]:\t\r  vr6c6{n1234678\t\r  n1234579}\t\r  –\t\r  r11c6{n8\t\r  n7}\t\r  –\t\r  r9c6{n7\t\r  .}\t\r  ==>\t\r  r13c6\t\r  ≠\t\r  9\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr13c5\t\r  ≠\t\r  139\t\r  \nwhip[3]:\t\r  vr6c6{n1234678\t\r  n1234579}\t\r  –\t\r  r11c6{n8\t\r  n7}\t\r  –\t\r  r9c6{n7\t\r  .}\t\r  ==>\t\r  r7c6\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r7c9{n7\t\r  n8}\t\r  –\t\r  r7c8{n8\t\r  n9}\t\r  –\t\r  r7c7{n9\t\r  .}\t\r  ==>\t\r  hr7c5\t\r  ≠\t\r  4589\t\r  \nwhip[4]:\t\r  r6n2{c8\t\r  c9}\t\r  –\t\r  r5c9{n2\t\r  n4}\t\r  –\t\r  hr5c8{n239\t\r  n149}\t\r  –\t\r  c11n3{r5\t\r  .}\t\r  ==>\t\r  r6c8\t\r  ≠\t\r  3\t\r  \ncell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr5c8\t\r  ≠\t\r  37\t\r  ;\t\r  ctr-­‐to-­‐verti-­‐sector\t\r  \t\r  ==>\t\r  r7c8\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  r7c8{n8\t\r  n9}\t\r  –\t\r  hr7c5{n5678\t\r  n2789}\t\r  –\t\r  r7c7{n6\t\r  n7}\t\r  –\t\r  r7c9{n7\t\r  .}\t\r  ==>\t\r  r7c6\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  r4c6{n8\t\r  n9}\t\r  –\t\r  hr4c4{n28\t\r  n19}\t\r  –\t\r  c5n2{r4\t\r  r5}\t\r  –\t\r  hr5c4{n189\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  8\t\r  \nnaked-­‐singles\t\r  ==>\t\r  r5c6\t\r  =\t\r  9,\t\r  r4c6\t\r  =\t\r  8,\t\r  hr4c4\t\r  =\t\r  28,\t\r  r4c5\t\r  =\t\r  2,\t\r  r5c5\t\r  =\t\r  1,\t\r  hr5c4\t\r  =\t\r  189,\t\r  r5c7\t\r  =\t\r  8,\t\r  r9c7\t\r  =\t\r  7,\t\r  \t\r  \nr9c6\t\r  =\t\r  8,\t\r  vr6c6\t\r  =\t\r  1234678\t\r  \nhoriz-­‐sector-­‐to-­‐ctr\t\r  \t\r  ==>\t\r  hr7c5\t\r  ≠\t\r  5678\t\r  ;\t\r  horiz-­‐sector-­‐to-­‐ctr\t\r  \t\r  ==>\t\r  hr13c5\t\r  ≠\t\r  148\t\r  \nctr-­‐to-­‐horiz-­‐sector\t\r  \t\r  ==>\t\r  r13c7\t\r  ≠\t\r  1\t\r  ;\t\r  horiz-­‐sector-­‐to-­‐ctr\t\r  \t\r  ==>\t\r  hr13c5\t\r  ≠\t\r  238\t\r  \nbiv-­‐chain[2]:\t\r  hr11c3{n3789\t\r  n4689}\t\r  –\t\r  r11c6{n7\t\r  n6}\t\r  ==>\t\r  r11c7\t\r  ≠\t\r  6\t\r  \nnaked-­‐singles\t\r   ==>\t\r   r11c7\t\r   =\t\r   9,\t\r   r7c7\t\r   =\t\r   6\t\r   (cell\t\r   C8),\t\r   hr7c5\t\r   =\t\r   4679,\t\r   r7c8\t\r   =\t\r   9,\t\r   r7c9\t\r   =\t\r   7,\t\r   r7c6\t\r   =\t\r   4,\t\r  \nvr2c9\t\r  =\t\r  12467,\t\r  r6c9\t\r  =\t\r  2,\t\r  r6c8\t\r  =\t\r  1,\t\r  r6c11\t\r  =\t\r  3,\t\r  r5c11\t\r  =\t\r  1,\t\r  r5c9\t\r  =\t\r  4,\t\r  hr5c8\t\r  =\t\r  149,\t\r  vr5c8\t\r  =\t\r  19\t\r  \n;;;\t\r  Resolution\t\r  state\t\r  RS2\t\r  \nIt is worth making a second pause here. As shown by the part of the resolution \npath upto RS2, setting the value of cell C8 has involved the two parts of the graph \nseparated by C8. The upper of the two parts is now completely solved. \n \ncell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr10c5\t\r  ≠\t\r  49\t\r  ;\t\r  ctr-­‐to-­‐verti-­‐sector\t\r  \t\r  ==>\t\r  r12c5\t\r  ≠\t\r  4\t\r  \nbiv-­‐chain[2]:\t\r  hr11c3{n3789\t\r  n4689}\t\r  –\t\r  r11c6{n7\t\r  n6}\t\r  ==>\t\r  r11c5\t\r  ≠\t\r  6\t\r  \nbiv-­‐chain[2]:\t\r  vr10c5{n58\t\r  n67}\t\r  –\t\r  r11c5{n8\t\r  n7}\t\r  ==>\t\r  r12c5\t\r  ≠\t\r  7\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr12c1\t\r  ≠\t\r  12479\t\r  ;\t\r  cell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr12c1\t\r  ≠\t\r  13478\t\r  \nwhip[2]:\t\r  hr11c3{n4689\t\r  n3789}\t\r  –\t\r  r11c6{n6\t\r  .}\t\r  ==>\t\r  r11c5\t\r  ≠\t\r  7\t\r  \nnaked-­‐singles\t\r  ==>\t\r  r11c5\t\r  =\t\r  8,\t\r  vr10c5\t\r  =\t\r  58,\t\r  r12c5\t\r  =\t\r  5\t\r  \nwhip[2]:\t\r  hr13c5{n247\t\r  n346}\t\r  –\t\r  r13c6{n2\t\r  .}\t\r  ==>\t\r  r13c7\t\r  ≠\t\r  6\t\r  \nwhip[3]:\t\r  r14c3{n1\t\r  n3}\t\r  –\t\r  vr11c3{n14579\t\r  n13589}\t\r  –\t\r  r12c3{n7\t\r  .}\t\r  ==>\t\r  r15c3\t\r  ≠\t\r  1\t\r  \nwhip[4]:\t\r  r13c7{n7\t\r  n3}\t\r  –\t\r  r13c8{n3\t\r  n4}\t\r  –\t\r  vr12c8{n39\t\r  n48}\t\r  –\t\r  r14n9{c8\t\r  .}\t\r  ==>\t\r  vr12c7\t\r  ≠\t\r  368\t\r  \nwhip[5]:\t\r  r14n9{c7\t\r  c8}\t\r  –\t\r  vr12c8{n48\t\r  n39}\t\r  –\t\r  r13c8{n4\t\r  n3}\t\r  –\t\r  hr13c5{n247\t\r  n346}\t\r  –\t\r  r13c7{n2\t\r  .}\t\r  ==>\t\r  \nvr12c7\t\r  ≠\t\r  278\t\r  \nwhip[2]:\t\r  vr12c7{n458\t\r  n269}\t\r  –\t\r  r13c7{n3\t\r  .}\t\r  ==>\t\r  r15c7\t\r  ≠\t\r  2\t\r  \n\n15. Non-binary arithmetic constraints and Kakuro     \n435 \nwhip[2]:\t\r  r15c2{n7\t\r  n6}\t\r  –\t\r  r15c7{n6\t\r  .}\t\r  ==>\t\r  hr15c1\t\r  ≠\t\r  234689\t\r  \nwhip[2]:\t\r  hr15c1{n134789\t\r  n235679}\t\r  –\t\r  r15c4{n1\t\r  .}\t\r  ==>\t\r  r15c3\t\r  ≠\t\r  2\t\r  \nwhip[2]:\t\r  vr12c7{n458\t\r  n179}\t\r  –\t\r  r13c7{n2\t\r  .}\t\r  ==>\t\r  r15c7\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  hr15c1{n235679\t\r  n134789}\t\r  –\t\r  r15c7{n5\t\r  n1}\t\r  –\t\r  r15c4{n1\t\r  .}\t\r  ==>\t\r  r15c3\t\r  ≠\t\r  4\t\r  \nwhip[6]:\t\r   hr12c1{n13568\t\r   n23459}\t\r   –\t\r   r12c6{n6\t\r   n2}\t\r   –\t\r   r12c3{n2\t\r   n3}\t\r   –\t\r   r14c3{n3\t\r   n1}\t\r   –\t\r  \nc4n1{r14\t\r  r15}\t\r  –\t\r  c4n2{r15\t\r  .}\t\r  ==>\t\r  r12c4\t\r  ≠\t\r  4\t\r  \nwhip[6]:\t\r   r11c6{n6\t\r   n7}\t\r   –\t\r   hr11c3{n4689\t\r   n3789}\t\r   –\t\r   r11c4{n4\t\r   n3}\t\r   –\t\r   r14c4{n3\t\r   n1}\t\r   –\t\r  \nr12c4{n1\t\r  n2}\t\r  –\t\r  c6n2{r12\t\r  .}\t\r  ==>\t\r  r13c6\t\r  ≠\t\r  6\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr13c5\t\r  ≠\t\r  346\t\r  \nnaked-­‐singles\t\r  ==>\t\r  hr13c5\t\r  =\t\r  247,\t\r  r13c8\t\r  =\t\r  4,\t\r  vr12c8\t\r  =\t\r  48,\t\r  r14c8\t\r  =\t\r  8,\t\r  r14c7\t\r  =\t\r  9\t\r  \ncell-­‐to-­‐verti-­‐ctr\t\r  \t\r  ==>\t\r  vr12c7\t\r  ≠\t\r  359\t\r  ;\t\r  ctr-­‐to-­‐verti-­‐sector\t\r  \t\r  ==>\t\r  r15c7\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  r15c2{n7\t\r  n6}\t\r  –\t\r  hr15c1{n134789\t\r  n235679}\t\r  –\t\r  r15c7{n1\t\r  .}\t\r  ==>\t\r  r15c3\t\r  ≠\t\r  7\t\r  \nwhip[2]:\t\r  r16c3{n4\t\r  n5}\t\r  –\t\r  r15c3{n5\t\r  .}\t\r  ==>\t\r  vr11c3\t\r  ≠\t\r  23579\t\r  \nwhip[3]:\t\r  r15c2{n6\t\r  n7}\t\r  –\t\r  hr15c1{n135689\t\r  n235679}\t\r  –\t\r  r15c7{n1\t\r  .}\t\r  ==>\t\r  r15c3\t\r  ≠\t\r  6\t\r  \nbiv-­‐chain[2]:\t\r  r15c3{n5\t\r  n8}\t\r  –\t\r  r13c3{n8\t\r  n9}\t\r  ==>\t\r  vr11c3\t\r  ≠\t\r  14678\t\r  \nwhip[3]:\t\r  r15c7{n1\t\r  n6}\t\r  –\t\r  hr15c1{n134789\t\r  n135689}\t\r  –\t\r  r15c2{n7\t\r  .}\t\r  ==>\t\r  r15c4\t\r  ≠\t\r  1\t\r  \ncell-­‐to-­‐horiz-­‐ctr\t\r  \t\r  ==>\t\r  hr15c1\t\r  ≠\t\r  135689\t\r  \nbiv-­‐chain[2]:\t\r  hr15c1{n134789\t\r  n235679}\t\r  –\t\r  r15c7{n1\t\r  n6}\t\r  ==>\t\r  r15c2\t\r  ≠\t\r  6\t\r  \nnaked-­‐singles\t\r  ==>\t\r  r15c2\t\r  =\t\r  7,\t\r  vr14c2\t\r  =\t\r  17,\t\r  r16c2\t\r  =\t\r  1,\t\r  hr16c1\t\r  =\t\r  15,\t\r  r16c3\t\r  =\t\r  5,\t\r  r15c3\t\r  =\t\r  8\t\r  (cell\t\r  C10),\t\r  \nr13c3\t\r  =\t\r  9,\t\r  r13c2\t\r  =\t\r  8,\t\r  r12c2\t\r  =\t\r  9,\t\r  vr11c3\t\r  =\t\r  13589,\t\r  hr15c1\t\r  =\t\r  134789,\t\r  r15c4\t\r  =\t\r  4,\t\r  r11c4\t\r  =\t\r  3,\t\r  r14c4\t\r  =\t\r  1,\t\r  \nr14c3\t\r  =\t\r  3,\t\r  r12c3\t\r  =\t\r  1,\t\r  r12c4\t\r  =\t\r  2,\t\r  r15c7\t\r  =\t\r  1,\t\r  vr12c7\t\r  =\t\r  179,\t\r  r13c7\t\r  =\t\r  7,\t\r  r13c6\t\r  =\t\r  2,\t\r  hr12c1\t\r  =\t\r  12569,\t\r  \nr12c6\t\r  =\t\r  6,\t\r  r11c6\t\r  =\t\r  7\t\r  (cell\t\r  C9),\t\r  hr11c3\t\r  =\t\r  3789\t\r  \nGrid\t\r  solved.\t\r  Hardest\t\r  step:\t\r  Whip[6]\t\r  \nThe separation potential of C9 or C10 has not been used in this resolution path. \nWhether there is another path in W6\n+ that would use these cells is an open question. \nThe small sub-puzzles P1 to P6 are easily solved once P’6 is – provided that one \nuses the information obtained in the P’6 solution. Considered as standalone puzzles, \nonly P5 and P6 have a unique solution; P1 , P2, P2+P3 and P4 do not. \n15.6.5. The cut rule is not subsumed by the coupling rules \nTheorem 15.1 says that the original Kakuro problem is mathematically \nequivalent to our CSP re-formulation. However, as already noticed, this does not \nimply that our standard arsenal of resolution rules is enough to solve all the Kakuro \npuzzles, even with the coupling rules added. In this context, there naturally appears \nthe question of whether the cut rule is subsumed by the coupling rules. It may seem \nthat it should be so, but the first sub-graph P1 of the example in Figure 15.5 provides \nan easy counter-example (Figure 15.7). \nAs the practical effect of the cut rule is to split the puzzle into several almost \nindependent sub-puzzles, this situation does not present much interest from a \ntheoretical point of view. It could therefore be assumed that a well-formed Kakuro \npuzzle is 2-connected. [Of course, from a new player’s point of view, there may be \nsome fun in finding such domains and easily solving apparently very large puzzles. \n\n436 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nBut, as detecting the cuts and then checking if they are valid is very easy, all the \nrepetitive paper scratching it finally amounts to may also become very boring after \nsome practice.]  \n \n \n K \n      \n 15 \n \n      \n 23 \n \n      \n 9 \n \n  \n \n \nThe question with this small sub-puzzle P1 is: \ngiven the same information as used by the \nsurface sums, i.e. given only the values of the \nfive horizontal and vertical sums of the \nsectors completely inside P1, can it be \ndeduced that the sum of the first three cells in \nthe fourth row is 22, using only ECP, Singles \nand coupling rules? But it cannot. All that \ncan be deduced for the white cells inside P1 is \nshown in the Figure. \n     10 \n  \n \n 1      3 \n      \n          \n6 \n 1      3 \n      \n  \n  \n \n \n     15 \n  \n \n 1      3 \n 4  5  6 \n     8  9 \n \n          \n     8  9 \n 1      3 \n     5      \n  \n      \n  \n \n \n     32 \n  \n \n 1      3 \n 4  5  6 \n     8  9 \n \n          \n     8  9 \n1      3 \n     5      \n \n \n  \n \n \n \n \n \n  \n \n  \n \nFigure 15.7. P1, the first small part of puzzle of Figure 15.5 \n \n \n\n \n16. Topological and geometric \nconstraints: map \ncolouring and path finding \nIn this chapter, we consider two kinds of Constraint Satisfaction Problems with \nconstraints that can be considered as topological or geometrical in a broad sense of \nthese words:  \n– the Map colouring problem is the simplest CSP of all those we shall study in \nthis book; its constraints are obvious transcriptions of neighbourhood relations and \nare thus purely topological; \n–  in the path finding problem of the Numbrix® or Hidato® CSPs, where there is \nan underlying grid structure, one can choose whether they adopt only the obvious \npurely topological constraints derived from the relation of neighbourhood/ \nadjacency, thus implicitly forgetting much of the grid structure, or whether they rely \non the notion of distance between two cells and they adopt a larger set of constraints \nderived from it; interestingly, it is easy to find concrete examples showing that the \ntwo views are not equivalent (i.e. they lead to different ratings). \n16.1. Map colouring and the four-colour problem \nMap colouring is interesting in the context of this book mainly because it will \nprovide an example of a CSP in which, contrary to all our previous examples, there \nis no underlying grid structure at all (even distorted by “black cells” as in Kakuro, \nNumbrix® and Hidato®). This will illustrate our approach in its most basic form. \n[This section has no pretension of adding anything valuable to graph theory.] \n16.1.1. The map colouring problem \nMap colouring is a classical mathematical problem that became famous with the \nproof of the “four-colour theorem” in 1976. A map is defined as a partition of a \nplane (or a finite part of a plane) into a finite number of continuous domains with \nabsolutely continuous boundaries called regions; contrary to countries in the real \nworld, regions may not be made of separate parts (in this case, it is easy to find \ncounterexamples to the theorem). Two regions are adjacent if they have a common \nboundary of positive length; two regions with only one point in common, or even \nwith only isolated points in common, are not adjacent. A colouring is an \n\n438 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nassignement of a colour to each region (i.e. it is a function from the set of regions to \nthe set of allowed colours) such that two adjacent regions have different colours. \nThe theorem states that every map can be coloured with at most four colours.  \nThe conditions of the theorem are strict. For regions on a 2D surface other than a \nplane, more than four colours can be required. Thus, if four are still enough on a \nsphere or a cylinder, six can be needed on a Möbius strip or a Klein bottle, and \nseven on a torus (there is a famous example of a partition of a torus into seven \nregions, each adjacent to all the others, and that require seven colours). Moreover, \neven on a plane, if the colours of some regions are pre-assigned, more than four \ncolours can be required. Nevertheless, most of what we say below about resolution \nrules could easily be extended to such cases, with the appropriate number of colours. \nWe consider the adjacency constraints of map colouring as topological because \nthey depend only on aspects of the “geometry” that are invariant by elastic \ntransformations (and therefore independent of distances). Moreover, there are well-\nknown results that associate the maximum number of colours required on a non-\nplanar 2D surface of positive genus with its Euler characteristic or with its genus if \nit is orientable – both of these values being purely topological. \nIn the more formal view generally adopted in mathematical studies of the \nproblem, a map is assimilated with a “planar graph” (a type of graph that can be \ngiven various purely graph-theoretic definitions, with no reference to geometry): a \nvertex is assigned to each region; there is an undirected edge between two vertices if \nand only if the corresponding regions are adjacent (there is only one edge even if the \ntwo regions are adjacent along several disjoint parts of their boundaries); \nconversely, it is easy to see that every planar graph originates in this way in a map \n(indeed, it can have many map representations). The colouring problem is then to \nassign a colour from a predefined set to each vertex in such a way that two vertices \nlinked by an edge have different colours. The corresponding form of the theorem \nstates that every planar graph is 4-colourable (i.e. that 4 colours are always enough). \nEven though the theorem itself does not seem to have any practical applications \nin map production (real maps generally use more than four colours), it has become a \ntopic of much debate, in relation with the way it was first proved: in 1976, the \nproblem was reduced by Happel and Haken to a set of 1,936 particular cases (in \n1996, this set was reduced to “only” 633); these cases had then to be tested \nindividually by a computer program and the main objection from some \nmathematicians was that it was impossible to check the proof manually. Later, the \nwhole proof was checked by the Coq automatic theorem checker, making it more \n“acceptable”. In our view, the problem is not acceptability but the fact that it does \nnot teach us anything, as explained in section 12.3.9.1.  \nFrom the standard graph-theoretic point of view, the minimum number p of \ncolours necessary for colouring a map is the only problem and how many different \n\n16. Topological and geometric constraints: map colouring and path finding     \n439 \nsuch p-colourings are possible is more or less irrelevant. Given a map, it will \ngenerally have several possible 4-colourings if no region has a predefined colour; \neven if there is a definition of “Apollonian” graphs as the “uniquely 4-colourable” \ngraphs (several of the equivalent geometric definitions could be considered as more \nbasic), this uniqueness is meant only modulo a permutation of the colours.  \nThe problem of colouring planar graphs can be extended to that of colouring \ngraphs in general and any CSP could be considered as a graph colouring problem. \nThus 9×9 Sudoku could be considered as a graph colouring problem with 81 regions \n(corresponding to the rc cells) and 9 colours (corresponding to the nine digits); it has \na fixed, very specific and highly structured, but non-planar, network of edges, \ncorresponding to the links between the cells.  \nIn this section, we shall concentrate on the reverse view: map colouring will be \nseen as a CSP and we shall consider the colouring problem in the same way as we \nhave done for Sudoku, Futoshiki or Kakuro: we shall deal with instances with \nsufficiently many “givens” to ensure that they have a unique solution with the \nallowed number of colours. For definiteness, we take this number to be four. As far \nas we know, this problem is not a standard one in graph theory. \n16.1.2. Map colouring as a CSP \nExpressing the map colouring problem (or the equivalent planar-graph colouring \nproblem) as a CSP is straightforward: each region/vertex is associated with a CSP \nvariable (we call these generically X1, X2, …), with domain a predefined set of four \ncolours – the same set for all the CSP variables, namely {Blue, Red, Yellow, Green} \nor {B, R, Y, G} for short. We use X1, X2, … and c1, c2, … for names of variables of \nrespective sorts CSP-Variable and Colour. \nPre-labels are pairs < region, colour >. Labels are the same thing as pre-labels \n(each label has only one pre-label in its equivalence class). Two labels < X1, c1 > \nand < X2, c2 > are linked if and only if  \n- either: X1 = X2 and c1 ≠ c2 (csp-links) \n- or: X1 ≠ X2, X1 and X2 are adjacent, and c1 = c2 (adjacency links). \nThere is no g-label and there are very limited possibilities for Subsets. As a \nresult, map colouring does not seem to have much potential as a logic puzzle. \nIndeed, we have found only one website proposing a generator of map colouring \ninstances ([Tatham www]; there are many map colouring games with hand made \nmaps, but there seems to be no other generator). However, different global 2D \ntopologies (i.e. maps on non-planar surfaces) may allow more subtle patterns. \n\n440 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n16.1.3. A map colouring example and a whip-based solution  \nFigure 16.1 shows a map with 30 regions and 12 givens. It is adapted from an \nexample of the hardest level (“unreasonable”) in the famous Tatham collection of \ngenerators of instances for various games [Tatham www]. As all the Sudoku and \nFutoshiki instances we have found on that website are relatively easy, even those \nclassified as “extreme” or “unreasonable”, we conjecture that this is also the case for \nthe map examples – but we have no means of checking this. Anyway, the following \nexample is the hardest one (with respect to the W rating) we could find in a set of 30 \n“unreasonable” ones we tested (some of which had upto 120 regions): it requires \nwhips of length 7.  \n \n \n \n1 \n \n4 \n6 \n7 \nR  \n8 \n \n10  \n \n \n13 \n2 \n3 \nB  \n \n \n \n9 \n19  \n \n11 \n12 \nY \nY G 5 \n \n \n \n \n \n \n \n20 \n \n \n \n14  \n \n \n \n \n16  \n18  \n \n \n \n \nB  \n15  \n \n \n \n17 \nR  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n27 \n28  \n \n21 \n22  \n \n \n \n \n \n \n \n \n \nR  \n \n23  \nR  \n \n \n \n26  \n \n \n \n \n24  \n \n \n \n \n \n \n \n \n \n \n \n \n25 G  \n \n \n \n \n \n29 \nR  \n30 \nB  \nFigure 16.1. A map with 30 regions and 12 givens (adapted from one on [Tatham www]) \nThe regions in the original puzzle have more complex shapes than in our Figure, \nwhich makes it harder and probably more interesting for a human solver; but, as \nmentioned at the end of section 4.1, this is typically one informal aspect that a \nformal resolution system can hardly tackle. To be more specific, let us mention \nbriefly how this map is passed to the “solve” function of CSP-Rules: \n \n(solve\t\r  4\t\r  30\t\r  \".YGB..R.....YB...R....R.G..RRB\"\t\r  \n1\t\r  2\t\r  3\t\r  4\t\r  |\t\r  2\t\r  3\t\r  14\t\r  |\t\r  3\t\r  4\t\r  5\t\r  14\t\r  |\t\r  4\t\r  5\t\r  6\t\r  |\t\r  5\t\r  6\t\r  14\t\r  15\t\r  |\t\r  6\t\r  7\t\r  8\t\r  9\t\r  15\t\r  16\t\r  |\t\r  8\t\r  9\t\r  10\t\r  19\t\r  |\t\r  9\t\r  16\t\r  17\t\r  18\t\r  19\t\r  |\t\r  10\t\r  11\t\r  12\t\r  13\t\r  \n19\t\r  20\t\r  |\t\r  11\t\r  12\t\r  20\t\r  |\t\r  12\t\r  13\t\r  20\t\r  28\t\r  |\t\r  14\t\r  15\t\r  21\t\r  22\t\r  |\t\r  15\t\r  16\t\r  17\t\r  22\t\r  |\t\r  16\t\r  17\t\r  |\t\r  17\t\r  18\t\r  19\t\r  22\t\r  26\t\r  27\t\r  |\t\r  18\t\r  19\t\r  |\t\r  19\t\r  \n20\t\r  27\t\r  |\t\r  20\t\r  28\t\r  |\t\r  21\t\r  22\t\r  23\t\r  24\t\r  |\t\r  22\t\r  23\t\r  24\t\r  26\t\r  29\t\r  |\t\r  23\t\r  24\t\r  25\t\r  |\t\r  24\t\r  25\t\r  |\t\r  26\t\r  27\t\r  28\t\r  29\t\r  |\t\r  27\t\r  28\t\r  |\t\r  28\t\r  30\t\r  |\t\r  29\t\r  30\t\r  )\t\r  \n\n16. Topological and geometric constraints: map colouring and path finding     \n441 \nThe first parameter (4) is the number of colours allowed; the second (30) is the \nnumber of CSP variables (i.e. of regions), the third is a string of length 30 (the same \nas the number of CSP variables) representing the series of givens (with a dot \ncorresponding to no given, as in Sudoku); next comes a series of sequences of \nnumbers separated by a vertical bar; each sequence between two bars represents the \nregions that are adjacent to its first element (as adjacency is a symmetric relation, \nonly regions with a larger number than the first need be explicitly written): thus \nregion X5 is linked to (and only to) X3, X4, X6, X14 and X15, as can be checked on \nFigure 16.1, and only the last three links need be written in the X5 sequence (the \nfirst two being written in the X3 and X4 sequences). As can be seen from this \nabstract graph representation, it provides no means of specifying the real shapes of \nregions or any other geometric detail. And it is not hard to imagine very different \nlayouts for the same graph from the one in Figure 16.1. \n \n*****\t\r  \t\r  MapRules\t\r  1.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  config:\t\r  W\t\r  \t\r  \t\r  *****\t\r  \nsingle\t\r  ==>\t\r  X1\t\r  =\t\r  R\t\r  \nbiv-­‐chain[2]:\t\r  X22{Y\t\r  G}\t\r  –\t\r  X21{G\t\r  Y}\t\r  ==>\t\r  X24\t\r  ≠\t\r  Y\t\r  \nsingle\t\r  ==>\t\r  X24\t\r  =\t\r  B\t\r  \nwhip[3]:\t\r  X6{G\t\r  Y}\t\r  –\t\r  X5{Y\t\r  R}\t\r  –\t\r  X15{R\t\r  .}\t\r  ==>\t\r  X16\t\r  ≠\t\r  G\t\r  \nwhip[6]:\t\r  X6{Y\t\r  G}\t\r  –\t\r  X9{G\t\r  B}\t\r  –\t\r  X19{B\t\r  G}\t\r  –\t\r  X17{G\t\r  Y}\t\r  –\t\r  X16{Y\t\r  R}\t\r  –\t\r  X15{R\t\r  .}\t\r  ==>\t\r  X8\t\r  ≠\t\r  Y\t\r  \nwhip[6]:\t\r  X6{G\t\r  Y}\t\r  –\t\r  X5{Y\t\r  R}\t\r  –\t\r  X15{R\t\r  G}\t\r  –\t\r  X22{G\t\r  Y}\t\r  –\t\r  X17{Y\t\r  B}\t\r  –\t\r  X9{B\t\r  .}\t\r  ==>\t\r  X8\t\r  ≠\t\r  G\t\r  \nwhip[6]:\t\r  X22{Y\t\r  G}\t\r  –\t\r  X15{G\t\r  R}\t\r  –\t\r  X5{R\t\r  Y}\t\r  –\t\r  X6{Y\t\r  G}\t\r  –\t\r  X9{G\t\r  B}\t\r  –\t\r  X16{B\t\r  .}\t\r  ==>\t\r  X17\t\r  ≠\t\r  Y\t\r  \nwhip[3]:\t\r  X17{B\t\r  G}\t\r  –\t\r  X26{G\t\r  Y}\t\r  –\t\r  X22{Y\t\r  .}\t\r  ==>\t\r  X27\t\r  ≠\t\r  B\t\r  \nwhip[3]:\t\r  X17{B\t\r  G}\t\r  –\t\r  X19{G\t\r  Y}\t\r  –\t\r  X27{Y\t\r  .}\t\r  ==>\t\r  X9\t\r  ≠\t\r  B\t\r  \nbiv-­‐chain[2]:\t\r  X6{Y\t\r  G}\t\r  –\t\r  X9{G\t\r  Y}\t\r  ==>\t\r  X16\t\r  ≠\t\r  Y\t\r  \nwhip[7]:\t\r  X6{G\t\r  Y}\t\r  –\t\r  X9{Y\t\r  G}\t\r  –\t\r  X17{G\t\r  B}\t\r  –\t\r  X19{B\t\r  Y}\t\r  –\t\r  X27{Y\t\r  G}\t\r  –\t\r  X26{G\t\r  Y}\t\r  –\t\r  X22{Y\t\r  .}\t\r  ==>\t\r  X15\t\r  ≠\t\r  G\t\r  \nbiv-­‐chain[2]:\t\r  X5{Y\t\r  R}\t\r  –\t\r  X15{R\t\r  Y}\t\r  ==>\t\r  X6\t\r  ≠\t\r  Y\t\r  \nsingles\t\r  ==>\t\r  X6\t\r  =\t\r  G,\t\r  X9\t\r  =\t\r  Y\t\r  \nwhip[2]:\t\r  X17{G\t\r  B}\t\r  –\t\r  X19{B\t\r  .}\t\r  ==>\t\r  X27\t\r  ≠\t\r  G\t\r  \nsingle\t\r  ==>\t\r  X27\t\r  =\t\r  Y\t\r  \nwhip[2]:\t\r  X17{G\t\r  B}\t\r  –\t\r  X26{B\t\r  .}\t\r  ==>\t\r  X22\t\r  ≠\t\r  G\t\r  \nsingles\t\r  to\t\r  the\t\r  end:\t\r  X22\t\r  =\t\r  Y,\t\r  X15\t\r  =\t\r  R,\t\r  X5\t\r  =\t\r  Y,\t\r  X16\t\r  =\t\r  B,\t\r  X17\t\r  =\t\r  G,\t\r  X19\t\r  =\t\r  B,\t\r  X8\t\r  =\t\r  R,\t\r  X10\t\r  =\t\r  G,\t\r  X12\t\r  =\t\r  B,\t\r  \nX20\t\r  =\t\r  Y,\t\r  X11\t\r  =\t\r  R,\t\r  X26\t\r  =\t\r  B,\t\r  X21\t\r  =\t\r  G\t\r  \nThis resolution path is unchanged if braids are activated: both the W and the B \nratings are 7. \n16.2. Path finding: Numbrix® and Hidato® \nNumbrix® and Hidato® are two closely related types of path-finding problems, \ninvented respectively by Marylin vos Savant and Gyora Benayek. They are \ninteresting in the context of this book mainly because they will lead us to introduce \na kind of CSP variables we have not yet encountered (the Xn), they are based on a \n\n442 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nnew kind of constraints and they allow an easy illustratation of the consequences of \ndifferent modelling choices for these constraints. \n16.2.1. Definition of Numbrix® and Hidato® \nWe first give the broadest definitions before mentioning various (in our opinion \nunjustified) restrictions that are sometimes put on them. \nDefinition: A square grid of size n is given with two types of cells (“black” and \n“white”, as in Kakuro); there are N ≤ n×n white cells and some of them are filled in \nwith a number not larger than N; the problem is to find a “continuous” path \ncompatible with the clues, i.e. a sequence (C1, …, CN) of white cells such that: \n– for any 1 ≤ p < N, cell Cp+1 is “adjacent” to cell Cp, \n– a clue indicates a forced passage of the path at a fixed time: more precisely, for \nany given number p in a white cell Dp, one must have Cp = Dp. \nThe difference between Numbrix® and Hidato® lies in the meaning of “adjacent”: \nin Numbrix® two cells are adjacent if and only if they touch each other by one side \nin the same row or column; in Hidato®, they may also touch each  other in diagonal, \ni.e. by a corner. \nRemarks: \n– as in Kakuro, the “real” grid (made of the white cells) can have any shape, \nprovided only that it is path-connected (there is a “continuous” path between any \ntwo cells); \n– the problem is to find a “continuous” path, but not necessarily to find it “in a \ncontinuous way”, i.e. the successive steps do not have to be found in order; \n– it is often supposed that the extremities of the solution path (i.e. numbers 1 and \nN) are given, but this is not necessary: one can deduce the value of N by counting \nthe number of white cells; what could really change the problem is knowing neither \nthe extreme values nor their positions (i.e. one would know only the length of the \npath, but the counting would start at some number k>1; of course, this would be a \nvery artificial way of numbering the steps); \n– many Numbrix® puzzles are proposed with no black cell; \n– Hidato® is often presented as a King’s Tour problem (an instance of the \ngeneral Hamiltonian path problem in graph theory), due to the way the path must \nmove from one place to the next, like a king in chess; however, there are so many \nmore possibilities in this game that reducing it to this classical problem cannot be \njustified: the grid can have any size, its shape can be almost completely arbitrary, it \ncan have inner holes, intermediate places are given, a well-formed puzzle is \nguaranteed to have a unique solution, … \n\n16. Topological and geometric constraints: map colouring and path finding     \n443 \n– for each of these two problems, there are two equivalent ways of seeing it: \neither as finding a value for each white cell in the grid (the standard presentation) or \nas finding a place in the grid for each number in {1, …, N} (the dual presentation); \n– as we shall see, and independently of the previous remark, there are also two \nnatural ways of formalising their constraints. \n16.2.2. Numbrix® and Hidato® as CSPs \nAs the reader should now be used to our modelling principles and as their \napplication to these two games is straightforward, we shall be a little sketchy, except \nfor the definition of the constraints. \n16.2.2.1. Sorts, CSP-variables and labels \nWe introduce the sorts Number, Row, Column and Cell with respective domains \n{1, …, N}, {r1, …, rn}, {c1, …, cn} and {(r, c) / (r, c) is white}. \nAs usual, we adopt a redundant set of CSP-variables, of two types, that naturally \ncorrespond to the dual ways of seeing the problem:  \n– for each Cell (r, c), we introduce a CSP-variable Xrc with domain Number: \none must find a value for each white cell; \n– for each Number n such that n is not in the set of clues, we introduce a CSP-\nvariable Xn with domain Cell: one must find a place for each undecided Number. [It \nwould be useless to introduce a CSP-variable for a decided value.] \nWe define a label as an (n, r, c) triplet, with the proper restrictions on n, r and c. \nAs expected, (n, r, c) is the class of two pre-labels <Xrc, n> and <Xn, rc>. \n16.2.2.2. Constraints (topological vs geometric) \nIn addition to the “strong” CSP constraints that automatically go with the CSP-\nvariables, we introduce a unique (obviously symmetric) non-CSP constraint: “far”. \nFor each of the two CSPs, there are two ways of defining this constraint, somehow \nparallel to the Futoshiki example, although there is no transitivity involved in the \npresent case. The first approach corresponds to a purely topological view of the \nproblem (based on adjacency relations), while the second is of a more geometric \nnature (based on distances). It is interesting that they are not equivalent (they \nproduce different ratings). Both are implemented in our Numbrix®/Hidato® solver \nbased on CSP-Rules; which is chosen is passed as a parameter. \nIn the simplest and most obvious approach, two labels (n, r, c) and (n’, r’, c’)  are \nlinked by constraint “far” if n’ = n ± 1 but (r, c) and (r’, c’) are not adjacent (with the \nmeaning of this word as specified above, depending on whether we speak of \nNumbrix® or Hidato®). The meaning of “far” as a contradiction should be clear: \nwherever n is in the grid, n±1 cannot be in a cell not adjacent to the cell where n is. \n\n444 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nIn the second approach, the distance between two cells (r, c) and (r’, c’) is first \ndefined as the minimum number of steps necessary to pass from one to the other. \nThen, we say that two labels (n, r, c) and (n’, r’, c’) are linked by constraint “far” if \ntheir distance is too large, i.e. if dist(r, c, r’, c’) > ⎢n - n’⎢. In metaphoric terms, there \nis a contradiction between the two labels because one does not have enough time \n(measured by ⎢n - n’⎢) for walking the distance from (r, c) to (r’, c’). It is obvious \nthat there are more links in this approach than in the first and it has therefore an a \npriori stronger resolution potential. \nIn all rigour, the distance should be computed as the length of the shortest path \nfrom (r, c) to (r’, c’) in the underlying graph whose vertices are the white cells and \nwhose edges are the adjacency links specific to each game. One could even \neliminate from this graph all the decided cells, which would make length grow with \ntime and which could lead to the dynamical creation of links – but this remark is \nhighly prospective, as we have found on the Web no instance of any of these \nproblems that would justify doing so complicated things. \nWe have found convenient to use instead the following simple approximations \nthat amount to “forgetting” the colours of the cells (and whether they are decided or \nnot):  \n– for Numbrix®: dist(r, c, r’, c’) = ⎢r - r’⎢ + ⎢c - c’⎢, \n– for Hidato®: dist(r, c, r’, c’) = max(⎢r - r’⎢, ⎢c - c’⎢). \nThree questions immediately arise: \n– can the topological and geometric approaches lead to different results? The \nnext two sections will answer positively, even when the W rating is small: the \nNumbrix® puzzle in section 16.2.3 will become solvable by bivalue-chains[2] \ninstead of whips[2], while the W rating of the Hidato® puzzle in section 16.2.4 will \npass from 4 to 3. The part of the question that we shall leave unanswered (because \nwe miss really hard instances) is: can any puzzle be solved (e.g. using whips,…, g-\nbraids,…) with the geometric approach and not with the topological one? \n– in the geometric approach, can the approximation (which leads to fewer links \nthan the “real” distance and may thus reduce the resolution potential) lead to \ndifferent results? We have no answer. But it seems unlikely in most instances, \nespecially in Hidato®, unless very special patterns of black cells completely isolate a \npart of the white ones (e.g. by making long tubes).  \n– which approach is more realistic from a player’s point of view? Undoubtedly \nthe topological one for a beginner, but a more advanced player may want to use the \ngeometric one together with the approximation. Using the real distance seems very \nunnatural as it requires to compute it each time it is needed or to remember it (in the \nnormally rare cases) when it is not equal to its approximated value. An alternative is \na restricted geometric approach, in which time and/or space differences considered \nin relation “far” are limited by some predefined value(s). \n\n16. Topological and geometric constraints: map colouring and path finding     \n445 \n16.2.2.3. Basic resolution theory \nWe distinguish two types of Singles, corresponding to the two types of CSP \nvariables: Naked-Single (a cell can only have one value) and Hidden-Single (a \nnumber can only be in one cell). The examples in the next sub-sections will \nillustrate the interplay between the two types of variables. They will also show that, \nin our approach, both of them are necessary. Somewhat arbitrarily, we give Naked-\nsingle a higher priority than Hidden-Single (the main purpose is to shorten the \nwriting of the resolution paths, while keeping them distinct). As usual, the \neliminations due to ECP will not be displayed (they may be different in the two \napproaches). \n16.2.2.4. Initial state \nIn spite of our definition of the domains of the CSP variables, we must be careful \nwith initialisation: if we merely started in a resolution state RS0 with all the \nNumbers (or even with only all the undecided Numbers) as candidate-Numbers for \nall the white cells, there would be a huge number of candidates (N2) and every \nresolution path would start with hundreds of trivial eliminations.  \nWe shall therefore adopt the convention of starting with a resolution state RS1 in \nwhich the most obvious whip[1] eliminations are already done. This is very far from \nenough to eliminate all the easy steps (in particular, this is not very efficient for \ninstances with few clues), but this multitude of trivial eliminations is inherent in \nthese types of puzzles and the vast majority of those proposed in newspapers are \nsolvable by singles and whips[1]. \nWe define RS1 as the resolution state where all the givens are asserted as values \nand all and only the compatible labels are asserted as candidates, where compatible \nmeans non linked according to the second approach. This entails that the initial state \nis the same in the two approaches. Notice that, even when we adopt the first \napproach, the passage from RS0 to RS1 does not hide the use of any new rules; it \namounts to doing a lot of ECP and whip[1] eliminations. (We leave the details of the \neasy proof, by recursion on ⎢n - n’⎢, as an exercise for the reader.) The difference \nbetween the two approaches can appear only with longer chains – but the first \nexample will show that it can already appear with whips[2]. \n16.2.2.5. Warnings about the forthcoming resolution paths \nThe number of eliminations increases like the number of initial candidates, i.e. \napproximately like N2, most of which are really boring. Even with small-sized grids \n(and small N) and with the above-defined initialisation, the full resolution paths are \nvery long in most cases, mainly due to the presence of innumerable whips[1]. In all \nour resolution paths, we shall suppose that the reader is able to find the whips[1] by \nhimself when necessary and we shall skip almost all of them. \n\n446 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nThe length of the paths is in part the result of our goal of finding the “simplest” \nsolution, of the associated simplest-first strategy and of the absence in CSP-Rules of \n“heuristic” rules for focusing on some candidate. A human solver is very unlikely to \nfollow a similar path; instead, he would concentrate e.g. on finding some value close \nto the already known ones (not caring too much about the length of his chains of \nreasoning); but in the process he would somehow have to justify (part of) the same \neliminations. \n16.2.2.6. Subsets in Numbrix® and Hidato® \nSubsets are very simple patterns in Numbrix® and Hidato®. The two types of \nCSP-variables are transversal. Associated with them, there are two kinds of Subsets; \nfor each integer p > 2: \n– Naked-Subset[p]: given p different rc-cells and p different Numbers such that \neach of these cells contains no other candidate-Number as these p Numbers \n(together with non-degeneracy conditions stated in chapter 8), then eliminate any of \nthese candidate-Numbers from any other rc-cell. With respect to the general \ndefinitions of chapter 8, this corresponds to taking the p Xrc CSP-variables \ncorresponding to the p rc-cells as the CSP-variables of the Subset and the p Xn CSP-\nvariables (considered as constraints) corresponding to the p Numbers as its \ntransversal sets. \n– Hidden-Subset[p]: given p different Numbers and p different rc-cells such that \nthese Numbers are candidates for no other rc-cell than these (together with non-\ndegeneracy conditions stated in chapter 8), then eliminate any other candidate-\nNumbers from these rc-cells. With respect to the general definitions of chapter 8, \nthis corresponds to taking the p Xn CSP-variables corresponding to the p Numbers \nas the CSP-variables of the Subset and the p Xrc CSP-variables (considered as \nconstraints) corresponding to the p rc-cells as its transversal sets. \nRemarks: \n– in spite of the existence of a row-column grid structure, it plays strictly no role \nin the definition of Subsets; \n– the distinction between “Naked” and “Hidden” corresponds to the standard \npresentation of these puzzles, on an rc-grid. But, considering the previous remark, \nthese could be interchanged if one considers that the dual presentation, as a linear \ngrid of n-cells of Undecided-Numbers, would be better; \n– there is no limitation on the size of a Subset – other than the number of \nundecided cells and, from a practical point of view, the doubly exponential growth \nof complexity with size (be it for a human player or a computer program); \n– in our Numbrix®/Hidato® solver, the implemention of Subsets is application-\nspecific. \n\n16. Topological and geometric constraints: map colouring and path finding     \n447 \n16.2.3. A Numbrix® example \nThe standard reference as the major source of Numbrix® puzzles is the “Parade” \nmagazine [askmarilyn www], where a new one is published daily by the inventor of \nthe game, with difficulty levels varying from “easy” to “expert”. We had pre-\nselected the expert one from the 16th of October 2012 (Figure 16.2) because it is one \nof the hardest we had found there. (Here, as for most of the logic puzzles published \nin newspapers or journals, the notion of “hard” is very relative, as one has W = 2.) \nBut the final reason for presenting it here is that the topological and geometric \nmodels lead to solutions with different hardest patterns, even for this easy puzzle. \nThe first steps of the resolution path are not very interesting; after Singles and \nwhips[1], they lead to the “elaborated” puzzle displayed in the right part of Figure \n16.2, from which we shall start.   \n \n \n  \n  \n  \n  \n  \n  \n  \n \n \n  \n  \n  \n  \n  \n  \n  \n  \n7 \n6 \n5 \n   25 22   16 \n \n 8  1 \n  \n  \n  \n   25 22   16 \n \n 8  1 4 \n  \n24 \n  \n \n  \n  \n  \n2 \n  \n  \n  \n  \n24 23 \n \n  \n  \n  \n2 \n3 \n \n  \n  \n  \n  \n  \n \n  \n  \n  \n  \n \n  \n  \n  \n  \n  \n \n  52 \n  \n36 \n  \n \n  \n  \n \n54   \n  \n  \n  \n36 \n  \n \n  \n  \n \n54   \n \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  38 \n  \n  \n  \n  \n  \n  \n  \n  \n  \n42 \n  \n \n \n  \n  58   \n  \n  39 42 \n  \n \n \n  \n  58   \n  \n41 78   68   70 59   \n  \n  40 41 78   68 69 70 59   \n  \n \n  \n  \n  \n  \n \n  \n  \n  \n  81 80 79   \n  \n  \n \n  \n  \nFigure 16.2. A Numbrix® puzzle (clues of #20121016 expert, askmarylin) and its elaboration \n*****\t\r  \t\r  Numbrix-­‐Rules\t\r  1.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  geometric-­‐model,\t\r  config:\t\r  B\t\r  \t\r  \t\r  *****\t\r  \nbiv-­‐chain[2]:\t\r  r8c9{n60\t\r  n62}\t\r  –\t\r  n64{r9c6\t\r  r9c8}\t\r  ==>\t\r  r9c8\t\r  ≠\t\r  60\t\r  \nnaked-­‐singles:\t\r  r8c9\t\r  =\t\r  60,\t\r  r9c8\t\r  =\t\r  62,\t\r  r9c6\t\r  =\t\r  64,\t\r  r9c7\t\r  =\t\r  63,\t\r  r7c7\t\r  =\t\r  71,\t\r  r9c5\t\r  =\t\r  65,\t\r  r8c4\t\r  =\t\r  67,\t\r  r7c3\t\r  =\t\r  77,\t\r  \nr6c2\t\r  =\t\r  43,\t\r  r6c3\t\r  =\t\r  44,\t\r  r7c4\t\r  =\t\r  76,\t\r  r5c1\t\r  =\t\r  37,\t\r  r9c4\t\r  =\t\r  66,\t\r  r9c9\t\r  =\t\r  61,\t\r  r7c9\t\r  =\t\r  57,\t\r  r6c9\t\r  =\t\r  56,\t\r  r4c7\t\r  =\t\r  50,\t\r  \nr4c8\t\r  =\t\r  51,\t\r  r5c9\t\r  =\t\r  53,\t\r  r6c8\t\r  =\t\r  55\t\r  \nwhip[1]:\t\r  n10{r1c6\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  11\t\r  ;\t\r  hidden-­‐single:\t\r  r5c7\t\r  =\t\r  49\t\r  ;\t\r  more\t\r  whips[1]\t\r  ;\t\r  singles\t\r  to\t\r  the\t\r  end\t\r  \nIt appears that the bivalue-chain[2] elimination r8c9 ≠ 60 is the key to the \nsolution. It rests on the facts that, in the resolution state where it appears, cell r8c9 \nhas only two possible values (60 and 62) and number 64 has only two possible \nplaces (r9c6 and r9c8); and this is true, after the long series of whips[1], in both the \ntopological and geometric approaches. Moreover, the target is linked in both cases \nto the two ends of the chain. What makes this chain non valid in the topological \nmodel is the left-to-right link n62r8c9 – n64r9c6 because ⎢64-62⎢ ≠ 1; it is valid in \nthe geometric approach because dist(r8c9, r9c6) = 4 > 2 = 64-62. \n\n448 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nIn the absence of this bivalue-chain[2] elimination, the resolution path for the \ntopological model is longer and whips[2] are required: \n \n*****\t\r  \t\r  Numbrix-­‐Rules\t\r  1.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  topological-­‐model,\t\r  config:\t\r  B\t\r  \t\r  \t\r  *****\t\r  \nbiv-­‐chain[2]:\t\r  n53{r4c8\t\r  r5c9}\t\r  –\t\r  n51{r5c9\t\r  r4c8}\t\r  ==>\t\r  r4c8\t\r  ≠\t\r  11\t\r  \nwhip[2]:\t\r  n51{r5c9\t\r  r4c8}\t\r  –\t\r  n53{r4c8\t\r  .}\t\r  ==>\t\r  r5c9\t\r  ≠\t\r  55\t\r  \nwhip[2]:\t\r  n71{r7c7\t\r  r9c7}\t\r  –\t\r  n72{r7c6\t\r  .}\t\r  ==>\t\r  r7c7\t\r  ≠\t\r  73\t\r  \nwhip[2]:\t\r  n71{r9c7\t\r  r7c7}\t\r  –\t\r  n72{r9c8\t\r  .}\t\r  ==>\t\r  r9c7\t\r  ≠\t\r  73\t\r  \nwhip[2]:\t\r  n73{r6c6\t\r  r9c5}\t\r  –\t\r  n72{r7c6\t\r  .}\t\r  ==>\t\r  r9c6\t\r  ≠\t\r  74\t\r  \nwhip[2]:\t\r  n74{r6c5\t\r  r9c4}\t\r  –\t\r  n73{r7c5\t\r  .}\t\r  ==>\t\r  r9c5\t\r  ≠\t\r  75\t\r  \nwhip[2]:\t\r  n75{r6c4\t\r  r8c4}\t\r  –\t\r  n77{r8c4\t\r  .}\t\r  ==>\t\r  r9c4\t\r  ≠\t\r  76\t\r  \nbiv-­‐chain[2]:\t\r  n44{r6c3\t\r  r7c4}\t\r  –\t\r  n76{r7c4\t\r  r6c3}\t\r  ==>\t\r  r6c3\t\r  ≠\t\r  32\t\r  \nbiv-­‐chain[2]:\t\r  n44{r6c3\t\r  r7c4}\t\r  –\t\r  n76{r7c4\t\r  r6c3}\t\r  ==>\t\r  r6c3\t\r  ≠\t\r  34\t\r  \nwhip[2]:\t\r  n44{r7c4\t\r  r6c3}\t\r  –\t\r  n76{r6c3\t\r  .}\t\r  ==>\t\r  r7c4\t\r  ≠\t\r  74\t\r  \nwhip[2]:\t\r  n34{r4c1\t\r  r5c4}\t\r  –\t\r  n32{r5c4\t\r  .}\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  33\t\r  \nwhip[2]:\t\r  r6c4{n75\t\r  n45}\t\r  –\t\r  r7c5{n45\t\r  .}\t\r  ==>\t\r  r9c4\t\r  ≠\t\r  74\t\r  \nsingles:\t\r  r9c4\t\r  =\t\r  66,\t\r  r9c5\t\r  =\t\r  65,\t\r  r9c6\t\r  =\t\r  64,\t\r  r9c7\t\r  =\t\r  63,\t\r  r7c7\t\r  =\t\r  71,\t\r  r9c8\t\r  =\t\r  62,\t\r  r8c9\t\r  =\t\r  60,\t\r  r9c9\t\r  =\t\r  61,\t\r  \nr8c4\t\r  =\t\r  67,\t\r  r7c3\t\r  =\t\r  77,\t\r  r6c2\t\r  =\t\r  43,\t\r  r6c3\t\r  =\t\r  44,\t\r  r7c4\t\r  =\t\r  76,\t\r  r5c1\t\r  =\t\r  37,\t\r  r7c9\t\r  =\t\r  57,\t\r  r6c9\t\r  =\t\r  56,\t\r  r4c7\t\r  =\t\r  50,\t\r  \nr4c8\t\r  =\t\r  51,\t\r  r5c9\t\r  =\t\r  53,\t\r  r6c8\t\r  =\t\r  55,\t\r  r5c7\t\r  =\t\r  49\t\r  \nwhip[2]:\t\r  n11{r3c5\t\r  r2c6}\t\r  –\t\r  n9{r2c6\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  10\t\r  \nsingles:\t\r  r3c6\t\r  =\t\r  10,\t\r  r3c7\t\r  =\t\r  9,\t\r  r1c6\t\r  =\t\r  18,\t\r  r1c5\t\r  =\t\r  19,\t\r  r1c4\t\r  =\t\r  20,\t\r  r2c6\t\r  =\t\r  17\t\r  \nwhip[2]:\t\r  n31{r3c1\t\r  r4c4}\t\r  –\t\r  n33{r4c4\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  32\t\r  \nwhips[1]\t\r  and\t\r  singles\t\r  to\t\r  the\t\r  end\t\r  \n16.2.4. Three Hidato® puzzles created by P. Mebane \nThe standard reference as the major source of Hidato® puzzles is the Smithsonian \nmagazine [Smithsonian www]. However, here again, these puzzles are relatively \neasy (all those we have tested among those considered there as being at the hardest \nlevel could be solved by whips of maximum length 2, even in the topological \nmodel). We have found much harder instances in [Mebane 2012]. \n16.2.4.1. First Hidato® example \nAn 8×8 puzzle with a very special pattern of black cells is reproduced in Figure \n16.3. It is announced as the hardest in the Mebane collection, but we have seen that \n“hard” may have many meanings, depending on one’s goals and on the CSP under \nconsideration: with W = 3 (in both the topological and the geometric models), it \nwould be considered as simple in Sudoku; however, what makes it hard here is the \nnumber of eliminations necessary at its hardest level W3. \nNotice that neither the starting point (Number 1) not the end of the path (Number \n56, the number of white cells) are given; this is the first reason why we have chosen \nto present it here (the second being the small size of the grid). As before, we do not \ndisplay the whips[1] in the following resolution paths. \n \n\n16. Topological and geometric constraints: map colouring and path finding     \n449 \n \n  \n  \n  \n   51 \n  \n \n \n  \n  \n  \n34 33 52  51 54 55 56 \n  \n  15    \n  \n  \n \n \n  \n  \n35 \n  \n15  32 53 50 25 26 \n  \n  \n  \n  31  \n \n  \n  \n  \n  \n36 14 \n  \n16 31  24 49 27 \n  \n  \n  \n  \n  \n30  \n \n28   \n  \n37 13 17 \n  \n23 30  48 28 \n38 \n  \n12 \n  \n  \n  \n \n \n  \n  \n38 39 12 18 \n  \n22 29 47 \n  \n  \n  \n6 \n  \n  \n \n \n  \n  \n1 \n11 40 6 19 \n  \n21 46 \n  \n  \n  \n  \n  \n20 \n \n \n  \n  \n2 \n10 \n5 41 7 \n20 \n \n45 \n  \n  \n  \n8 \n  \n \n  \n  \n  \n  \n3 \n4 \n9 \n8 42 43 44   \nFigure 16.3. A Hidato® puzzle and its solution (clues of # III.10, [Mebane 2012]) \n*****\t\r  \t\r  Hidato-­‐Rules\t\r  1.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  topological-­‐model,\t\r  config:\t\r  B\t\r  \t\r  \t\r  *****\t\r  \nbiv-­‐chain[2]:\t\r  n16{r3c2\t\r  r3c4}\t\r  –\t\r  n14{r3c4\t\r  r3c2}\t\r  ==>\t\r  r3c2\t\r  ≠\t\r  1,\t\r  2,\t\r  3,\t\r  34,\t\r  35,\t\r  36,\t\r  40,\t\r  41,\t\r  42,\t\r  43,\t\r  44,\t\r  45,\t\r  \n46,\t\r  47,\t\r  55,\t\r  56\t\r  \nwhip[2]:\t\r  n14{r3c4\t\r  r3c2}\t\r  –\t\r  n16{r3c2\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  1,\t\r  2,\t\r  3,\t\r  24\t\r  \nwhips[2]:\t\r  n24{r3c6\t\r  r5c4}\t\r  –\t\r  n22{r5c4\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  23\t\r  \nwhip[2]:\t\r  n14{r3c4\t\r  r3c2}\t\r  –\t\r  n16{r3c2\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  32\t\r  \nwhip[2]:\t\r  n34{r5c4\t\r  r4c3}\t\r  –\t\r  n13{r4c3\t\r  .}\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  35\t\r  \nwhip[2]:\t\r  n14{r3c4\t\r  r3c2}\t\r  –\t\r  n16{r3c2\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  33,\t\r  34\t\r  \nwhip[2]:\t\r  n32{r3c6\t\r  r2c5}\t\r  –\t\r  n34{r2c5\t\r  .}\t\r  ==>\t\r  r2c4\t\r  ≠\t\r  33\t\r  \t\r  \nwhip[2]:\t\r  n14{r3c4\t\r  r3c2}\t\r  –\t\r  n16{r3c2\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  35\t\r  \nwhip[2]:\t\r  n14{r3c4\t\r  r3c2}\t\r  –\t\r  n16{r3c2\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  41,\t\r  42,\t\r  43,\t\r  44,\t\r  45,\t\r  46,\t\r  47,\t\r  48,\t\r  49,\t\r  53\t\r  \nwhip[2]:\t\r  n55{r5c4\t\r  r4c3}\t\r  –\t\r  n13{r4c3\t\r  .}\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  56\t\r  \nwhip[2]:\t\r  n14{r3c4\t\r  r3c2}\t\r  –\t\r  n16{r3c2\t\r  .}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  54,\t\r  55,\t\r  56\t\r  \nwhip[2]:\t\r  \t\r  n24{r3c6\t\r  r7c4}\t\r  –\t\r  n22{r7c4\t\r  .}\t\r  ==>\t\r  r8c3\t\r  ≠\t\r  23,\t\r  r7c3\t\r  ≠\t\r  23\t\r  \nbiv-­‐chain[3]:\t\r  n13{r4c2\t\r  r4c3}\t\r  –\t\r  n17{r4c3\t\r  r4c5}\t\r  –\t\r  r3c2{n16\t\r  n14}\t\r  ==>\t\r  r3c4\t\r  ≠\t\r  14\t\r  \nnaked-­‐singles:\t\r  r3c2\t\r  =\t\r  14,\t\r  r3c4\t\r  =\t\r  16\t\r  \nwhip[3]:\t\r  n33{r5c4\t\r  r4c5}\t\r  –\t\r  n17{r4c5\t\r  r4c3}\t\r  –\t\r  n18{r5c6\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  34\t\r  \nwhip[3]:\t\r  n35{r5c2\t\r  r5c4}\t\r  –\t\r  n18{r5c4\t\r  r5c6}\t\r  –\t\r  n17{r4c3\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  34\t\r  \nbiv-­‐chain[3]:\t\r  n32{r2c4\t\r  r4c5}\t\r  –\t\r  n17{r4c5\t\r  r4c3}\t\r  –\t\r  n18{r5c6\t\r  r5c4}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  33\t\r  \nbiv-­‐chain[3]:\t\r  n34{r1c2\t\r  r6c5}\t\r  –\t\r  n19{r6c5\t\r  r6c7}\t\r  –\t\r  n18{r5c4\t\r  r5c6}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  33\t\r  \nnaked-­‐singles:\t\r  r1c3\t\r  =\t\r  33,\t\r  r1c2\t\r  =\t\r  34,\t\r  r2c1\t\r  =\t\r  35,\t\r  r3c1\t\r  =\t\r  36,\t\r  r2c4\t\r  =\t\r  32\t\r  \nwhips[2]:\t\r  n13{r4c2\t\r  r4c3}\t\r  –\t\r  n46{r4c3\t\r  .}\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  45;\t\r  \t\r  \t\r  n56{r2c6\t\r  r2c5}\t\r  –\t\r  n54{r2c5\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  55\t\r  \nn55{r2c6\t\r  r2c5}\t\r  –\t\r  n53{r2c5\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  54;\t\r  \t\r  \t\r  \t\r  \t\r  n54{r2c6\t\r  r2c5}\t\r  –\t\r  n52{r2c5\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  53\t\r  \nn50{r2c6\t\r  r2c5}\t\r  –\t\r  n48{r2c5\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  49;\t\r  \t\r  \t\r  \t\r  \t\r  n49{r2c6\t\r  r2c5}\t\r  –\t\r  n47{r2c5\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  48\t\r  \nn48{r2c6\t\r  r2c5}\t\r  –\t\r  n46{r2c5\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  47;\t\r  \t\r  \t\r  \t\r  \t\r  n47{r2c6\t\r  r2c5}\t\r  –\t\r  n45{r2c5\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  46\t\r  \nn46{r2c6\t\r  r2c5}\t\r  –\t\r  n44{r2c5\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  45\t\r  \nwhip[3]:\t\r  n37{r4c1\t\r  r4c2}\t\r  –\t\r  n43{r4c2\t\r  r5c2}\t\r  –\t\r  n45{r5c2\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  44,\t\r  43\t\r  \nwhip[3]:\t\r  n13{r4c2\t\r  r4c3}\t\r  –\t\r  n43{r4c3\t\r  r5c2}\t\r  –\t\r  n45{r5c2\t\r  .}\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  44\t\r  \nwhip[3]:\t\r  n37{r4c1\t\r  r4c2}\t\r  –\t\r  n43{r4c2\t\r  r5c2}\t\r  –\t\r  n41{r5c2\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  42\t\r  \nwhip[3]:\t\r  n13{r4c2\t\r  r4c3}\t\r  –\t\r  n44{r4c3\t\r  r5c2}\t\r  –\t\r  n42{r5c2\t\r  .}\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  43\t\r  \nwhip[3]:\t\r  n42{r4c2\t\r  r5c4}\t\r  –\t\r  n18{r5c4\t\r  r5c6}\t\r  –\t\r  n17{r4c3\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  43\t\r  \nwhip[3]:\t\r  n43{r5c2\t\r  r6c5}\t\r  –\t\r  n19{r6c5\t\r  r6c7}\t\r  –\t\r  n18{r5c4\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  44\t\r  \nwhip[3]:\t\r  n44{r5c7\t\r  r5c4}\t\r  –\t\r  n18{r5c4\t\r  r5c6}\t\r  –\t\r  n17{r4c3\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  45\t\r  \n\n450 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[3]:\t\r  n37{r4c1\t\r  r4c2}\t\r  –\t\r  n42{r4c2\t\r  r5c2}\t\r  –\t\r  n40{r5c2\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  41\t\r  \nwhip[3]:\t\r  n13{r4c2\t\r  r4c3}\t\r  –\t\r  n43{r4c3\t\r  r5c2}\t\r  –\t\r  n41{r5c2\t\r  .}\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  42\t\r  \nwhip[3]:\t\r  n41{r4c2\t\r  r5c4}\t\r  –\t\r  n18{r5c4\t\r  r5c6}\t\r  –\t\r  n17{r4c3\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  42\t\r  \nwhip[3]:\t\r  n42{r5c2\t\r  r6c5}\t\r  –\t\r  n19{r6c5\t\r  r6c7}\t\r  –\t\r  n18{r5c4\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  43\t\r  \nwhip[3]:\t\r  n43{r6c1\t\r  r5c4}\t\r  –\t\r  n18{r5c4\t\r  r5c6}\t\r  –\t\r  n17{r4c3\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  44\t\r  \nwhip[3]:\t\r  n44{r5c2\t\r  r6c5}\t\r  –\t\r  n19{r6c5\t\r  r6c7}\t\r  –\t\r  n18{r5c4\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  45\t\r  \nwhip[3]:\t\r  n45{r6c2\t\r  r5c4}\t\r  –\t\r  n18{r5c4\t\r  r5c6}\t\r  –\t\r  n17{r4c3\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  46\t\r  \nwhip[3]:\t\r  n54{r3c7\t\r  r3c6}\t\r  –\t\r  r1c7{n53\t\r  n1}\t\r  –\t\r  r1c8{n1\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  55\t\r  \nwhip[3]:\t\r  n54{r4c7\t\r  r4c5}\t\r  –\t\r  r1c7{n53\t\r  n1}\t\r  –\t\r  r1c8{n1\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  55\t\r  \nwhip[3]:\t\r  n55{r5c7\t\r  r5c6}\t\r  –\t\r  n18{r5c6\t\r  r5c4}\t\r  –\t\r  n19{r6c7\t\r  .}\t\r  ==>\t\r  r6c5\t\r  ≠\t\r  56\t\r  \nwhip[3]:\t\r  n54{r1c6\t\r  r4c7}\t\r  –\t\r  r1c7{n53\t\r  n1}\t\r  –\t\r  r1c8{n1\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  55,\t\r  r5c8\t\r  ≠\t\r  55\t\r  \nwhip[3]:\t\r  r1c8{n54\t\r  n1}\t\r  –\t\r  r1c7{n1\t\r  n53}\t\r  –\t\r  n54{r4c7\t\r  .}\t\r  ==>\t\r  r4c7\t\r  ≠\t\r  55,\t\r  r5c6\t\r  ≠\t\r  55\t\r  \nwhip[2]:\t\r  n53{r3c7\t\r  r3c6}\t\r  –\t\r  n55{r3c6\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  54\t\r  \nwhip[3]:\t\r  r1c8{n54\t\r  n1}\t\r  –\t\r  n2{r8c7\t\r  r2c7}\t\r  –\t\r  n3{r8c7\t\r  .}\t\r  ==>\t\r  r3c6\t\r  ≠\t\r  55\t\r  \nwhip[3]:\t\r  n45{r6c2\t\r  r6c5}\t\r  –\t\r  n19{r6c5\t\r  r6c7}\t\r  –\t\r  n18{r5c4\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  46\t\r  \nwhip[3]:\t\r  n46{r6c3\t\r  r5c4}\t\r  –\t\r  n47{r5c8\t\r  r4c5}\t\r  –\t\r  n17{r4c5\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  45\t\r  \nwhip[3]:\t\r  n46{r6c3\t\r  r5c4}\t\r  –\t\r  n18{r5c4\t\r  r5c6}\t\r  –\t\r  n17{r4c3\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  47\t\r  \nbiv-­‐chain[3]:\t\r  n18{r5c4\t\r  r5c6}\t\r  –\t\r  n17{r4c3\t\r  r4c5}\t\r  –\t\r  n48{r4c5\t\r  r4c7}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  47\t\r  \nwhip[3]:\t\r  n24{r3c7\t\r  r3c6}\t\r  –\t\r  n26{r3c6\t\r  r2c6}\t\r  –\t\r  n50{r2c6\t\r  .}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  25\t\r  \nwhip[3]:\t\r  r1c8{n54\t\r  n1}\t\r  –\t\r  r1c7{n1\t\r  n53}\t\r  –\t\r  r1c4{n52\t\r  .}\t\r  ==>\t\r  r3c7\t\r  ≠\t\r  55,\t\r  r3c8\t\r  ≠\t\r  55\t\r  \nwhip[3]:\t\r  n47{r5c7\t\r  r5c6}\t\r  –\t\r  n18{r5c6\t\r  r5c4}\t\r  –\t\r  n19{r6c7\t\r  .}\t\r  ==>\t\r  r6c5\t\r  ≠\t\r  46\t\r  \n;;;\t\r  more\t\r  whips[1]\t\r  and\t\r  Singles\t\r  \nbiv-­‐chain[2]:\t\r  n5{r6c3\t\r  r7c3}\t\r  –\t\r  n40{r7c3\t\r  r6c3}\t\r  ==>\t\r  r6c3\t\r  ≠\t\r  1,\t\r  3,\t\r  4,\t\r  10,\t\r  11\t\r  \nbiv-­‐chain[2]:\t\r  n39{r5c2\t\r  r6c2}\t\r  –\t\r  n11{r6c2\t\r  r5c2}\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  4\t\r  \nbiv-­‐chain[2]:\t\r  r8c1{n1\t\r  n3}\t\r  –\t\r  r6c1{n3\t\r  n1}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  1,\t\r  r7c1\t\r  ≠\t\r  1,\t\r  r7c2\t\r  ≠\t\r  1,\t\r  r7c3\t\r  ≠\t\r  1,\t\r  r8c2\t\r  ≠\t\r  1\t\r  \nwhip[1]:\t\r  r8c2{n3\t\r  .}\t\r  ==>\t\r  r6c1\t\r  ≠\t\r  3\t\r  \nsingles\t\r  to\t\r  the\t\r  end\t\r  \n16.2.4.2. Second Hidato® example: non equivalence of the topological and \ngeometric models \nPuzzle # III.7 in [Melbane 2012] is interesting for four reasons:  \n– as before, the places of the first and the last values (36) are not given; \n– it has only two givens and uniqueness of the solution is ensured by the very \nconstrained pattern of black cells; \n– it is a hard instance (relatively to all those we have seen) in a very compact \ndesign; \n– above all, its W (or B) rating is 4 or 3, depending on whether one adopts the \ntopological or the geometric model. \nThis puzzle is given in Figure 16.4. In order to save space, whips[2] will not be \nwritten in the resolution paths. These should therefore be considered as giving only \nthe main lines of a proof with blanks that must be filled by whips[1] and whips[2], \nwhen a single or a t-candidate in a longer whip must be justified. \n \n\n16. Topological and geometric constraints: map colouring and path finding     \n451 \n \n  \n  \n  \n  \n  \n  \n \n2 \n  \n  \n  \n  \n35 36 \n  \n7 \n1 \n2 \n  \n  \n  \n  \n  \n  \n \n \n  \n  \n33 34 \n  \n  \n8 \n6 \n \n3 \n  \n  \n  \n  \n  \n \n  \n  \n  \n  \n32 \n  \n30 \n  \n9 \n \n5 \n4 \n  \n  \n  \n  \n  \n  \n \n \n  \n  \n  \n31 29 \n  \n10 \n  \n \n \n \n  \n \n  \n  \n  \n \n \n  \n  \n \n  \n \n28 \n  \n11 13 \n \n  \n  \n  \n \n  \n  \n \n \n  \n  \n24 25 \n  \n27 \n  \n12 \n \n14 \n  \n  \n  \n  \n  \n \n \n \n  \n  \n23 \n  \n26 19 \n  \n \n16 15 \n22    \n  \n \n  \n \n  \n  \n  \n  \n22 21 20 \n \n18 17 \n  \n  \nFigure 16.4. A Hidato® puzzle and its solution (clues of # III.7, [Mebane 2012]) \nLet us start with the geometric model: \n \n*****\t\r  \t\r  Hidato-­‐Rules\t\r  1.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  geometric-­‐model,\t\r  config:\t\r  B\t\r  \t\r  \t\r  *****\t\r  \n;;;\t\r  lots\t\r  of\t\r  whips[1],\t\r  biv-­‐chains[2]\t\r  and\t\r  whips[2]\t\r  \nwhip[3]:\t\r  r3c8{n36\t\r  n4}\t\r  –\t\r  n6{r1c4\t\r  r1c6}\t\r  –\t\r  n5{r3c5\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  36\t\r  \nwhip[3]:\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r1c3\t\r  r2c6}\t\r  –\t\r  n4{r2c6\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r1c3\t\r  r2c6}\t\r  –\t\r  n4{r2c6\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  6\t\r  \nwhip[3]:\t\r  n6{r1c4\t\r  r3c5}\t\r  –\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  r2c1{n36\t\r  .}\t\r  ==>\t\r  r8c6\t\r  ≠\t\r  11,\t\r  r8c5\t\r  ≠\t\r  11,\t\r  r8c3\t\r  ≠\t\r  11,\t\r  r7c7\t\r  ≠\t\r  10,\t\r  \nr7c4\t\r  ≠\t\r  10,\t\r  r7c3\t\r  ≠\t\r  10\t\r  \nwhip[2]:\t\r  n8{r1c3\t\r  r5c4}\t\r  –\t\r  n10{r1c3\t\r  .}\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  n5{r3c5\t\r  r2c5}\t\r  –\t\r  n7{r2c5\t\r  r2c6}\t\r  –\t\r  n4{r2c6\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  6\t\r  \nwhip[3]:\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r1c3\t\r  r2c6}\t\r  –\t\r  n4{r2c6\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  5,\t\r  r3c5\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  n6{r2c6\t\r  r3c5}\t\r  –\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r4c2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  n8{r1c4\t\r  r2c2}\t\r  –\t\r  n11{r7c8\t\r  r3c1}\t\r  –\t\r  n9{r3c5\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  10\t\r  \nwhip[3]:\t\r  r3c8{n4\t\r  n36}\t\r  –\t\r  n35{r1c3\t\r  r3c7}\t\r  –\t\r  n34{r4c2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  4\t\r  \nwhip[3]:\t\r  r8c2{n21\t\r  n23}\t\r  –\t\r  r6c1{n24\t\r  n36}\t\r  –\t\r  n35{r6c4\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  20\t\r  \nwhip[3]:\t\r  n24{r8c3\t\r  r7c3}\t\r  –\t\r  n20{r7c3\t\r  r6c1}\t\r  –\t\r  n18{r6c4\t\r  .}\t\r  ==>\t\r  r8c3\t\r  ≠\t\r  25\t\r  \nwhip[3]:\t\r  r7c1{n21\t\r  n23}\t\r  –\t\r  n25{r6c4\t\r  r6c2}\t\r  –\t\r  n26{r8c5\t\r  .}\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  20\t\r  \nwhip[2]:\t\r  n20{r8c3\t\r  r6c1}\t\r  –\t\r  n19{r7c3\t\r  .}\t\r  ==>\t\r  r8c3\t\r  ≠\t\r  18\t\r  \nwhip[3]:\t\r  n6{r1c4\t\r  r3c5}\t\r  –\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  r2c1{n30\t\r  .}\t\r  ==>\t\r  r6c6\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r7c1{n23\t\r  n21}\t\r  –\t\r  n19{r7c4\t\r  r6c2}\t\r  –\t\r  n18{r6c4\t\r  .}\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  24\t\r  \nwhip[3]:\t\r  n35{r6c2\t\r  r7c3}\t\r  –\t\r  n19{r7c3\t\r  r7c4}\t\r  –\t\r  n25{r7c4\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  36\t\r  \nwhip[3]:\t\r  n34{r6c4\t\r  r7c3}\t\r  –\t\r  n19{r7c3\t\r  r7c4}\t\r  –\t\r  n25{r7c4\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  35\t\r  \nwhip[3]:\t\r  r6c1{n24\t\r  n20}\t\r  –\t\r  n18{r6c4\t\r  r7c3}\t\r  –\t\r  n17{r8c6\t\r  .}\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  26\t\r  \nwhip[3]:\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r1c3\t\r  r2c6}\t\r  –\t\r  n33{r2c1\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  6\t\r  \nwhip[3]:\t\r  n6{r2c6\t\r  r1c4}\t\r  –\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r4c2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  8,\t\r  r2c6\t\r  ≠\t\r  9\t\r  \nwhip[2]:\t\r  n7{r3c5\t\r  r2c5}\t\r  –\t\r  n9{r3c1\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  n6{r2c6\t\r  r1c4}\t\r  –\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r4c2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  10\t\r  \nwhip[2]:\t\r  n8{r3c5\t\r  r2c5}\t\r  –\t\r  n10{r3c1\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  n10{r3c1\t\r  r2c5}\t\r  –\t\r  n13{r6c6\t\r  r2c6}\t\r  –\t\r  n12{r3c1\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  11\t\r  \nwhip[3]:\t\r  n13{r4c2\t\r  r2c5}\t\r  –\t\r  n11{r2c1\t\r  r3c5}\t\r  –\t\r  n14{r3c5\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  12\t\r  \nwhip[3]:\t\r  n6{r2c6\t\r  r1c4}\t\r  –\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r4c2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  11\t\r  \nwhip[2]:\t\r  n9{r3c1\t\r  r2c5}\t\r  –\t\r  n11{r3c1\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  10\t\r  \n\n452 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[3]:\t\r  n6{r2c6\t\r  r1c4}\t\r  –\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r4c2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  13\t\r  \nwhip[2]:\t\r  n11{r3c1\t\r  r2c5}\t\r  –\t\r  n13{r3c1\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  12\t\r  \nwhip[3]:\t\r  n6{r2c6\t\r  r1c4}\t\r  –\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r4c2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  31\t\r  \nwhip[3]:\t\r  n33{r3c1\t\r  r4c5}\t\r  –\t\r  n31{r3c1\t\r  r2c5}\t\r  –\t\r  n30{r3c3\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  32\t\r  \nwhip[3]:\t\r  n32{r4c3\t\r  r5c6}\t\r  –\t\r  n30{r4c2\t\r  r3c5}\t\r  –\t\r  n29{r4c3\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  31\t\r  \nwhip[3]:\t\r  n9{r1c3\t\r  r5c6}\t\r  –\t\r  n11{r4c3\t\r  r5c7}\t\r  –\t\r  n12{r4c5\t\r  .}\t\r  ==>\t\r  r6c6\t\r  ≠\t\r  10\t\r  \nwhip[3]:\t\r  n10{r1c3\t\r  r5c6}\t\r  –\t\r  n12{r4c3\t\r  r6c6}\t\r  –\t\r  n13{r4c5\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  11\t\r  \nwhip[3]:\t\r  r7c8{n29\t\r  n15}\t\r  –\t\r  r3c1{n13\t\r  n36}\t\r  –\t\r  r2c1{n36\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  33\t\r  \nwhip[2]:\t\r  n31{r2c5\t\r  r2c2}\t\r  –\t\r  n33{r2c2\t\r  .}\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  32\t\r  \nwhip[3]:\t\r  n9{r1c3\t\r  r5c6}\t\r  –\t\r  n11{r1c3\t\r  r6c6}\t\r  –\t\r  n12{r4c5\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  10\t\r  \nwhip[2]:\t\r  n8{r1c4\t\r  r4c5}\t\r  –\t\r  n10{r1c3\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  9\t\r  \nwhip[2]:\t\r  n7{r1c3\t\r  r3c5}\t\r  –\t\r  n9{r2c1\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  n10{r1c3\t\r  r5c6}\t\r  –\t\r  n12{r4c3\t\r  r5c7}\t\r  –\t\r  n13{r4c5\t\r  .}\t\r  ==>\t\r  r6c6\t\r  ≠\t\r  11\t\r  \nwhip[3]:\t\r  n32{r4c3\t\r  r1c4}\t\r  –\t\r  n6{r1c4\t\r  r2c6}\t\r  –\t\r  n8{r2c2\t\r  .}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  31\t\r  \nwhip[3]:\t\r  n11{r1c3\t\r  r5c6}\t\r  –\t\r  n13{r4c2\t\r  r6c6}\t\r  –\t\r  n14{r6c8\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  12\t\r  \nwhip[3]:\t\r  n8{r2c2\t\r  r1c4}\t\r  –\t\r  n7{r1c6\t\r  r1c3}\t\r  –\t\r  n6{r2c6\t\r  .}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  n9{r3c1\t\r  r1c3}\t\r  –\t\r  n8{r2c5\t\r  r2c2}\t\r  –\t\r  n7{r2c5\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  10\t\r  \nwhip[3]:\t\r  r2c6{n6\t\r  n34}\t\r  –\t\r  r7c8{n36\t\r  n29}\t\r  –\t\r  r6c6{n29\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  r2c6{n6\t\r  n34}\t\r  –\t\r  r7c8{n36\t\r  n29}\t\r  –\t\r  r6c6{n29\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  n10{r1c3\t\r  r4c2}\t\r  –\t\r  n12{r6c6\t\r  r3c3}\t\r  –\t\r  n9{r3c3\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  11\t\r  \nwhip[3]:\t\r  n9{r3c5\t\r  r3c3}\t\r  –\t\r  n11{r5c6\t\r  r3c1}\t\r  –\t\r  n14{r6c8\t\r  .}\t\r  ==>\t\r  r4c2\t\r  ≠\t\r  10\t\r  \nwhip[3]:\t\r  n10{r4c3\t\r  r2c2}\t\r  –\t\r  n8{r2c5\t\r  r1c4}\t\r  –\t\r  n12{r6c6\t\r  .}\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  11\t\r  \nsingles,\t\r  whips[1],\t\r  biv-­‐chains[2]\t\r  and\t\r  whips[2]\t\r  to\t\r  the\t\r  end\t\r  \n\t\r  \nLet us now consider the topological model: \n \n*****\t\r  \t\r  Hidato-­‐Rules\t\r  1.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  topological-­‐model,\t\r  config:\t\r  B\t\r  \t\r  \t\r  *****\t\r  \n;;;\t\r  lots\t\r  of\t\r  whips[1],\t\r  biv-­‐chains[2]\t\r  and\t\r  whips[2]\t\r  \nwhip[3]:\t\r  n6{r2c6\t\r  r3c5}\t\r  –\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r4c2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  n9{r2c5\t\r  r3c1}\t\r  –\t\r  n8{r3c5\t\r  r2c2}\t\r  –\t\r  n11{r2c2\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  10\t\r  \nwhip[3]:\t\r  r3c8{n4\t\r  n36}\t\r  –\t\r  n35{r1c3\t\r  r3c7}\t\r  –\t\r  n34{r4c2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  4\t\r  \nwhip[3]:\t\r  r8c2{n21\t\r  n23}\t\r  –\t\r  r6c1{n24\t\r  n36}\t\r  –\t\r  n35{r6c4\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  20\t\r  \nwhip[3]:\t\r  r8c2{n23\t\r  n21}\t\r  –\t\r  r6c1{n20\t\r  n36}\t\r  –\t\r  n35{r6c4\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  24\t\r  \nwhip[4]:\t\r  n36{r3c1\t\r  r2c5}\t\r  –\t\r  r3c7{n35\t\r  n5}\t\r  –\t\r  n6{r1c4\t\r  r2c6}\t\r  –\t\r  n34{r2c6\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  35\t\r  \nwhip[4]:\t\r  r3c7{n35\t\r  n5}\t\r  –\t\r  n6{r1c4\t\r  r2c6}\t\r  –\t\r  n33{r2c6\t\r  r2c5}\t\r  –\t\r  n35{r2c5\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  34\t\r  \nwhip[4]:\t\r  n7{r3c5\t\r  r2c5}\t\r  –\t\r  n5{r2c5\t\r  r3c7}\t\r  –\t\r  n6{r1c4\t\r  r2c6}\t\r  –\t\r  n9{r2c6\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  n16{r3c3\t\r  r3c5}\t\r  –\t\r  n6{r3c5\t\r  r1c4}\t\r  –\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r4c2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  15\t\r  \nwhip[4]:\t\r  n15{r3c1\t\r  r2c5}\t\r  –\t\r  n5{r2c5\t\r  r3c7}\t\r  –\t\r  n6{r3c5\t\r  r2c6}\t\r  –\t\r  n13{r2c6\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  14\t\r  \nwhip[4]:\t\r  n28{r8c6\t\r  r3c5}\t\r  –\t\r  n6{r3c5\t\r  r1c4}\t\r  –\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r4c2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  29\t\r  \nwhip[4]:\t\r  n29{r3c1\t\r  r2c5}\t\r  –\t\r  n5{r2c5\t\r  r3c7}\t\r  –\t\r  n6{r3c5\t\r  r2c6}\t\r  –\t\r  n31{r2c6\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  30\t\r  \nwhip[4]:\t\r  n34{r6c4\t\r  r7c3}\t\r  –\t\r  n36{r7c3\t\r  r6c1}\t\r  –\t\r  n20{r6c1\t\r  r8c3}\t\r  –\t\r  n24{r8c3\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  35\t\r  \nwhip[3]:\t\r  r6c1{n24\t\r  n20}\t\r  –\t\r  n19{r6c4\t\r  r6c2}\t\r  –\t\r  n18{r6c4\t\r  .}\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  25\t\r  \nwhip[3]:\t\r  n25{r8c3\t\r  r7c4}\t\r  –\t\r  n24{r6c1\t\r  r7c3}\t\r  –\t\r  n27{r7c3\t\r  .}\t\r  ==>\t\r  r8c3\t\r  ≠\t\r  26\t\r  \nwhip[3]:\t\r  r6c1{n24\t\r  n20}\t\r  –\t\r  n19{r6c4\t\r  r6c2}\t\r  –\t\r  n18{r6c4\t\r  .}\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  24\t\r  \nwhip[3]:\t\r  n24{r8c3\t\r  r6c1}\t\r  –\t\r  n20{r6c1\t\r  r7c3}\t\r  –\t\r  n26{r7c3\t\r  .}\t\r  ==>\t\r  r8c3\t\r  ≠\t\r  27\t\r  \nwhip[3]:\t\r  n25{r6c2\t\r  r7c4}\t\r  –\t\r  r6c1{n24\t\r  n20}\t\r  –\t\r  n19{r6c4\t\r  .}\t\r  ==>\t\r  r6c2\t\r  ≠\t\r  36\t\r  \n\n16. Topological and geometric constraints: map colouring and path finding     \n453 \nwhip[2]:\t\r  r6c2{n19\t\r  n25}\t\r  –\t\r  n26{r8c5\t\r  .}\t\r  ==>\t\r  r7c3\t\r  ≠\t\r  19\t\r  \nwhip[3]:\t\r  n19{r8c3\t\r  r7c4}\t\r  –\t\r  n20{r6c1\t\r  r7c3}\t\r  –\t\r  n17{r7c3\t\r  .}\t\r  ==>\t\r  r8c3\t\r  ≠\t\r  18\t\r  \nwhip[3]:\t\r  r6c2{n19\t\r  n25}\t\r  –\t\r  n26{r8c5\t\r  r7c3}\t\r  –\t\r  n20{r7c3\t\r  .}\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  19\t\r  \nwhip[3]:\t\r  r6c2{n19\t\r  n25}\t\r  –\t\r  n26{r8c5\t\r  r7c3}\t\r  –\t\r  n20{r7c3\t\r  .}\t\r  ==>\t\r  r8c3\t\r  ≠\t\r  19\t\r  \nwhip[3]:\t\r  r6c2{n25\t\r  n19}\t\r  –\t\r  n18{r6c4\t\r  r7c3}\t\r  –\t\r  n17{r8c6\t\r  .}\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  26\t\r  \nbiv-­‐chain[3]:\t\r  n27{r6c4\t\r  r8c6}\t\r  –\t\r  n26{r7c3\t\r  r8c5}\t\r  –\t\r  r6c2{n25\t\r  n19}\t\r  ==>\t\r  r6c4\t\r  ≠\t\r  18\t\r  \nwhip[3]:\t\r  n5{r2c5\t\r  r3c7}\t\r  –\t\r  n6{r3c5\t\r  r2c6}\t\r  –\t\r  n13{r2c6\t\r  .}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  12,\t\r  32\t\r  \nwhip[3]:\t\r  n32{r3c1\t\r  r2c6}\t\r  –\t\r  n31{r3c1\t\r  r2c5}\t\r  –\t\r  n34{r2c5\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  33\t\r  \nwhip[3]:\t\r  n31{r4c2\t\r  r2c5}\t\r  –\t\r  n33{r2c5\t\r  r3c5}\t\r  –\t\r  n30{r3c5\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  32\t\r  \nwhip[3]:\t\r  n12{r3c1\t\r  r2c6}\t\r  –\t\r  n13{r6c6\t\r  r2c5}\t\r  –\t\r  n10{r2c5\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  11\t\r  \nwhip[3]:\t\r  n13{r4c2\t\r  r2c5}\t\r  –\t\r  n11{r2c5\t\r  r3c5}\t\r  –\t\r  n14{r3c5\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  12\t\r  \nwhip[3]:\t\r  r5c4{n28\t\r  n16}\t\r  –\t\r  r7c8{n15\t\r  n36}\t\r  –\t\r  n35{r6c6\t\r  .}\t\r  ==>\t\r  r6c8\t\r  ≠\t\r  29\t\r  \nwhip[3]:\t\r  r5c4{n16\t\r  n28}\t\r  –\t\r  r7c8{n29\t\r  n36}\t\r  –\t\r  n35{r6c6\t\r  .}\t\r  ==>\t\r  r6c8\t\r  ≠\t\r  15\t\r  \nwhip[3]:\t\r  n8{r1c4\t\r  r5c6}\t\r  –\t\r  n10{r5c6\t\r  r6c6}\t\r  –\t\r  n11{r4c5\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  n9{r6c6\t\r  r5c6}\t\r  –\t\r  n11{r5c6\t\r  r5c7}\t\r  –\t\r  n12{r4c5\t\r  .}\t\r  ==>\t\r  r6c6\t\r  ≠\t\r  10\t\r  \nwhip[3]:\t\r  n10{r1c3\t\r  r5c6}\t\r  –\t\r  n12{r5c6\t\r  r6c6}\t\r  –\t\r  n13{r4c5\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  11\t\r  \nwhip[3]:\t\r  n8{r1c4\t\r  r5c6}\t\r  –\t\r  n10{r5c6\t\r  r5c7}\t\r  –\t\r  n11{r4c5\t\r  .}\t\r  ==>\t\r  r6c6\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  n9{r1c3\t\r  r5c6}\t\r  –\t\r  n11{r5c6\t\r  r6c6}\t\r  –\t\r  n12{r4c5\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  10\t\r  \nwhip[3]:\t\r  n10{r1c3\t\r  r5c6}\t\r  –\t\r  n12{r5c6\t\r  r5c7}\t\r  –\t\r  n13{r4c5\t\r  .}\t\r  ==>\t\r  r6c6\t\r  ≠\t\r  11\t\r  \nwhip[3]:\t\r  n11{r1c3\t\r  r5c6}\t\r  –\t\r  n13{r5c6\t\r  r6c6}\t\r  –\t\r  n14{r6c8\t\r  .}\t\r  ==>\t\r  r5c7\t\r  ≠\t\r  12\t\r  \nwhip[3]:\t\r  n12{r6c6\t\r  r5c6}\t\r  –\t\r  n14{r5c6\t\r  r5c7}\t\r  –\t\r  n15{r7c8\t\r  .}\t\r  ==>\t\r  r6c6\t\r  ≠\t\r  13\t\r  \nwhip[3]:\t\r  n6{r2c6\t\r  r1c4}\t\r  –\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r4c2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  n6{r2c6\t\r  r1c4}\t\r  –\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r4c2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  9\t\r  \nwhip[2]:\t\r  n7{r1c3\t\r  r2c5}\t\r  –\t\r  n9{r2c5\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  n8{r2c2\t\r  r1c4}\t\r  –\t\r  n7{r1c6\t\r  r1c3}\t\r  –\t\r  n6{r2c6\t\r  .}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  n9{r3c1\t\r  r1c3}\t\r  –\t\r  n8{r2c5\t\r  r2c2}\t\r  –\t\r  n7{r2c5\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  10\t\r  \nwhip[3]:\t\r  n10{r2c2\t\r  r2c6}\t\r  –\t\r  n6{r2c6\t\r  r1c4}\t\r  –\t\r  n5{r3c7\t\r  .}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  11\t\r  \nwhip[3]:\t\r  n14{r3c3\t\r  r3c5}\t\r  –\t\r  n12{r3c5\t\r  r1c6}\t\r  –\t\r  n11{r3c1\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  13\t\r  \nwhip[3]:\t\r  n11{r3c1\t\r  r2c6}\t\r  –\t\r  n10{r3c1\t\r  r2c5}\t\r  –\t\r  n13{r2c5\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  12\t\r  \nwhip[3]:\t\r  n10{r2c2\t\r  r2c5}\t\r  –\t\r  n5{r2c5\t\r  r3c7}\t\r  –\t\r  n6{r1c4\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  11\t\r  \nwhip[3]:\t\r  n13{r5c6\t\r  r5c7}\t\r  –\t\r  n12{r4c5\t\r  r6c6}\t\r  –\t\r  n11{r4c3\t\r  .}\t\r  ==>\t\r  r5c6\t\r  ≠\t\r  14\t\r  \nwhip[3]:\t\r  n6{r2c6\t\r  r1c4}\t\r  –\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r4c2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  10\t\r  \nwhip[2]:\t\r  n8{r1c4\t\r  r2c5}\t\r  –\t\r  n10{r2c5\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  9\t\r  \nwhip[3]:\t\r  n6{r2c6\t\r  r1c4}\t\r  –\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r4c2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  31\t\r  \nwhip[3]:\t\r  n6{r2c6\t\r  r1c4}\t\r  –\t\r  r3c7{n5\t\r  n35}\t\r  –\t\r  n34{r4c2\t\r  .}\t\r  ==>\t\r  r2c6\t\r  ≠\t\r  33\t\r  \nwhip[2]:\t\r  n31{r3c1\t\r  r2c5}\t\r  –\t\r  n33{r2c5\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  32\t\r  \nwhip[3]:\t\r  r3c7{n35\t\r  n5}\t\r  –\t\r  r1c6{n4\t\r  n7}\t\r  –\t\r  n8{r2c2\t\r  .}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  36\t\r  \nwhip[3]:\t\r  n5{r2c5\t\r  r3c7}\t\r  –\t\r  r1c6{n4\t\r  n36}\t\r  –\t\r  n35{r2c1\t\r  .}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  n8{r2c5\t\r  r2c2}\t\r  –\t\r  n7{r3c5\t\r  r1c3}\t\r  –\t\r  r2c6{n6\t\r  .}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  34\t\r  \nwhip[3]:\t\r  n15{r4c3\t\r  r7c8}\t\r  –\t\r  n14{r4c2\t\r  r6c8}\t\r  –\t\r  n13{r4c2\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  12\t\r  \nwhip[4]:\t\r  n31{r2c2\t\r  r2c5}\t\r  –\t\r  n33{r2c5\t\r  r1c3}\t\r  –\t\r  n34{r6c6\t\r  r2c2}\t\r  –\t\r  n8{r2c2\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  32\t\r  \nwhip[4]:\t\r  r2c6{n34\t\r  n6}\t\r  –\t\r  r1c4{n6\t\r  n9}\t\r  –\t\r  n10{r4c5\t\r  r1c3}\t\r  –\t\r  n11{r5c6\t\r  .}\t\r  ==>\t\r  r2c2\t\r  ≠\t\r  35\t\r  \nwhip[4]:\t\r  n32{r2c1\t\r  r2c2}\t\r  –\t\r  n34{r2c2\t\r  r1c4}\t\r  –\t\r  n35{r6c8\t\r  r2c5}\t\r  –\t\r  n8{r2c5\t\r  .}\t\r  ==>\t\r  r1c3\t\r  ≠\t\r  33\t\r  \nwhip[4]:\t\r  n33{r2c1\t\r  r2c5}\t\r  –\t\r  n8{r2c5\t\r  r2c2}\t\r  –\t\r  n7{r3c5\t\r  r1c3}\t\r  –\t\r  n6{r2c6\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  34\t\r  \nwhip[4]:\t\r  r3c7{n35\t\r  n5}\t\r  –\t\r  r1c4{n6\t\r  n9}\t\r  –\t\r  n10{r4c5\t\r  r1c3}\t\r  –\t\r  n11{r5c6\t\r  .}\t\r  ==>\t\r  r2c2\t\r  ≠\t\r  36\t\r  \nwhip[4]:\t\r  r3c7{n35\t\r  n5}\t\r  –\t\r  r1c4{n6\t\r  n9}\t\r  –\t\r  n8{r2c2\t\r  r2c5}\t\r  –\t\r  n35{r2c5\t\r  .}\t\r  ==>\t\r  r1c6\t\r  ≠\t\r  36\t\r  \nbiv-­‐chain[3]:\t\r  n5{r2c5\t\r  r3c7}\t\r  –\t\r  r1c6{n4\t\r  n7}\t\r  –\t\r  n8{r2c2\t\r  r2c5}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  33\t\r  \n\n454 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[2]:\t\r  n31{r3c1\t\r  r4c5}\t\r  –\t\r  n33{r4c5\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  32\t\r  \nwhip[2]:\t\r  n30{r4c2\t\r  r5c6}\t\r  –\t\r  n32{r5c6\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  31\t\r  \nbiv-­‐chain[3]:\t\r  n5{r2c5\t\r  r3c7}\t\r  –\t\r  r1c6{n4\t\r  n7}\t\r  –\t\r  n8{r2c2\t\r  r2c5}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  35\t\r  \nwhip[2]:\t\r  n33{r3c1\t\r  r4c5}\t\r  –\t\r  n35{r4c5\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  34\t\r  \nwhip[2]:\t\r  n32{r4c2\t\r  r5c6}\t\r  –\t\r  n34{r5c6\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  33\t\r  \nbiv-­‐chain[3]:\t\r  n8{r2c2\t\r  r2c5}\t\r  –\t\r  n5{r2c5\t\r  r3c7}\t\r  –\t\r  r1c6{n4\t\r  n7}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  n36{r3c1\t\r  r4c5}\t\r  –\t\r  n34{r4c5\t\r  r2c6}\t\r  –\t\r  n33{r3c1\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  35\t\r  \nwhip[3]:\t\r  n35{r3c7\t\r  r5c6}\t\r  –\t\r  n33{r5c6\t\r  r3c5}\t\r  –\t\r  n32{r4c2\t\r  .}\t\r  ==>\t\r  r4c5\t\r  ≠\t\r  34\t\r  \nwhip[4]:\t\r  r2c6{n34\t\r  n6}\t\r  –\t\r  r1c3{n7\t\r  n10}\t\r  –\t\r  n35{r1c3\t\r  r3c1}\t\r  –\t\r  r3c5{n36\t\r  .}\t\r  ==>\t\r  r2c1\t\r  ≠\t\r  34\t\r  \nwhip[4]:\t\r  n34{r2c2\t\r  r5c7}\t\r  –\t\r  r2c6{n34\t\r  n6}\t\r  –\t\r  r1c3{n7\t\r  n10}\t\r  –\t\r  r3c5{n9\t\r  .}\t\r  ==>\t\r  r6c8\t\r  ≠\t\r  35\t\r  \n;;;\t\r  singles,\t\r  whips[1],\t\r  biv-­‐chains[2]\t\r  and\t\r  whips[2]\t\r  to\t\r  the\t\r  end\t\r  \n16.2.4.3. Third Hidato® example \nThe reasons for choosing our last Hidato® example (Figure 16.5) should be \nobvious: with grid size 5, it is remarkably compact but it has an unexpectedly hard \nresolution path (in both the topological and the geometric models, W = B = 8), in \nspite of having both ends (Numbers 1 and 19) given. We show only the path for the \ntopological model. As, contrary to the previous examples, there are few whips[1] \nbefore the first Single, we display them all. \n \n \n  \n  \n  \n \n \n  \n  \n3 \n4 \n  \n6 \n7 \n  \n  \n  \n \n \n  \n  \n \n2 \n5 \n  \n8 \n \n19 \n1 10 \n \n  \n  \n18 19 \n1 10 9 \n  \n  \n \n \n \n  \n  \n17 \n  \n14 11 \n  \n \n  \n \n  \n  \n  \n  \n16 15 \n  \n13 12 \nFigure 16.5. A Hidato® puzzle and its solution (clues of # III.4, [Mebane 2012]) \n*****\t\r  \t\r  Hidato-­‐Rules\t\r  1.2\t\r  based\t\r  on\t\r  CSP-­‐Rules\t\r  1.2,\t\r  topological-­‐model,\t\r  config:\t\r  B\t\r  \t\r  \t\r  *****\t\r  \nwhip[4]:\t\r  n8{r1c2\t\r  r2c2}\t\r  –\t\r  n9{r2c5\t\r  r2c3}\t\r  –\t\r  n6{r2c3\t\r  r1c1}\t\r  –\t\r  n5{r1c4\t\r  .}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  n7{r1c4\t\r  r2c2}\t\r  –\t\r  n8{r5c5\t\r  r1c2}\t\r  –\t\r  n5{r1c2\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  6\t\r  \nwhip[4]:\t\r  n12{r1c2\t\r  r2c2}\t\r  –\t\r  n11{r4c4\t\r  r2c3}\t\r  –\t\r  n14{r2c3\t\r  r1c1}\t\r  –\t\r  n15{r5c5\t\r  .}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  13\t\r  \nwhip[3]:\t\r  n13{r1c4\t\r  r2c2}\t\r  –\t\r  n12{r2c5\t\r  r1c2}\t\r  –\t\r  n15{r1c2\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  14\t\r  \nwhip[4]:\t\r  n17{r5c4\t\r  r4c4}\t\r  –\t\r  n18{r2c2\t\r  r4c3}\t\r  –\t\r  n15{r4c3\t\r  r5c5}\t\r  –\t\r  n14{r5c2\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  16\t\r  \nwhip[3]:\t\r  n16{r5c5\t\r  r4c4}\t\r  –\t\r  n17{r5c2\t\r  r5c4}\t\r  –\t\r  n14{r5c4\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  15\t\r  \nwhip[5]:\t\r  n3{r3c5\t\r  r4c4}\t\r  –\t\r  n2{r4c4\t\r  r4c3}\t\r  –\t\r  n5{r4c3\t\r  r2c5}\t\r  –\t\r  n9{r2c5\t\r  r2c3}\t\r  –\t\r  n11{r2c3\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  4\t\r  \nwhip[5]:\t\r   n17{r1c1\t\r   r4c4}\t\r   –\t\r   n18{r2c2\t\r   r4c3}\t\r   –\t\r   n15{r4c3\t\r   r2c5}\t\r   –\t\r   n9{r2c5\t\r   r2c3}\t\r   –\t\r   n11{r2c3\t\r   .}\t\r   ==>\t\r  \nr3c5\t\r  ≠\t\r  16\t\r  \nwhip[4]:\t\r  n18{r2c2\t\r  r4c3}\t\r  –\t\r  n16{r4c3\t\r  r5c5}\t\r  –\t\r  n15{r5c2\t\r  r5c4}\t\r  –\t\r  n14{r5c2\t\r  .}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  17\t\r  \nwhip[6]:\t\r  n17{r1c1\t\r  r5c4}\t\r  –\t\r  n18{r4c1\t\r  r4c3}\t\r  –\t\r  n15{r4c3\t\r  r3c5}\t\r  –\t\r  n14{r4c1\t\r  r2c5}\t\r  –\t\r  n9{r2c5\t\r  r2c3}\t\r  –\t\r  \nn11{r2c3\t\r  .}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  16\t\r  \nwhip[6]:\t\r  n16{r5c1\t\r  r2c5}\t\r  –\t\r  n17{r5c4\t\r  r1c4}\t\r  –\t\r  n18{r4c3\t\r  r2c3}\t\r  –\t\r  n14{r2c3\t\r  r4c4}\t\r  –\t\r  n11{r4c4\t\r  r4c3}\t\r  –\t\r  \nn9{r4c3\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  15\t\r  \n\n16. Topological and geometric constraints: map colouring and path finding     \n455 \nwhip[3]:\t\r  n17{r1c1\t\r  r1c4}\t\r  –\t\r  n15{r1c4\t\r  r1c5}\t\r  –\t\r  n14{r2c2\t\r  .}\t\r  ==>\t\r  r2c5\t\r  ≠\t\r  16\t\r  \nwhip[7]:\t\r   n3{r1c1\t\r   r1c4}\t\r   –\t\r   n5{r1c4\t\r   r2c5}\t\r   –\t\r   n6{r2c5\t\r   r3c5}\t\r   –\t\r   n7{r3c5\t\r   r4c4}\t\r   –\t\r   n2{r4c4\t\r   r2c3}\t\r   –\t\r  \nn9{r2c3\t\r  r4c3}\t\r  –\t\r  n11{r4c3\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  4\t\r  \nwhip[7]:\t\r  n18{r2c2\t\r  r4c3}\t\r  –\t\r  n16{r4c3\t\r  r5c5}\t\r  –\t\r  n15{r5c2\t\r  r4c4}\t\r  –\t\r  n14{r5c1\t\r  r3c5}\t\r  –\t\r  n13{r4c1\t\r  r2c5}\t\r  –\t\r  \nn9{r2c5\t\r  r2c3}\t\r  –\t\r  n11{r2c3\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  17\t\r  \nwhip[1]:\t\r  n17{r1c1\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  16\t\r  \nwhip[7]:\t\r   n3{r3c1\t\r   r2c2}\t\r   –\t\r   n2{r2c2\t\r   r2c3}\t\r   –\t\r   n5{r2c3\t\r   r4c1}\t\r   –\t\r   n18{r4c1\t\r   r4c3}\t\r   –\t\r   n17{r1c1\t\r   r5c2}\t\r   –\t\r  \nn16{r3c1\t\r  r5c1}\t\r  –\t\r  n15{r5c4\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  4\t\r  \nwhip[7]:\t\r   n8{r1c2\t\r   r2c2}\t\r   –\t\r   n9{r2c5\t\r   r2c3}\t\r   –\t\r   n6{r2c3\t\r   r4c1}\t\r   –\t\r   n18{r4c1\t\r   r4c3}\t\r   –\t\r   n17{r1c1\t\r   r5c2}\t\r   –\t\r  \nn16{r3c1\t\r  r5c1}\t\r  –\t\r  n15{r5c4\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  n9{r2c5\t\r  r2c3}\t\r  –\t\r  n7{r2c3\t\r  r1c1}\t\r  –\t\r  n6{r1c4\t\r  r1c2}\t\r  –\t\r  n5{r1c4\t\r  .}\t\r  ==>\t\r  r2c2\t\r  ≠\t\r  8\t\r  \nwhip[7]:\t\r  n12{r1c2\t\r  r2c2}\t\r  –\t\r  n11{r4c4\t\r  r2c3}\t\r  –\t\r  n14{r2c3\t\r  r4c1}\t\r  –\t\r  n18{r4c1\t\r  r4c3}\t\r  –\t\r  n17{r1c1\t\r  r5c2}\t\r  –\t\r  \nn16{r3c1\t\r  r5c1}\t\r  –\t\r  n15{r5c4\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  13\t\r  \nwhip[4]:\t\r  n11{r4c4\t\r  r2c3}\t\r  –\t\r  n13{r2c3\t\r  r1c1}\t\r  –\t\r  n14{r5c5\t\r  r1c2}\t\r  –\t\r  n15{r5c4\t\r  .}\t\r  ==>\t\r  r2c2\t\r  ≠\t\r  12\t\r  \nwhip[7]:\t\r  n16{r3c1\t\r  r1c4}\t\r  –\t\r  n14{r1c4\t\r  r2c5}\t\r  –\t\r  n13{r4c1\t\r  r3c5}\t\r  –\t\r  n12{r4c3\t\r  r4c4}\t\r  –\t\r  n11{r2c5\t\r  r4c3}\t\r  –\t\r  \nn9{r4c3\t\r  r2c3}\t\r  –\t\r  n17{r2c3\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  15\t\r  \nwhip[7]:\t\r  n18{r2c2\t\r  r2c3}\t\r  –\t\r  n16{r2c3\t\r  r1c5}\t\r  –\t\r  n15{r2c2\t\r  r2c5}\t\r  –\t\r  n14{r3c1\t\r  r3c5}\t\r  –\t\r  n13{r4c1\t\r  r4c4}\t\r  –\t\r  \nn9{r4c4\t\r  r4c3}\t\r  –\t\r  n11{r4c3\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  17\t\r  \nwhip[1]:\t\r  n17{r2c2\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  16\t\r  \nwhip[8]:\t\r  n8{r1c2\t\r  r5c2}\t\r  –\t\r  n9{r2c3\t\r  r4c3}\t\r  –\t\r  n6{r4c3\t\r  r4c1}\t\r  –\t\r  n5{r4c1\t\r  r3c1}\t\r  –\t\r  n4{r1c1\t\r  r2c2}\t\r  –\t\r  \nn18{r2c2\t\r  r2c3}\t\r  –\t\r  n2{r2c3\t\r  r4c4}\t\r  –\t\r  n3{r5c2\t\r  .}\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  7\t\r  \nwhip[6]:\t\r   n2{r2c2\t\r   r4c4}\t\r   –\t\r   n4{r4c4\t\r   r5c4}\t\r   –\t\r   n5{r5c4\t\r   r4c3}\t\r   –\t\r   n6{r4c3\t\r   r5c2}\t\r   –\t\r   n7{r5c2\t\r   r4c1}\t\r   –\t\r  \nn8{r5c5\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  3\t\r  \nwhip[8]:\t\r  n3{r1c1\t\r  r5c2}\t\r  –\t\r  n2{r2c2\t\r  r4c3}\t\r  –\t\r  n5{r4c3\t\r  r4c1}\t\r  –\t\r  n6{r4c1\t\r  r3c1}\t\r  –\t\r  n7{r1c1\t\r  r2c2}\t\r  –\t\r  \nn8{r5c5\t\r  r1c2}\t\r  –\t\r  n9{r2c5\t\r  r2c3}\t\r  –\t\r  n18{r2c3\t\r  .}\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  4\t\r  \nwhip[7]:\t\r   n8{r1c4\t\r   r1c2}\t\r   –\t\r   n9{r4c4\t\r   r2c3}\t\r   –\t\r   n6{r2c3\t\r   r3c1}\t\r   –\t\r   n5{r3c5\t\r   r4c1}\t\r   –\t\r   n18{r4c1\t\r   r4c3}\t\r   –\t\r  \nn17{r5c1\t\r  r5c2}\t\r  –\t\r  n4{r5c2\t\r  .}\t\r  ==>\t\r  r2c2\t\r  ≠\t\r  7\t\r  \nwhip[8]:\t\r   n9{r2c5\t\r   r2c3}\t\r   –\t\r   n7{r2c3\t\r   r1c1}\t\r   –\t\r   n6{r1c4\t\r   r2c2}\t\r   –\t\r   n5{r2c5\t\r   r3c1}\t\r   –\t\r   n4{r4c3\t\r   r4c1}\t\r   –\t\r  \nn18{r4c1\t\r  r4c3}\t\r  –\t\r  n17{r5c1\t\r  r5c2}\t\r  –\t\r  n3{r5c2\t\r  .}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  8\t\r  \nwhip[1]:\t\r  n8{r1c4\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  7\t\r  \nwhip[8]:\t\r  n7{r2c3\t\r  r4c1}\t\r  –\t\r  n8{r5c5\t\r  r5c2}\t\r  –\t\r  n9{r4c4\t\r  r4c3}\t\r  –\t\r  n5{r4c3\t\r  r2c2}\t\r  –\t\r  n18{r2c2\t\r  r2c3}\t\r  –\t\r  \nn17{r3c1\t\r  r1c2}\t\r  –\t\r  n16{r1c4\t\r  r1c1}\t\r  –\t\r  n15{r1c4\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  6\t\r  \nwhip[3]:\t\r  n4{r5c4\t\r  r5c2}\t\r  –\t\r  n6{r5c2\t\r  r5c1}\t\r  –\t\r  n7{r5c5\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  n5{r4c3\t\r  r5c2}\t\r  –\t\r  n7{r5c2\t\r  r4c1}\t\r  –\t\r  n8{r5c5\t\r  .}\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  n8{r1c4\t\r  r5c2}\t\r  –\t\r  n6{r5c2\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  7\t\r  \nwhip[2]:\t\r  n9{r2c3\t\r  r4c3}\t\r  –\t\r  n7{r4c3\t\r  .}\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  8\t\r  \nwhip[4]:\t\r  n3{r5c2\t\r  r4c3}\t\r  –\t\r  n5{r4c3\t\r  r5c1}\t\r  –\t\r  n6{r5c5\t\r  r4c1}\t\r  –\t\r  n7{r5c5\t\r  .}\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  n2{r4c3\t\r  r4c4}\t\r  –\t\r  n4{r4c4\t\r  r5c4}\t\r  –\t\r  n5{r5c2\t\r  r5c5}\t\r  –\t\r  n6{r5c2\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  3\t\r  \nwhip[4]:\t\r  n3{r5c2\t\r  r4c4}\t\r  –\t\r  n2{r2c3\t\r  r4c3}\t\r  –\t\r  n5{r4c3\t\r  r5c5}\t\r  –\t\r  n6{r5c2\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  4\t\r  \nwhip[4]:\t\r  n2{r4c4\t\r  r4c3}\t\r  –\t\r  n4{r4c3\t\r  r5c5}\t\r  –\t\r  n5{r5c2\t\r  r5c4}\t\r  –\t\r  n6{r5c2\t\r  .}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  3\t\r  \nwhip[4]:\t\r  n4{r5c5\t\r  r4c4}\t\r  –\t\r  n6{r4c4\t\r  r5c4}\t\r  –\t\r  n7{r5c2\t\r  r4c3}\t\r  –\t\r  n8{r5c5\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  5\t\r  \nwhip[5]:\t\r   n15{r2c2\t\r   r1c4}\t\r   –\t\r   n16{r2c2\t\r   r2c3}\t\r   –\t\r   r5c1{n15\t\r   n5}\t\r   –\t\r   n4{r5c5\t\r   r4c1}\t\r   –\t\r   r1c1{n5\t\r   .}\t\r   ==>\t\r  \nr2c5\t\r  ≠\t\r  14\t\r  \nwhip[3]:\t\r  n14{r3c1\t\r  r4c4}\t\r  –\t\r  n12{r4c4\t\r  r2c5}\t\r  –\t\r  n11{r4c3\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  13\t\r  \nwhip[5]:\t\r   n16{r2c2\t\r   r2c3}\t\r   –\t\r   n14{r2c3\t\r   r1c5}\t\r   –\t\r   r5c1{n13\t\r   n5}\t\r   –\t\r   n4{r5c5\t\r   r4c1}\t\r   –\t\r   r1c1{n5\t\r   .}\t\r   ==>\t\r  \nr1c4\t\r  ≠\t\r  15\t\r  \nwhip[3]:\t\r  n15{r2c2\t\r  r2c5}\t\r  –\t\r  n16{r5c2\t\r  r1c4}\t\r  –\t\r  n13{r1c4\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  14\t\r  \n\n456 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nwhip[5]:\t\r   n16{r2c2\t\r   r1c4}\t\r   –\t\r   n14{r1c4\t\r   r3c5}\t\r   –\t\r   r5c1{n13\t\r   n5}\t\r   –\t\r   n4{r5c5\t\r   r4c1}\t\r   –\t\r   r1c1{n5\t\r   .}\t\r   ==>\t\r  \nr2c5\t\r  ≠\t\r  15\t\r  \nwhip[2]:\t\r  n17{r1c1\t\r  r2c3}\t\r  –\t\r  n15{r2c3\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  16\t\r  \nwhip[4]:\t\r  n18{r2c3\t\r  r2c2}\t\r  –\t\r  n16{r2c2\t\r  r1c2}\t\r  –\t\r  n15{r3c1\t\r  r1c1}\t\r  –\t\r  n14{r1c4\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  17\t\r  \nwhip[5]:\t\r   n15{r3c1\t\r   r4c4}\t\r   –\t\r   n16{r5c2\t\r   r4c3}\t\r   –\t\r   n13{r4c3\t\r   r2c5}\t\r   –\t\r   n11{r2c5\t\r   r2c3}\t\r   –\t\r   n9{r2c3\t\r   .}\t\r   ==>\t\r  \nr3c5\t\r  ≠\t\r  14\t\r  \nwhip[7]:\t\r  n18{r2c3\t\r  r2c2}\t\r  –\t\r  n16{r2c2\t\r  r1c2}\t\r  –\t\r  n15{r1c2\t\r  r2c3}\t\r  –\t\r  n14{r2c3\t\r  r1c4}\t\r  –\t\r  r5c1{n13\t\r  n5}\t\r  –\t\r  \nr3c1{n5\t\r  n3}\t\r  –\t\r  n2{r4c3\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  17\t\r  \nwhip[7]:\t\r   n3{r5c2\t\r   r5c4}\t\r   –\t\r   n5{r5c4\t\r   r4c4}\t\r   –\t\r   n2{r4c4\t\r   r4c3}\t\r   –\t\r   n6{r4c3\t\r   r3c5}\t\r   –\t\r   n7{r5c5\t\r   r2c5}\t\r   –\t\r  \nn11{r2c5\t\r  r2c3}\t\r  –\t\r  n9{r2c3\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  4\t\r  \nwhip[8]:\t\r  n4{r1c1\t\r  r4c1}\t\r  –\t\r  n6{r4c1\t\r  r5c2}\t\r  –\t\r  n3{r5c2\t\r  r3c1}\t\r  –\t\r  n2{r4c3\t\r  r2c2}\t\r  –\t\r  n17{r2c2\t\r  r1c2}\t\r  –\t\r  \nn18{r4c3\t\r  r2c3}\t\r  –\t\r  n16{r2c3\t\r  r1c1}\t\r  –\t\r  n15{r2c3\t\r  .}\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  5\t\r  \nwhip[2]:\t\r  n7{r4c4\t\r  r4c3}\t\r  –\t\r  n5{r4c3\t\r  .}\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  6\t\r  \nwhip[3]:\t\r  n15{r3c1\t\r  r2c3}\t\r  –\t\r  r5c1{n14\t\r  n17}\t\r  –\t\r  n16{r4c3\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  14\t\r  \nwhip[1]:\t\r  n14{r2c2\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  13,\t\r  r2c5\t\r  ≠\t\r  13\t\r  \nwhip[3]:\t\r  n16{r1c1\t\r  r4c3}\t\r  –\t\r  r5c1{n15\t\r  n13}\t\r  –\t\r  n14{r5c5\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  15\t\r  \nwhip[3]:\t\r  n15{r1c1\t\r  r4c4}\t\r  –\t\r  r5c1{n14\t\r  n17}\t\r  –\t\r  n16{r4c3\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  14\t\r  \nwhip[3]:\t\r  n7{r5c4\t\r  r5c2}\t\r  –\t\r  r1c5{n6\t\r  n12}\t\r  –\t\r  r5c5{n12\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  n8{r1c4\t\r  r4c3}\t\r  –\t\r  n6{r4c3\t\r  .}\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  n7{r1c4\t\r  r2c3}\t\r  –\t\r  r1c5{n6\t\r  n12}\t\r  –\t\r  r5c5{n12\t\r  .}\t\r  ==>\t\r  r2c2\t\r  ≠\t\r  6\t\r  \nwhip[1]:\t\r  n6{r2c3\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  n2{r2c2\t\r  r4c3}\t\r  –\t\r  n4{r4c3\t\r  r4c1}\t\r  –\t\r  n5{r3c5\t\r  .}\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  3\t\r  \nwhip[3]:\t\r  n7{r1c4\t\r  r2c3}\t\r  –\t\r  r1c5{n6\t\r  n12}\t\r  –\t\r  r5c5{n12\t\r  .}\t\r  ==>\t\r  r1c2\t\r  ≠\t\r  6\t\r  \nwhip[1]:\t\r  n6{r1c4\t\r  .}\t\r  ==>\t\r  r1c1\t\r  ≠\t\r  5\t\r  \nwhip[2]:\t\r  n8{r1c5\t\r  r1c4}\t\r  –\t\r  n6{r1c4\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  7\t\r  \nwhip[3]:\t\r  n4{r1c1\t\r  r4c3}\t\r  –\t\r  n3{r1c1\t\r  r5c4}\t\r  –\t\r  n2{r2c3\t\r  .}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  n3{r1c1\t\r  r5c4}\t\r  –\t\r  n5{r5c4\t\r  r5c2}\t\r  –\t\r  n6{r5c5\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  4\t\r  \nwhip[3]:\t\r  n5{r5c2\t\r  r5c4}\t\r  –\t\r  n7{r5c4\t\r  r4c4}\t\r  –\t\r  n4{r4c4\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  6\t\r  \nwhip[3]:\t\r  n4{r1c1\t\r  r4c4}\t\r  –\t\r  n6{r4c4\t\r  r4c3}\t\r  –\t\r  n7{r5c5\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  5\t\r  \nwhip[3]:\t\r  n9{r4c3\t\r  r4c4}\t\r  –\t\r  n7{r4c4\t\r  r5c4}\t\r  –\t\r  n6{r3c5\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  8\t\r  \nwhip[3]:\t\r  n16{r1c1\t\r  r4c3}\t\r  –\t\r  n14{r4c3\t\r  r5c4}\t\r  –\t\r  r5c1{n15\t\r  .}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  15\t\r  \nwhip[2]:\t\r  n17{r1c2\t\r  r5c2}\t\r  –\t\r  n15{r5c2\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  16\t\r  \nwhip[4]:\t\r  n15{r5c1\t\r  r4c3}\t\r  –\t\r  r5c1{n14\t\r  n17}\t\r  –\t\r  r3c1{n18\t\r  n3}\t\r  –\t\r  r1c1{n4\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  14\t\r  \nwhip[4]:\t\r  n14{r1c2\t\r  r4c4}\t\r  –\t\r  n12{r4c4\t\r  r5c4}\t\r  –\t\r  n11{r3c5\t\r  r4c3}\t\r  –\t\r  n15{r4c3\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  13\t\r  \nwhip[3]:\t\r  r5c5{n7\t\r  n12}\t\r  –\t\r  r1c5{n12\t\r  n5}\t\r  –\t\r  n6{r5c4\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  7\t\r  \nwhip[4]:\t\r  n15{r1c1\t\r  r4c3}\t\r  –\t\r  n13{r4c3\t\r  r5c4}\t\r  –\t\r  n12{r5c2\t\r  r5c5}\t\r  –\t\r  n11{r4c3\t\r  .}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  14\t\r  \nwhip[2]:\t\r  n16{r5c1\t\r  r5c2}\t\r  –\t\r  n14{r5c2\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  15\t\r  \nwhip[3]:\t\r  n18{r2c2\t\r  r4c1}\t\r  –\t\r  n16{r4c1\t\r  r5c2}\t\r  –\t\r  n15{r5c2\t\r  .}\t\r  ==>\t\r  r5c1\t\r  ≠\t\r  17\t\r  \nwhip[2]:\t\r  r5c1{n13\t\r  n16}\t\r  –\t\r  n15{r3c1\t\r  .}\t\r  ==>\t\r  r2c3\t\r  ≠\t\r  14\t\r  \nwhips[1]:\t\r  n14{r3c1\t\r  .}\t\r  ==>\t\r  r1c4\t\r  ≠\t\r  13;\t\r  \t\r  \t\r  \t\r  \t\r  n13{r2c2\t\r  .}\t\r  ==>\t\r  r1c5\t\r  ≠\t\r  12,\t\r  r2c5\t\r  ≠\t\r  12\t\r  \nwhip[2]:\t\r  r1c5{n5\t\r  n8}\t\r  –\t\r  n7{r3c5\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  6\t\r  \nwhips[1]:\t\r  n6{r4c4\t\r  .}\t\r  ==>\t\r  r5c2\t\r  ≠\t\r  5;\t\r  \t\r  \t\r  \t\r  \t\r  n5{r1c2\t\r  .}\t\r  ==>\t\r  r4c1\t\r  ≠\t\r  4\t\r  \nwhip[2]:\t\r  n2{r2c3\t\r  r2c2}\t\r  –\t\r  n4{r2c2\t\r  .}\t\r  ==>\t\r  r3c1\t\r  ≠\t\r  3\t\r  \nwhip[2]:\t\r  n6{r5c4\t\r  r4c4}\t\r  –\t\r  r1c5{n7\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  7\t\r  \nwhip[2]:\t\r  n9{r2c3\t\r  r4c4}\t\r  –\t\r  n7{r4c4\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  8\t\r  \nwhip[2]:\t\r  r5c5{n7\t\r  n12}\t\r  –\t\r  n11{r4c3\t\r  .}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  7\t\r  \nwhip[2]:\t\r  n5{r1c2\t\r  r2c5}\t\r  –\t\r  n7{r2c5\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  6\t\r  \n\n16. Topological and geometric constraints: map colouring and path finding     \n457 \nwhip[2]:\t\r  n7{r1c4\t\r  r5c5}\t\r  –\t\r  r1c5{n8\t\r  .}\t\r  ==>\t\r  r5c4\t\r  ≠\t\r  6\t\r  \nwhip[2]:\t\r  r5c5{n12\t\r  n7}\t\r  –\t\r  n6{r1c4\t\r  .}\t\r  ==>\t\r  r4c4\t\r  ≠\t\r  12\t\r  \nwhip[1]:\t\r  n12{r5c2\t\r  .}\t\r  ==>\t\r  r3c5\t\r  ≠\t\r  11\t\r  \nwhip[2]:\t\r  n4{r1c1\t\r  r4c4}\t\r  –\t\r  n6{r4c4\t\r  .}\t\r  ==>\t\r  r4c3\t\r  ≠\t\r  5\t\r  \nwhip[2]:\t\r  n6{r1c4\t\r  r4c4}\t\r  –\t\r  r1c5{n7\t\r  .}\t\r  ==>\t\r  r5c5\t\r  ≠\t\r  7\t\r  \n;;; Until now there has been no Single \nsingles\t\r  and\t\r  whips[1]\t\r  to\t\r  the\t\r  end\t\r  \nIn all these examples, one may wonder whether these long resolution paths could \nbe simplified. By keeping all the assertion steps and, moving backwards from the \nend of the path, keeping only the elimination steps necessary to justify the assertions \nand eliminations that have been kept in the previous (from the end) elimination and \nassertion steps, it is likely that some intermediate eliminations could be avoided. \nBut, as the first value assertions appear only near the end of the path, it is unlikely \nthat this would lead to drastic simplifications. And, in any case, the B or W rating \nwould not be changed. \n\t\r  \n\n\n \n \n17. Final remarks \nIn these final, partly retrospective remarks, which are intended neither as a \nsummary nor as a conclusion, we shall highlight and comment some overlapping \nfacets of what has been achieved for the pattern-based solution of the general finite \nConstraint Satisfaction Problem (with a few open questions). As for the practical \napplicability of the approach developed in this book, we merely refer to the many \nSudoku examples and to the chapters dedicated to other logic puzzles. \n17.1. About our approach to the finite CSP \n17.1.1. About the general distinctive features of our approach \nThere are five main inter-related reasons why this book diverges radically from \nthe current literature on the finite CSP17: \n– almost everything in our approach, in particular all our definitions and \ntheorems, is formulated in terms of mathematical logic, independently of any \nalgorithmic implementation; (apart from the obvious logical re-formulation of a \nCSP, the current literature on CSPs is mainly about algorithms for solving them and \ncomparisons of such algorithms); however, by effectively implementing them and \napplying them to various types of constraints, we have shown that these logical \ndefinitions are not mere abstractions and that they can be made fully operational; \n– we systematically use redundant (but not overly redundant) sets of CSP \nvariables; correlatively, we do not define labels as <variable, value> pairs but as \nequivalence classes of such pairs; \n– we fix the main parameter defining the “size” of a CSP and we are not (or not \ndirectly) concerned with the usual theoretical perspectives of complexity, such as \nNP-completeness of a CSP with respect to its size; \n–  we nevertheless tackle questions of complexity, in terms of the statistical \ndistribution of the minimal instances of a fixed size CSP; although all our resolution \nrules are valid for all the instances of a CSP, without any kind of restriction, we \n                               \n17 We are not suggesting that our approach is better than the usual ones; we are aware that our \npurposes are non-standard and they may be irrelevant when speed of resolution is the main \ncriterion; this is why we have stated our motivations with some detail in the Foreword. \n\n460 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ngrant minimal instances a major role in all our statistical analyses and classification \nresults; the thin layer of instances they define in the whole forest of possible \ninstances (see chapter 6 for this view) allows to discard secondary problems that \nmulti-solution or over-constrained instances would raise for statistics; (by contrast, \nthe notion of minimality is almost unknown in the CSP world);  \n– last but not least, our purposes lie much beyond the usual ones of finding a \nsolution or defining the fastest algorithms for this. Here, instead of the solution as a \nresult, we are interested in the solution as a proof of the result, i.e. in the resolution \npath. Accordingly, we have concentrated on finding no-guessing, constructive, pure \nlogic, pattern-based, rule-based, understandable, meaningful resolution paths – \nthough these words did not have a clear pre-assigned meaning. \nWe have taken this purpose into account in Part I by interpreting the “pure logic” \nrequirement literally – i.e. as a solution completely defined in terms of mathematical \nlogic (with no reference to any algorithmic notions). Thus, we have introduced a \ngeneral resolution paradigm based on progressive candidate elimination. This \namounts to progressive domain restriction, a classical idea in the CSP community. \nBut, in our approach, each of these eliminations is justified by a single pattern – \nmore precisely by a well defined resolution rule of a given resolution theory – and \nis interpreted in modal (non algorithmic) terms. We have established a clear logical \n(intuitionistic) status for the notion of a candidate (a notion that does not a priori \npertain to the CSP Theory). Moreover, we have shown that the modal operator that \nnaturally appears when one tries to provide a formal definition of a candidate  can \nbe “forgotten” when we state resolution rules, provided that we work with \nintuitionistic (or constructive) instead of classical logic (which is not a restriction in \npractice). \n \nOnce this logical framework is set, a more precise purpose can be examined, not \ncompletely independent from the vague “understandable” and “meaningful” original \nones: one may want the simplest pure logic (or “rule-based” or “pattern-based”) \nsolution. As is generally understood without saying when one speaks of the simplest \nsolution to a mathematical problem, we mean neither easiest to discover for a human \nbeing nor computationally cheapest, but simplest to understand for the reader. Even \nwith such precisions, we have shown that “simplest” may still have many different, \nall logically grounded, meanings, associated with different (purely logical) ratings of \ninstances.  \nTaking for granted that hard minimal instances of most fixed size CSPs cannot \nbe solved by elementary rules but they require some kind of chain rules (with the \nclassical xy-chains of Sudoku as our initial inspiration), we have refined our general \nparadigm by defining families of resolution rules of increasing logical (and \ncomputational) complexity, valid for any CSP: some reversible (Bivalue-Chains, g-\nBivalue-Chains, Reversible-Subset-Chains, Reversible-g-Subset-Chains) and some \n\n17. Final remarks     \n461 \norientated, much more powerful ones (whips, g-whips, Sp-whips, gSp-whips, Wp-\nwhips and similar braid families).  \nThe different resolution paths obtained with each of these families when the \nsimplest-first strategy is adopted correspond to different legitimate meanings of \n“simplest solution” (when they lead to a solution) and, in spite of strong \nsubsumption relationships, we have shown (in several chapters, by examples of \ninstances that have different ratings) that none of them can be completely reduced to \nanother in a way that would preserve the ratings. Said otherwise: there does not \nseem to be any universal notion of (logical) simplicity for the resolution of a CSP. \n17.1.2. About our resolution rules (whips, braids, …) \nRegarding these new families of chain rules, now reversing the history of our \ntheoretical developments, four main points should be recalled: \n– We have introduced a formal definition of Trial-and-Error (T&E), a procedure \nthat, in noticeable contrast with the well known structured search algorithms \n(breadth-first, depth-first, …) and with all their CSP specific variants implementing \nsome form of constraint propagation (arc-consistency, path-consistency, MAC, …), \nallows no “guessing”, in the sense that it accepts no solution found by sheer chance \nduring the search process: a value for a CSP variable is accepted only if all its other \npossible values have been tested and each of them has been constructively proven to \nlead to a contradiction. \n– With the “T&E vs braids” theorem and its “T&E(T) vs T-braids” extensions to \nvarious resolution theories T, we have proven that a solution obtained by the \nT&E(T) procedure can always be replaced by a “pure logic” solution based on T-\nbraids, i.e. on sequential patterns with no OR-branching accepting simpler patterns \ntaken from the rules in T as their building blocks. \n– Because its importance could not be over-estimated, we have proven in great \ndetail that all our generalised braid resolution theories (braids, g-braids, Sp-braids, \ngSp-braids, Bp-braids, B*-braids, …) have the confluence property. Thanks to this \nproperty, we have justified the idea that these types of logical theories can be \nsupplemented by a “simplest first” strategy, defined by assigning in a natural way a \ndifferent priority to each of their rules. When one tries to compute the rating of an \ninstance and to find the simplest, pure logic solution for it, in the sense that it has a \nresolution path with the shortest possible braids in the family (which the T&E \nprocedure alone is unable to provide), this strategy allows to consider only one \nresolution path; without this property, all of them should a priori be examined, \nwhich would add an exponential factor to computational complexity18. Even if the \n                               \n18 The confluence property of a resolution theory T should not be interpreted beyond what it \nmeans. In particular, it does not allow to assign a rating to each candidate of an instance P: \ndifferent resolution paths for P within T will always have the same rating of their hardest step, \n\n462 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ngoal of maximum simplicity is not retained, the property of stability for confluence \nof these T-braid resolution theories remains very useful in practice, because it \nguarantees that valid eliminations and assertions occasionally found by any other \nconsistent opportunistic solving methods (or any application-specific heuristics or \nany other search strategy) cannot introduce any risk of missing a solution based on \nT-braids or of finding only ones with unnecessarily long braids. \n– With the statistical results of chapter 6, we have also shown that, in spite of a \nmajor structural difference between whips and braids (the “continuity” condition), \nwhips (even if restricted to the no-loop ones) are a very good approximation of \nbraids19, in the double sense that: 1) the associated W and B ratings are rarely \ndifferent when the W rating is finite and 2) the same “simplest first” strategy, a \npriori justified for braids but not for whips, can be applied to whips, with the result \nthat a good approximation of the W rating is obtained after considering only one \nresolution path (i.e. the concrete effects of non confluence of the whip resolution \ntheories appear only rarely). This is the best situation one can desire for a restriction: \nit reduces structural (and computational) complexity but it entails little difference in \nclassification results.20 Of course, much work remains to be done to check whether \nthis proximity of whips and braids is true for all the types of extended whips and \nbraids defined in this book (it seems to be true for g-whips) and for CSPs other than \nSudoku (it seems to be true also for Futoshiki, Kakuro, Map colouring, Numbrix® \nand Hidato®, as can be seen by the small number of occurrences of braids appearing \nin the resolution paths). \n17.1.3. About human solving based on these rules \nThe four above-mentioned points have their correlates regarding a human trying \nto solve an instance of a CSP “manually” (or should we say “neuronally”?), as may \nbe the “standard” situation for some CSPs, such as logic puzzles: \n– It should first be noted that T&E is the most natural and universal resolution \nmethod for a human who is unaware of more complex possibilities and who does \n                                                                                                                                               \nbut these hardest steps may correspond to the elimination of different candidates. This is not \nan abstract view; it happens very often. \n19 We have shown this in great detail for Sudoku, but the resolution paths we have obtained \nfor most of the Futoshiki, Kakuro, Map colouring, Numbrix® and Hidato® examples confirm a \nsimilar behaviour. \n20 By contrast, the “reversibility” condition often imposed on chains in some Sudoku circles \n(never clearly formulated before HLS) is very restrictive and it leads some players to reject \nsolutions based on non-reversible (or “orientated”) chains (such as whips and braids) and to \nthe (in our opinion, hopeless for hard instances) search for extremely complex patterns (such \nas all kinds of what we would call extended g-Fish patterns: finned, sashimi, chains of g-Fish,  \n…). This said, we acknowledge that Reversible-Subset-Chains (Nice Loops, AICs) may have \nsome appeal for moderately complex instances. \n\n17. Final remarks     \n463 \nnot accept guessing. This was initially only a vague intuition. But, with time, it has \nreceived very concrete confirmations from our experience in the Sudoku micro-\nworld (with friends, students, contacts, or from questions of newcomers on forums), \nconsidering the way new players spontaneously re-invent it without even having to \nthink of it consciously. Indeed, it does not seem that they reject guessing a priori; \nthey start by using it and they feel unsatisfied about it after some time, as soon as \nthey understand that it is an arbitrary step in their solution; “no-guessing” then \nappears as an additional a posteriori requirement. Websites dedicated to the other \nlogic puzzles studied in this book are another source of confirmation: T&E (in \nvarious names and usually in informal guises, but always in a form compatible with \nour formal definition) always appears as the most widely used resolution method, \nexcept of course for the easiest puzzles. \n– The “T&E vs braids” theorem means that the most natural T&E solving \ntechnique, in spite of being strongly anathemised by some Sudoku experts, is not so \nfar from being compatible with the abstract “pure logic” requirement. Moreover, its \nproof shows that a human solver can always easily modify a T&E solution in order \nto present it as a braid solution. Thanks to the subsumption theorems or to the more \ngeneral “T&E(T) vs T-braids” theorem, this remains true when he learns more \nelaborate techniques (such as Subset or g-Subset rules) and he starts to combine \nthem with T&E. \n– Finding the shortest braid solution is a much harder goal than finding any \nsolution based on braids and this is where the main divergence with a solution \nobtained by mere T&E occurs. For the human solver who started with T&E, it is \nnevertheless a natural step to try to find a shorter (even if not the shortest) solution. \nAn obvious possibility consists of excising the useless branches of what he has first \nfound; but he can also look for alternative braids, either for the same elimination or \nfor a different one. \n– As for the fourth point, a human solver is very likely to have spontaneously \nthe idea of using the continuity condition of whips to guide his search for a \ncontradiction on some target Z: it means giving a preference to pushing further the \nlast tried step rather than a previous one. It is so natural that he may even apply it \nwithout being aware of it. \nFinally, for a human solver, the transition from the spontaneous T&E procedure \nto the search for whips can be considered as a very natural process. Learning about \nSubsets and g-Subsets and looking for them can also be considered as a natural, \nthough different, evolution. And the two can be combined. Once more, there is no \nunique way of defining what “the best solution” may mean. \nOf course, a human player can also follow a very different learning path, starting \nwith application specific rules, such as xy-chains in Sudoku and progressively trying \nto spot patterns from the ascending sequence of more complex rules following a \ndiscovery path similar to that in HLS. But, unless he limits himself to moderately \n\n464 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ncomplex instances, he cannot avoid the kind of non-reversible chain patterns \nintroduced in this book. \n17.1.4. About a strategic level \nWe have used the confluence property to justify the definition of a “simplest-\nfirst” strategy for all the braid and generalised braid (and, by extension, all the whip \nand generalised whip) resolution theories. This strategy perfectly fits the goals of \nfinding the simplest solution (keeping the above comments on “simplest” in mind) \nand of rating an instance. \nWhat the “simplest-first” strategy guarantees should be clear: for a resolution \ntheory T with the confluence property, it finds a solution with the smallest T-rating \n(if there is one); in any case, at each step in any resolution path within T, the \navailable assertion or elimination with the lowest T-rating is applied (or, when there \nare several, one of the possible assertions or eliminations with this rating is \nrandomly chosen and applied). One thing it does not guarantee is that all these steps \nare necessary for justifying the next ones or that there is no other resolution path \nwith fewer eliminations (not counting Elementary Constraints Propagation). \nOther systematic strategies can also be imagined. One of them consists of \nconsidering subsets of CSP variables of “same type” and defining special cases of \nall the rules by restricting them to such subsets of variables and by assigning these \ncases higher priorities than their initial full version. This is what we have done for \nSudoku in HLS1, with the 2D rules. It is easy to see that, as the “2D” rules are the \nvarious 2D projections (on the rc-, rn-, cn- and bn- spaces) of the “3D” ones \npresented here, all the 2D-braid theories (in each of these four 2D spaces) are stable \nfor confluence and have the confluence property; it is therefore also true of their \nunion. In HLS1, we have shown that 97% of the puzzles in the random Sudogen0 \ncollection can be solved by such 2D rules (the real percentage may be a little less for \nan unbiased sample). We still consider these rules as interesting special cases that \nhave an obvious place in the “simplest-first” strategy and that may be easier to find \nand/or to understand for a human player. \nNow, it is very unlikely that any human solver would proceed in such a \nsystematic way as described in any of the above two strategies. He may prefer to \nconcentrate on some aspect of the puzzle and try to eliminate a candidate from a \nchosen cell (or group of cells). As soon as he has found a pattern justifying an \nelimination, he applies it. This could be called the opportunistic “first-found-first-\napplied” strategy. And, thanks to stability for confluence, it is justified in all the \ngeneralised braid resolution theories defined in this book. In simple terms, there can \nbe no “bad” move able to block the way to the solution. This conclusion is in strong \nopposition to claims often made in some Sudoku circles that adding a clue (or \nasserting a value) may make a puzzle harder; such views can only rely on forgetting \n\n17. Final remarks     \n465 \na few facts: 1) such cases arise only when rules of uniqueness are involved; 2) they \narise only when hardness is measured by the SER; 3) if added to a resolution theory \nwith the confluence property, a rule for uniqueness destroys it, unless it is given \nhigher priority than all the other rules; 4) there is a confusion in SER between the \npriority of a rule and its rating; 5) this confusion prevents rules for uniqueness to \napply as soon as they should; 6) as a result, the SER rating of rules for uniqueness is \ninconsistent. \nWhat may be missing however in our approach is more general “strategic” \nknowledge for orientating the search: when should one look for such or such \npattern? This would be meta-knowledge about how to use the knowledge included \nin the resolution theories. It would very likely have to be application-specific21.  \nBut the fact is, we have no idea of which criteria could constitute a basis for such \nmeta-knowledge. Worse, even in the most studied Sudoku CSP, whereas there is a \nplethora of literature on resolution techniques (sometimes misleadingly called \nstrategies), nothing has ever been written on the ways they should be used, i.e. on \nwhat might legitimately be called strategies. In particular, one common prejudice is \nthat one should first try to eliminate bivalue/bilocal candidates (i.e., in our \nvocabulary, candidates in bivalue rc, rn, cn or bn cells). Whereas this may work for \nsimple puzzles, it is almost never possible for complex ones. This can easily be seen \nby examining the hard examples of this book (for any of the CSPs we have studied), \nwith the long sequences of whip eliminations necessary before a Single is found: if \nany of these eliminations had occurred for a bivalue CSP variable, then it would \nhave been immediately followed by a Single. \n17.2. About minimal instances and uniqueness \n17.2.1. Minimal instances and uniqueness \nConsidering that, most of the time, we restrict our attention to minimal instances \nthat (by definition) have a unique solution, one may wonder why we do not \nintroduce any “axiom” of uniqueness. Indeed, there are many reasons: \n– it is true that we restrict all our statistical analyses of resolution rules to \nminimal instances, for reasons that have been explained in the Introduction; but it \ndoes not entail that validity of resolution rules should be limited per se to minimal \ninstances; on the contrary, they should apply to any instance; in a few examples in \nthis book, our rules have even been used to prove non-uniqueness or non-existence \nof solutions; \n– as mentioned in the Introduction, from the point of view of Mathematical \nLogic, uniqueness cannot be an axiom, at least not an axiom that could impose \n                               \n21 [Laurière 1978] presents a different perspective, based on general-purpose heuristics. \n\n466 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nuniqueness of a solution; for any instance, it can only be an assumption; moreover, \nwhen incorrectly applied to a multi-solution instance, the assumption of uniqueness \ncan lead, via a vicious circle, to the erroneous conclusion that an instance has a \nunique solution; we have given an example in HLS1, section XXII.3.1 (section 3.1 \nof chapter “Miscellanea” in HLS2); \n– uniqueness is not a constraint the CSP solver (be he human or machine) is \nexpected or can choose to satisfy; in some CSPs or some situations (such as for \nstatistical analyses or for logic puzzles like Sudoku), uniqueness may be a \nrequirement to the provider of instances (he should provide only “well formed” \ninstances, i.e. minimal instances or, at least, instances with a unique solution); the \nCSP solver can then decide to trust his provider or not; if he does and he uses rules \nbased on it in his resolution paths, then uniqueness can best be described as an \noracle; for this reason, in all the solutions we have given, uniqueness is never \nassumed, but it is proven constructively from the givens;  \n– the fact is, there is no known way of exploiting the assumption of uniqueness \nfor writing any general resolution rule for uniqueness; and we can take no \ninspiration in the Sudoku case, because all the known techniques based on the \nassumption of uniqueness are Sudoku specific; \n– in the Sudoku case, if any of the known rules of uniqueness is added in its \nusual form to a resolution theory with the confluence property, it destroys \nconfluence (see HLS for an example); however, we have not explored the possibility \nof other (more complex) formulations that could preserve it; \n– still in the Sudoku case, it does not seem that the known rules for uniqueness \nhave much resolution power; there is no known example that could be solved if they \nwere added to “standard” resolution rules but that could not otherwise. \nOf course, we are not trying to deter anyone from using uniqueness in practice, if \nthey like it, in CSPs for which it allows to formulate specific resolution rules, such \nas Sudoku (where it has always been a very controversial topic, but it has also led to \nthe definition of smart techniques); in some rare cases, it can simplify the resolution \npaths. We are only explaining why we chose not to use it in our theoretical \napproach. One should always keep in mind that theory often requires more stringent \nconstraints than practice. \n17.2.2. Minimal instances vs density and tightness of constraints \nTwo global parameters of a CSP, its “density of constraints” and its “tightness”, \nhave been identified in the classical CSP literature. Their influence on the behaviour \nof general-purpose CSP solving algorithms has been studied extensively and they \nhave also been used to compare such algorithms. (As far as we know, these studies \nhave been about unrestricted CSP instances; we have been unable to find any \nreference to the notion of a minimal instance in the CSP literature.) \n\n17. Final remarks     \n467 \nDefinitions (classical in CSPs): the density of constraints of a CSP is the ratio \nbetween the number of label pairs linked by some constraint (supposing that all the \nconstraints are binary) and the total number of label pairs; the tightness of a CSP is \nthe ratio between the number of label pairs linked by some “strong” constraint (i.e. \nsome constraint due to a CSP variable) and the number of label pairs linked by some \nconstraint. \nDensity reflects the intuitive idea that the vertices of an undirected graph (here, \nthe graph of labels) can be more or less tightly linked by the edges (here the direct \nbinary contradictions); it also evokes a few general theorems relating the density and \nthe diameter of a random graph (a topic that has recently become very attractive \nbecause of communication networks). Tightness evokes the difference we have \nmentioned between Sudoku or LatinSquare (tightness 100%, for any grid size) and \nN-Queens (tightness ~ 50%, depending on n). \n \nIn the context of this book, relevant questions related to these parameters should \nbe about their influence on the scope of the various types of resolution rules with \nrespect to the set of minimal instances of the CSP. However, how the definitions of \nthese two parameters should be adapted to this context is less obvious than it may \nseem at first sight. The question is, should one compute these parameters using all \nthe labels of the CSP or only the actual candidates? In the latter case, they would \nchange with each step of the resolution process. \nTaking the 9×9 Sudoku example, the computation is easy for labels: there are \n729 labels (all the nrc triplets) and each label is linked by some constraint to 8 \ndifferent labels on each of the n, r, c axes, plus 4 remaining labels on the b axis. \nEach label is thus linked by some constraint to the same number (28) of other labels \nand one gets a density equal to 28/728 = 3.846%. More generally, for n×n Sudoku \nwith n = m2, density is: (4m2-2m-2)/(m6-1); it tends rapidly to zero (as fast as 4/n2) \nas the size n of the grid increases. \nHowever, considering the first line of each Sudoku resolution path in this book, \none can check that for a minimal puzzle, after the Elementary Constraint \nPropagation rules have been applied (i.e. after the straightforward initial domain \nrestrictions), the number of candidates remaining in the initial resolution state RSP \nof an instance P is much smaller. As all that happens in a resolution path depends \nonly on RSP, a definition of density based on the candidates in RSP can be expected \nto be more relevant. But, the analysis of the first series of 21,375 puzzles produced \nby the controlled-bias generator, leads to the following conclusions, showing that \nneither the number of candidates in RSP nor the density of constraints in RSP have \nany significant correlation with the difficulty of a puzzle P (measured by its W \nrating): \n\n468 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n– the number of candidates in RSP has mean 206.1 (far less than the 729 labels) \nand standard deviation 10.9; it has correlation coefficient -0.20 with the W rating; \n– the density of constraints in RSP has mean 1.58% (much less than when \ncomputed on all the labels) and standard deviation 0.05%; its has correlation \ncoefficients -0.16 with the number of candidates in RSP and -0.06 with the W rating. \nOne (seemingly more interesting) open question is: is there a correlation between \nthe rating of the current “simplest” possible elimination and the current density \n(based on the current set of candidates before the elimination). In the instances with \na hard first step that we checked, there was no significant deviation from the mean; \nbut the question may be worth more systematic investigation. \n \nCan tightness give better or different insights? This parameter plays a major role \nin the left to right extension steps of the partial chains of all the types defined in this \nbook. In n×n Sudoku or n×n LatinSquare, tightness is 100%, whatever the value of \nn; these examples can therefore not be used to investigate this parameter. If there are \nfew CSP variables, there may be few chains. In this context, it should however be \nnoticed that, from the millions of Sudoku puzzles we have solved, problems that \nappear for the hardest ones solvable by whips or g-whips arise from two opposite \ncauses: not only because there are too few partial whips or g-whips (and no \ncomplete ones), but also because there are too many useless partial whips or g-whips \n(eventually leading to computational problems due to memory overflow). \nOne idea that needs be explored in more detail is that the possible statistical \neffects of initial density or tightness of constraints on complexity are minimised (as \nis the case for the number of givens) by considering the thin layer of minimal \ninstances (because they have a unique solution). But  the 16×16 and 25×25 Sudoku \nexamples in section 11.5 show that they cannot be minimised to the point of limiting \nthe depth of T&E in a way independent of density (or grid size). \n17.3. About ratings, simplicity, patterns of proof \nOur initial motivations included three broad categories of (vague) requirements:  \n– a “pure logic”, “pattern-based”, “rule-based”, “constructive” solution with “no \nguessing”, \n– an “understandable”, “explainable” solution, \n– and a “simplest” solution.  \nIf the first type has been given a precise meaning and has been satisfied in Part I, \nand if the second can be considered as a more or less subjective mix of the other \ntwo, one may wonder what the third has become or rather how it had to be refined. \n\n17. Final remarks     \n469 \n17.3.1. About general ratings and the requirement for the “simplest” solution \nFor any instance P of any CSP, several ratings of P have been introduced: W, B, \ngW, gB, S+W, S+B, SW, SB,… All of them have been defined in pure logic terms, \nthey are invariant under the symmetries of the CSP (if its constraints are properly \nmodelled) and they are intrinsic properties of P. They have also been shown to be \nlargely mutually consistent, i.e. they assign the same finite ratings “most of the \ntime” to instances in T&E(1)22 – which probably already includes much more than \nwhat can be solved “manually” by normal human beings.  \nMoreover, if one nevertheless wants to go further, we have defined the WW, BB, \nW*W, B*B ratings and we have shown that the BB rating is finite for any instance \nin T&E(2), i.e. that can be solved with at most two levels of Trial-and-Error. \nWhat the multiplicity of these logically grounded ratings also shows is that there \nis one thing all our formal analyses cannot do in our stead: choosing what should be \nconsidered as “simplest”. And we strongly believe that there can be no universal a \npriori definition of simplicity of a resolution path, even when one adopts a hardest-\nstep view of simplicity and even for a problem as “simple” as Sudoku, let alone for \nthe general finite CSP. Simplicity can only depend on one’s specific goals. For \ndefiniteness, let us illustrate this with the Sudoku CSP. \nIf one is interested in providing examples of some particular set of techniques or \npromoting them, then a solution considered as the simplest must (tautologically) use \nonly these techniques; the job will then be to provide nice handcrafted examples of \nsuch puzzles (and, sometimes, to carefully hide the fact that they are exceptional in \nthe set of all the minimal puzzles); this is the approach implicitly taken by most \nSudoku puzzle providers and most databases of “typical examples” associated with \ncomputerised solvers. Unfortunately, apart from those here and in HLS, we lack \nboth formal studies of such sets of techniques and statistical analyses of their scopes. \nIf one is interested in the simplest pattern-based solution for all the minimal \npuzzles, then, considering the statistical results of chapter 6, a whip solution could \ncertainly be considered as the simplest one, statistically; a g-whip solution would be \na good alternative, as the structural complexity of g-whips is not much greater than \nthat of whips. “Statistically” means that, in rare cases, a better solution including \nSubsets or g-Subsets or Reversible-Subset-Chains or S-whips or W-whips could be \nfound – “better” in the sense that it would provide a smaller rating (at the cost of \nusing more complex patterns). Although it is hard to imagine a motivation for this \nwhen whips or g-whips would be enough, one could also use Wp*-whips or B*-\nbraids, i.e. rely on T&E(2) contradictions as if they were ordinary constraints; doing \nthis may ultimately be only a matter of personal taste [provided that confusion is not \n                               \n22 Strictly speaking, this has been shown in precise terms only for 9×9 Sudoku, but there are \nserious indications that it remains true for  the other logic puzzles we have examined. \n\n470 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \ncreated by comparing without caution ratings that involve these derived constraints \nwith those that do not]. \nIf one is interested in the “hardest” instances, then it should first be specified \nprecisely what is meant by “hardest” (in particular with respect to which rating); this \nmay seem obvious, but it remains frequent on Sudoku forums to see (implicit) \nreferences to two different ratings in the same sentence. In Sudoku, puzzles harder \nthan the “hardest” known ones with respect to the prevailing SER rating keep being \ndiscovered. One can consider that Part III of this book (apart from chapter 8) is \ndedicated to resolution rules for the hardest puzzles (not in the sense of the SER, but \nin the broader sense that they are not solvable by braids or g-braids, or equivalently \nby at most one level or T&E or gT&E). Much depends on two parameters: the \nmaximal depth d of Trial-and-Error necessary to solve these instances and the \nmaximal look-ahead p necessary to solve them at depth d-1. [Even for 9×9 Sudoku, \nalthough we have shown that there are very strong reasons to conjecture that d = 2 \nand p = 7, i.e. that every puzzle can be solved by B7-braids, we have no formal proof \nof this.]  \nThe T&E(2) land is where many different possibilities appear. For instances \nthere, instead of looking for the simplest solution with respect to the universal BB \nrating, one can consider two simpler approaches: 1) the B?B classification, possibly \nfollowed by a Bp-braids  solution, and 2) the Bp*-braids view. As an illustration of \nthe latter, the solution given for EasterMonster in section 12.3.3.1 proceeds in two \nsteps: the first step provides the main lines of the proof as a sequence of B*-\nwhips[1] eliminations; the second step should contain the “details” of the proof by \nexhibiting the bi-braids justifying each of these B*-whips[1]. This led us to \nintroduce the general notion of a pattern of proof, but this is a vast topic and we \nhave only skimmed it. \nAs shown by the sk-loop examples in chapter 13, it may occasionally happen \nthat application-specific patterns (often tightly related to patterns of givens enjoying \nvery particular symmetries or quasi-symmetries) reduce the complexity of an \ninstance (measured in this case by the B?B classification). However, for the very \nhardest instances, it may also happen that the whole requirement of simplicity \nbecomes merely meaningless: the existence of extremely rare but very hard \ninstances that cannot be solved by any “simple” rules (in a vague intuitive sense of \n“simple”) is a fact that cannot be ignored. \n17.3.2. About adapting the general ratings to an application \nThe Futoshiki CSP allows two additional comments about how the general \nratings introduced in this book can easily be adapted to a particular CSP in order to \nbetter take into account any “natural” notion of simplicity in specific applications:  \n\n17. Final remarks     \n471 \n– although “ascending chains” of any size are equivalent to series of whips of \nlength one, they are so natural that presenting them as whips would make the \nresolution paths look unnecessarily complicated, with lots of elementary and boring \nsteps; this means that, in some cases, our requirement of simplicity cannot be \ndefined based only on formal criteria but it may have to take into account matters of \npresentation; however, from a technical point of view, this is more a cosmetic than a \ndeep matter; \n– “hills” and “valleys” raise a much more interesting question; they are almost \nas natural and obvious patterns as ascending chains, whatever their size; although \nthey can always be considered as Subsets or as S-whips and their complexity in \nterms of the equivalent Subsets or S-whips would be much higher than that of \nascending chains, it would be intuitively absurd to assign them a much greater \ncomplexity, because there is not much difference between finding or understanding \nhills and valleys and finding or understanding ascending chains, and this does not \ndepend on their size; fortunately, stability for confluence allows to combine any Bn \nor gBn theory with hills and valleys of unrestricted size without loosing confluence; \nthis means that hills and valleys can consistently be assigned any rating one wants in \nthe Bn or gBn hierarchy; said otherwise, one can refine the notion of simplicity in \nsuch a way that it becomes adapted to the specificities of the Futoshiki CSP, without \nloosing the benefits of the general theory; if needed, this illustrates again the \nimportance of the confluence property. \nThe above remarks can be transposed to Kakuro and to the coupling rules: any \nresolution theory should include them (and we have accordingly defined the + \nvariants of all the theories introduced in this book: BRT+, W1\n+, …). \n17.3.3. Similarity between Subset and whip/braid patterns of same size \nWe have noticed a remarkable formal similarity between the Subset and the \nwhip/braid patterns of same size (see Figure 11.3 and comments there). It has \nappeared in very explicit ways in the proofs of the confluence property and of the \ngeneralised “T&E(T) vs T-braids” theorems for the Sp-braids and Bp-braids. But the \ngeneral subsumption theorems in section 8.7 and the Sudoku-specific statistical \nresults in Table 8.1 suggest that whips/braids have a much greater resolution power \nthan Subsets of same size. As mentioned in section 8.7.3, these results indicate that \nthe definition of Subsets is much more restrictive than the definition of \nwhips/braids. And Table 11.1 shows that the same kind of very large difference in \nresolution power remains true for the generalised braids including these patterns as \nright-linking elements, at least for the Sudoku CSP. \nIn Subsets, transversal sets are defined by a single constraint. In whips, the fact \nof being linked to the target or to a given previous right-linking candidate plays a \nrole very similar to each of these transversal sets. But being linked to a candidate is \n\n472 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nmuch less restrictive than being linked to it via a pre-assigned constraint; in this \nrespect, the three elementary examples for whips of length 2 in sections 8.7.1.1 and \n8.8.1 are illuminating. As shown by the subsumption and almost-subsumption \nresults in section 8.7, the few cases of Subsets not covered by whips because of the \nrestrictions related to sequentiality are too rarely met in practice to be able to \ncompensate for this.  \nFor the above reasons, we conjecture that, in any CSP, whips/braids have a much \ngreater resolution potential than Subsets of same length p, at least for small values \nof p; and Bp-braids have a much greater resolution potential than Sp-braids. For large \nvalues of p, it is likely true also, but it is less clear because there may be an \nincreasing number of cases of non-subsumption but there may also be more ways of \nbeing linked to a candidate. Much depends on how many different constraints a \ngiven candidate can participate in. This is an area where more work is necessary. \n17.4. About CSP-Rules \nAs mentioned in the Foreword and as can be checked by a quick browsing of \nthis book, it is almost completely written at the logic level; it does not say much \nabout the algorithmic or the implementation levels – beyond the fact that our \ndetailed definitions provide unambiguous specifications for them, whichever \ncomputer language one finally chooses. However, a few general indications on CSP-\nRules may be welcome.  \nIn this section, it may be useful for the reader not yet familiar with the basic \nprinciples of expert systems and/or inference engines to read one of the quick \nintroductions that are widely available on the Web (in particular the notions of a rule \nbase and a fact base); the CLIPS documentation can be browsed, but this is not \nessential for reading what follows. \n17.4.1. CSP-Rules \nAlmost all23 the resolution paths appearing in this book were obtained with the \ncurrent last version of CSP-Rules (version 1.2), the generic finite CSP solver we \nwrote in the rule-based language of the CLIPS24 inference engine.  \n                               \n23 The only exceptions are the few N-Queens examples, for which we did not implement the \nnecessary interface (mainly because we could not find any generator of N-Queen instances \nand we did not want to spend time on writing one, so that we finally have only very easy \ninstances). Two other exceptions are mentioned explicitly in the text. \n24 CLIPS for Mac OSX, version 6.30. CLIPS is the acronym for “C Language Integrated \nProduction System”; it is a distant descendant of OPS (the Official Production System) but its \nsyntax (inherited from ART, a commercial expert system shell) is much better. CLIPS is free, \n\n17. Final remarks     \n473 \nIn principle, CSP-Rules can also be run on JESS25 (all the rules we have \nimplemented use only the part of the syntax ensuring compatibility). But JESS is \nslower and we have given up trying to fill up the compatibility issues when coding \nthe application-specific parts of the various CSPs or to deal with Java-specific \nmemory management problems. \nCSP-Rules was designed from the start as a research tool, with the main purpose \nof proving concretely that the general resolution rules and the simplest-first strategy \ndefined in this book can be implemented in a generic way and can lead in practice to \nreal solutions for different CSPs, even for their hard instances. Another purpose was \nto allow quick implementation of tentative rules and to test their resolution potential \nwith respect to those we had already defined. Finally, we also wanted to make it \neasy to add application-specific rules (such as sk-loops in Sudoku, hills and valleys \nin Futoshiki or coupling rules in Kakuro) or to code alternative strategies without \nhaving to deal with a programming language like C. \nSaying that we conceive CSP-Rules as a research tool means in particular that it \nwas not designed with high speed or low memory purposes in mind, although it \nincludes a few standard tricks to avoid too fast memory explosion and it has been \nused several times to solve millions of instances. It seems obvious to us that a direct \nimplementation in C or any other procedural language could lead to large \nimprovements in computation times and memory requirements, especially for hard \ninstances – although the exponential increase of the number of partial patterns (with \nrespect to their length) before a full one can be used to produce an elimination is \ninherent in some instances. The reference to g-labels and S-labels instead of g-\ncandidates and Subsets in g-whips and S-whips is a key for many optimisations of \nmemory. \nCSP-Rules is a descendant of SudoRules, the Sudoku solver we originally \ndeveloped in parallel with the writing of HLS. As the main parts of the later versions \nof SudoRules were already written in an almost application independent way, it was \neasy to maximally reduce and to isolate the unavoidably application-specific parts. \nThe version of SudoRules (16.2) based on CSP-Rules that was used in the Sudoku \nexamples presented in this book is 100% equivalent to (i.e. it produces exactly the \nsame resolution paths as) the last version before the split (namely 15b.1.12, which \nhas been our version of reference at the time of writing CRT), when the same rules \nare enabled. \n                                                                                                                                               \nwhich probably largely contributed to make it one of the most widely adopted shells. Another \nreason is that CLIPS implements the RETE algorithm that made OPS famous, with all the \nimprovements that appeared since that time, making it one of the most efficient shells. \n25 Current version as of this writing, i.e. 6.1p2. JESS is the acronym for “Java Expert System \nShell”; it was initially the Java version of CLIPS; but, due to the underlying language, it has \ngrown up differently and there are now compatibility issues. \n\n474 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nThe current version of CSP-Rules implements the following sets of rules (we \nhave also implemented other tentative rules but they are not mentioned in this book \nbecause they did not lead to interesting results):  \n– BRT (i.e. ECP + Single + Contradiction detection + Solution detection),  \n– bivalue-chains, whips, braids,  \n– g-bivalue-chains, g-whips, g-braids,  \n– forcing whips, forcing braids,  \n– bi-whips, bi-braids,  \n– forcing bi-whips, forcing bi-braids,  \n– W*-whips, B*-braids.  \nFor each of these patterns and for each possible length, CSP-Rules has two or \nthree rules (one or two for building the partial patterns, one for detecting the full \nones and doing the eliminations), plus an activation rule (used mainly for memory \noptimisation) and a tracking rule (as they are mainly used for tracking the numbers \nof partial patterns and for statistics, their output does not appear in the resolution \npaths given here). All these rules are written only in the generic terms of candidates, \ng-candidates, CSP-variables, links and g-links. Their effective output (what we want \nto appear in a resolution path) is controlled by a set of global variables. \nCSP-Rules also implements the generic parts of functions used in the left-hand \nside of rules (when it is both possible and more efficient to make a test [linked, \nglinked, …] than to write an additional explicit condition pattern) or for the \ninterfacing with specific applications (e.g. for printing the different steps of the \nresolution path – although it already implements the generic parts of the output \nfunctions). Any application must provide the specific parts of these functions. \nCSP-Rules also provides the possibility of computing T&E(T) and bi-T&E(T) \nfor any resolution theory T whose rules are programmed in CSP-Rules. \nBecause it was too hard to do this in sufficiently efficient ways, CSP-Rules does \nnot implement a generic version of Subsets (let alone of g-Subsets). Instead, it has a \nstandard version of Subsets (upto size four) valid for CSPs based on a square (or \nrectangular) grid (like most of the examples in this book), with a sub-version with \nblocks as in Sudoku. In the Kakuro CSP, its adaptation to the case of Subsets \nrestricted to sectors was straightforward. \nThe generation of instances is not part of CSP-Rules. \n17.4.2. Configuration of an application for solving an instance \nAny application (any particular CSP) has a configuration file allowing to choose \nthe resolution theory one wants to use, i.e. which patterns should be enabled and up \n\n17. Final remarks     \n475 \nto which size. Technically, “enabled” means loaded into the rule base; it does not \nmean “activated”. An enabled pattern gets activated only if necessary (i.e. if shorter \nones are not enough to solve the instance under consideration). \nConsistency of the chosen parameters is ensured automatically, e.g.  \n– for any pattern P[n] depending on a size or length parameter n, if P[n] is \nexplicitly enabled, then P[n-1], … P[1] are automatically enabled;  \n– if g-braids of length upto n are enabled, then braids and g-whips of length upto \nn are enabled if they have not been explicitly enabled with a larger length; \n– if g-whips of length upto n are enabled, then whips of length upto n are \nenabled if they have not been explicitly enabled with a larger length;  \n– if braids of length upto n are enabled, then whips of length upto n are enabled \nif they have not been explicitly enabled with a larger length… \nHowever, bivalue-chains are not automatically enabled when whips are enabled. \nThis may be changed in the future. But we have found it useful to keep this degree \nof freedom, as enabling special types of whips sometimes allows to find different \nwhip resolution paths (see an example in section 5.10.3). \n17.4.3. Resolution strategies predefined in CSP-Rules \nThe current version of CSP-Rules has only one resolution strategy, the \n“simplest-first”, with the priorities as described in section 7.5.2: \nECP > S > \nbiv-chain[1] > whip[1] > g-whip[1] > braid[1] > g-braid[1] >  \n… > … \nbiv-chain[k] > whip[k] > g-whip[k] > braid[k] > g-braid[k] > \nbiv-chain[k+1] > whip[k+1] > g-whip[k+1] > braid[k+1] > g-braid[k+1] > … \nA few things are easy to change, such as assigning braids[k] a higher priority \nthan g-whips[k]  or introducing more special cases of whips. For radically different \nstrategies, the main problem would not be to code them in CSP-Rules, but to first \ndefine them (see the remarks in section 17.1.4). \n17.4.4. Applications already interfaced to CSP-Rules \nAs of this writing, the current version of CSP-Rules has application-specific \ninterfaces (and in some cases a few application-specific resolution rules, possibly \nincluding alternative versions of the rules in BRT, e.g. different rules for Naked and \nHidden Singles) for the following CSPs: LatinSquare, Sudoku, Futoshiki, Kakuro, \nMap-colouring, Numbrix® and Hidato®. For each of them, the volume of the source \ncode of the application-specific part (including mainly input-output functions) is \nbetween 3% and 5% of the total generic CSP-Rules part. For Sudoku, more \n\n476 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \nfunctions had been written in the previous versions of SudoRules, but they were \nmainly intended for statistical analyses and cannot be considered as necessary for \nthe normal resolution of instances; moreover, with a little more adaptation work, \nthey could also be made generic, if needed. \n\n \n18. References \nBooks and articles \n[Apt 2003]: APT K., Principles of Constraint Programming, Cambridge University Press, \n2003. \n[Barcan 1946a]: BARCAN M., A Functional Calculus of First Order Based on Strict \nImplication, Journal of Symbolic Logic, Vol. 11 n°1, pp. 1-16, 1946. \n[Barcan 1946b]: BARCAN M., The Deduction Theorem in a Functional Calculus of First \nOrder Based on Strict Implication, Journal of Symbolic Logic, Vol. 12 n°4, pp. 115-118, \n1946. \n[Berthier 2007a]: BERTHIER D., The Hidden Logic of Sudoku, First Edition, Lulu.com \nPublishers, May 2007. \n[Berthier 2007b]: BERTHIER D., The Hidden Logic of Sudoku, Second Edition, Lulu.com \nPublishers, November 2007. \n[Berthier 2008a]: BERTHIER D., From Constraints to Resolution Rules, Part I: Conceptual \nFramework, International Joint Conferences on Computer, Information, Systems Sciences \nand Engineering (CISSE 08), December 5-13, 2008, Springer. Published as a chapter of \nAdvanced Techniques in Computing Sciences and Software Engineering, Khaled Elleithy \nEditor, pp. 165-170, Springer, 2010. \n[Berthier 2008b]: BERTHIER D., From Constraints to Resolution Rules, Part II: chains, \nbraids, confluence and T&E, International Joint Conferences on Computer, Information, \nSystems Sciences and Engineering (CISSE 08), December 5-13, 2008, Springer. Published as \na chapter of Advanced Techniques in Computing Sciences and Software Engineering, Khaled \nElleithy Editor, pp. 171-176, Springer, 2010. \n[Berthier 2009]: BERTHIER D., Unbiased Statistics of a CSP - A Controlled-Bias Generator, \nInternational Joint Conferences on Computer, Information, Systems Sciences and \nEngineering (CISSE 09), December 4-12, 2009, Springer. Published as a chapter of \nInnovations in Computing Sciences and Software Engineering, Khaled Elleithy Editor, pp. \n11-17, Springer, 2010. \n[Berthier 2011]: BERTHIER D., Constraint Resolution Theories, Lulu.com Publishers, \nNovember 2011. \n[Bridges et al. 2006]: BRIDGES D. & VITA L., Techniques of Constructive Analysis, \nSpringer, 2006. \n[Dechter 2003]: DECHTER R., Constraint Processing, Morgan Kaufmann, 2003. \n\n478 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n[Feys 1965]: FEYS R., Modal Logics, Fondation Universitaire de Belgique, 1965. \n[Fitting 1969]: FITTING M., Intuitionistic Logic, Model Theory and Forcing, North Holland, \n1969. \n[Fitting et al. 1999]: FITTING M. & MENDELSOHN R., First-Order Modal Logic, Kluwer \nAcademic Press, 1999. \n[Freuder et al. 1994]: FREUDER E. & MACKWORTH A., Constraint-Based Reasoning, \nMIT Press, 1994. \n[Früwirth et al. 2003]: FRÜWIRTH T. & SLIM A., Essentials of Constraint Programming, \nSpringer, 2003. \n[Garson 2003]: GARSON J., Modal Logic, Stanford Encyclopedia of Philosophy, 2003, \navailable at http://plato.stan ford. edu/entries/logic-modal. \n[Gary et al. 1979]: GARY M. & JOHNSON D., Computers and Intractability: A Guide to the \nTheory of NP-Completeness, Freeman, 1979. \n[Gentzen 1934], GENTZEN G., Untersuchungen über das logische Schlieβen I, \nMathematische Zeitschrift, vol. 39, pp. 176-210, 1935. \n[Hendricks et al. 2006]: HENDRICKS V. & SYMONS J., Modal Logic, Stanford \nEncyclopedia of Philosophy, 2006, available at http://plato.stan ford. edu/entries/logic-modal. \n[Hintikka 1962]: HINTIKKA J., Knowledge and Belief: An Introduction to the Logic of the \nTwo Notions, Cornell University Press, 1962. \n[HLS1, HLS2, HLS]: respectively, abbreviations for [Berthier 2007a], [Berthier 2007b] or for \nany of the two. \n[Guesguen et al. 1992]: GUESGUEN H.W. & HETZBERG J., A Perspective of Constraint-\nBased Reasoning, Lecture Notes in Artificial Intelligence, Springer, 1992. \n[Kripke 1963]: KRIPKE S., Semantical Analysis of Modal Logic, Zeitchrift für Matematische \nLogik und Grundlagen der Matematik, Vol. 9, pp. 67-96, 1963. \n[Kumar 1992]: KUMAR V., Algorithms for Constraint Satisfaction Problems: a Survey, AI \nMagazine, Vol. 13 n° 1, pp. 32-44, 1992. \n[Laurière 1978]: LAURIERE J.L., A language and a program for stating and solving \ncombinatorial problems, Artificial Intelligence, Vol. 10, pp. 29-117, 1978. \n[Lecoutre 2009]: LECOUTRE C., Constraint Networks: Techniques and Algorithms, \nISTE/Wiley, 2009. \n[Lemmon et al. 1977]: LEMMON E. & SCOTT D., An introduction to Modal Logic, \nBlackwell, 1977. \n[Marriot et al. 1998]: MARRIOT K. & STUCKEY P., Programming with Constraints: an \nIntroduction,  MIT Press, 1998. \n[Meinke et al. 1993]: MEINKE K. & TUCKER J., eds., Many-Sorted Logic and its \nApplications, Wiley, 1993. \n\nReferences     \n479 \n[Moschovakis 2006]: MOSCHOVAKIS J., Intuitionistic Logic, Stanford Encyclopedia of \nPhilosophy, 2006, available at http://plato.stan ford.edu/entries/logic-intuitionistic. \n[Newell 1982]: NEWELL A., The Knowledge Level, Artificial Intelligence, Vol. 59, pp 87-\n127, 1982. \n[Riley 2008]: RILEY G., CLIPS documentation, 2008, available at http://clipsrules. \nsourceforge.net/OnlineDocs.html. \n[Rossi et al. 2006]: ROSSI F., VAN BEEK P. & WALSH T., Handbook of Constraint \nProgramming, Foundations of Artificial Intelligence, Elsevier, 2006. \n[Schank 1986]: SCHANCK R., Explanation Patterns, Understanding Mechanically and \nCreatively, Lawrence Erlbaum Associates Publishers, 1986. \n[Stuart 2007]: STUART A., The Logic of Sudoku, Michael Mepham Publishing, 2007. \n[Van Hentenryck 1989]: VAN HENTENRYCK P., Constraint Satisfaction in Logic \nProgramming, MIT Press, 1989. \nWebsites \n[Angus www]: ANGUS J. (Simple Sudoku), http://www.angusj.com/sudoku/, 2005-2007 [the \nmain reference for the basic Sudoku techniques]. \n[Armstrong www]: ARMSTRONG S. (Sadman Software Sudoku, Solving Techniques), \nhttp://www. sadmansoftware.com/sudoku/techniques.htm, 2000-2007. \n[askmarilyn www]: http://www.parade.com/askmarilyn/index.html [the “official” place for \nNumbrix® puzzles]. \n[atksolutions www]: http://www.atksolutions.com [the most interesting source we have found \nfor Futoshiki and Kakuro puzzles]. \n[Barker 2006]: BARKER M., Sudoku Players Forum, Advanced solving techniques, post \n362, in http://www.sudoku.com/forums/viewtopic.php?t=3315 \n[Berthier www]: BERTHIER D., http://www.carva.org/denis.berthier (permanent URL). This \nis where supplements to this book and to HLS can be found.  \n[Brouwer 2006]: BROUWER A., Solving Sudokus, http://homepages.cwi.nl/~aeb/games/ \nsudoku/, 2006. \n[CLIPS www]: http://clipsrules.sourceforge.net \n[Davis 2006]: DAVIS T., The Mathematics of Sudoku, www.geometer.org/mathcircles/ \nsudoku.pdf, 2006. \n[edhelper www]: http://www.edhelper.com/puzzles.htm [a website with instances of various \ndifficulty levels for many different logic puzzles]. \n[Eleven www]: https://sites.google.com/site/sudoeleven/, 08/07/2011. \n[Eleven 2011]: https://sites.google.com/site/sudoeleven/elevens_hardest_V2.zip?attredirects= \n0, 08/07/2011. \n\n480 \nPattern-Based Constraint Satisfaction and Logic Puzzles \n \n \n[Felgenhauer et al. 2005]: FELGENHAUER B. & JARVIS F., Enumerating possible Sudoku \ngrids, http://www.afjarvis.staff.shef.ac.uk/sudoku/sudgroup.html, 2005. \n[gsf www]: FOWLER G. (alias gsf), http://www2.research.att.com/~gsf/sudoku \n[Hodoku www]: http://hodoku.sourceforge.net \n[Jarvis 2006]: JARVIS F., Sudoku enumeration problems, http://www.afjarvis.staff.shef.ac. \nuk/ sudoku/, 2006. \n[JESS www]: http://herzberg.ca.sandia.gov/jess \n[Juillerat www]: JUILLERAT N., http://diuf.unifr.ch/people/juillera/Sudoku/Sudoku.html \n[Mebane 2012]: MEBANE P., http://mellowmelon.files.wordpress.com/2012/05/pack03 \nhidato_v3.pdf [the hardest and most interesting Hidato® puzzles we have found]. \n[Nikoli www]: http://www.nikoli.com/ [Probably the most famous reference in logic puzzles]. \n[Penet 2012]: PENET G. (alias champagne), http://gpenet.pagesperso-orange.fr/downloads/ \nhard11.zip, 2012. \n[Russell et al. 2005]: RUSSELL E. & JARVIS F., There are 5,472,730,538 essentially \ndifferent Sudoku grids … and the Sudoku symmetry group, http://www.afjarvis.staff. \nshef.ac.uk/ sudoku/sudgroup.html, 2005. \n[Smithsonian www]: http://www.smithsonianmag.com/games/hidato.html [the “official” \nplace for Hidato® puzzles]. \n[SPlF]: the late Sudoku Player’s Forums, http://www.sudoku.com/forums/index.php \n[SPrF]: Sudoku Programmers Forums, http://www.setbb.com/sudoku/index.php?mforum= \nsudoku \n[Sterten www]: STERTEN (alias dukuso), http://magictour.free.fr/sudoku.htm \n[Sterten 2005]: STERTEN (alias dukuso), suexg, http://www.setbb.com/phpbb/viewtopic. \nphp?t=206&mforum= sudoku, 2005. \n[Sudopedia]: Sudopedia, http://www.sudopedia.org/wiki/Main_Page \n[Tatham www]: http://www.chiark.greenend.org.uk/~sgtatham/puzzles/ [One of the classical \nreferences in logic puzzles, with easy instances]. \n[Werf www]: van der WERF R., Sudocue, Sudoku Solving Guide, http://www.sudocue. \nnet/guide.php, 2005-2007. \n[Yato et al. 2002]: YATO T. & SETA T., Complexity and completeness of finding another \nsolution and its application to puzzles, IPSG SIG Notes 2002-AL-87-2, http://www-\nimai.is.s.u-tokyo.ac.jp/~yato/data2/SIGAL87-2.pdf, 2002.",
    "pdf_filename": "Pattern-Based Constraint Satisfaction and Logic Puzzles.pdf"
}