{
    "title": "Solving Generalized Grouping Problems in Cellular Manufacturing Systems Using a",
    "abstract": "",
    "body": "Solving Generalized Grouping Problems in Cellular Manufacturing Systems Using a\nNetwork Flow Model\nMd. Kutub Uddina, Md. Saiful Islamb, Md Abrar Jahinc, Md. Saiful Islam Seamb, and M. F. Mridhad,*\naDepartment of Mechanical Engineering, Khulna University of Engineering & Technology, Khulna 9203, Bangladesh\nbDepartment of Industrial Engineering and Management, Khulna University of Engineering & Technology, Khulna 9203,\nBangladesh\ncPhysics and Biology Unit, Okinawa Institute of Science and Technology Graduate University, Okinawa 904-0412, Japan\ndDepartment of Computer Science, American International UniversityBangladesh, Dhaka 1229, Bangladesh\n*Corresponding Author\nEmail addresses: kutubuddin@me.kuet.ac.bd (Md. Kutub Uddin), saifuliem@iem.kuet.ac.bd (Md. Saiful Islam),\nabrar.jahin.2652@gmail.com (Md Abrar Jahin), seam1911017@stud.kuet.ac.bd (Md. Saiful Islam Siam),\nfiroz.mridha@aiub.edu (M. F. Mridha)\nSolving Generalized Grouping Problems in Cellular Manufacturing Systems Using a\nNetwork Flow Model\nMd. Kutub Uddina, Md. Saiful Islamb, Md Abrar Jahinc, Md. Saiful Islam Seamb, and M. F. Mridhad,†\naDepartment of Mechanical Engineering, Khulna University of Engineering & Technology, Khulna 9203, Bangladesh\nbDepartment of Industrial Engineering and Management, Khulna University of Engineering & Technology, Khulna 9203,\nBangladesh\ncPhysics and Biology Unit, Okinawa Institute of Science and Technology Graduate University, Okinawa 904-0412, Japan\ndDepartment of Computer Science, American International UniversityBangladesh, Dhaka 1229, Bangladesh\nAbstract\nThis paper focuses on the generalized grouping problem in the context of cellular manufacturing systems (CMS),\nwhere parts may have more than one process route. A process route lists the machines corresponding to each operation\nof the part. Inspired by the extensive and widespread use of network flow algorithms, this research formulates the\nprocess route family formation for generalized grouping as a unit capacity minimum cost network flow model. The\nobjective is to minimize dissimilarity (based on the machines required) among the process routes within a family. The\nproposed model optimally solves the process route family formation problem without pre-specifying the number of\npart families to be formed. The process route of family formation is the first stage in a hierarchical procedure. For the\nsecond stage (machine cell formation), two procedures, a quadratic assignment programming (QAP) formulation, and\na heuristic procedure, are proposed. The QAP simultaneously assigns process route families and machines to a pre-\nspecified number of cells in such a way that total machine utilization is maximized. The heuristic procedure for\nmachine cell formation is hierarchical in nature. Computational results for some test problems show that the QAP and\nthe heuristic procedure yield the same results.\nKeywords: cellular manufacturing systems; group technology; generalized grouping problems; process route;\nnetwork flow model\n1. Introduction\nThe world of manufacturing is undergoing rapid growth due to increasing demand for all kinds of products. This\ngrowth is accompanied by radical changes, transforming the face of manufacturing altogether. Cellular manufacturing\nsystems (CMS), based on the philosophy of group technology (GT), have been recognized as a technological\ninnovation in job shop or batch-type production systems to gain economic advantages similar to those of mass\nproduction systems. CMS is capable of producing small to medium-sized batches of a large variety of parts in a flow-\nline manner. The concept of CMS involves dividing the entire production system into smaller autonomous subsystems\n†Corresponding Author\nEmail addresses: kutubuddin@me.kuet.ac.bd (Md. Kutub Uddin), saifuliem@iem.kuet.ac.bd (Md. Saiful Islam),\nabrar.jahin.2652@gmail.com (Md Abrar Jahin), seam1911017@stud.kuet.ac.bd (Md. Saiful Islam Siam),\nfiroz.mridha@aiub.edu (M. F. Mridha)\nto improve shop floor control, material handling, tooling, and scheduling. This approach leads to decreased setup\ntimes, in-process inventories, and throughput times. To achieve this decomposition, it is necessary to identify subsets\nof parts with similar processing or design requirements so that each subset of parts can be processed by a single\nsubsystem. In the context of GT, each such subsystem is termed a machine cell, and each subset of parts is referred to\nas a part family. The identification of machine cells and part families is known as machine-component grouping and\nis the first step in the design of a CMS. This partitioning of machines and parts in a factory is achieved through the\napplication of GT. The application of GT does not depend on the degree of automation in a factory, and hence, GT\ncan be applied at any level of automation, from manual production to fully automated systems.\nThe grouping problem varies depending on factors like the availability of information and the level of decision-making.\nIn a simple grouping problem, each part has only one process plan, and each operation of the process plan can be\nperformed on only one machine. As a result, each part has only one process route. Here, the terms ‘process plan’ and\n‘process route’ have different meanings. A process plan lists the operations required to complete a part, while a process\nroute lists the machines to which the various operations are assigned. On the other hand, in a generalized grouping\nproblem, each part has more than one process route. The objective of the grouping problem, in this case, is to identify\na single process route for each part and determine the process route families and machine cells. The goal is to ensure\nthat each machine cell is capable of handling at least one process route family.\nThe generalized grouping problem is a significant area of research within the field of network flow models, where the\nprimary objective is to optimally assign groups under certain constraints. Starting from the initial work on grouping\nbased on graph theory by Rajagopalan and Batra (1975), numerous graph-theoretic methodologies have been\ndeveloped by researchers over the past few decades. These approaches have been thoroughly studied in the most recent\nliterature, including applications in social networks and computer science (Majeed and Rauf, 2020). This problem is\nparticularly important in contexts such as telecommunications, transportation, and logistics, where efficient resource\nallocation is critical. The graph-theory-based methodologies can be classified into two main categories: graph\ndecomposition (or partition) and network flow.\nThe graph decomposition method constructs a graph from the given parts' process routes. The nodes in these graphs\ncorrespond to either machines, parts, or both. The arcs represent the associations between nodes and carry a weight\nrepresenting some kind of dissimilarity or interaction between the nodes. Depending on the node type, three types of\ngraphs can be constructed: machine graph, part graph, and machine-and-part graph (Werner, 2020). These are\ndescribed in Table 1.\nTable 1: Types of graphs for grouping.\nType of graph Nodes Arcs and weightage on arcs\nMachine graph Machines Arcs represent the relationships between machines, indicating that\nthere is movement of one or more parts between the machines,\nconstituting the pair of nodes. The weight on the arcs represents one of\nthe following: dissimilarity between the two machines, the total\nnumber of part movements between the two machines, or similar\nmetrics.\nPart graph Parts Arcs representing the relationship between parts indicate that one or\nmore machines are common to the pair of parts constituting the nodes.\nThe weight on the arcs represents some kind of dissimilarity or\nsimilarity between the two parts.\nMachine-part Machines and Arcs indicate the relationship between a machine and a part, showing\ngraph parts that a certain part utilizes a specific machine. The weight on an arc may\nindicate how long the part takes to process on the machine, or it could\nsimply be assigned a value of 1 to show that the part uses the machine.\nNo arcs exist between two parts or between two machines.\nTo obtain machine cells and part families, graphs are successively decomposed into sub-graphs, ensuring minimal\ninteraction among them, or resulting in disconnected sub-graphs. Numerous studies have shown that there is no single\nstrategy that works most effectively for obtaining part families and machine cells. For example, some research (Uddin\nand Shanker, 2002; Kulkarni, 2021) discussed the use of genetic algorithm (GA) to solve generalized grouping\nproblems in CMS, demonstrating improvements in optimizing these groupings without pre-specifying the number of\ngroups. In the network flow method, a network is constructed by creating two nodes for each machine or part. The\nnodes are connected by directed arcs, and the weight on the arcs represents some kind of cost, indicating dissimilarity\nbetween the parts or machines. These formulations solve the grouping problem optimally without pre-specifying the\nnumber of groups. A pioneering work by Lee and Garcia-Diaz (1993) formulated the machine grouping problem as a\ncapacitated circulation network for a simple grouping case.\nNetwork flow algorithms have been successfully applied to various production planning problems, including the\nsimple grouping problem. However, no work has been reported on solving the generalized grouping problem using\nnetwork flow algorithms. In this paper, a methodology is presented that employs a hierarchical approach to solve the\ngeneralized grouping problem when process routes are given for each part. In the first stage, process route families\nare formed using a unit capacity minimum cost network flow model. In the second stage, a heuristic procedure and a\nquadratic assignment model are presented for machine cell formation and the assignment of process route families to\nthese cells.\nThe remainder of the paper is structured as follows. Section 2 reviews the relevant research on grouping problems and\nnetwork flow models. The problem environment considered for the model creation is explained in Section 3. The\nsolution strategy is described in Section 4. The proposed network model for the development of process route (or part)\nfamilies is presented in Section 5. Section 6 describes the development of machine cells and the assignment of part\nfamilies to these cells. The application of the proposed model to a few numerical issues is demonstrated in Section 7.\nFinally, Section 8 presents the conclusions and recommendations for future research.\n2. Literature review\nExtensive studies have been conducted based on the framework of network flow models, particularly in routing (Yan\nand Wong, 2009; Cova and Johnson, 2003), planning and scheduling (Rietz et al., 2016), production optimization\n(Lerlertpakdee et al., 2014), supply chain management and intelligent transportation (Hsu and Wallace, 2007; Rudi et\nal., 2016), inventory management and distribution (Hovav and Tsadikovich, 2015), social network analysis (Gomez\net al., 2013), resilience assessment (Goldbeck et al., 2019; Yin et al., 2022), infrastructural interdependencies (Holden\net al., 2013), water supply planning (Hsu and Cheng, 2002), strategic mine planning (Topal and Ramazan, 2012), and\nenergy systems (Quelhas et al., 2007; Quelhas and McCalley, 2007). A number of graph theory-based studies on\ngrouping problems have been published in the literature, where machines or parts are represented by the vertices of\ngraphs, and appropriately determined similarity coefficients are defined by the weights of the arcs. The grouping\nproblem was first solved using graph theory by Rajagopalan and Batra (1975). Using the route cards of the parts, they\ndeveloped a machine graph in which the vertices represented the machines and the edges represented Jaccard's\nsimilarity coefficients. Cells were identified as groups of vertices that were highly connected to one another.\nFor studying the optimization of cell formation, various algorithmic techniques have been used. A hybrid GA is one\nexample used in CMS for machine-part grouping. The formation of machine groups and part families is a complex\noperation in cellular manufacturing, combining the fast production rate of flow lines with the flexibility of job shops.\nThe integration of local search heuristics with GA, as proposed by Tariq et al. (2009), has demonstrated encouraging\nresults in quickly obtaining optimal solutions, indicating the effectiveness of hybrid techniques in addressing real-\nworld manufacturing challenges. Mak et al. (2000) proposed a GA to optimize cell development in manufacturing\nsystems. Their approach provided practical insights into algorithmic techniques and strategies for optimization by\ndynamically adjusting parameters to maximize efficiency and reduce handling costs. Similarly, Salehi et al. (2010)\noffered complex techniques and frameworks for performance evaluation, analyzing the implementation of GA to\naddress cell formation problems. These methods have been further developed by hybrid GA proposed by James et al.\n(2007), demonstrating efficient optimization in practical situations.\nThe grouping problem was first solved by Lee and Garcia-Diaz (1993) as a circulation network flow problem. The\nidea is to group machines into cells so that each family of parts can be processed in a single machine cell. To achieve\nthis, a directed graph for the machines is created, and its network flow problem is solved. The solution to the network\nflow problem consists of one complete loop and several sub-loops, each loop corresponding to a machine cell.\nCompared to the p-median model, this approach is reported to have excellent potential for providing computationally\nefficient and optimal solutions for simple grouping problems. Cheng et al. (2019) developed generalized grouping\nstrategies in coded caching, and Garg and Arora (2018) developed fuzzy soft-set decision-making frameworks,\ndemonstrating the flexibility of grouping techniques. These methods integrate expert preferences and efficiently\nmanage uncertainty, offering powerful tools for decision-making. The use of grouping concepts in decision theory\nand computational problems is further illustrated by the grouping functions proposed by Bustince et al. (2011) and\nthe generalized group testing procedures proposed by Malinovsky (2019). These approaches enhance efficiency and\nscalability across various fields. This thorough analysis highlights the usefulness and potential of network flow models\nin addressing a range of grouping problems.\nIt is evident that network flow models have been successfully applied across various domains, including social\nnetworks, decision-making, industry, and infrastructure, to ensure computational efficiency and practical application.\nThese models provide robust frameworks for enhancing resilience, improving decision-making, and optimizing\ncomplex systems. Consequently, they offer valuable insights for the development of a network flow model for the\ngeneralized grouping problem.\n3. Problem environment\nFor the proposed network flow model, a generalized grouping problem is considered where each part has more than\none process route. The input to the problem is a two-dimensional (0-1) matrix showing the requirement of machines\nfor various operations of each process route. The entry value in the matrix is 1 if an operation of a process route\nrequires a particular machine and 0 otherwise. The grouping problem involves selecting one process route for each\npart from the given alternatives and grouping them into process route families, each of which can be processed by a\nsingle machine cell. Several process route families can be processed by a machine cell. The objective is to minimize\nthe distance (dissimilarity) among the process routes within a family. The proposed model is expected to result in\nmachine cells with the minimum possible inter-cell movements.\nWe consider a problem situation where there are K parts, and each part has a set of distinct process routes. Different\nprocess routes for a part generally require different sets of machines to complete the operations. In total, combining\nall the parts, there are N process routes. There are M machines of different types, and a maximum of C cells are to be\ncreated. The objective is to minimize the inter-cell movements of parts and to maximize machine utilization.\n4. The solution approach\nThe proposed model solves the problem in a hierarchical manner. First, process route families are formed based on\nminimum dissimilarity among the members of each family using a network flow model. In the second stage, machine\ncells are formed, and process route families are assigned to these cells simultaneously, with the objective of\nmaximizing machine utilization. For machine cell formation and process route family assignment, a heuristic and a\nQAP formulation are proposed.\nThe mechanism of process route family formation is as follows. First of all, for each part, there is a source or supply\nnode (k) and a sink or demand node (k ). For each process route, there are two nodes, a and b, and a directed arc (a,\ns d\nb). From each part source node, arcs go to the corresponding process route node a. All arcs coming to a part sink node\ncome from the corresponding process route node b. It is obvious that only one process route must be selected for each\npart. Let part k have TPR(k) process routes. So, TPR(k)-1 routes are eliminated from consideration by including the\ncorresponding arcs in directed paths from source to sink (k  i  i k ). The flow value on all process route arcs\ns a b d\nis constrained to 1. The supply at the source and demand at the sink are fixed at TPR(k)-1 for all parts. This results in\nexactly one process route, with no supply from the source for each part. However, since all process routes are\nconstrained to have flow value 1, even the process route arcs getting no supply from the source node have to have the\nflow conditions satisfied. This is possible only if such unsatisfied arcs form cycles within themselves, which are\nnothing but process route families. Further, to encourage better formation of process route cycles, the arc costs from\none process route to another are taken as the corresponding dissimilarity values between them, the total of which is to\nbe minimized over the whole network. In this way, the network flow model tries to group similar process routes\ntogether. The calculations of dissimilarity values are described in Sub-section 5.1.\nAt the stage of machine cell formation and route family assignment, the machine requirements for the various process\nroute families are evaluated. Machine cells are created based on these requirements. Some process route families may\nbe assigned to a cell if their machine requirements are fully met by that cell. If the requirements do not match\ncompletely, the family will be assigned to a cell where most of its requirements are satisfied, which may result in\ninter-cell movements.\nThe following notations are used for the development of the network flow model for process route family formation\nand machine cell formation model.\nIndices\ni, j = process route\nk = part\nm = machine\nc = machine cell\nr = process route family\nParameters\nK = total number of parts\nPR(k) = set of process routes for part k\nTPR(k) = total number of process routes for part k\n= |PR(k)|\nA = set of process routes over all parts\nN = total number of process routes over all parts\n= |A|\n= ∑(cid:3012) 𝛵𝛲𝑅(𝑘)\n(cid:3038)(cid:2880)(cid:2869)\nM = total number of machines\nC = maximum number of machine cells that can be formed\nR = total number of process route families\nmax = maximum number of machines that can be assigned to a cell c\nc\n𝜔(𝑖,𝑗) = cost of unit flow on arc (i, j)\n1 if process route i requires machine m for\n⎧\n⎪ processing (irrespective of the number of\na im = times it is required\n⎨\n⎪\n⎩0 otherwise\nu = usage factor for machine m in process route family r indicating the number of processes\nmr\nroutes in a process route family r using machine m\n= ∑ 𝑎\n(cid:3036)∈(cid:3045) (cid:3036)(cid:3040)\nDecision variables\n1 if machine m is assigned to cell c\nZ = (cid:3421)\nmc\n0 otherwise\n1 if process route family r is assigned to machine cell c\nY = (cid:3421)\nrc\n0 otherwise\n𝑓(x, y) = flow from node x to node y\n5. Proposed network flow model for route family formation\nThe proposed network flow model consists of three steps. The first step involves computing the pairwise dissimilarity\nbetween process routes, as described in subsection 5.1. The second step constructs the unit capacity minimum cost\nflow network, detailed in subsection 5.2. The third step identifies the process route families by solving the unit capacity\nminimum cost network flow problem, as described in subsection 5.3.\n5.1 Computation of dissimilarities (or distances)\nThe pairwise dissimilarities between process routes are computed as follows:\nThe dissimilarity value between a pair of process routes is measured as the number of machines that are not common\nto them. Let d be the dissimilarity between process routes i and j. The value of d (dissimilarity) is an indicator\nij ij\nshowing the degree of dissimilarity between process routes i and j. The value gets smaller as the two process routes\nrequire more and more common machines for processing. The process route-machine matrix A = [a ] (i = 1, ..., N;\nim\nm = 1, ..., M) is used to calculate the elements d ; of the dissimilarity matrix D = [d ]. The Hamming metric, to\nij ij\ncalculate the distance between a pair of binary row vectors, is used to calculate the dissimilarity between two process\nroutes of different parts as shown below:\n(cid:3014)\n𝑑 = (cid:3533) 𝛿(cid:3435)𝑎 ,𝑎 (cid:3439) ∀𝑖 ∈𝑃𝑅(𝑘 ), 𝑗∈𝑃𝑅(𝑘 ), 𝑘 ,𝑘 =1,…,𝐾, 𝑘 ≠𝑘\n(cid:3036)(cid:3037) (cid:3036)(cid:3040) (cid:3037)(cid:3040) (cid:2869) (cid:2870) (cid:2869) (cid:2870) (cid:2869) (cid:2870)\n(cid:3040)(cid:2880)(cid:2869)\n1 if a ≠ a\nim jm\nwhere 𝛿 (a ,a ) = (cid:3421) (1)\nim jm\n0 otherwise\nFor example, consider process routes 1 and 3, where the number of machines in route 1 is 7 and the number of\nmachines for route 3 is 5, out of which 3 machines are common. Then the dissimilarity between the pair (1, 3) is taken\nas (total number of machines − total number of common machines) = (5+7) − (2×3) = 6. To illustrate the calculation\nof the total dissimilarity value for a process route family, let us consider a process route family having process routes\n1, 2, 3, and 4. Now, one cyclic order for this family could be (1, 2), (2, 3), (3, 4), and (4, 1). The dissimilarity value\nfor this cyclic order will be d + d + d + d , where d is the dissimilarity value between processes routes i and j.\n12 23 34 41 ij\nThere will be 4! such cyclic orders (n! cyclic orders for n process routes), and some of them will have the same\ndissimilarity value because of the symmetric nature of the dissimilarity coefficients, d = d . The dissimilarity value\nij ji\nfor a process route family is taken as the minimum of total dissimilarity values amongst all cyclic orders.\n5.2 Construction of the network\nThe construction of the unit capacity minimum cost flow network is based on the work of Lee and Garcia-Diaz (1993),\nwho proposed the network flow formulation for a simple grouping problem. The network is constructed using the N\n× N dissimilarity matrix D obtained in subsection 5.1. The creation of nodes and arcs connecting the nodes and the\nassignment of weightage on arcs are carried out as follows:\n5.2.1 Creation of nodes\nCreation of supply nodes\nCreate K supply nodes designated as 1, 2, ..., K, and one node corresponding to each part (the subscript s denotes\ns s s\nthat it is a supply node). The supply capacity of the node k is taken as TPR(k)-1 units, i.e., one less than the total\ns\nnumber of process routes of part k; k = 1, ...,Κ.\nCreation of demand nodes\nCreate K demand nodes designated as l , 2 , ...,K , again one node corresponding to each part (the subscript d denotes\nd d d\nthat it is a demand node). The demand requirement of node k is again taken as TPR(k)-1 units; k = 1,,..,K.\nd\nCreation of intermediate nodes\nCorresponding to each process route i, create a pair of nodes i and i . The two sets of nodes are designated as 1 , 2 , ...,\na b a a\nN and 1 , 2 , ..., N ; i = 1, ..., N. These 2N nodes are used as transshipment nodes, i.e., these nodes do not possess any\na b b b\nsupply capacity, nor do they have any demand.\n5.2.2 Creation of arcs\nCreate arcs and assign a capacity-cost triplet [U, L, C] to each arc to indicate an upper bound on its flow (U), a lower\nbound on its flow (L), and the per unit cost of flow (C) respectively, according to the following rules:\nRule I:\nFor each supply node k, k = 1, ..., K and the corresponding transshipment node i , i ∈ PR(k); create supply arcs\ns a\ndirected from k to i , signifying that part k uses process route i. For example, arc (1, 1 ) indicates that part 1 uses\ns a s a\nprocess route 1 for its processing. Assign capacity-cost triplet [U, L, C] = [1, 0, 0] to all arcs (k, i ).\ns a\nRule II:\nFor each node pair i and i , i = 1, ..., N; create transshipment arcs directed from i to i . The two nodes i and i ,\na b a b a b\nconnected by a directed arc, represent a process route. For example, arc (1 , 1 ) represents process route 1, arc (2 , 2 )\na b a b\nrepresents process route 2, and so on. Assign capacity-cost triplet [U, L, C] = [1, 1, 0] to all arcs (i , i ).\na b\nRule III:\nFor each node i , i ∈ PR(k), k = 1, ..., K and the corresponding node k , create demand arcs directed from i to k . The\nb d b d\ndirected arc (i , k ) signifies that part k uses process route i; for example, the directed arc (1 , 1 ) indicates that part 1\nb d b d\nuses process route 1 for its processing. Assign capacity-cost triplet [U, L, C] = [1, 0, 0] to all arcs (i , k ).\nb d\nRule IV:\nFor each node i and j , i ∈ PR(k), j ∉ PR(k), k = 1, ..., K; create relational arcs directed from i to j and assign\nb a b a\ncapacity-cost triplet [U, L, C] = [1, 0, d ). The cost of shipping one unit of flow from node i to node j is taken as the\nij b a\ndissimilarity value between process routes i and j.\nThe network constructed for the problem environment described in section 4, according to the steps described above,\nis shown in Figure 1.\nObservations\n1. The upper and the lower bound on flow on transshipment arcs (i , i ), i = 1, ..., N is 1 unit. Thus, in accordance\na b\nwith the flow conservation, a node i can supply 1 unit of flow to either destination node j or to demand node\nb a\nk , i ∈ PR(k), j ∉ PR(k), k = 1, ..., Κ.\nd\n2. If a part k has TPR(k) = n process routes, n units of flow are needed to satisfy the flow condition on the n\ntransshipment arcs, say, (i , i ), ((i+1) , (i+1) ), ... ((i+n−1) , (i+n−1) ). However, according to the network\na b a b a b\nconstruction, the supply node k can supply only TPR(k) −1= n−1 units of flow, that is, to only n−1 of the\ns\ntransshipment arcs. The remaining 1 unit of flow required on the unsatisfied arc can be satisfied by including it\neither in a path with satisfied process route arcs of some other parts or in a cycle with unsatisfied process route\narcs of some other parts. In general, such a cycle or path may involve more than one part and its process routes.\nThe relational arcs (i , j ) (i and j must not belong to the same part) are used to create these cycles or paths, and\nb a\nthe weightage assigned to each such arc (i , j ) is the dissimilarity value between process routes i and j, namely,\nb a\nd . In the framework of the proposed minimum cost network flow problem, the relational arc that has the\nij\nminimum dissimilarity (i.e., cost of flow) will be chosen for creating the cycle or path, and this is true for all\nother parts. Therefore, any optimal (or feasible) solution of the proposed minimum cost network flow problem\nwill contain paths (from supply nodes to demand nodes) with flow value 1 or both paths and cycles with flow\nvalue 1. Two types of paths could be there. The first kind, direct path (k  i  i k ), includes only one\ns a b d\nprocess route, whereas the second kind, indirect path, includes more than one process route. The direct path does\nnot contain any relational arcs, but the indirect path does.\n3. The cost of flow on all arcs is zero except on relational arcs (i , j ), i ∈ PR(k), j ∉ PR(k), k = 1, ..., K; whose cost\nb a\nof flow is the dissimilarity value between process routes i and j, i.e., d . Therefore, minimizing the total cost of\nij\nflow in the network is equivalent to minimizing the total cost of flow on the relational arcs (i , j ) with flow value\nb a\n1, which, in turn, is equivalent to minimizing the total dissimilarity values among the process routes involved in\ncreating the paths and cycles.\n(1,1,0)\n1 1\na b\n+2 − 2\n(1,0,0) (1,1,0) (1,0,0)\n1 2 2 1\ns a b d\n3 3\na b\n. .\n(1,0,d )\nij\n. .\n. .\n(N-1) (N-1)\na b\n+1 − 1\nK K\ns d\n(1,1,0)\nN N\na b\nFigure 1: Network flow representation of process route family formation.\n5.2.3 Mathematical formulation\nObjective function\nThe objective function is to minimize the total cost of flow in the network and consists of four components: cost of\nflow on supply arcs, cost of flow on transshipment arcs, cost of flow on relational arcs, and cost of flow on demand\narcs. Assuming the linearity, these costs are computed as the product of flow rate 𝑓(.,.) and cost of unit flow 𝜔(.,.).\nThe four cost components can be written as follows:\nCost of flow on supply arcs = ∑(cid:3012) ∑ 𝑓(k, i ).𝜔(k, i )\n(cid:3038)(cid:2880)(cid:2869) (cid:3036)∈(cid:3017)(cid:3019)((cid:3038)) s a s a\nCost of flow on transshipment arcs = ∑(cid:3015) 𝑓(i , i ).𝜔(i , i )\n(cid:3036)(cid:2880)(cid:2869) a b a b\nCost of flow on relational arcs = ∑(cid:3012) ∑ ∑ 𝑓(i , j ).𝜔(i , j )\n(cid:3038)(cid:2880)(cid:2869) (cid:3036)∈(cid:3017)(cid:3019)((cid:3038)) (cid:3037)∉(cid:3017)(cid:3019)((cid:3038)) b a b a\nCost of flow on demand arcs = ∑(cid:3012) ∑ 𝑓(i , k ).𝜔(i , k )\n(cid:3038)(cid:2880)(cid:2869) (cid:3036)∈(cid:3017)(cid:3019)((cid:3038)) b d b d\nThe cost of flow on supply arcs, transshipment arcs, and demand arcs will always be zero because their cost of flow\nis zero according to Rule I, Rule II, and Rule IV, respectively. The cost of flow for the relational arcs, 𝜔(i , j ), is taken\nb a\nas d , the dissimilarity value between the two process routes i and j according to Rule III. Therefore, the objective\nij\nfunction is reduced to:\nmin ∑(cid:3012) ∑ ∑ 𝑑 .𝑓(i , j ) (2 )\n(cid:3038)(cid:2880)(cid:2869) (cid:3036)∈(cid:3017)(cid:3019)((cid:3038)) (cid:3037)∉(cid:3017)(cid:3019)((cid:3038)) (cid:3036)(cid:3037) b a\nConstraints\n1. Flow conservation at source nodes k\ns\nFlow emanating from these nodes must be equal to their supply capacities:\n∑ 𝑓(𝑘 ,𝑖 ) = TPR(k)−1 k = 1,…, K (3)\n(cid:3036)∈(cid:3017)(cid:3019)((cid:3038)) (cid:3046) (cid:3028)\n2. Flow conservation at nodes i\na\nSince these are transshipment nodes, therefore, the incoming flow must be equal to the outgoing flow:\n𝑓(𝑘 ,𝑖 )+∑(cid:3015) 𝑓(𝑗 ,𝑖 )= 1 k=1,…,K; i∈ PR(k); j∉ PR(k) (4)\n(cid:3046) (cid:3028) (cid:3037)(cid:2880)(cid:2869) (cid:3029) (cid:3028)\n3. Flow conservation at nodes i\nb\nThese nodes are also transshipment nodes. Therefore, the incoming flow must be equal to the outgoing flow:\n∑(cid:3015) 𝑓(𝑖 ,𝑗 ) + 𝑓(𝑖 ,𝑘 ) = 1 k=1,…,K; i∈ PR(k); j∉ PR(k) (5)\n(cid:3037)(cid:2880)(cid:2869) (cid:3029) (cid:3028) (cid:3029) (cid:3031)\n4. Flow conservation at sink nodes k\nd\nThese are the sink nodes. Therefore, the flow incoming to these nodes must be equal to their requirement:\n∑ 𝑓(𝑖 ,𝑘 ) = − (TPR(k)−1) k=1,…,K (6)\n(cid:3036)∈(cid:3017)(cid:3019)((cid:3038)) (cid:3029) (cid:3031)\n5. Side constraints - only one process route arc on any path from supply to demand node\nThis constraint is used to ensure that the path from a supply node to a demand node with flow value 1 must\ninclude only one process route and thus will eliminate from the network any indirect paths, i.e., the paths\nfrom supply nodes to demand nodes with flow value 1 which include more than one process routes. It can be\nwritten as:\n𝑓(k, i ) = 𝑓(i , k ) ∀ i ∈ PR(k); k = 1, ..., K (7)\ns a b d\n6. The integrality constraints for flow variables\n𝑓(k, i ) = 0 or 1 ∀ i ∈ PR(k); k = 1, ..., K\ns a\n𝑓(i , k ) = 0 or 1 ∀ i ∈ PR(k); k = 1, ..., K\nb d\n𝑓(i , j ) = 0 or 1 ∀ i ∈ PR(k); j∉ PR(k); k = 1, ..., K (8)\nb a\nThe model formulated in equations 2 to 8 is a 0-1 integer linear programming problem, which can be solved using any\nprocedure designed for 0-1 integer linear programming problems. Except for constraint 7, all other constraints and the\nobjective function conform to the standard network structure and can be solved using any minimum-cost network flow\nalgorithm. However, due to constraint 7, a specialized network flow algorithm is required to solve this problem. In\nthis work, CPLEX, a general mixed integer optimization package (version 22.1.0.0), is used to solve the problem. The\noutput consists of binary (0-1) flow values for all arcs.\n5.3 Process route (part) family identification\nAs stated in subsection 5.2 (observation 2), the network solution will contain cycles and paths (indirect paths) to satisfy\nthe flow conditions on unsatisfied arcs. However, due to side constraint 7, the solution cannot contain any indirect\npaths, i.e., paths that include more than one process route and contain relational arcs. Therefore, the only way to satisfy\nthe flow conditions on unsatisfied arcs is by creating cycles. The cost of flow on these arcs is the dissimilarity value\nbetween the two process routes connected by a relational arc. Since the objective function minimizes the cost of flow\non relational arcs and only cycles can contain relational arcs, minimizing the total cost of flow on relational arcs is\nequivalent to minimizing the cost of flow on cycles. In other words, this means minimizing the dissimilarity values\n(which are the costs of flow for relational arcs) between the process routes included in the cycles. Generally, a cycle\ncontains at least two process routes (each from a different part). These cycles will represent process route families in\nthe context of GT and can be identified from the solution of the mathematical model described in subsection 5.2 by\nisolating the relational arcs with a flow value of 1. This identification of cycles is illustrated in Figure 2. The network\nshown in this figure represents a grouping problem with 4 machines and 4 parts (with a total of 8 process routes). To\nillustrate the identification of cycles, let the solution of the model have flow value 1 on relational arcs (2 , 3 ), (3 , 2 ),\nb a b a\n(6 , 7 ), and (7 , 6 ). From these, two cycles can be identified. The first cycle consists of the following four arcs:\nb a b a\nCycle 1: 𝑓(2 , 3 ) = 𝑓(3 , 3 ) = 𝑓(3 , 2 ) = 𝑓(2 , 2 ) = 1\nb a a b b a a b\nThe second cycle also consists of four arcs:\nCycle 2: 𝑓(6 , 7 ) = 𝑓(7 , 7 ) = 𝑓(7 , 6 ) = 𝑓(6 , 6 ) = 1\nb a a b b a a b\nFrom these two cycles, two process route families can be identified:\n1. Process route family 1 consists of process routes 1 and 4, corresponding to parts 1 and 2, respectively.\n2. Process route family 2 consists of process routes 6 and 7, corresponding to parts 3 and 4, respectively.\n1\n+1\n1\na b\n+1 - 1\n1\n1 d\ns\n2 +1 2\na b\n3 3\n+ 1 a b - 1\n+ 1\n2\n2\nd\ns\n4 + 1 4\na b\n5\n+1\n5\na b\n+1 - 1\n3\n3 d\ns\n6 +1 6\na b\n7 7\n+ 1 a b - 1\n+ 1\n4 4\ns d\n8 + 1 8\na b\nFigure 2: Network showing the paths and cycles for process route family formation.\n6. Machine cell formation\nFor machine cell formation, we propose a QAP formulation and a heuristic procedure. The descriptions are given in\nthe following subsections.\n6.1 The QAP formulation\nThe QAP formulation assigns part families and machines to cells simultaneously. The inputs to the model are the\nmaximum number of cells that can be formed, the maximum number of machines that can be assigned to a cell, and\nthe machine usage factors (i.e., the number of process routes in a particular family using a particular machine) for all\nprocess route (part) families. The objective of the formulation is to maximize machine utilization. The output of the\nmodel is the assignment of part families and machines to cells.\nObjective function\nThe objective of the model is to maximize machine utilization and can be written as:\nmax∑(cid:3004) ∑(cid:3019) ∑(cid:3014) 𝑢 𝑍 𝑌 (9)\n(cid:3030)(cid:2880)(cid:2869) (cid:3045)(cid:2880)(cid:2869) (cid:3040)(cid:2880)(cid:2869) (cid:3040)(cid:3045) (cid:3040)(cid:3030) (cid:3045)(cid:3030)\nConstraints\n1. Each machine is assigned to only one cell\n∑(cid:3004) 𝑍 = 1 m = 1,…, M (10)\n(cid:3030)(cid:2880)(cid:2869) (cid:3040)(cid:3030)\n2. Each process route family is assigned to only one cell\n∑(cid:3004) 𝑌 = 1 r = 1,…, R (11)\n(cid:3030)(cid:2880)(cid:2869) (cid:3045)(cid:3030)\n3. Maximum number of machines that can be assigned to a cell\n∑(cid:3014) 𝑍 ≤ max c = 1,…, C (12)\n(cid:3040)(cid:2880)(cid:2869) (cid:3040)(cid:3030) c\n6.2 The heuristic procedure\nThe objective of the heuristic procedure is also to maximize machine utilization. It follows a hierarchical approach\nand consists of three steps. The first step combines process route families wherever possible. The second step assigns\nmachines to the process route families. The third step merges process route families and machine cells wherever\nfeasible within the system constraints. The inputs to the procedure are the maximum number of machines that can be\nassigned to a cell, the process route families, and the machines they require. The details of the heuristic are as follows:\nStep-1. Combining the process route families\n1. Take a process route family r\n2. Check if the machines used by this process route family r are a subset or superset of the machines used by any\nother process route family. If the answer is yes, merge the two process route families; otherwise, go to 3.\n3. Repeat 1 and 2 for all route families till no merging is possible.\nStep-2. Assigning the machines to process route families\n1. Compute for each machine m the usage factor u for each process route family r\nmr\n2. Assign machine m to a process route family r where u is maximum, the ties being broken arbitrarily.\nmr\n3. Repeat 2 for all machines.\nStep-3. Merging the process route families and machine cells\nMerge two process route families and the corresponding machine cells if there is some inter-cell movement\nbetween them, but only if the merging does not violate the cell size limit. Stop when no more merging is\npossible.\n7. Numerical illustrations\nTo test the effectiveness of the present formulation, two data sets are chosen from the literature on generalized\ngrouping problems: one without exceptional elements (i.e., where disjoint groups exist) and the other with exceptional\nelements (i.e., where disjoint groups do not exist). The number of exceptional elements is used as a critical criterion\nfor measuring the effectiveness of cell formation, as it is widely used by researchers in generalized grouping theory.\n7.1 Example problem I (without exceptional elements)\nThe first problem shown in Table 2 is the incidence matrix. There are 5 parts with a total of 11 process routes and 4\nmachines. In the process route family formation stage, two cycles are identified.\nCycle 1: 𝑓(2 , 2 ) = 𝑓(2 , 7 ) = 𝑓(7 , 7 ) = 𝑓(7 , 2 ) = 1\na b b a a b b a\nCycle 2: 𝑓(5 , 11 ) = 𝑓(11 , 11 ) = 𝑓(11 , 9 ) = 𝑓(9 , 9 ) = 𝑓(9 , 5 ) = 𝑓(5 , 5 ) = 1\nb a a b b a a b b a a b\nThe two cycles are shown in Figures 3 and 4, respectively. From the two cycles, two process route families can be\nidentified.\nTable 2: Example problem I.\nProcess Process\nMachine No. (m)\nPart route for part route SI.\n(k) k No.\n1 2 3 4\n(i∈ PR(k)) (i∈ A)\n1 1 0 0 1 1\n1 2 2 0 1 0 1\n3 3 1 1 0 0\n1 4 0 1 1 0\n2\n2 5 1 0 1 0\n1 6 1 0 0 1\n3\n2 7 0 1 0 1\n1 8 1 0 0 1\n4\n2 9 1 0 1 0\n1 10 0 0 1 1\n5\n2 11 1 0 0 0\n2 2\na b\n7 7\na b\nFigure 3: Cycle 1 for part family 1 of example problem I.\n5 5\na b\n9 9\na b\n11 11\na b\nFigure 4: Cycle 2 for part family 2 of example problem I.\n1. Process route family 1 consists of process routes 2 and 7, corresponding to parts 1 and 3, respectively.\n2. Process route family 2 consists of process routes 5, 9, and 11, corresponding to parts 2, 4, and 5, respectively.\nIn the machine cell formation stage, the machine utilizations u for each process route family r are calculated and\nmr\nshown in Table 3.\nTable 3: Machine utilization u for example problem I.\nmr\nProcess route\nfamily (r) → 1 2\nMachine (m) ↓\n1 0 3\n2 2 0\n3 0 2\n4 2 0\nFrom Table 3, it is obvious that none of the machines are utilized by more than one process route family, and hence,\ntwo machine cells are easily identified as:\n1. Machine cell 1 consisting of machines 2 and 4\n2. Machine cell 2 consisting of machines 1 and 3\nAfter rearranging the matrix according to the results obtained from the process route family formation and the machine\ncell formation stage, the resultant matrix is shown in Table 4.\nTable 4: Solution to example problem I in block diagonal form.\nProcess Process\nMachine No. (m)\nPart route for part route SI.\n(k) k No.\n1 3 2 4\n(i∈ PR(k)) (i∈ A)\n2 2 5 1 1 0 0\n4 2 9 1 1 0 0\n5 2 11 1 0 0 0\n1 2 2 0 0 1 1\n3 2 7 0 0 1 1\n7.2 Example problem II (with exceptional elements)\nThe second problem is given in Table 5. This problem has 20 parts having a total of 51 process routes and 20 machines.\nIn the process route family formation stage, seven cycles are identified as:\nTable 5: Example problem II.\nProcess Process\nMachine No. (m)\nPart route route\n(k) set number\n6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n1 2 3 4 5\n(PR(k)) (i)\n1 1 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0\n1\n2 2 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0\n1 3 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n2\n2 4 1 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0\n1 5 1 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0\n3\n2 6 1 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0\n1 7 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n4\n2 8 1 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0\n1 9 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0\n5 2 10 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0\n3 11 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1\n1 12 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n6\n2 13 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n1 14 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0\n2 15 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0\n3 16 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1\n7\n4 17 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0\n5 18 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 1 0 0\n6 19 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1\n1 20 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0\n8\n2 21 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0\n1 22 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0\n2 23 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0\n3 24 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0\n9\n4 25 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 0\n5 26 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1\n6 27 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1\n1 28 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0\n10\n2 29 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0\n1 30 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0\n11 2 31 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0\n3 32 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1\n1 33 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0\n12 2 34 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0\n3 35 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1\n1 36 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0\n13 2 37 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0\n3 38 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1\nTable 5: Example problem II (continued).\nProcess Process\nMachine No. (m)\nPart route route\n(k) set number\n3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n1 2\n(PR(k)) (i)\n1 39 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 1 0 0\n14 2 40 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 1 0\n3 41 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 1\n1 42 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0\n15 2 43 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0\n3 44 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1\n1 45 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0\n16 2 46 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0\n3 47 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1\n17 1 48 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0\n18 1 49 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0\n19 1 50 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0\n20 1 51 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\nCycle 1: 𝑓(2 , 2 ) = 𝑓(2 , 11 ) = 𝑓(11 , 11 ) = 𝑓(11 , 6 ) = 𝑓(6 , 6 ) = 𝑓(6 , 2 ) = 1\na b b a a b b a a b b a\nCycle 2: 𝑓(30 , 30 ) = 𝑓(30 , 33 ) = 𝑓(33 , 33 ) = 𝑓(33 , 36 ) = 𝑓(36 , 36 ) = 𝑓(36 , 30 ) = 1\na b b a a b b a a b b a\nCycle 3: 𝑓(49 , 49 ) = 𝑓(49 , 51 ) = 𝑓(51 , 51 ) = 𝑓(51 , 50 ) = 𝑓(50 , 50 ) = 𝑓(50 , 49 ) = 1\na b b a a b b a a b b a\nCycle 4: 𝑓(4 , 4 ) = 𝑓(4 , 8 ) = 𝑓(8 , 8 ) = 𝑓(8 , 4 ) = 1\na b b a a b b a\nCycle 5: 𝑓(41 , 41 ) = 𝑓(41 , 47 ) = 𝑓(47 , 47 ) = 𝑓(47 , 41 ) = 1\na b b a a b b a\nCycle 6: 𝑓(44 , 44 ) = 𝑓(44 , 48 ) = 𝑓(48 , 48 ) = 𝑓(48 , 44 ) = 1\na b b a a b b a\nCycle 7: 𝑓(12 , 12 ) = 𝑓(12 , 17 ) = 𝑓(17 , 17 ) = 𝑓(17 , 23 ) = 𝑓(23 , 23 ) = 𝑓(23 , 21 ) =\na b b a a b b a a b b a\n𝑓(21 , 21 ) = 𝑓(21 , 28 ) = 𝑓(28 , 28 ) = 𝑓(28 , 12 ) = 1\na b b a a b b a\nThe seven cycles are shown in Figures 5 to 11.\n2 2\na b\n6 6\na b\n11 11\na b\nFigure 5: Cycle 1 for part family 2 of example problem II.\n30 30\na b\n33 33\na b\n36 36\na b\nFigure 6: Cycle 2 for part family 2 of example problem II.\n49 49\na b\n50 50\na b\n51 51\na b\nFigure 7: Cycle 3 for part family 2 of example problem II.\n4 4\na b\n8 8\na b\nFigure 8: Cycle 4 for part family 2 of example problem II.\n41 41\na b\n47 47\na b\nFigure 9: Cycle 5 for part family 2 of example problem II.\n44 44\na b\n48 48\na b\nFigure 10: Cycle 6 for part family 2 of example problem II.\n12 12\na b\n17 17\na b\n21 21\na b\n23 23\na b\n28 28\na b\nFigure 11: Cycle 7 for part family 2 of example problem II.\nFrom the seven cycles shown in Figures 5 to 11, seven process route families can be identified as:\n(i). Process route family 1 consisting of process routes 2, 6 and 11 corresponding to parts 1, 3 and 5 respectively.\n(ii). Process route family 2 consisting of process routes 30, 33 and 36 corresponding to parts 11, 12 and 13\nrespectively.\n(iii). Process route family 3 consisting of process routes 49, 50 and 51 corresponding to parts 18, 19 and 20\nrespectively.\n(iv). Process route family 4 consisting of process routes 4 and 8 corresponding to parts 2 and 4 respectively.\n(v). Process route family 5 consisting of process routes 41 and 47 corresponding to parts 14 and 16 respectively.\n(vi). Process route family 6 consisting of process routes 44 and 48 corresponding to parts 15 and 17 respectively.\n(vii). Process route family 7 consisting of process routes 12, 17, 21, 23, and 28 corresponding to parts 6, 7, 8, 9,\nand 10 respectively.\nIn the machine cell formation stage, applying machine cell formation heuristic, five machine cells are obtained with\nonly one exceptional element. These results are same as those obtained by solving the QAP formulation for machine\ncell formation:\n(i). Machine cell 1 consisting of machines [1, 7, 9, 12]. Process route families as- signed to it are 1 and 4 which\ncontain process routes [2, 4, 6, 8, 11].\n(ii). Machine cell 2 consisting of machines [2, 5, 6, 16, 19). Process route family assigned to it is 7 which\ncontains process routes [12, 17, 21, 23, 28].\n(iii). Machine cell 3 consisting of machines [3, 8, 11, 18]. Process route family assigned to it is 2 which contains\nprocess routes [30, 33, 36].\n(iv). Machine cell 4 consisting of machines [10, 14, 17, 20]. Process route families assigned to it are 5 and 6\nwhich contain process routes [41, 44, 47, 48].\n(v). Machine cell 5 consisting of machines [4, 13, 15]. Process route family assigned to it is 3 which contains\nprocess routes [49, 50, 51].\nAfter rearranging the process route-machine incidence matrix, the resultant matrix is shown in Table 6. The present\nmodel yields one exceptional element, whereas the p-median formulation yields three exceptional elements. For\ncomparison, the results obtained from the p-median model are shown in matrix form in Table 7.\nTable 6: Solution to example problem II in block diagonal form by present model.\nProcess Process\nMachine No. (m)\nPart route route\n(k) set number\n1 9 12 7 2 5 6 16 19 3 8 11 18 10 14 17 20 4 13 15\n(PR(k)) (i)\n1 2 2 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n2 2 6 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n3 3 11 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0\n4 2 4 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n5 2 8 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n6 1 12 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n7 4 17 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0\n8 2 21 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0\n9 2 23 0 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0\n10 1 28 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0\n11 1 30 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0\n12 1 33 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0\n13 1 36 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0\n14 3 41 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0\n15 3 47 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 0\n16 3 44 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0\n17 1 48 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0\n18 1 49 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n19 1 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n20 1 51 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\nTable 7: Solution to example problem II in block diagonal form by p-median model.\nProcess Process\nMachine No. (m)\nPart route route\n(k) set number\n7 9 12 1 20 2 5 6 16 19 3 8 11 18 10 14 17 4 13 15\n(PR(k)) (i)\n1 2 2 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n2 2 4 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n3 2 6 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n4 2 8 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n5 3 11 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n6 1 12 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0\n7 4 17 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0\n8 2 21 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0\n9 2 23 0 0 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0\n10 1 28 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0\n11 1 30 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0\n12 1 33 0 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0\n13 1 36 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0\n14 2 40 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0\n15 2 43 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0\n16 2 46 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0\n17 1 48 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0\n18 1 49 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n19 1 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n20 1 51 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1\n8. Conclusions and future research scopes\nIn this paper, we propose a procedure for forming part families and machine cells in a generalized grouping\nenvironment, where each part has more than one process route. The grouping problem involves selecting a process\nroute for each part, grouping them into part families, and forming machine cells such that each machine cell can\nprocess at least one process route (part) family. The procedure organizes the formation of part families and machine\ncells hierarchically. For the process route family formation stage, a unit capacity minimum cost network flow model\nis developed. The proposed model solves the part family formation problem optimally without pre-specifying the\nnumber of part families to be formed and is not an iterative process. The method is flexible in that it can be used in\nboth situations where disjoint groups exist and where they do not. Our computational results show that it provides\nbetter solutions than the p-median model in terms of exceptional elements.\nFor the machine cell formation stage, a QAP formulation and a heuristic procedure are proposed. The QAP formulation\nsimultaneously assigns process route families and machines to the pre-specified number of cells to maximize machine\nutilization. One advantage of this formulation is that, even if a large number of cells is specified, the model will form\nonly the optimal number of cells within the specified limit, ensuring maximized machine utilization while satisfying\nsystem constraints. The heuristic procedure is hierarchical in nature. In the first stage, it aims to reduce the number of\nprocess route families wherever possible. In the second stage, machines are assigned to process route families based\non maximum utilization among competing families. In the final stage, the procedure attempts to merge cells (and\ncorresponding process route families) wherever feasible within system constraints. Computational results show that\nthe QAP and heuristic procedure yield the same results.\nIn the presence of exceptional elements in the final solution, an improvement scheme can be employed. In reality,\nparticularly in flexible manufacturing systems environments where machines have inherent flexibility, it may be\npossible to reassign exceptional operations that create inter-cell movements within the cell itself, provided that the\nreassignment does not violate machine capacity constraints. For solving the network model, we used a mixed-integer\noptimization package (CPLEX 22.1.0.0). Except for side constraint 7, all other constraints and the objective function\nconform to the standard unit capacity minimum cost network flow problem, which can be solved using any minimum\ncost network flow algorithm.\nDue to constraint 7, a specialized network flow algorithm is required to solve the problem, and the development of\nsuch an algorithm could be a future avenue of research. The network flow model developed in this work involves\ncertain side constraints that prevent it from being solved using standard network flow algorithms. It would be\nworthwhile to develop a specialized network flow algorithm for this model.\nReferences\nBustince, H., Pagola, M., Mesiar, R., Hullermeier, E., & Herrera, F. (2012). Grouping, Overlap, and Generalized\nBientropic Functions for Fuzzy Modeling of Pairwise Comparisons. IEEE Transactions on Fuzzy Systems,\n20(3), 405–415. https://doi.org/10.1109/TFUZZ.2011.2173581\nCheng, M., Jiang, J., Wang, Q., & Yao, Y. (2019). A Generalized Grouping Scheme in Coded Caching. IEEE\nTransactions on Communications, 67(5), 3422–3430. https://doi.org/10.1109/TCOMM.2019.2896960\nCova, T. J., & Johnson, J. P. (2003). A network flow model for lane-based evacuation routing. Transportation\nResearch Part A: Policy and Practice, 37(7), 579–604. https://doi.org/10.1016/S0965-8564(03)00007-7\nGarg, H., & Arora, R. (2018). Generalized and group-based generalized intuitionistic fuzzy soft sets with\napplications in decision-making. Applied Intelligence, 48(2), 343–356. https://doi.org/10.1007/s10489-017-\n0981-5\nGoldbeck, N., Angeloudis, P., & Ochieng, W. Y. (2019). Resilience assessment for interdependent urban\ninfrastructure systems using dynamic network flow models. Reliability Engineering & System Safety, 188, 62–\n79. https://doi.org/10.1016/j.ress.2019.03.007\nGómez, D., Figueira, J. R., & Eusébio, A. (2013). Modeling centrality measures in social network analysis using bi-\ncriteria network flow optimization problems. European Journal of Operational Research, 226(2), 354–365.\nhttps://doi.org/10.1016/j.ejor.2012.11.027\nHolden, R., Val, D. V., Burkhard, R., & Nodwell, S. (2013). A network flow model for interdependent\ninfrastructures at the local scale. Safety Science, 53, 51–60. https://doi.org/10.1016/j.ssci.2012.08.013\nHovav, S., & Tsadikovich, D. (2015). A network flow model for inventory management and distribution of\ninfluenza vaccines through a healthcare supply chain. Operations Research for Health Care, 5, 49–62.\nhttps://doi.org/10.1016/j.orhc.2015.05.003\nHsu, C., & Wallace, W. A. (2007). An industrial network flow information integration model for supply chain\nmanagement and intelligent transportation. Enterprise Information Systems, 1(3), 327–351.\nhttps://doi.org/10.1080/17517570701504633\nHsu, N.-S., & Cheng, K.-W. (2002). Network Flow Optimization Model for Basin-Scale Water Supply Planning.\nJournal of Water Resources Planning and Management, 128(2), 102–112.\nhttps://doi.org/10.1061/(ASCE)0733-9496(2002)128:2(102)\nJames, T. L., Brown, E. C., & Keeling, K. B. (2007). A hybrid grouping genetic algorithm for the cell formation\nproblem. Computers & Operations Research, 34(7), 2059–2079. https://doi.org/10.1016/j.cor.2005.08.010\nLEE, H., & GARCIA-DIAZ, A. (1993). A network flow approach to solve clustering problems in group technology.\nInternational Journal of Production Research, 31(3), 603–612. https://doi.org/10.1080/00207549308956746\nLerlertpakdee, P., Jafarpour, B., & Gildin, E. (2014). Efficient Production Optimization With Flow-Network\nModels. SPE Journal, 19(06), 1083–1095. https://doi.org/10.2118/170241-PA\nMajeed, A., & Rauf, I. (2020). Graph Theory: A Comprehensive Survey about Graph Theory Applications in\nComputer Science and Social Networks. Inventions, 5(1), 10. https://doi.org/10.3390/inventions5010010\nMak, K. L., Wong, Y. S., & Wang, X. X. (2000). An Adaptive Genetic Algorithm for Manufacturing Cell\nFormation. The International Journal of Advanced Manufacturing Technology, 16(7), 491–497.\nhttps://doi.org/10.1007/s001700070057\nMalinovsky, Y. (2019). Sterrett Procedure for the Generalized Group Testing Problem. Methodology and Computing\nin Applied Probability, 21(3), 829–840. https://doi.org/10.1007/s11009-017-9601-4\nPrafulla, D., & Kulkarni, C. (2021). Solving Generalized groupings problems in Cellular manufacturing systems by\ngenetic algorithms. Journal of Science & Technology (JST), 6(5), 82–88.\nhttps://doi.org/10.46243/jst.2021.v6.i05.pp82-88\nQuelhas, A., Gil, E., McCalley, J. D., & Ryan, S. M. (2007). A Multiperiod Generalized Network Flow Model of the\nU.S. Integrated Energy System: Part I—Model Description. IEEE Transactions on Power Systems, 22(2),\n829–836. https://doi.org/10.1109/TPWRS.2007.894844\nQuelhas, A., & McCalley, J. D. (2007). A Multiperiod Generalized Network Flow Model of the U.S. Integrated\nEnergy System: Part II—Simulation Results. IEEE Transactions on Power Systems, 22(2), 837–844.\nhttps://doi.org/10.1109/TPWRS.2007.894845\nRAJAGOPALAN, R., & BATRA, J. L. (1975). Design of cellular production systems A graph-theoretic approach.\nInternational Journal of Production Research, 13(6), 567–579. https://doi.org/10.1080/00207547508943029\nRietz, J., Alves, C., Braga, N., & Valério de Carvalho, J. (2016). An exact approach based on a new pseudo-\npolynomial network flow model for integrated planning and scheduling. Computers & Operations Research,\n76, 183–194. https://doi.org/10.1016/j.cor.2016.07.008\nRudi, A., Fröhling, M., Zimmer, K., & Schultmann, F. (2016). Freight transportation planning considering carbon\nemissions and in-transit holding costs: A capacitated multi-commodity network flow model. EURO Journal\non Transportation and Logistics, 5(2), 123–160. https://doi.org/10.1007/s13676-014-0062-4\nSalehi, M., & Moghaddam, R. T. (2010). A genetic algorithm-based grouping method for a cell formation problem\nwith the efficacy measure. International Journal of Industrial and Systems Engineering, 6(3), 340.\nhttps://doi.org/10.1504/IJISE.2010.035016\nTariq, A., Hussain, I., & Ghafoor, A. (2009). A hybrid genetic algorithm for machine-part grouping. Computers &\nIndustrial Engineering, 56(1), 347–356. https://doi.org/10.1016/j.cie.2008.06.007\nTopal, E., & Ramazan, S. (2012). Strategic mine planning model using network flow model and real case\napplication. International Journal of Mining, Reclamation and Environment, 26(1), 29–37.\nhttps://doi.org/10.1080/17480930.2011.600827\nUddin, M. K., & Shanker, K. (2002). Grouping of parts and machines in presence of alternative process routes by\ngenetic algorithm. International Journal of Production Economics, 76(3), 219–228.\nhttps://doi.org/10.1016/S0925-5273(01)00164-5\nWerner, F. (2020). Graph-Theoretic Problems and Their New Applications. Mathematics, 8(3), 445.\nhttps://doi.org/10.3390/math8030445\nYan, T., & Wong, M. D. F. (2009). A correct network flow model for escape routing. Proceedings of the 46th\nAnnual Design Automation Conference, 332–335. https://doi.org/10.1145/1629911.1630001\nYin, Y., Val, D. V., Zou, Q., & Yurchenko, D. (2022). Resilience of Critical Infrastructure Systems to Floods: A\nCoupled Probabilistic Network Flow and LISFLOOD-FP Model. Water, 14(5), 683.\nhttps://doi.org/10.3390/w14050683\nStatements and Declarations\nFunding\nThe authors declare that no funds, grants, or other support were received during the preparation of this manuscript.\nCompeting Interests\nThe authors have no relevant financial or non-financial interests to disclose.\nData availability statement\nData will be provided anonymously upon request.",
    "pdf_filename": "Solving_Generalized_Grouping_Problems_in_Cellular_Manufacturing_Systems_Using_a_Network_Flow_Model.pdf"
}