{
    "title": "Fingerprinting and Tracing Shadows The Development and Impact of Browser Fingerprinting on Digital P",
    "context": "identifying and tracking users online without traditional methods like cookies. This paper gives an overview by examining the various ﬁngerprinting techniques and analyzes the entropy and uniqueness of the collected data. The analysis highlights that browser ﬁngerprinting poses a complex challenge from both technical and privacy perspectives, as users often have no control over the collection and use of their data. In addition, it raises signiﬁcant privacy concerns as users are often tracked without their knowledge or consent. Keywords-browser ﬁngerprinting; device ﬁngerprinting; track- ing; privacy. In the increasingly digitized world, the issues of online privacy and data security are becoming more complex. Partic- ularly in tracking — monitoring users and their devices across different web servers — browser ﬁngerprinting has emerged as an effective technique for creating detailed user proﬁles. Unlike the storage of information via cookies, which requires explicit user consent as mandated by the European General Data Protection Regulations (GDPR) guidelines, ﬁngerprinting does not require such consent. A browser ﬁngerprint can be generated in the background without any obvious signs to the end user, leaving them unaware of whether and to what extent they are being tracked. It is possible to manipulate a device locally to alter its ﬁn- gerprint. This is often not feasible for all users, unlike deleting cookies. This invisible threat is not apparent to the general public and raises signiﬁcant privacy concerns, as individuals can be tracked unnoticed. These proﬁles can contain private information, depending on the server operators, including age group, ethnic origin, social circles, and interests of the affected person. Browser ﬁngerprinting poses a threat to the privacy of the general public. Contrary to being a threat, it is an opportunity to provide valuable information to enhance the authentication mechanisms. Both perspectives are explored throughout this paper. The focus will be on the various techniques of ﬁnger- printing to understand how accurate and detailed user proﬁles can be created. The main research questions that this paper seeks to answer are: RQ1 “What methods are used in browser ﬁngerprinting and what user data are collected in the process?” RQ2 “How has the development of browser ﬁngerprinting as a user identiﬁcation method inﬂuenced user privacy and data protection in the digital space?” The paper is structured as follows: Section I introduces browser ﬁngerprinting and its privacy implications. In Section II, the theoretical background explains how ﬁngerprinting works and its legal challenges. Section III outlines techniques like HTTP Headers, Canvas, and WebGL Fingerprinting. Sec- tion IV examines the impact of ﬁngerprinting on privacy and the regulatory landscape. Section V concludes with a summary of the ﬁndings, emphasizing the need for stronger privacy measures and further research on countermeasures. II. THEORETICAL BACKGROUND A. Fingerprinting Browser ﬁngerprinting refers to collecting characteristic information that the browser directly or indirectly reveals about itself. Often used to track users, this technology has also found applications in IT security, such as fraud detection. Unlike tracking methods like cookies, browser ﬁngerprinting does not require storing data on the user’s computer, allowing the process to occur secretly and without consent [1, p. 1]. Consequently, creating a new identity, similar to deleting cookies, is not easily achievable, and GDPR privacy laws often provide little protection. Unlike cookie tracking, browser ﬁngerprinting is not explicitly mentioned in the GDPR. It should fall under the collection of identiﬁable information but website operators frequently claim “legitimate interest”, enabling such data collection without the user’s consent [2]. Active transmission of data is not required for browser ﬁngerprinting, as loading a webpage can transmit various pieces of information, such as the user’s preferred language, within the HTTP headers. This passive data collection pro- vides only a limited amount of information, so it is often supplemented with active data collection methods. An active approach typically employs JavaScript to interface with the browser and gather information, such as screen resolution, installed add-ons, and graphics card data, merging them into a unique ﬁngerprint [3, pp. 1, 3]. Similar to human ﬁngerprints, browser ﬁngerprinting relies on the uniqueness of browser characteristics, which typically do not change signiﬁcantly with regular use. This allows for accurate user identiﬁcation over extended periods [3, p. 2]. However, not all collected data points are equally unique or stable, necessitating careful selection of information to achieve accurate results. The ﬁngerprinting algorithm combines both passively and actively collected data into a unique string. Depending on the operator’s goals, adjustments can be made;",
    "body": "arXiv:2411.12045v1  [cs.CR]  18 Nov 2024\nFingerprinting and Tracing Shadows: The Development and Impact of Browser\nFingerprinting on Digital Privacy\nAlexander Lawall\nIU International University of Applied Science\nErfurt, Th¨uringen, Germany\nalexander.lawall@iu.org\nAbstract—Browser ﬁngerprinting is a growing technique for\nidentifying and tracking users online without traditional methods\nlike cookies. This paper gives an overview by examining the\nvarious ﬁngerprinting techniques and analyzes the entropy and\nuniqueness of the collected data. The analysis highlights that\nbrowser ﬁngerprinting poses a complex challenge from both\ntechnical and privacy perspectives, as users often have no control\nover the collection and use of their data. In addition, it raises\nsigniﬁcant privacy concerns as users are often tracked without\ntheir knowledge or consent.\nKeywords-browser ﬁngerprinting; device ﬁngerprinting; track-\ning; privacy.\nI. INTRODUCTION\nIn the increasingly digitized world, the issues of online\nprivacy and data security are becoming more complex. Partic-\nularly in tracking — monitoring users and their devices across\ndifferent web servers — browser ﬁngerprinting has emerged\nas an effective technique for creating detailed user proﬁles.\nUnlike the storage of information via cookies, which requires\nexplicit user consent as mandated by the European General\nData Protection Regulations (GDPR) guidelines, ﬁngerprinting\ndoes not require such consent. A browser ﬁngerprint can be\ngenerated in the background without any obvious signs to the\nend user, leaving them unaware of whether and to what extent\nthey are being tracked.\nIt is possible to manipulate a device locally to alter its ﬁn-\ngerprint. This is often not feasible for all users, unlike deleting\ncookies. This invisible threat is not apparent to the general\npublic and raises signiﬁcant privacy concerns, as individuals\ncan be tracked unnoticed. These proﬁles can contain private\ninformation, depending on the server operators, including age\ngroup, ethnic origin, social circles, and interests of the affected\nperson.\nBrowser ﬁngerprinting poses a threat to the privacy of the\ngeneral public. Contrary to being a threat, it is an opportunity\nto provide valuable information to enhance the authentication\nmechanisms. Both perspectives are explored throughout this\npaper. The focus will be on the various techniques of ﬁnger-\nprinting to understand how accurate and detailed user proﬁles\ncan be created. The main research questions that this paper\nseeks to answer are:\nRQ1 “What methods are used in browser ﬁngerprinting and\nwhat user data are collected in the process?”\nRQ2 “How has the development of browser ﬁngerprinting as\na user identiﬁcation method inﬂuenced user privacy and\ndata protection in the digital space?”\nThe paper is structured as follows: Section I introduces\nbrowser ﬁngerprinting and its privacy implications. In Section\nII, the theoretical background explains how ﬁngerprinting\nworks and its legal challenges. Section III outlines techniques\nlike HTTP Headers, Canvas, and WebGL Fingerprinting. Sec-\ntion IV examines the impact of ﬁngerprinting on privacy and\nthe regulatory landscape. Section V concludes with a summary\nof the ﬁndings, emphasizing the need for stronger privacy\nmeasures and further research on countermeasures.\nII. THEORETICAL BACKGROUND\nA. Fingerprinting\nBrowser ﬁngerprinting refers to collecting characteristic\ninformation that the browser directly or indirectly reveals\nabout itself. Often used to track users, this technology has\nalso found applications in IT security, such as fraud detection.\nUnlike tracking methods like cookies, browser ﬁngerprinting\ndoes not require storing data on the user’s computer, allowing\nthe process to occur secretly and without consent [1, p. 1].\nConsequently, creating a new identity, similar to deleting\ncookies, is not easily achievable, and GDPR privacy laws\noften provide little protection. Unlike cookie tracking, browser\nﬁngerprinting is not explicitly mentioned in the GDPR. It\nshould fall under the collection of identiﬁable information\nbut website operators frequently claim “legitimate interest”,\nenabling such data collection without the user’s consent [2].\nActive transmission of data is not required for browser\nﬁngerprinting, as loading a webpage can transmit various\npieces of information, such as the user’s preferred language,\nwithin the HTTP headers. This passive data collection pro-\nvides only a limited amount of information, so it is often\nsupplemented with active data collection methods. An active\napproach typically employs JavaScript to interface with the\nbrowser and gather information, such as screen resolution,\ninstalled add-ons, and graphics card data, merging them into\na unique ﬁngerprint [3, pp. 1, 3].\nSimilar to human ﬁngerprints, browser ﬁngerprinting relies\non the uniqueness of browser characteristics, which typically\ndo not change signiﬁcantly with regular use. This allows for\naccurate user identiﬁcation over extended periods [3, p. 2].\nHowever, not all collected data points are equally unique or\nstable, necessitating careful selection of information to achieve\naccurate results. The ﬁngerprinting algorithm combines both\npassively and actively collected data into a unique string.\nDepending on the operator’s goals, adjustments can be made;\n\nfor instance, using cookies, the ﬁngerprint might be less stable\nbut more unique, while tracking users without cookies requires\nhigh stability [4, pp. 1-5]. Eckersley’s study showed that\nparticipant browsers already had high entropy, indicating many\nunique characteristics sufﬁcient for accurate ﬁngerprinting,\nthough not stable enough for long-term accuracy. In recent\nyears, potential entropy has increased with new techniques\nlike HTML Canvas, WebGL-based hardware ﬁngerprints, au-\ndio API ﬁngerprints, plug-in-based ﬁngerprints, and methods\nutilizing mouse movements or differences in HTML parsing\nbetween browsers, making cross-browser user identiﬁcation\npossible [3, pp. 4-5].\nB. Concerns for Digital Privacy\nHistorically, the greatest threat to online tracking was posed\nby cookies, along with other technologies like Flash cookies,\nwhich have lost signiﬁcance in recent years. Changes by\nbrowser manufacturers, such as Mozilla, which rendered many\nexploited technologies, so-called “super-cookies”, ineffective\n[5], and additional browsers planning to block or eliminate\nthird-party cookies in the coming years [6], have shifted the\nlandscape. Following the GDPR, the use of non-essential cook-\nies has been further restricted and standardized for the ﬁrst\ntime, deﬁning how users share their data through cookies [7].\nIn contrast, browser ﬁngerprinting occurs in the background\nand leaves no stored information on the user’s computer. Thus,\nthe use of ﬁngerprints not only circumvents previous issues\nrelated to local storage, such as privacy laws and technical\nlimitations but also persists even when local data is deleted or\nwhen incognito mode is used.\nA 2021 study of the Alexa Top 100,000 websites found that\nnearly 10% of the sites used scripts to generate ﬁngerprints\n[8, pp. 11-12]. Comparing this to a similar 2014 study,\nwhich recorded 5.5% of the top 100,000 sites using canvas\nﬁngerprinting scripts, reveals an almost doubling of usage over\nseven years [9]. This suggests a shift towards online tracking\nusing this technology, which is much harder to detect and\nprevent compared to cookies. The creation of a ﬁngerprint is\nimperceptible to the user, with no simple way to effectively\nchange or delete their ﬁngerprint. Cookie banners give a false\nsense of security while tracking continues in the background\nwithout consent.\nThus, browser ﬁngerprinting poses an active threat to pri-\nvacy, as users often have no control over the collection and\nuse of their data. This stands in opposition to many current\ndata protection principles, such as the GDPR.\nIII. METHODS OF BROWSER FINGERPRINTING\nIn the context of browser ﬁngerprinting techniques, the\nmethods of data collection are varied and comprehensive.\nTherefore, speciﬁc properties and criteria are used to select\ntechniques. The following sections will encompass the ex-\nplanation of the techniques in terms of their functionality\nand their applications will be discussed to provide a detailed\nunderstanding of their use. An evaluation based on the advan-\ntages and disadvantages of each technique is also included to\nweigh their effectiveness and potential risks. Given the ever-\nincreasing number of techniques, only the most commonly\nused, established, or novel methods will be presented here.\nA. HTTP Header Attributes\n1) Deﬁnition and Basics: The HTTP request header is a\npart of every HTTP request exchanged between a client (web\nbrowser) and a server, transmitting various functional and\ncompatibility-related information [10]. Although individual\nattributes are not unique, they can be combined to distinguish\na client. This explanation is based on HTTP version 1.1, with\nHTTP/2 maintaining most attributes within a modiﬁed header\nframe [11].\n2) Analysis: HTTP request headers include attributes that\ndiffer by browser and version. Effective ﬁngerprinting re-\nquires selecting attributes that remain consistent over time.\nReliable ﬁelds include User-Agent, Accept, Content-Encoding,\nand Content-Language, which provide valuable identiﬁcation\ninformation [4, p. 5] [12, p. 880]. The User-Agent, despite\nlacking standardization, offers high uniqueness due to its\ndetailed browser and OS information [13].\n3) Advantages: The main advantage of using HTTP head-\ners is their passive information collection, which occurs\nautomatically with each request. This method is efﬁcient,\nunobtrusive, and compatible with most web servers, processing\ndata on the server side without a noticeable impact on the\nclient.\n4) Disadvantages: HTTP header information is limited,\nas most attributes provide minimal details. The User-Agent,\nwhile informative, can be easily altered by browser extensions,\nreducing its reliability (i.e. User-Agent Switcher for Chrome).\nFurthermore, using such technologies without consent can\nviolate GDPR regulations, necessitating legal review before\nimplementation [14].\nB. Enumeration of Browser Plugins\n1) Deﬁnition and Basics: Browser plugins, whether pre-\ninstalled or user-added, have been a method for recognizing\nsystems, along with font detection. Most browser features are\nindirectly modiﬁed, except for extensions. The demand for\naccurate enumeration of these extensions is high [12, pp. 878-\n880].\n2) Analysis: Many information-rich plugins, like Flash,\nhave disappeared over the years. Since 2016, most browsers,\nincluding Firefox, no longer support the Netscape Plugin\nApplication Programming Interface (NPAPI) plugin interface,\nleading to the navigator.plugins object in modern browsers\nshowing only standard plugins like PDF viewers [15]. This\nlimitation reduces the impact of plugins on ﬁngerprinting but\nstill allows differentiation between systems and browsers. The\ndirect detection of user-installed add-ons is not possible, lim-\niting the data’s signiﬁcance [12, pp. 886-887]. However, new\nmethods to enumerate extensions have emerged. Chromium-\nbased browsers can access extension settings via a local URL.\nA GitHub project exploits this to check for over 1,000 exten-\nsions by requesting internal resources and checking the status\n\ncodes [16]. Additionally, ad blockers’ behavior in removing\nunwanted content can be detected by creating elements they\ntypically block and checking for changes, revealing active\nblocklists [17]. Another method involves reading the status\nof handler protocols to identify installed programs like Skype\nand Zoom.\n3) Advantages: User-installed extensions offer high unique-\nness and stability due to the number of extensions.\n4) Disadvantages: Insights into users’ privacy, including\nsensitive information like health conditions, religion, and polit-\nical views, can be inferred [18, pp. 11-12]. The ﬁngerprinting\nprocess relies on limited methods, making it prone to errors,\nand requires continuous updates to maintain reliability.\nC. Canvas Fingerprinting\n1) Deﬁnition and Basics: Canvas ﬁngerprinting involves\ngenerating a digital ﬁngerprint using the Canvas element intro-\nduced in HTML5. It utilizes the Canvas API to draw a hidden\n2D graphic in the background. Variations in how different\nbrowsers and devices handle this image due to differences\nin hardware acceleration, installed fonts, and graphic libraries\nresult in a highly stable and unique ﬁngerprint [1, pp. 1-3].\n2) Analysis: A script embedded in a webpage adds an\ninvisible Canvas element that draws a predetermined 2D\ngraphic in the background. Text can also be drawn using the\nCanvas context, employing various fonts and sizes. WebFonts\nenable dynamic loading of fonts from the internet, allowing\nspeciﬁc fonts to be chosen to test for uniqueness in font\nrendering. The resulting image data can be extracted using\nfunctions like getImageData and toDataURL, which can then\nbe hashed to form a ﬁngerprint, typically using a hashing\nalgorithm. This hash is sent via a web request to a server\nfor processing and storage. Besides storing the ﬁngerprint\nfor later identiﬁcation, another application method involves\ncomparing the ﬁngerprint with an extensive database of known\nﬁngerprints and corresponding system conﬁgurations, enabling\nreliable system proﬁling [1, pp. 2-4].\n3) Advantages: Mowery and Shacham demonstrated that\nimplementing Canvas ﬁngerprinting is straightforward, re-\nquiring minimal lines of client-side code. It leverages basic\nJavaScript functions and can be deployed across all major\nweb applications. The ﬁngerprinting process is discrete for\nusers and challenging to block because Canvas operations are\ncommon in web applications, making it difﬁcult to distinguish\nnormal operations from ﬁngerprinting scripts. The simplicity\nof ﬁngerprint creation enables high speed, stability, unique-\nness, and entropy, making it particularly valuable for real-time\ntracking applications [1, pp. 1-5].\n4) Disadvantages: Changes in browser environments, such\nas updates or graphic settings, can affect the stability of the\nﬁngerprint. Variability in hardware and software conﬁgurations\ncan lead to inconsistencies. As an active technique, executing\ncode on the client side is necessary, posing risks of detection\nand potential blockage by blocklists targeting known ﬁnger-\nprinting scripts [1, pp. 3-7]. While imperceptible to users,\nthe limited interfaces to retrieve generated Canvas data can\nbe monitored and manipulated by extensions. Add-ons like\nCanvasBlocker allow users to prevent data retrieval or manip-\nulate Canvas data, continuously generating new ﬁngerprints\nto prevent identiﬁcation [19]. Finally, while implementing\nCanvas ﬁngerprinting is “relatively simple”, analyzing and\ninterpreting the data can be complex and may require expertise\nin the ﬁeld [1, pp. 6-8].\nD. WebGL Fingerprinting\n1) Deﬁnition and Basics: WebGL ﬁngerprinting is a tech-\nnique utilizing the WebGL JavaScript API, based on OpenGL\nES 2.0, allowing web applications to render both 2D and\n3D graphics with high performance by directly accessing the\nGPU [20]. Unlike Canvas ﬁngerprinting, which focuses on 2D\ngraphics and identiﬁes software differences mainly through\nfonts and graphic libraries, WebGL ﬁngerprinting provides\ndeeper and more precise detection capabilities. It captures\nunique hardware information, particularly details about the\ngraphics processor, distinguishing it signiﬁcantly from Can-\nvas ﬁngerprinting and broadening its application for tracking\npurposes [1, p. 4].\n2) Analysis: WebGL ﬁngerprinting uses a Canvas ele-\nment to access the API. Similar to Canvas ﬁngerprinting,\nit creates an invisible element performing 3D operations\nin the background to collect data without user interac-\ntion. A straightforward application involves accessing spe-\nciﬁc variables, such as UNMASKED VENDOR WEBGL and\nUNMASKED RENDERER WEBGL, using the getParameter\nfunction in the WebGL context. These variables provide in-\nformation about the graphics hardware manufacturer (Vendor)\nand model (Renderer). For example, a Vendor entry like\n“Intel” indicates an integrated graphics unit, while “Nvidia”\ncombined with “GeForce GTX 970” as Renderer indicates a\ndedicated graphics card. These details can reveal insights into\nthe system being used [21, p. 17]. Privacy concerns have led\nbrowsers like Apple’s WebKit to provide generic information\ninstead of speciﬁc data to protect user privacy. Since 2020,\nWebKit has masked Vendor and Renderer information, as\nwell as shading language details [22]. Firefox similarly groups\ngraphics processor models into categories instead of displaying\nspeciﬁc models. In practice, this means that a Nvidia card\nfrom the 900 series onward, for example, is reported as\n“GeForce GTX 980”. In summary, research investigating hard-\nware ﬁngerprinting using HTML5 demonstrated the capability\nto identify devices based on GPU performance. It utilizes the\ngraphics processor’s clock frequency and clock skew to render\ncomplex 3D graphics, measuring GPU performance based on\nthe number of frames rendered within a period, providing\ninsights into the GPU’s frequency and core count [23, pp.\n3-4].\n3) Advantages: As demonstrated by Cao et al., WebGL can\noffer high uniqueness and stability [24]. Its direct interface\nwith the system ensures consistency across browsers, making\nit challenging for users to evade identiﬁcation through simple\nbrowser changes or reinstalls. Despite changes to enhance\nWebGL’s resistance to ﬁngerprinting, it reliably identiﬁes\n\nusers. The successor to WebGL, WebGPU, is currently in\ndevelopment, promising even more privacy risks due to its\ncloser hardware access, allowing for classiﬁcations with up\nto 98% accuracy in 150 milliseconds, a reduction from the 8\nseconds WebGL took [25].\n4) Disadvantages: The complexity of WebGL ﬁngerprint-\ning is signiﬁcantly higher compared to previous techniques,\nnecessitating careful consideration whether a simpler Canvas\napproach combined with other methods might be accurate\nenough for speciﬁc use cases. Intensive tasks in a 3D envi-\nronment can also strain the target system, leading to longer\nﬁngerprint creation times [1, p. 4]. Implementing WebGL\nrequires caution, as shown by the cases of Laperdrix et al.\nand Cao et al., and opting for a ready-made solution might\nbe advisable. Moreover, WebGL shares Canvas’s vulnerability\nto blocked or misread data if detection methods rely on\ndifferences in rendered graphics. Even novel methods like\nDrawnApart can be mitigated through countermeasures, such\nas limiting to a single EU [26, p. 12]. WebGL may also\nnot be available or disabled on some devices, necessitating\nconsideration of alternatives, such as using the 2D Canvas.\nE. Audio Fingerprinting\n1) Deﬁnition and Basics:\nThe Web Audio API is a\nJavaScript interface for processing and synthesizing audio sig-\nnals in the web browsers, part of the HTML5 standard. It can\nidentify systems through manufacturing differences in audio\nhardware. Methods analyze signal processing characteristics,\nhardware differences, and system responses to speciﬁc audio\nsignals for ﬁngerprinting [27, pp. 1107-1109].\n2) Analysis: Audio ﬁngerprinting involves various acoustic\nmeasurements to create a unique device ﬁngerprint. It requires\nan AudioContext linking an AudioBuffer, Oscillator, and Com-\npressor. The AudioBuffer represents a small audio segment,\nwhile the Oscillator generates a waveform at a deﬁned fre-\nquency. The Compressor manipulates the audio signal. The\nunique waveform generated and manipulated reﬂects system\ncharacteristics, allowing a unique ﬁngerprint to be created\nusing a hash function on the ﬁnal waveform. This method,\nknown as “Dynamic Compressor (DC)”, is highly stable,\nproducing the same ﬁngerprint for the user each time using a\nreliable hash function [27, pp. 1109-1111].\nAnother method is the “Fast Fourier Transform” (FFT), con-\nverting audio signals from the time domain to the frequency\ndomain. It measures hardware implementation differences to\nidentify characteristics. FFT is less stable than DC, often\nrequiring multiple attempts for consistent results. DC and FFT\nare often used together for more reliable outcomes [27, pp.\n1111-1114]. Researchers compared the techniques, including\ncustom-designed ones, alongside DC and FFT. These included\ncreating “Custom Signals”, “Merged Signals”, and analyzing\ngenerated AM and FM waves. All techniques showed good\nstability, averaging two to four attempts for ﬁngerprint match-\ning [28, pp. 3-5].\n3) Advantages: The generated ﬁngerprints are highly sta-\nble and can differentiate systems based on their properties.\nQueiroz and Feitosa showed that mobile devices using Firefox\ncould be consistently recognized and grouped by their stable\nﬁngerprints [27, p. 1119]. Techniques like DC are simple\nto implement and offer high stability. Other promising tech-\nniques, especially when used together, could enhance potential\nbut are more challenging to implement [28, pp. 1-3].\n4) Disadvantages: While audio ﬁngerprinting offers high\nstability, it lacks uniqueness and accuracy on its own and\nshould be used with other ﬁngerprinting techniques [27, p.\n1119]. Additionally, the Web Audio API can be disabled on\ndevices or manipulated by add-ons like “Canvas Blocker”,\nwhich also blocks and manipulates Canvas and WebGL.\nF. Font Fingerprinting\n1) Deﬁnition and Basics: Font ﬁngerprinting is a browser\nﬁngerprinting technique that identiﬁes devices by recognizing\ninstalled fonts. This method creates unique digital ﬁngerprints\nby combining fonts with other data points, which can be used\nfor tracking and identiﬁcation purposes [29, p. 314].\n2) Analysis: After the end of Adobe Flash, a new method\nfor font recognition was needed. JavaScript uses a fallback\nmechanism to recognize fonts by comparing the dimensions\nof texts in speciﬁc fonts with expected values. Invisible div\nelements and the canvas element are used to identify installed\nfonts [29, p. 311] [30, p. 12]. The experimental Local Font\nAccess API requires user consent and is therefore not suitable\nfor ﬁngerprinting [31].\n3) Advantages: Font recognition offers high entropy and\nstability since fonts are rarely changed. This allows the\nidentiﬁcation of the operating system and installed software\npackages like Ofﬁce or Photoshop [3, p. 7].\n4) Disadvantages: Without Flash, font recognition is done\nthrough “brute-force” methods, reducing accuracy if unknown\nfonts are installed. Similar fonts can lead to false positives.\nExtensions and adjustments, such as those in Apple’s WebKit,\ncan manipulate or restrict recognition [24, p. 10] [29, p. 311].\nG. Screen Fingerprinting\n1) Deﬁnition and Basics: Screen ﬁngerprinting identiﬁes\na device by analyzing various screen-related characteristics,\nincluding screen resolution, pixel depth, color depth, and\nbrowser window size. This method leverages the uniqueness\nof screen conﬁgurations and browser modiﬁcations, which can\ncreate rare resolution combinations [32, p. 20].\n2) Analysis: JavaScript provides attributes for screen and\nbrowser window characteristics through the window.screen ob-\nject, offering details like color depth (colorDepth), screen ori-\nentation (screenOrientation), and screen dimensions (screen-\nHeight, screenWidth). Values, such as window.innerWidth and\nwindow.innerHeight, determine the browser window’s inner\narea, which can be altered by toolbars or bookmark bars [24,\np. 3].\n3) Advantages: Screen and window resolution information\ntypically have high entropy, making them useful for stabiliz-\ning ﬁngerprints when combined with other techniques. This\nmethod is particularly effective for distinguishing between\n\ndesktop, tablet, and mobile devices, as these have distinct\nresolutions and aspect ratios compared to standardized desktop\nscreens [27, p. 277].\n4) Disadvantages: Since values are derived from browser\nattributes rather than hardware tests, they can be limited or\naltered by extensions or privacy settings. Browsers like TOR\nset the window to a ﬁxed size of 1000x1000 pixels, reducing\nuniqueness, and browsers like Firefox always report a color\ndepth of 24. Additionally, users with multiple monitors or\nthose using zoom functions can affect the accuracy of screen\nﬁngerprinting, as there is no reliable way to determine the\nzoom factor directly, which reduces entropy [24, p. 10].\nH. WebRTC Fingerprinting\n1) Deﬁnition and Basics: WebRTC is a standard and ac-\ncessible JavaScript interface available in most browsers. It\nfacilitates real-time communication over stateless HTTP by\nestablishing direct connections between participants, allowing\nthe extraction of local network adapter information. This can\nreveal private and public IP addresses, which can be used for\nﬁngerprinting or identifying users behind proxies or VPNs [30,\np. 12]. It also provides information about connected devices,\nsuch as microphones, webcams, and speakers.\n2) Analysis: Unlike other browser mechanisms like camera\nor microphone access, establishing a WebRTC connection\nrequires no permissions or user notiﬁcations. After connecting\nto the target computer via a Session Traversal Utilities for\nNAT (STUN) server, IP addresses can be read from the\nRTCPeerConnection object as iceCandidates [33, p. 667]. This\ndata can be used for ﬁngerprinting, and WebRTC can further\nenumerate the local network to build a unique proﬁle of\nthe target’s environment. It can also read all local adapter\naddresses, including those for VPNs and virtual machines\n[33, p. 667-668]. The DetectRTC project [34] demonstrates\nWebRTC’s capabilities, highlighting information about micro-\nphones, webcams, and speakers. While exact device names\nrequire permissions, WebRTC can read Media Device IDs,\nwhich can contribute to unique ﬁngerprints.\n3) Advantages: Extracting private and public IPs provides\ndeep insights, especially for identifying targets behind VPNs\nor proxies. No other technique can silently reveal addresses\nbehind Network Address Translation (NAT) [35, p. 273]. The\ncollected data is highly unique; a study with 80 devices found\nover 97% uniqueness using only WebRTC [33, p. 668].\n4) Disadvantages: WebRTC might be disabled in the target\nbrowser, or extensions might block its usage without user\nconsent. Accessing Media Device IDs requires permission,\nalerting users to potential background activities, making it\nunsuitable for stealth operations. Additionally, WebRTC relies\non STUN servers, either self-hosted or third-party, adding\ndependency considerations for its use.\nI. CSS Fingerprinting\n1) Deﬁnition and Basics: Different to the active ﬁnger-\nprinting techniques using JavaScript, CSS ﬁngerprinting is\na passive method. CSS is a stylesheet language primarily\nused to enhance the presentation of HTML elements. Over\ntime, the CSS speciﬁcation has expanded to include selectors\nand ﬁlters, enabling limited dynamic selections, which this\ntechnique leverages [36, p. 10].\n2) Analysis: Until 2010, the :visited selector could identify\nif a website had been visited by changing the link color,\ndetectable via JavaScript. After this was patched, researchers\nexplored time-based methods to read user history, but these\nrequired JavaScript and were impractical [37, p. 4]. In 2015,\nTakei et al. introduced a JavaScript-free method using CSS\nproperties and multiple @media queries to fetch URLs based\non deﬁned rules. The server could then identify system proper-\nties like screen dimensions, resolution, touchscreen presence,\ninstalled fonts, browser, and OS from the requesting IP address\nand URL parameters [38, p. 3-5]. A current GitHub project\ndemonstrates this method’s practical capabilities [39].\n3) Advantages: CSS ﬁngerprinting’s independence from\nJavaScript allows it to identify even cautious users who block\nJavaScript or use extensions like NoScript. This technique can\neven detect if JavaScript is disabled via noscript tags [38, p.\n2]. Due to its limited use and lesser-known status, no effective\nuser solutions currently exist to prevent it.\n4) Disadvantages: Takei et al.’s method provides limited\ndata, which, without JavaScript, can only be supplemented by\ntechniques like header analysis. Oliver Brotchie notes in his\nproject repository that the method is not currently scalable, as\neach request requires over 1MB of CSS ﬁles to be downloaded.\nHowever, he warns that upcoming CSS Values 4 implemen-\ntation could reduce download sizes signiﬁcantly, making the\nmethod more practical. Additionally, font recognition relies on\nbrute-forcing, which can be noticeable in network trafﬁc.\nJ. Additional JavaScript Attributes\n1) Deﬁnition and Basics: Most of the previously dis-\ncussed techniques actively use JavaScript to extract infor-\nmation from various interfaces. Additional possibilities are\nbrieﬂy mentioned here to provide a more comprehensive\npicture. Since these techniques share many characteristics with\nother JavaScript-based methods, listing their pros and cons is\nomitted.\n2) Analysis: The navigator object in browsers provides\ninformation, such as DoNotTrack status, user agent details,\nplatform, languages, cookies usage, granted and available per-\nmissions, and time zone [29, p. 9]. JavaScript implementation\nvaries between browsers and versions, and Mowery et al.\ndemonstrated that these differences are measurable and can\nindicate the software and hardware used [1].\nAdditionally, there are differences in the availability and\nexecution of functions, which offers an alternative way to\ndetect user agents if manipulated by extensions. Another\ntechnique that caused concern among Tor users is the use of\nthe getClientRects function to obtain precise DOM element\ndata, even with Canvas disabled. These factors can vary based\non implementation, font sizes, and screen resolutions, enabling\nidentiﬁcation in the otherwise anonymous browser [40]. This\n\nvulnerability has been ﬁxed in Tor but remains exploitable in\nother browsers [41].\n3) Advantages: JavaScript-based ﬁngerprinting techniques\nare highly versatile and widely applicable since JavaScript\nis essential for web functionality. These methods can collect\na broad range of information, such as user agent details,\ntime zones, and system settings, often without requiring user\nconsent or visibility. The stealthy nature of JavaScript ﬁn-\ngerprinting allows it to operate in the background, making\nit difﬁcult for users to detect. Moreover, JavaScript-based\nattributes work consistently across different browsers, enabling\neffective cross-browser tracking.\n4) Disadvantages: However, JavaScript ﬁngerprinting is\nlimited by browser-speciﬁc implementations, which can result\nin inconsistent data collection. Privacy-focused browsers like\nTor or extensions, such as NoScript, actively block or obscure\nJavaScript-based tracking, reducing its effectiveness. Addition-\nally, users are becoming more aware of privacy risks and in-\ncreasingly use tools to disable or modify JavaScript functions.\nFinally, updates to browsers may close vulnerabilities or alter\nfeatures that JavaScript ﬁngerprinting relies on, decreasing its\nlong-term viability.\nK. Advanced Techniques Using Machine Learning\n1) Deﬁnition and Basics: Most active techniques discussed\nso far use JavaScript to gather hardware and software in-\nformation. They rely on unique data combinations based\non implementation quirks or directly available information.\nNewer methods often employ “side-channels”, capturing addi-\ntional data by observing behavioral differences during various\noperations within the execution environment. Methods like\nplugin enumeration (cf. Section III-B), font ﬁngerprinting (cf.\nSection III-F), and CSS ﬁngerprinting (cf. Section III-I) use\nthis approach in simple forms by testing known combinations\nto gain indirect information. These side-channel methods can\nbe implemented with minimal effort but can also be used\nin more sophisticated ways with machine learning to gather\notherwise unobtainable information [42, p. 1].\n2) Analysis: Wang et al. explored using cache usage, mem-\nory consumption, and CPU activity to identify visited web-\nsites. Previously, CSS selectors were used to reveal browsing\nhistory, posing signiﬁcant privacy risks and leading to prompt\nﬁxes. Side-channel techniques employ various tricks to ana-\nlyze system behavior more accurately. Complex calculations\nstress the hardware in the background, and machine learning\nmodels categorize the results with expected values from known\nsites. Tests showed 80-90% accuracy in identifying websites\n[42, p. 3-5]. Further research is needed, but implementations\nusing WebAssembly [43] and the Performance API [44] are\nconceivable.\n3) Advantages: This method is invisible to the user and\nprovides insightful information not available through conven-\ntional means. Currently, there are no methods to protect users\nfrom such techniques [42, pp. 1-3].\n4) Disadvantages: While previous techniques aimed to\nidentify a user over time, this method could offer dangerous\ninsights into the person’s behavior behind the screen. However,\nthe technique is still in its initial stage and remains a theoretical\napproach not yet tested in the real world. It is unlikely to be\nreliably used by actors in the near future [42, p. 6].\nIV. DISCUSSION\nBrowser ﬁngerprinting can be used positively for security,\nas shown by technologies like BrFast and private, passive\nuser recognition methods. However, there’s a risk of misuse,\nespecially in advertising. Personalized ads signiﬁcantly impact\nGeneration Z, who discover products primarily through social\nmedia. The advertising industry, driven by creating accurate\nuser proﬁles, heavily invests in digital advertising, with data-\ndriven ads accounting for 60-70% of digital ad revenue in\nGermany. Traditionally, data collection relied on cookies, but\nusers developed ways to avoid tracking, such as deleting\ncookies or using incognito mode. Unlike cookies, browser\nﬁngerprints are collected in the background and are not easily\naltered. GDPR regulations mandate user consent for data\ncollection, but enforcement is inconsistent, and compliance\nwith ﬁngerprinting guidelines remains unclear, even with new\nlaws like Germany’s TTDSG [45].\nOnline tracking is ubiquitous, affecting nearly all user\ngroups. A 2016 study of the top 1 million websites revealed\nextensive tracking, with services like Google and Facebook\npresent on over 10% of sites. Post-GDPR, ﬁngerprinting\nscripts increased to 68.8% of the top 10,000 sites. A study with\n234 participants found that demographics like age, gender,\neducation, IT background, and privacy awareness inﬂuenced\ntrackability, with men and those with higher education being\nless trackable. Despite understanding ﬁngerprinting, many par-\nticipants believed they could protect themselves from it. The\nAmIUnique study, with over 100,000 ﬁngerprints, indicated\na bias towards more privacy-aware internet users. Current\nresearch from Friedrich-Alexander-University shows that most\nstudy participants are male and well-educated, suggesting that\nwhile almost everyone is affected by browser ﬁngerprinting,\nonly a small, informed group actively researches and under-\nstands it [46].\nBrowser ﬁngerprinting, as explored through various meth-\nods in this paper (cf. Table I), represents a comprehensive\nand evolving threat to digital privacy. Each ﬁngerprinting\ntechnique, from HTTP Header Attributes to more sophisticated\napproaches like Canvas and WebGL Fingerprinting, offers\nunique data points, but their power lies in their combinatorial\nuse. While individual methods may not be highly unique or\nstable, their integration enables more persistent and accurate\nuser identiﬁcation across devices and browsers. Techniques\nlike WebRTC and Font Fingerprinting complement traditional\nmethods by exposing additional layers of system and network\ndata. Furthermore, the advancement of machine learning-\nbased ﬁngerprinting is pushing the boundaries of tracking,\nallowing for the analysis of side-channel behaviors, such as\nCPU or memory usage. This convergence of methods creates\na powerful, multi-dimensional proﬁling system that is increas-\ningly resistant to countermeasures, challenging both privacy\n\nTABLE I\nOVERVIEW OF FINGERPRINTING METHODS\nFingerprinting Method\nUniqueness\nStability\nEntropy\nImpact on User Privacy\nDefense Techniques\nHTTP\nHeader\nAttributes\nLow\nModerate\nLow\nModerate impact: limited detail but\nuseful when combined with other\nmethods.\nAltering or masking headers (e.g.,\nrandomizing User-Agent).\nEnumeration of Browser\nPlugins\nModerate\nHigh\nHigh\nHigh impact: reveals sensitive data,\nsuch as installed plugins.\nDisabling\nplugin\nenumeration,\navoiding unnecessary add-ons.\nCanvas Fingerprinting\nHigh\nModerate\nHigh\nHigh impact: generates unique ﬁn-\ngerprints based on rendering.\nCanvasBlocker extension to block\nor manipulate rendering.\nWebGL Fingerprinting\nHigh\nHigh\nHigh\nHigh\nimpact:\ncollects\ndetailed\nhardware data for tracking.\nBlock or manipulate WebGL out-\nputs.\nAudio Fingerprinting\nModerate\nHigh\nModerate\nHigh impact: captures unique audio\nprocessing details.\nDisable Web Audio API, use pri-\nvacy extensions.\nFont Fingerprinting\nHigh\nHigh\nModerate\nHigh impact: identiﬁes installed\nfonts, making it persistent.\nLimit font access with privacy-\nfocused browsers (e.g., Tor).\nScreen Fingerprinting\nModerate\nHigh\nLow\nModerate impact: uses screen res-\nolution and window size but less\neffective on mobile devices.\nFix window size or limit resolution\nreporting with privacy browsers.\nWebRTC Fingerprinting\nVery High\nHigh\nVery High\nVery high impact: exposes real IP\naddresses, even behind VPNs.\nDisable WebRTC, use extensions\nthat block data collection.\nCSS Fingerprinting\nLow\nModerate\nLow\nLow impact: provides limited sys-\ntem and style information.\nLimit or disable CSS ﬁngerprinting\nthrough extensions or scripts.\nJavaScript Attributes\nModerate\nHigh\nModerate\nModerate\nimpact:\nuses\nvarious\nbrowser features for tracking.\nDisable\nunnecessary\nJavaScript\nfunctions or use privacy extensions.\nAdvanced\nMachine\nLearning Fingerprinting\nVery High\nVery High\nVery High\nVery\nhigh\nimpact:\nuses\nside-\nchannel data (e.g., CPU/cache) for\ntracking.\nLimit access to Performance API\nand WebAssembly, emerging de-\nfenses needed.\nframeworks and user efforts to remain anonymous online.\nTherefore, the future of browser ﬁngerprinting lies in this\nsynergistic exploitation of both passive and active methods,\nmaking it a critical issue in the broader context of digital\nsurveillance and privacy regulation.\nV. CONCLUSION\nA. Summary of the Research Outcome\nThis contribution has examined browser ﬁngerprinting, a\ngrowing technique in online tracking. It has demonstrated that\nbrowser ﬁngerprinting is a sophisticated method for identifying\nand tracking users online without traditional methods like\ncookies.\nThe analysis highlighted that browser ﬁngerprinting poses\na complex challenge from both technical and privacy per-\nspectives. While it provides companies and advertisers with\ndetailed insights into user behavior for targeted advertising, it\nraises signiﬁcant privacy concerns as users are often tracked\nwithout their knowledge or consent. Despite stricter privacy\nlaws like the GDPR in the EU, browser ﬁngerprinting remains\na grey area. Anti-ﬁngerprinting techniques are limited and\ncontinually evolving to keep up with new tracking methods.\nIn conclusion, browser ﬁngerprinting plays and will con-\ntinue to play a signiﬁcant role in the digital landscape.\nBoth users and regulatory bodies must increase awareness of\nbrowser ﬁngerprinting practices and their implications.\nB. Implications for Practice\nConsent and Cookies: Always accept only the necessary\ncookies in cookie banners and regularly delete cookies to hin-\nder tracking and ﬁngerprinting. This is particularly important\nfor news sites, which often misuse collected data without user\nconsent.\nBlending in with the Masses: Reducing APIs and data\nsources for ﬁngerprinting can ironically make users more iden-\ntiﬁable [47]. Thus, widely adopted browsers and protection\nmechanisms should be used to stay less conspicuous.\nBrowser Choice: Choose browsers with robust privacy pro-\ntections. On iOS, Safari is recommended due to its advanced\ntracking protection and large user base [48]. For Android,\nthe Mull browser is highly rated for ﬁngerprinting protection,\nwhile Brave is a good, widely-used alternative. On desktops,\nBrave, Librewolf, and Mullvad browsers are recommended for\ntheir privacy features and user bases [49].\nBrowser Extensions: Limit the use of browser extensions,\nas they can become sources of unique information. While some\nextensions block known trackers or modify API outputs, these\nprotections are often already built into recommended browsers\nlike Brave and Librewolf [18] [47].\nC. Future Research\nFuture research in browser ﬁngerprinting should focus on\nseveral key areas. First, countermeasures and defense mech-\nanisms need to be explored further, especially in mitigating\nthe newer techniques that leverage machine learning and\nside-channel attacks. These advanced methods can bypass\ntraditional privacy safeguards, such as disabling JavaScript or\nusing incognito modes, making the development of more ro-\nbust anti-ﬁngerprinting technologies imperative. Additionally,\nresearch should explore the ethics and regulatory frameworks\nsurrounding ﬁngerprinting, examining how existing privacy\nand data protection laws like GDPR can be adapted to better\naddress ﬁngerprinting practices. Another promising direction\n\nis improving cross-device tracking prevention by understand-\ning how ﬁngerprinting works across different platforms and\nhardware. Lastly, investigating user awareness and educational\ntools on ﬁngerprint privacy risks will help empower the general\npublic to protect their digital identities more effectively. Thus,\nfuture research should focus on developing more effective\nprivacy techniques to balance commercial interests and user\nprivacy rights.\nREFERENCES\n[1] K. Mowery and H. Shacham, “Pixel perfect: Fingerprinting canvas in\nHTML5,” Proceedings of W2SP, vol. 2012, 2012.\n[2] K.\nSzymielewicz\nand\nB.\nBudington.\n(2018)\nThe\nGDPR\nand\nBrowser\nFingerprinting:\nHow\nIt\nChanges\nthe\nGame\nfor\nthe\nSneakiest\nWeb\nTrackers.\nAccessed:\n2024-09-27.\n[Online].\nAvailable: https://www.eff.org/de/deeplinks/2018/06/gdpr-and-browser-\nﬁngerprinting-how-it-changes-game-sneakiest-web-trackers\n[3] D. Zhang, J. Zhang, Y. Bu, B. Chen, C. Sun, and T. Wang, “A\nSurvey of Browser Fingerprint Research and Application,” Wireless\nCommunications and Mobile Computing, vol. 2022, no. 1, p. 3363335,\n2022. [Online].\nAvailable:\nhttps://onlinelibrary.wiley.com/doi/abs/10.\n1155/2022/3363335\n[4] P. Eckersley, “How unique is your web browser?” in Privacy Enhancing\nTechnologies, M. J. Atallah and N. J. Hopper, Eds.\nBerlin, Heidelberg:\nSpringer Berlin Heidelberg, 2010, pp. 1–18.\n[5] S. Englehardt and A. Edelstein. (2021) Firefox 85 Cracks Down on\nSupercookies. Accessed: 2024-09-27. [Online]. Available: https://blog.\nmozilla.org/security/2021/01/26/supercookie-protections/\n[6] E. Woollacott. (2021) Browser ﬁngerprinting more prevalent on the\nweb now than ever before. Accessed: 2024-09-27. [Online]. Avail-\nable:\nhttps://portswigger.net/daily-swig/browser-ﬁngerprinting-more-\nprevalent-on-the-web-now-than-ever-before-research\n[7] R. Koch. (2019) Cookies, the GDPR, and the ePrivacy Directive.\nAccessed: 2024-09-27. [Online]. Available: https://gdpr.eu/cookies/\n[8] U. Iqbal, S. Englehardt, and Z. Shaﬁq, “Fingerprinting the Fingerprint-\ners: Learning to Detect Browser Fingerprinting Behaviors,” in 2021\nIEEE Symposium on Security and Privacy (SP).\nIEEE, 05 2021, pp.\n1143–1161.\n[9] G.\nAcar.\n(2014)\nBrowser\nFingerprinting\nand\nthe\nOnline-\nTracking\nArms\nRace.\nAccessed:\n2024-09-27.\n[Online].\nAvail-\nable:\nhttps://www.esat.kuleuven.be/cosic/news/the-web-never-forgets-\npersistent-tracking-mechanisms-in-the-wild/\n[10] “Request header,” accessed: 2024-09-27. [Online]. Available: https://\ndeveloper.mozilla.org/en-US/docs/Glossary/Request header\n[11] “HTTP/2\nﬁngerprinting:\nA\nrelatively-unknown\nmethod\nfor\nweb\nﬁngerprinting,”\naccessed:\n2024-09-27.\n[Online].\nAvailable:\nhttps://\nlwthiker.com/networks/2022/06/17/http2-ﬁngerprinting.html\n[12] P. Laperdrix, W. Rudametkin, and B. Baudry, “Beauty and the Beast:\nDiverting Modern Web Browsers to Build Unique Browser Fingerprints,”\nin 2016 IEEE Symposium on Security and Privacy (SP), 2016, pp. 878–\n894.\n[13] “User-Agent,”\naccessed:\n2024-09-27.\n[Online].\nAvailable:\nhttps://\ndeveloper.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent\n[14] B. Wolford. (2024) What are the GDPR consent requirements?\nAccessed:\n2024-09-27.\n[Online].\nAvailable:\nhttps://gdpr.eu/gdpr-\nconsent-requirements/\n[15] “Navigator:\nplugins\nproperty,”\naccessed:\n2024-09-27.\n[On-\nline].\nAvailable:\nhttps://developer.mozilla.org/en-US/docs/Web/API/\nNavigator/plugins\n[16] “Extension Detector,” accessed: 2024-09-27. [Online]. Available: https://\ngithub.com/z0ccc/extension-detector\n[17] “How\nad\nblockers\ncan\nbe\nused\nfor\nbrowser\nﬁngerprinting,”\naccessed:\n2024-09-27.\n[Online].\nAvailable:\nhttps://ﬁngerprint.com/\nblog/ad-blocker-ﬁngerprinting/\n[18] S. Karami, P. Ilia, K. Solomos, and J. Polakis, “Carnus: Exploring the\nPrivacy Threats of Browser Extension Fingerprinting,” in 27th Annual\nNetwork and Distributed System Security Symposium, NDSS 2020, San\nDiego, California, USA, February 23-26, 2020.\nThe Internet Society,\n2020.\n[19] “CanvasBlocker,” accessed: 2024-09-27. [Online]. Available: https://\ngithub.com/kkapsner/CanvasBlocker\n[20] “WebGL: 2D and 3D graphics for the web,” accessed: 2024-09-27.\n[Online]. Available: https://developer.mozilla.org/en-US/docs/Web/API/\nWebGL API\n[21] T. Stephenson, “A Comparative Study on Analyses of Browser Finger-\nprinting,” Ph.D. dissertation, Wesleyan University, 2023.\n[22] “WebKit,”\naccessed:\n2024-09-27.\n[Online].\nAvailable:\nhttps://github.com/WebKit/WebKit/commit/\nae710d34c23858295b385e3f95ad7f6edd29f9d7\n[23] G. Nakibly, G. Shelef, and S. Yudilevich, “Hardware Fingerprinting\nUsing HTML5,” arXiv preprint arXiv:1503.01408, 03 2015.\n[24] Y. Cao, S. Li, and E. Wijmans, “(Cross-)Browser Fingerprinting via\nOS and Hardware Level Features,” in Network and Distributed System\nSecurity Symposium, 2017.\n[25] M. Mantel. (2022) Browser-Fingerprinting: PCs, Smartphones & Co.\nlassen sich ¨uber die GPU tracken. Accessed: 2024-09-27. [Online].\nAvailable:\nhttps://www.heise.de/news/Browser-Fingerprinting-PCs-\nSmartphones-Co-lassen-sich-ueber-die-GPU-tracken-6345233.html\n[26] Laor et al., “DRAWNAPART: A Device Identiﬁcation Technique\nbased on Remote GPU Fingerprinting,” ArXiv, vol. abs/2201.09956,\n2022.\n[Online].\nAvailable:\nhttps://api.semanticscholar.org/CorpusID:\n246276013\n[27] J. S. Queiroz and E. L. Feitosa, “A Web Browser Fingerprinting\nMethod Based on the Web Audio API,” Comput. J., vol. 62, pp.\n1106–1120, 2019. [Online]. Available: https://api.semanticscholar.org/\nCorpusID:86644316\n[28] S. Chalise and P. Vadrevu, “A Study of Feasibility and Diversity of Web\nAudio Fingerprints,” arXiv preprint arXiv:2107.14201, 2021.\n[29] A. G´omez-Boix, P. Laperdrix, and B. Baudry, “Hiding in the Crowd:\nan Analysis of the Effectiveness of Browser Fingerprinting at Large\nScale,” in Proceedings of the 2018 World Wide Web Conference, ser.\nWWW ’18.\nRepublic and Canton of Geneva, CHE: International\nWorld Wide Web Conferences Steering Committee, 2018, p. 309–318.\n[Online]. Available: https://doi.org/10.1145/3178876.3186097\n[30] S. Englehardt and A. Narayanan, “Online Tracking: A 1-million-site\nMeasurement and Analysis,” in Proceedings of the 2016 ACM SIGSAC\nConference on Computer and Communications Security, ser. CCS ’16.\nNew York, NY, USA: Association for Computing Machinery, 2016,\np. 1388–1401. [Online]. Available: https://doi.org/10.1145/2976749.\n2978313\n[31] “Local Font Access API,” accessed: 2024-09-27. [Online]. Avail-\nable:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Local Font\nAccess API\n[32] P. Laperdrix, N. Bielova, B. Baudry, and G. Avoine, “Browser\nFingerprinting: A Survey,” ACM Trans. Web, vol. 14, no. 2, apr 2020.\n[Online]. Available: https://doi.org/10.1145/3386040\n[33] A. Reiter and A. Marsalek, “WebRTC: your privacy is at risk,” in\nProceedings of the Symposium on Applied Computing, ser. SAC ’17.\nNew York, NY, USA: Association for Computing Machinery, 2017, p.\n664–669. [Online]. Available: https://doi.org/10.1145/3019612.3019844\n[34] “DetectRTC,” accessed: 2024-09-27. [Online]. Available: https://github.\ncom/muaz-khan/DetectRTC\n[35] V. Bernardo and D. Domingos, “Web-based Fingerprinting Techniques,”\nin\nProceedings\nof\nthe\n13th\nInternational\nJoint\nConference\non\nE-Business and Telecommunications,\nser. ICETE 2016.\nSetubal,\nPRT: SCITEPRESS - Science and Technology Publications, Lda,\n2016,\np.\n271–282.\n[Online].\nAvailable:\nhttps://doi.org/10.5220/\n0005965602710282\n[36] T. Bujlow, V. Carela-Espa˜nol, J. Sol´e-Pareta, and P. Barlet-Ros, “A\nSurvey on Web Tracking: Mechanisms, Implications, and Defenses,”\nProceedings of the IEEE, vol. 105, no. 8, pp. 1476–1510, 2017.\n[37] L. Olejnik, C. Castelluccia, and A. Janc, “Why Johnny Can’t Browse\nin Peace: On the Uniqueness of Web Browsing History Patterns,” 12th\nPrivacy Enhancing Technologies Symposium (PETS 2012), 07 2012.\n[Online]. Available: https://petsymposium.org/2012/papers/hotpets12-4-\njohnny.pdf\n[38] N. Takei, T. Saito, K. Takasu, and T. Yamada, “Web Browser Finger-\nprinting Using Only Cascading Style Sheets,” in 2015 10th International\nConference on Broadband and Wireless Computing, Communication and\nApplications (BWCCA), 2015, pp. 57–63.\n[39] “CSS-Fingerprint,” accessed: 2024-09-27. [Online]. Available: https://\ngithub.com/OliverBrotchie/CSS-Fingerprint\n[40] “Advanced\nTor\nBrowser\nFingerprinting,”\naccessed:\n2024-09-\n27.\n[Online].\nAvailable:\nhttp://jcarlosnorte.com/security/2016/03/06/\nadvanced-tor-browser-ﬁngerprinting.html\n\n[41] “Investigate impact of ﬁngerprinting via getClientRects(),” accessed:\n2024-09-27.\n[Online].\nAvailable:\nhttps://gitlab.torproject.org/tpo/\napplications/tor-browser/-/issues/18500\n[42] H. Wang, H. Sayadi, A. Sasan, P. D. Sai Manoj, S. Rafatirad, and\nH. Homayoun, “Machine Learning-Assisted Website Fingerprinting At-\ntacks with Side-Channel Information: A Comprehensive Analysis and\nCharacterization,” in 2021 22nd International Symposium on Quality\nElectronic Design (ISQED), 2021, pp. 79–84.\n[43] “WebAssembly,” accessed: 2024-09-27. [Online]. Available: https://\ndeveloper.mozilla.org/en-US/docs/WebAssembly\n[44] “High\nprecision\ntiming,”\naccessed:\n2024-09-27.\n[Online].\nAvail-\nable:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Performance\nAPI/High precision timing\n[45] “Browser Fingerprinting und das TDDDG: Erlaubt oder nicht? [Browser\nFingerprinting and the TDDDG: Allowed or not?],” accessed: 2024-09-\n27. [Online]. Available: https://dr-dsgvo.de/browser-ﬁngerprinting-und-\ndas-ttdsg/\n[46] G. Pugliese, C. Riess, F. Gassmann, and Z. Benenson, “Long-Term\nObservation on Browser Fingerprinting: Users’ Trackability and Per-\nspective,” Proceedings on Privacy Enhancing Technologies, vol. 2020,\npp. 558–577, 05 2020.\n[47] N. Al-Fannah and C. Mitchell, “Too little too late: can we control\nbrowser ﬁngerprinting?” Journal of Intellectual Capital, vol. ahead-of-\nprint, 01 2020.\n[48] K. Kollnig, A. Shuba, M. Van Kleek, R. Binns, and N. Shadbolt,\n“Goodbye Tracking? Impact of iOS App Tracking Transparency and\nPrivacy Labels,” in Proceedings of the 2022 ACM Conference on\nFairness, Accountability, and Transparency, ser. FAccT ’22.\nNew\nYork, NY, USA: Association for Computing Machinery, 2022, p.\n508–520. [Online]. Available: https://doi.org/10.1145/3531146.3533116\n[49] X. Lin, F. Araujo, T. Taylor, J. Jang, and J. Polakis, “Fashion Faux\nPas: Implicit Stylistic Fingerprints for Bypassing Browsers’ Anti-\nFingerprinting Defenses,” in 2023 IEEE Symposium on Security and\nPrivacy (SP), 2023, pp. 987–1004.",
    "pdf_filename": "Fingerprinting_and_Tracing_Shadows_The_Development_and_Impact_of_Browser_Fingerprinting_on_Digital_P.pdf"
}