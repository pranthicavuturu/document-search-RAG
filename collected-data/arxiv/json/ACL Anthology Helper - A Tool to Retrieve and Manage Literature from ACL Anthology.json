{
    "title": "ACL Anthology Helper - A Tool to Retrieve and Manage Literature from ACL Anthology",
    "context": "The ACL Anthology is an online repository that serves as a comprehensive collection of pub- lications in the field of natural language pro- cessing (NLP) and computational linguistics (CL). This paper presents a tool called “ACL Anthology Helper”. It automates the process of parsing and downloading papers along with their meta-information, which are then stored in a local MySQL database. This allows for efficient management of the local papers using a wide range of operations, including \"where,\" \"group,\" \"order,\" and more. By providing over 20 operations, this tool significantly enhances the retrieval of literature based on specific con- ditions. Notably, this tool has been successfully utilised in writing a survey paper (Tang et al., 2022a). By introducing the ACL Anthology Helper, we aim to enhance researchers’ abil- ity to effectively access and organise literature from the ACL Anthology. This tool offers a convenient solution for researchers seeking to explore the ACL Anthology’s vast collection of publications while allowing for more targeted and efficient literature retrieval. 1 The ACL Anthology serves as a valuable resource for researchers in the fields of NLP and CL, provid- ing access to a diverse collection of academic liter- ature from reputable venues such as ACL, EMNLP, NAACL, and COLING. It offers researchers the opportunity to keep abreast of the latest advance- ments, explore foundational work, and discover relevant studies in their areas of interest. However, the ACL Anthology lacks advanced functionalities, such as keyword-based retrieval and filtering op- tions based on publication time, authors, and other criteria. To address these limitations, we present the ACL Anthology Helper, a Python-based soft- ware tool designed to facilitate the local download *Corresponding author. and management of literature from the ACL An- thology. The ACL Anthology Helper is developed un- der the MIT License and can be found at the fol- lowing GitHub repository https://github.com/ tangg555/acl-anthology-helper. This tool of- fers the following key functionalities: • Downloading literature from the ACL Anthol- ogy website to a local MySQL database, allow- ing users to specify publication venues and time spans. • Supporting original MySQL operations as well as additional chain operations facilitated by ABuilder1, enabling users to effectively manage and retrieve downloaded papers using a sequence of Python-like functions. • Wrapping each paper’s information into an ob- ject, facilitating operations such as Union, Inter- section, Complement, and rule-based filtering on groups of papers. • Providing structured and statistical information on retrieved papers. The primary objective of this paper is to intro- duce the architecture of the ACL Anthology Helper and demonstrate how researchers can leverage its functionalities to enhance their literature manage- ment and retrieval processes. 2 Data Structures Based on the categorization provided by ACL An- thology, as presented in Appendix A.1, we have manually devised the data structures depicted in Figure 1. These data structures serve as essential components in our iterative crawling process of retrieving literature from the website. ACL An- thology encompasses top-level categories, namely ACL events and Non-ACL events, which comprise venues along with their respective hosting years. Notably, aside from conferences, ACL Anthology 1This is implemented by another github repository, ABuilder (https://github.com/lizhenggan/ABuilder) arXiv:2310.20467v1  [cs.CL]  31 Oct 2023",
    "body": "ACL Anthology Helper: A Tool to Retrieve and Manage\nLiterature from ACL Anthology\nChen Tang1, Frank Guerin1 and Chenghua Lin2∗\n1Department of Computer Science, The University of Surrey, UK\n2Department of Computer Science, The University of Manchester, UK\n{chen.tang,f.guerin}@surrey.ac.uk\nchenghua.lin@manchester.ac.uk\nAbstract\nThe ACL Anthology is an online repository that\nserves as a comprehensive collection of pub-\nlications in the field of natural language pro-\ncessing (NLP) and computational linguistics\n(CL). This paper presents a tool called “ACL\nAnthology Helper”. It automates the process\nof parsing and downloading papers along with\ntheir meta-information, which are then stored\nin a local MySQL database. This allows for\nefficient management of the local papers using\na wide range of operations, including \"where,\"\n\"group,\" \"order,\" and more. By providing over\n20 operations, this tool significantly enhances\nthe retrieval of literature based on specific con-\nditions. Notably, this tool has been successfully\nutilised in writing a survey paper (Tang et al.,\n2022a). By introducing the ACL Anthology\nHelper, we aim to enhance researchers’ abil-\nity to effectively access and organise literature\nfrom the ACL Anthology. This tool offers a\nconvenient solution for researchers seeking to\nexplore the ACL Anthology’s vast collection of\npublications while allowing for more targeted\nand efficient literature retrieval.\n1\nIntroduction\nThe ACL Anthology serves as a valuable resource\nfor researchers in the fields of NLP and CL, provid-\ning access to a diverse collection of academic liter-\nature from reputable venues such as ACL, EMNLP,\nNAACL, and COLING. It offers researchers the\nopportunity to keep abreast of the latest advance-\nments, explore foundational work, and discover\nrelevant studies in their areas of interest. However,\nthe ACL Anthology lacks advanced functionalities,\nsuch as keyword-based retrieval and filtering op-\ntions based on publication time, authors, and other\ncriteria. To address these limitations, we present\nthe ACL Anthology Helper, a Python-based soft-\nware tool designed to facilitate the local download\n*Corresponding author.\nand management of literature from the ACL An-\nthology.\nThe ACL Anthology Helper is developed un-\nder the MIT License and can be found at the fol-\nlowing GitHub repository https://github.com/\ntangg555/acl-anthology-helper. This tool of-\nfers the following key functionalities:\n• Downloading literature from the ACL Anthol-\nogy website to a local MySQL database, allow-\ning users to specify publication venues and time\nspans.\n• Supporting original MySQL operations as well\nas additional chain operations facilitated by\nABuilder1, enabling users to effectively manage\nand retrieve downloaded papers using a sequence\nof Python-like functions.\n• Wrapping each paper’s information into an ob-\nject, facilitating operations such as Union, Inter-\nsection, Complement, and rule-based filtering on\ngroups of papers.\n• Providing structured and statistical information\non retrieved papers.\nThe primary objective of this paper is to intro-\nduce the architecture of the ACL Anthology Helper\nand demonstrate how researchers can leverage its\nfunctionalities to enhance their literature manage-\nment and retrieval processes.\n2\nData Structures\nBased on the categorization provided by ACL An-\nthology, as presented in Appendix A.1, we have\nmanually devised the data structures depicted in\nFigure 1. These data structures serve as essential\ncomponents in our iterative crawling process of\nretrieving literature from the website. ACL An-\nthology encompasses top-level categories, namely\nACL events and Non-ACL events, which comprise\nvenues along with their respective hosting years.\nNotably, aside from conferences, ACL Anthology\n1This is implemented by another github repository,\nABuilder (https://github.com/lizhenggan/ABuilder)\narXiv:2310.20467v1  [cs.CL]  31 Oct 2023\n\nFigure 1: The data structure of ACL Anthology Helper.\nDesc is the abbr. of description. Logs record the infor-\nmation during crawling the data.\nincorporates various publication formats, such as\njournals (TACL), tutorials, and so on. For the con-\nvenience of implementation, we consider all of\nthese formats as conferences, as the majority of\nevents within ACL Anthology correspond to con-\nferences and share a similar web structure during\nthe crawling process.\nThe basic categories within ACL Anthology are\npresented as the events, which serve as entries in\nthe conference proceedings. The Conference ob-\njects, representing each event entry, are initially\nrecorded as the indices of the data. Considering the\ntime-consuming and unnecessary nature of down-\nloading all data from ACL Anthology, our tool\nallows for partial storage of literature by selecting\na specific range of conferences. The Paper ob-\njects act as the data units recorded for literature\nretrieval. The ConContent object, an extended ver-\nsion of Conference, exclusively provides essential\ninformation for subsequent web crawling, without\nbeing stored locally. Similarly, PaperList is not\nactual data, but a group of objects managing mul-\ntiple papers to support operations such as Union,\nIntersection, and Complement.\n3\nCrawling Online Literature\nThis section introduces the modules related to\ncrawling online literature for the anthology as\nshown in Figure 2.\n3.1\nWebpage Parsing\nThe vast collection of literature housed in the ACL\nAnthology is all publicly accessible. Therefore,\nutilising a web crawling tool, we can directly re-\ntrieve the resources available on this website. In our\nstudy, we have implemented an anthology-oriented\nweb crawler with the widely-used Python package\nFigure 2: The illustration of the online literature crawl-\ning process.\n\"BeautifulSoup\"2. This package is specifically de-\nsigned for extracting data from HTML and XML\nfiles. It provides a convenient and intuitive means\nof navigating, searching, and modifying the parsed\ntree by working alongside a parser.\nThe majority of the literature entries featured in\nthe ACL Anthology consist of static results and\ndo not involve dynamic rendering, encryption, or\nauthorization requirements. As we parse the web-\npages, the semi-structured data representing the\nliterature is transformed into Python objects. These\nobjects are then persistently stored in local the\nMySQL database. The parsing process is guided by\nheuristic rules, facilitating the extraction of relevant\ninformation from the webpages.\n3.2\nMulti-threaded Execution\nIn order to optimise the efficiency and speed of data\nretrieval from the website of the ACL Anthology,\nthe multi-threaded execution is implemented within\nthe web crawling process. Multi-threading enables\nthe simultaneous execution of multiple threads, al-\nlowing for parallel processing and enhanced per-\nformance. There are mainly 6 modules for this\nmulti-threaded literature downloading indicated in\nFigure 2. By employing multi-threaded execution,\nwe were able to significantly accelerate the crawl-\ning process, enabling efficient retrieval of literature\ndata from the ACL Anthology website.\nThread Pool Creation: It creates a pool of\nthreads to manage the concurrent execution of\ntasks. The size of the thread pool was determined\nbased on factors such as the available computa-\n2https://github.com/wention/BeautifulSoup4\n\nFigure 3: The two tables in the “aclanthology” database.\ntional resources and the desired degree of paral-\nlelism. Task Distribution: The crawling process\ninvolved extracting literature resources from multi-\nple webpages within the ACL Anthology website.\nWe divided these webpages into smaller tasks and\nassigned them to different threads within the thread\npool. This ensured that multiple threads could work\nsimultaneously on different parts of the website, en-\nabling efficient data retrieval. Thread Synchroni-\nsation: To ensure thread safety and prevent data in-\nconsistencies, we implemented appropriate thread\nsynchronization mechanisms. For instance, we em-\nployed locks or semaphores to control access to\nshared resources, such as databases or data struc-\ntures. This prevented conflicts or race conditions\nthat could arise from simultaneous access by mul-\ntiple threads. Parsing Webpages: Within each\nthread, we utilized the web crawling tool, along\nwith the Python package \"BeautifulSoup,\" to parse\nthe HTML or XML files of the webpages. We\nextracted the relevant literature data using prede-\nfined parsing rules. This step involved navigat-\ning the parse tree, searching for specific elements,\nand extracting the desired information. Data Per-\nsistence: As the data was extracted, each thread\nindependently persisted the extracted information\ninto the local databases. Proper synchronization\nmechanisms were implemented to ensure that data\nwas stored accurately and coherently, even in the\npresence of concurrent access by multiple threads.\nThread Monitoring: Throughout the execution,\nwe monitored the progress and completion of each\nthread. This allowed us to keep track of the crawl-\ning process and identify any potential issues or\nerrors that may have occurred during execution.\n4\nThe Database\nThe utilisation of the MySQL 3 database is an es-\nsential dependency for our tool, and it is imper-\native to independently install this database. Fol-\nlowing the installation, we configured an initial\ndatabase named \"aclanthology\" within MySQL.\nSubsequently, this configuration was manually\npopulated within the tool’s settings files, ensur-\ning proper connectivity.\nDuring the execution\nof the literature downloading code, our tool au-\ntonomously generated tables within the \"aclanthol-\nogy\" database. These tables, as illustrated in Fig-\nure 3, encompassed the representation of confer-\nences and papers. Each table was structured to\naccommodate specific data attributes. The struc-\ntured data obtained from the crawling process was\nthen stored within the MySQL database based on\nthe predefined data structures delineated by the two\naforementioned tables. This systematic storage ap-\nproach ensured the organization and accessibility\nof the crawled literature data. By adhering to this\ndatabase configuration and data storage method-\nology, we established a robust foundation for the\nstorage and management of the acquired literature\ndata.\n5\nThe Retriever\nIn addition to the standard SQL commands\nsupported by the aclanthology database, the\nABuilder package was employed to introduce\nan additional set of commands for enhanced\ndata retrieval and manipulation.\nABuilder,\nan open-source Python package available at\nhttps://github.com/lizhenggan/ABuilder,\nwas\nspecifically designed to streamline the process\nof accessing and querying databases.\nIt offers\na comprehensive range of functionalities that\nsimplify interactions with databases, providing\nan intuitive and efficient approach to construct\nand execute SQL queries tailored to researchers’\nspecific data subset requirements.\nTo utilise ABuilder, we established a connection\nto the aclanthology database using the connector\nlibraries provided by the package. This connection\nfacilitated seamless access to the database, enabling\nthe retrieval of the desired data. The following\ncode example, depicted in Listing 1, demonstrates\nthe use of ABuilder for constructing complex SQL\nqueries:\n3https://www.mysql.com/cn/\n\nListing 1: The code example using ABuilder.\ndata = ABuilder().table(’paper’) \\\n.where({\"year\": [\"in\", years_limit]}) \\\n.where({\"venue\": [\"in\",\nconf_contents]}).query()\npapers = MySQLTools.list_to_papers(data)\nAs shown in Listing 1, ABuilder enabled us to\nconstruct complex SQL queries by leveraging its\nquery-building capabilities. In this particular ex-\nample, we retrieved papers that met specific con-\nditions regarding years and conferences. By in-\ncorporating various parameters such as conditions,\naggregations, and joins, ABuilder facilitated the\nretrieval of precise data subsets from the aclan-\nthology database. Moreover, ABuilder provided\nflexibility in handling the retrieved data by offering\nconvenient methods to transform it into suitable\nformats, such as pandas DataFrames. This feature\nfacilitated subsequent analysis and manipulation of\nthe data.\nBy harnessing the capabilities of the ABuilder\npackage, we achieved efficient and effective data\nretrieval from the aclanthology database. Its user-\nfriendly interface and powerful query-building fea-\ntures simplified the retrieval process, enhancing our\nability to extract the required data for our research\nanalysis.\nOverall, the integration of ABuilder proved to be\ninstrumental in facilitating advanced data retrieval\nand manipulation from the aclanthology database,\nultimately contributing to the successful execution\nof our research endeavors.\n6\nSoftware License\nOur tool is released under the permissive MIT\nLicense, which imposes minimal restrictions on\nusage.\nIn alignment with this licensing ap-\nproach, the project dependencies, including the\nwell-established ABuilder package, are also li-\ncensed under the MIT License. Users are granted\nthe freedom to utilize and customize our tool ac-\ncording to their specific requirements. It is worth\nnoting that if users choose to create derivative ver-\nsions or forks of the tool, we strongly recommend\nthat they also maintain the MIT License to pre-\nserve the open nature of the software and foster\ncollaboration within the community.\n7\nDiscussion\nThe primary objective of this software is to en-\nhance the convenience of literature reading. When\nconducting research in a specific area, the use of\ngeneral search engines like Google or the online\nsearch function of ACL Anthology often returns\na large volume of literature, making it challeng-\ning to identify high-quality and closely related pa-\npers. In such cases, it becomes necessary to apply\nmore stringent and selective conditions to filter the\npapers effectively. Unlike the original searching\nservice provided by ACL Anthology, which aims\nto deliver a broader range of results (often in the\nthousands) with a general prompt, our tool aims to\nprovide a more precise and personalized searching\nservice.\nFor instance, when exploring recent advance-\nments (spanning from 2021 to 2023) in event-\ntriggered story generation, specifically in the most\ninfluential venues such as the top three NLP con-\nferences (ACL, EMNLP, and NAACL), our tool\ncan significantly narrow down the results. Using\nthe ACL browser, the search displays 2040 results.\nHowever, with our tool, we can limit the results to\njust four papers:\n• EtriCA: Event-Triggered Context-Aware Story\nGeneration Augmented by Cross Attention,\n2022 (Tang et al., 2022b)\n• Persona-Guided Planning for Controlling the\nProtagonist’s Persona in Story Generation,\n2022 (Zhang et al., 2022)\n• Long Text Generation by Modeling Sentence-\nLevel\nand\nDiscourse-Level\nCoherence,\n2021 (Guan et al., 2021a)\n• OpenMEVA: A Benchmark for Evaluating Open-\nended Story Generation Metrics, 2021 (Guan\net al., 2021b)\nBy leveraging our tool, researchers can obtain a\nconcise selection of relevant papers, enabling them\nto focus their literature review and analysis on the\nmost significant and pertinent works.\n8\nConclusion\nIn this paper, we have presented the ACL Anthol-\nogy Helper, a software tool aimed at improving\nthe accessibility and organization of literature from\nthe ACL Anthology. By automating the process of\nparsing and downloading papers, along with their\nmeta-information, this tool enables researchers to\nefficiently manage their local collection of papers\nusing a variety of operations. The ACL Anthol-\nogy Helper addresses the limitations of the ACL\nAnthology by providing advanced functionalities\nsuch as keyword-based retrieval, filtering by publi-\n\ncation time, authors, and other criteria. Researchers\ncan now retrieve literature based on specific con-\nditions, enhancing their ability to find high-quality\nand closely related papers in their research area.\nAcknowledgements\nChen Tang is supported by the China Scholar-\nship Council (CSC) for his doctoral study (File\nNo.202006120039).\nReferences\nTomas Goldsack, Zhihao Zhang, Chen Tang, Car-\nolina Scarton, and Chenghua Lin. 2023. Enhancing\nbiomedical lay summarisation with external knowl-\nedge graphs. arXiv preprint arXiv:2310.15702.\nJian Guan, Xiaoxi Mao, Changjie Fan, Zitao Liu, Wen-\nbiao Ding, and Minlie Huang. 2021a. Long text\ngeneration by modeling sentence-level and discourse-\nlevel coherence. In Proceedings of the 59th Annual\nMeeting of the Association for Computational Lin-\nguistics and the 11th International Joint Conference\non Natural Language Processing (Volume 1: Long\nPapers), pages 6379–6393, Online. Association for\nComputational Linguistics.\nJian Guan, Zhexin Zhang, Zhuoer Feng, Zitao Liu, Wen-\nbiao Ding, Xiaoxi Mao, Changjie Fan, and Minlie\nHuang. 2021b. OpenMEVA: A benchmark for eval-\nuating open-ended story generation metrics. In Pro-\nceedings of the 59th Annual Meeting of the Associa-\ntion for Computational Linguistics and the 11th Inter-\nnational Joint Conference on Natural Language Pro-\ncessing (Volume 1: Long Papers), pages 6394–6407,\nOnline. Association for Computational Linguistics.\nHenglin Huang, Chen Tang, Tyler Loakman, Frank\nGuerin, and Chenghua Lin. 2022. Improving Chi-\nnese story generation via awareness of syntactic de-\npendencies and semantics. In Proceedings of the\n2nd Conference of the Asia-Pacific Chapter of the\nAssociation for Computational Linguistics and the\n12th International Joint Conference on Natural Lan-\nguage Processing (Volume 2: Short Papers), pages\n178–185, Online only. Association for Computational\nLinguistics.\nTyler Loakman, Chen Tang, and Chenghua Lin. 2023.\nTwistList: Resources and baselines for tongue twister\ngeneration. In Proceedings of the 61st Annual Meet-\ning of the Association for Computational Linguistics\n(Volume 2: Short Papers), pages 579–589, Toronto,\nCanada. Association for Computational Linguistics.\nChen Tang, Frank Guerin, Yucheng Li, and Chenghua\nLin. 2022a.\nRecent advances in neural text gen-\neration: A task-agnostic survey.\narXiv preprint\narXiv:2203.03047.\nChen Tang, Chenghua Lin, Henglin Huang, Frank\nGuerin, and Zhihao Zhang. 2022b. EtriCA: Event-\ntriggered context-aware story generation augmented\nby cross attention. In Findings of the Association\nfor Computational Linguistics: EMNLP 2022, pages\n5504–5518, Abu Dhabi, United Arab Emirates. As-\nsociation for Computational Linguistics.\nChen Tang, Shun Wang, Tomas Goldsack, and\nChenghua Lin. 2023a. Improving biomedical abstrac-\ntive summarisation with knowledge aggregation from\ncitation papers. arXiv preprint arXiv:2310.15684.\nChen Tang, Hongbo Zhang, Tyler Loakman, Chenghua\nLin, and Frank Guerin. 2023b. Enhancing dialogue\ngeneration via dynamic graph knowledge aggrega-\ntion. In Proceedings of the 61st Annual Meeting of\nthe Association for Computational Linguistics (Vol-\nume 1: Long Papers), pages 4604–4616, Toronto,\nCanada. Association for Computational Linguistics.\nChen Tang, Hongbo Zhang, Tyler Loakman, Chenghua\nLin, and Frank Guerin. 2023c. Terminology-aware\nmedical dialogue generation. In ICASSP 2023-2023\nIEEE International Conference on Acoustics, Speech\nand Signal Processing (ICASSP), pages 1–5. IEEE.\nChen Tang, Zhihao Zhang, Tyler Loakman, Chenghua\nLin, and Frank Guerin. 2022c. NGEP: A graph-based\nevent planning framework for story generation. In\nProceedings of the 2nd Conference of the Asia-Pacific\nChapter of the Association for Computational Lin-\nguistics and the 12th International Joint Conference\non Natural Language Processing (Volume 2: Short\nPapers), pages 186–193, Online only. Association for\nComputational Linguistics.\nBohao Yang, Chen Tang, and Chenghua Lin. 2023a.\nImproving medical dialogue generation with ab-\nstract meaning representations.\narXiv preprint\narXiv:2309.10608.\nBohao Yang, Chen Tang, Kun Zhao, Chenghao Xiao,\nand Chenghua Lin. 2023b.\nEffective distillation\nof table-based reasoning ability from llms. arXiv\npreprint arXiv:2309.13182.\nHongbo Zhang, Chen Tang, Tyler Loakmana, Chenghua\nLina, and Stefan Goetze. 2023. Cadge: Context-\naware dialogue generation enhanced with graph-\nstructured knowledge aggregation. arXiv preprint\narXiv:2305.06294.\nZhexin Zhang, Jiaxin Wen, Jian Guan, and Minlie\nHuang. 2022. Persona-guided planning for control-\nling the protagonist’s persona in story generation. In\nProceedings of the 2022 Conference of the North\nAmerican Chapter of the Association for Computa-\ntional Linguistics: Human Language Technologies,\npages 3346–3361, Seattle, United States. Association\nfor Computational Linguistics.\n\nFigure 4: The Homepage of ACL Anthology.\nA\nAppendices\nA.1\nThe homepage of ACL Anthology\nFigure 4 illustrates a screenshot captured from the\nhomepage of the ACL Anthology website.\nA.2\nOur other works\nOur research group has actively contributed to\nthe field of Natural Language Generation (NLG)\nthrough various scholarly endeavors. We present\na comprehensive categorization of our contribu-\ntions as follows: Story Generation (Tang et al.,\n2022c; Huang et al., 2022; Tang et al., 2022b), Dia-\nlogue Generation (Tang et al., 2023c,b; Zhang et al.,\n2023; Yang et al., 2023a), data-to-text (Yang et al.,\n2023b), text summarisation (Tang et al., 2023a;\nGoldsack et al., 2023) and tongue twister gener-\nation (Loakman et al., 2023). We believe these\nworks will aid you in navigating our contributions\nin the field of NLG.",
    "pdf_filename": "ACL Anthology Helper - A Tool to Retrieve and Manage Literature from ACL Anthology.pdf"
}