{
    "title": "The Framework of a Design Process Language",
    "context": "",
    "body": "The Framework \nof a \nDesign Process Language \nby \nArnulf Hagen \nDr. Ing. Dissertation \nDivision of Marine Systems Design \nFaculty of Marine Technology \nThe Norwegian Institute of Technology (NTH) \nUniversity of Trondheim \nAugust, 1993 \n \n \n\nAbstract \nThere are two main purposes with the thesis; to develop a view of design in a \nconcept formation framework and to develop a language that can be used \nto describe both the object of the design and the process of designing. The \nmain benefit in using a language along the lines proposed in this thesis is that \nit would enable a far better use of automated tools in the design process. \nThe unknown object at the outset of the design work may be seen as an \nunknown concept that the designer is to define. Throughout the process, she \ngradually develops a description of this object by relating it to known concepts, \nor things and characteristics. The search towards a complete definition stops \nwhen the designer is satisfied that the design specification is complete enough \nto satisfy the requirements from it once built. The complete design \nspecification is then a collection of propositions that all contribute towards \ndefining the design object - a collection of sentences describing relationships \nbetween the object and known concepts. Also, the design process itself may be \ndescribed by relating known concepts - by organizing known abilities into \nparticular patterns of activation, or mobilization. \nIn view of the demands posed to a language to use in this concept formation \nprocess, the framework of a Design Process Language (DPL) is developed. The \nbasis for the language are linguistic categories that act as classes of relations \nused to combine concepts. One of the main contributions from the DPL is that \nit contains relations used for describing process and object within the same \ngeneral system, with some relations being process specific, others being object \nspecific, and with the bulk being used both for process and object description. \nAnother important outcome is the distinction of modal relations, or relations \ndescribing futurity, possibility, willingness, hypothetical events, and the like. The \ndesign process almost always includes aspects such as these, and it is thus \nnecessary for a language facilitating design process description to support \nsuch relationships to be constructed. \nThe DPL is argued to be a foundation whereupon to build a language that can \nbe used for enabling computers to be more useful - act more intelligently - in the \ndesign process. \n \n\n \n \nSummary \nThe purpose with the thesis is two-fold; to investigate what characterizes the \nknowledge used and produced in a design process and to develop the \nframework of a language that can be used to express this knowledge. The \ndiscussion of these two issues cannot be separated - without knowing the \nlanguage with which to express the knowledge it can hardly be expressed \nwhat the knowledge is, and without knowing what knowledge to describe the \nlanguage can hardly be developed. \nI start by discussing literature in Chapter 2 with two main intentions. One is to \ndisclose whether design may be viewed as a general intelligent behavior, \nespecially the kind of intelligent behavior that humans display in problem \nsolving situations. Upon comparing literature in design with the theory of \nintelligence as proposed by Sternberg, I find that there are several common \npoints. All major processes that Sternberg, as a proponent of the Information \nProcessing Theory, argues to be important in intelligent creatures are in some \nway traceable into a wide specter of works in the field of design research. This \nsets the stage for discussing design in the context of human behavior. \nThe second purpose of Chapter 2, and of most importance to the subsequent \nparts of the thesis, is to show that when researchers discuss design they really \ndiscuss how things relate. These relationships may concern how activities are \nordered, how decision rules map between a condition and an action, how an \nobject search space is organized, how objects in that search space are \nlocated, or how decisions are ordered and what is decided upon. However, \nthe fundamental question is still how things should relate to each other to form \na coherent whole so as to express ideas about how design may be described. \nTheories are built by discovering regularities, and these regularities are \ndescribed through establishing relationships among known things - \nunknown things are described by relating them to known ones. I take the idea \nof the relationships further to see whether it can bring some understanding of \nwhat design is about or, at least, how a design process and a design object \ncan be described. \nIn Chapter 3, a brief investigation of existing representational systems \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nSummary \n- representational languages - is undertaken to see what they can offer in \nterms of representing knowledge about a design object and a design process. \nThey all, in some form or another, use relations between concepts in order to \nrepresent knowledge. However, the representational languages are too \nexpressively weak for the purpose of sufficiently representing knowledge that \nis relevant when both design process and design objects are to be described. \nThis is particularly so when the ambition is to use one process or object model \nfor several different purposes, some of which may not be known at the time \nwhen the model is first developed. \napplicable also to new applications - \nthe objects (new characteristics) - \nexpressible in the same language. \nI argue that to make such a model \nnew kinds of processes or extensions to \nthe object and the process must be \nIn Chapter 4 I start the main development in the thesis through viewing the \ndesign process as one aimed at forming concepts. To perform concept \nformation, a designer also needs to form concepts of plans and sequences of \nactivities to use in producing new knowledge. The design process is described \nas a set of relationships among abilities that can be represented as concepts \nin the same language as the elements that describe the design object. Thus, \nlike \"Activity A follows activity B\" is typically a process description and \"Deck \nA is above deck B\" is typically an object description, they are both \nrelationships among concepts and both representable in the same kind of \nlanguage. The relationships are termed sentences in the Design Process \nLanguage. In other words, it is argued that a designer tries to form new \nconcepts by relating them to other concepts in such a way that the relevant \ninformation for assessing the goodness of the design object is at least in its \nbasis related to knowledge of the real world (or at least to ‘ generally known’ \nconcepts). \nI further develop an alternative view of design as formulating, proving or \nrejecting hypotheses. The designer may be viewed as trying to prove \nhypotheses about how the design object will behave in the future, this by \ndesigning her design object such that it has the best chances of displaying \nsuch behavior as expected or required. On the other hand, nothing that the \ndesigner is doing is necessarily 'objectively' true in the future - there is \nanother stage in which the description is to be materialized. Seen from that angle, \nthe designer constructs hypotheses for operators performing in the next stage \n \n \n\nIn Chapter 5 I start to develop the framework of the Design Process Language \n(DPL). Requirements to the DPL are presented and the language is developed \nfrom this angle. The relations in the sentences are discussed as linguistic \ncategories, notably as various verbal, prepositional, and conjunctive relations, \nas well as adjective and adverbial modifiers. Each of the categories are \nargued to play a particular role in describing different phenomena \nexperienced in, and that are characteristics of, the design process. \nI further argue that several of the concepts that are used to describe a \nproduct, such as class, system, attribute, and others, are useful, but not crucial, \nas seen in a concept-formation framework. Such concepts are like any other \nconcepts - defined by and serving to define other concepts. A class is thus \nmore a concept being related to concepts constituting class membership \ncriteria, than it is an aggregate of concepts that are members of the class. To \ntreat a 'class' as an individual concept there must be ways to reference the \nconcept properly - I claim that this is closely related to the use of language. \n. \n \n \n \n \n \n \n \n \n \n \n \n \n \nSummary \n (the “materialization” stage) to prove by materializing a product that has the \nbest chances of satisfying the design object specification, or proving the \nhypotheses, that the designer has expressed. The designer may be seen as a \nmediator between a 'customer', who expresses expectations, and a \n'constructor' who materializes them according to the designer's specification. \nThe commonly referenced division between structure and function of the design \nobject is argued to be somewhat elusive in that it is difficult to see where the \none ends and the other starts. It is shown that the specification of a design \nobject is a mixture of expressions of structural and functional nature. The \nspecification should be S-F complete at the end of the process, meaning that the \naggregate of functional expectations and structural descriptions presented by the \ndesigner should be such that the specification can prove the expectations that the \ndesigner set out to meet - i.e., such that it can prove the initial hypothesis. In \nother words, all parts of the design object are either described structurally, in terms \nof dimensions and other ‘tangible' information, or functionally, in terms of \nbehaviors expected from specific parts. Like when a designer in an outline \nspecification lay out the dimensions of length, beam, and draught of a vessel \n(structural), and describe the engine in terms of expected performance \n(functional). \n \n· \n \n\nSummary \nFor instance, in DPL the sentence \"(View) The ship as a structure\" is not a \nmessage classifying ‘ship' as a structure; it is rather a relationship asking that \nattributes should be extracted that are relevant for viewing the ship as a \n‘structure' concept. This may imply that relationships between the 'ship' and \nits ‘paint' and 'rudder’ are considered irrelevant in the context, whereas the \nrelationships between the 'ship' and the ‘plates', 'girders', 'beams ', and \n‘columns' of its 'hull ' are focused. In other words, a 'class membership ' can be \nviewed to filter knowledge from a larger, underlying description of the world. \nIn plain terms, the vessel is conceptualized as a structure - not classified as a \nstructure. \nIn conclusion, the DPL is a language where various categories of relations are \napplied to construct sentences that control both the design process and the \ndesign object. The semantics of the relations that tie one concept to another \nare what make definition of those concepts possible. This opens for a flexible \nand dynamic object and process description, where gradual definition and re-\ndefinition of both is possible. It also opens for a more dynamic approach to \ndesign, where the semantics of concepts may be more related to context than \notherwise - the context will at any time determine what kind of meaning a \nconcept should be given. This is useful both in relation to design research \nand to make possible an automated design environment. \n \n \n \n \n\nTable of contents \n \nChapter l: Introduction \nBackground . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nPurpose . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ·.  . . . . . \nDelimiting design .......... , . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nViewpoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nSome motivations . . . . . . . . . . . . . . . .·. . . . . . . . . . .. . . . . . . . . . . . . \nStructure of the Thesis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n1 \n3 \n5 \n7 \nl O \n12 \nChapter 2: Literature - setting the stage  \n \n14 \n23 \n28 \n33 \n38 \n45 \nSternberg - An intelligent approach? . . . . . . . . . . . . . . . . . . . . . . .  \nGoel and Pirolli - An information processing approach . . . . . . . . . \nMistree et. al. - \"A Decision-Based Design paradigm\" .......... \nYoshikawa - A mapping approach . . . . . . . . . . . . . . . . . . . . . . . . \nCoyne and Gero - \"The linguistic paradigm\"  ................ \nChapter summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nChapter 3: Formal knowledge representation  \nMain-stream conceptions of relations . . . . . . . . . . . . . . . . . . . . . . . \nPredicate calculus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nProduction rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nConnectionist models . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nEntity-relationship models . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nObject oriented programming . . . . . . . . . . . . . . . . . . . . . . . . \n \n47 \n47 \n50 \n50 \n51 \n52 \n \n\n \nTable of contents \nWhy traditional languages are insufficient . . . . . . . . . . . . . . . . . . . . \nProcess vs. Content - Design Process vs. Design Object . . . . . . . . \nChapter summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n52 \n62 \n66 \nChapter 4: Resolution through relations ........... \nSome fundamentals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nDesigning relationships, or relationships in design . . . . . . . . . . . . . . . \nDirection in designing relationships . . . . . . . . . . . . . . . . . . . . . . . . . . \nApplying relationships to build relationships . . . . . . . . . . . . . . . . . . . \nA note on knowledge and meaning  ........................ \nA note on function and structure . . . . . . . . . . . . . . . . . . . . . . . . . . . \nAxiomatization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nChapter summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n68 \n69 \n74 \n80 \n85 \n91 \n95 \n97 \nl 07 \nChapter 5: Developing relations ................... \nRequirements of the Design Process Language . . . . . . . . . . . . . . . \nThe framework of natural language . . . . . . . . . . . . . . . . . . . . . . . . \nRelations and modifiers in the Design Process Language . . . . . . \nVerb relations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nPreposition relations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nConjunctive relations ...................·. . . . . . . . . . . \nAdjective modifiers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nAdverb modifiers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nWH- terms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nSome issues on general grammar . . . . . . . . . . . . . . . . . . . . . \nAbstract concepts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nChapter summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n109 \nl 09 \n116 \n123 \n123 \n137 \n143 \n146 \n149 \n150 \n150 \n154 \n159 \nChapter 6: Drawing lines . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nThe design object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nThe D-object and the \"World\" . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nDesign process . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nChapter summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n162 \n163 \n168 \n172 \n175 \n \n\nTable of contents \nChapter 7: Concluding remarks \nCritique . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nConclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nOn design .......·. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nOn the Design Process Language . . . . . . . . . . . . . . . . . . . . \nFurther work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nTheoretical . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nPractical . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n176 \nl 76 \n178 \n178 \n183 \n186 \n186 \n187 \nReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190 \nAppendix: Example from Chapter 6 . . . . . . . . . . . . . . 198 \n\nChapter 1: Introduction \n1\n1 \nChapter 1: Introduction \nBackground \nFrom the time design research was started in earnest In the early 1960's, a \ntremendous amount of effort has been Invested Into describing, defining, and \ntheorizing about design. The descriptions of design as performed by actors \nranging from novice to experienced designers, performing innovative or routine \ndesign on all from bank tellers (Goel and Pirolli, 1990) to offshore installations \n(Wlkstr0m, 1989), are numerous. A new definition of design occurs more \nfrequently than might be expected In a thirty year old discipline, and theories \nregarding design apparently display little convergence as to what are \n'scientifically sound· theories. \nA striking commonality between several of these descriptions, definitions, and \ntheories, is a lack of attention to the language with which they are \ncommunicated. Either researchers (I) tend to use fundamental concepts as \ngiven, presuming that these concepts are universally understood in the same \nway as they themselves do, (ii) define these established concepts in a \nparticular way, making it fit more readily into the context, or (iii) establish new \nterms, possibly in order to avoid any serious conflict with what other researchers \nassociate with them. However, there Is little explicit consensus on language. \nThroughout the history of design research, a recurring theme has been whether \ndesign and design research are in fact sciences. In this paper, there will be no \nargument as to whether they are or not, but it is useful to note what would be \ndemanded if design actually were to be viewed as a scientific discipline. \nIndeed, it is possible to \"... regard the process by which theories are derived \nin science as similar to the process by which we produce a design.\" (Coyne \net. al., page 9) Ziman says of scientific theories that \"(they) appear as ordering \nprinciples that explain general classes of observational and experimental facts, \nIncluding the taxonomies, 'laws', causal chains and other empirical regularities \nthat are discovered about such facts.\" (1984, page 28) He continues to say \nthat \"... every scientific specialty has an established repertoire of useful concepts \nand formalisms out of which new theories can normally be constructed.\"  \n(page 30, underscored here.) \n \n \n \n \n \n\n2 \nChapter 1: Introduction \nTo follow up on this view, it appears that it is crucial that there exists a consistent \nlanguage, including vocabulary elements, a classification scheme (or a \ntaxonomy), and rules for combining the vocabulary elements, in order to treat \ndesign with scientific rigor. Of course, it may certainly be debated whether this \nline of thinking at all is appropriate - since the scientific approach demands that \nthere exist 'regularities', one would have to presuppose that regularities indeed \ndo exist in the way design is accomplished. There is, however, quite a number \nof indications that there are some common elements in the way design is \nperformed, although it still seems hard to merge all the findings into coherent \nand substantial theories. (See Chapter 2) \n“We live in an age of growth, in which every day more and more things come into our \nlives; and things, and all their parts, need names. So more and more words come in with \nthem - new words, or new ways of exploiting, embellishing and combining the old ones; \nand in this way the balance is maintained. There is no sign that our onomastic \n(vocabulary) resources are drying up; indeed we are likely to run out of natural resources \nbefore we run out of things we make out of them. But there are signs that the things are \nbecoming more resistant to being named. There is no natural way of referring to the \nvarious plastic objects that lie around the house, or the toys we give our children, or the \nfurnirure we now have to assemble for ourselves. They no longer fit into taxonomies. We \nlive in modules, sit on units and entertain ourselves with systems. \nBehind these nameless objects is a technology and a science that produce them; and \nthere, less visible to us, Is another realm of things that have to be named. Many of them \nare abstract things, the categories and concepts of a theory; and some of these also \nprove recalcitrant to ordinary onomastlc processes - they only come to be ‘named ‘ by \nsome mathematical formula, like ‘a function of the coordlnates x and y ‘, 'the integer \nover psi1 and psi’, and so on. But somehow they have to be enmeshed in the language; \notherwise they are not brought under control.” (Halliday, 1988, page 27) \nBox l.i \nThere is another development in design that makes a language increasingly more \nimportant; The increasing reliance on the computer as an aid to design, and the \nsteady and massive efforts to enable the computer to solve tasks that hitherto \nwere performed by humans. The more the computer is to solve 'human ' tasks, \nthe more it must be made to “understand · the information it is to process”. \nConsequently, the more expressive must the language be that is used to \nrepresent this information. The catch is that the computer, as we know it, \nneeds more formality and less ambiguity in its language than humans  \n \n\nChapter 1: Introduction \n3 \ndo. It remains to be developed a language that is expressive, that is formal, \nand that minimizes the risk of misinterpretation. \nThis work intends to establish the framework of a language with which design \nprocess and the design object can be described, defined, or theorized about. \nI claim that such a language is at most absolutely necessary if scientific rigor \nis aimed at in the work, and at least useful if design is treated without any concern \nattributed into the issue of whether design and design research are scientific \ndisciplines or not. I claim further that a language developed along the lines in \nthis thesis will enable a more efficient introduction of computer aids into the \ndesign process. \nPurpose \nThe underlying assumption for this thesis is that descriptions, definitions, and \ntheories about design are most effective when a coherent and rigorous \nlanguage exists with which it is communicated. That is, the content of the \nexpressions is most effectively expressed when the terms and concepts used \nfor verbalization, and the relationships between these terms and concepts, are \nstrictly described or defined. This paper has a twofold purpose; it intends to \npropose some views of design at the same time as the framework of a \nlanguage with which it is possible to describe and define it is developed. \nWith language is here meant a set of clearly defined fundamental concepts \nand a means for classifying these concepts.\na This corresponds partly to the \nstructure of natural language, where there is a vocabulary and a classification \nof the elements in the vocabulary. In addition, any language has rules for \ncombining vocabulary elements into sentences - this aspect will to some \nextent be discussed in the course of the paper, notably in Chapter 5, but will \nmostly be left undone. Arguably, such rules, or regularities, is the crucial role for \ndesign research to discover - the language in development here introduces \nsome of the elements about which regularities should be discovered. \na \nLater. the term concept is used differently from what is done here. At this point, \nconcept refers to what is, in Chapter 4 and Chapter 5, called relations in the language. \n \n \n \n\n4 \nChapter 1: Introduction \nThree aspects have then become crucial in developing a design language: \n(i) A set of concepts (or vocabulary elements); (ii) a classification scheme, \nhenceforth called taxonomy; and (iii) rules, henceforth called regularities, for \ncombining the concepts when communicating findings regarding design. \nThe concrete demands on this language is that it is useful for describing the \nprocesses (or tasks) undertaken by a human designer when designing, as well \nas the inputs, the intermediate results, and the outputs of this design process. \nAs will be argued at a later point, the design process is here viewed as primarily \nan information production (or manipulation) process. This has the consequence \nthat the resulting language is focused on describing properties of such \ninformation processes, as well as in describing the knowledge that these \nprocesses manipulate - that is, knowledge used by and generated from them. To \nthe extent that rules are established here regarding how to combine vocabulary \nelements, these rules will focus on the relationship between various broad \n'categories' of knowledge and not the particular instances as would be \ndemanded if the design process indeed were to be described in full. \nThis leads to another major outcome of this research. In the development of \nany language one would necessary need to know what would be expressed \nwith the language. So, one would need to discover which phenomena of \nimportance that exist in the particular domain. Thus, the process of developing \nthe language necessarily will include discussions of these phenomena, and the \nresult becomes two-fold: A language, and a discussion of the phenomena \ndescribed by the vocabulary elements in that language. The phenomena of \nparticular interest in this work are the phenomena related to the information \nproduction in design. \nOne particular benefit from this approach is that it potentially provides a \nmeans for comparing more readily findings from different researchers with \ndifferent viewpoints. This would be accomplished since characteristics of the \nengineering design process are described with a basis in clearly defined and \ndescribed language elements. In other words, the terms used, and the \n_phenomena they denote, are distinguished and to some extent classified. \nb \nWith taxonomy is meant laws and principles of classification, here classification of \nknowledge. \n \n \n\nChapter 1: Introduction \n5 \nThe resulting language is claimed to be neither the only appropriate nor \nnecessarily a complete one for describing the design process. Likewise, it deals \nwith one particular aspect of design; the (structurable) processing of \nknowledge, and is as such most efficiently used where it is feasible to view \ndesign as to some extent structurable. In other words, where intra-personal \ncommunication, intuition and other such 'intangible' aspects are concerned, \nthe language is not developed to the extent that such knowledge can be \ndescribed, although the language may be used for describing at what places \nin the design process where such phenomena 'intervene·. \nConcluding, there are two particular areas where the work may promote \ndesign research: (i) In developing the framework of a language to use in \ndiscussing the design process; and (ii) in discussing basic activities and \nphenomena (the terms) from which a design process description is \nconstructed. Some additional benefits from the latter claim is that design \nprocess modelling becomes easier. The approach taken here is to develop \nthese terms such that they are capable of expressing the knowledge used and \nproduced in a design process. \nDelimiting design \nThe more there is subscription to a definition, the more general this definition \ntends to be, and the less useful it becomes for the purpose of discussing design \nat a detailed level. Too general a definition tends to include in the category \ndesign activities that would seem inappropriate to throw into it. The risk is that \ndesign becomes like the psychologist Spearman said (in 1927) in response to \nan ongoing discussion regarding the concept intelligence; \"... a mere vocal \nsound, a word with so many meanings that finally it (has) none.\" (Quoted in \nGuilford, 1967, page 12) \nThis constitutes a fundamental problem in even starting research into design. \nAt a minimum, the area of concern must be indicated. Of course, researchers \ncould subscribe to one definition and categorize accordingly. Using one \ndefinition as an example, from Rawson in 1979, illustrates the problem with \nthis. He proposed that \"design is a creative, iterative process serving a \nbounded objective.\" (Rawson, 1979) It may be easily agreed that design may \n \n\n6 \nChapter I: Introduction \nbe both creative, Iterative, and bounded, but is it as easily agreed that it \nalways will be? \nThe easy way out is to take the view that if a process is creative, iterative and \nserves a bounded objective it IS design. (Of course, the terms involved in the \ndefinition must be defined first.) In this case, the work of an artist is certainly \ncreative, probably iterative, and will in some form serve a bounded objective, \nso art work is design according to the definition. Finding one's way through a \nlabyrinth will probably also be design, as will baking bread without a recipe. \nTo paraphrase Spearman; the word 'design' may get so many meanings that \nfinally it gets none. \nA more fruitful approach may be to say that if a process is creative, Iterative, \nand bounded, it may be a design process. Researchers may then want to \ndelimit further by saying, for instance, that it must produce something tangible \n(this still doesn't exclude any of the examples above). They may say that the \nproduct should serve a function (as art work, finding one's way, and the bread \nall do provided 'function' is defined right). The problem now is that there is an \ninfinite number of additions to the original definition that might be made, \nbased upon what feels like should be called design - i.e., the definitions will be \nsubjective. In the definition process, critics could come out with something like: \n\"OK, so you subscribe to the view that design is creative. What about the \nshipyard you visited last month? Did they always do something creative in \ndesigning a ship? Or maybe that wasn't designing - maybe It was X? And, \nanyway, how do you define 'creative'?\" A creative critic could generate \nmore reservations than there exist additions and modifications to the definition \nof design. \nThus, a proper starting point might be to state something like \"Design is \ncharacterized by X. Find X!\" Although the present work does not aspire towards \ndescribing the design process as much as to develop the language with which \nit can be described, there will be a development of a particular view of design \ncharacteristics. Therefore, it is Important to establish the context in which the \nlanguage is to be used. In other words, the first task Is to mark off a segment \nof the world where the findings will have validity - \nfundamental premises. \ni.e., to state the \n \n \n \n \n \n \n \n \n \n \n \n\nChapter 1: Introduction \n7 \nThe findings here deal with a particular situation, which is termed a case of a \ndesign process, and intends to identify some fundamental characteristics of \nsuch a process and to use these as a basis upon which a language can be \nformed, The premises presented here are intended to identify - not define - \nthis situation, and the term design will be used as a reference to the design \nprocess situation. A description of (characteristics of) the design process will \nimplicitly be developed throughout this paper. \nOne premise in this thesis is that design is considered as including the \nproduction of knowledge, That is, the designer accesses (if willing) more \nknowledge at the end of the process than at the start. Implied here is of course \nthat production implies process. Further, the knowledge produced is intended \nto be implemented as a real world object which is viewed here as (Hagen, \n1990, page 12): \",.. a combination of structures, procedures, and instructions \nmeant to achieve a predefined purpose.\" \nAnother premise - a central one as such - to state here is that design is \nsomething that may be accomplished by humans. This does not say that all \nhumans are capable of design, anything about the quality of the result or the \nprocess, or even that design necessarily must be performed by a human. It is \nmerely to indicate that there 'is something' with humans that make them (or \nat least some of them) capable of designing. \nAs for the process of developing the framework of the language, I adopt the \nview that \"(the) principal role of any design process is to convert information \nthat characterizes the needs and requirements for a product into knowledge \nabout the product itself,\" (Mistree et al., 1988, page 44) With this fundamental \npremise, the language will be developed with a basis in the knowledge used \nand produced during the design process. The vocabulary elements in the \nlanguage will then focus on describing (or denoting) elements of knowledge \nand will be defined in terms of the role this knowledge plays in the design \nprocess. \n \n \n \n \n \n\n8 \nChapter 1: Introduction \nViewpoint \nAs indicated earlier, the viewpoint chosen here focusses on the important \n'ingredients' 'knowledge' and 'humans', If humans possess qualities that make \nthem able to use and produce the knowledge required in the engineering \ndesign process, it would seem useful to take a closer look at these qualities. \nLikewise, since knowledge is viewed as the crucial result of the engineering \ndesign process, it would be useful to look at the nature of this knowledge. \nThere is frequently a separation in the literature between information and \nknowledge. One may take the view that information is embedded in all that \nis perceivable, and that this information becomes knowledge when someone \nhas performed interventions upon the information in ways that are explained \nlater. Thus, knowledge cannot in this view be permanently stored, while \ninformation \npermanent \ninformation \nindeed can be stored. Strictly speaking, \nknowledge base. I will not, however, \nand knowledge in this thesis, since it \nthere exists then no \ndistinguish between \nwould seem like a \ndiscuss at what point \nphilosophical question that is far beyond the scope to \ninformation becomes knowledge. \nHere will further be taken an angle that is useful in this investigation; the \nqualities that make humans able to design are also viewed as knowledge. \nIndeed, Guilford states: \"It is possible that It would be fruitful to regard our \npersonal plans of action, our strategies, and our tactics, all of which have to \ndo with what we do and how we do it, as forms of behavioral information .., \nOur repertoire of plans ... would constitute systems of behavioral information. \nWith this conception, skills, psychomotor as well as intellectual, can be brought \ninto the realm of information.\" (Guilford, 1967, page 238) In other words, some \nknowledge (information) is utilized to generate other knowledge. The physical \nmatter (the structures) and the energy that able this knowledge to exist or be \nproduced is disregarded. \nIt is useful now to look towards, e.g., temporal reasoning, where a situation is \noften called a state, and where any change in the situation implies a shift from \none state to another. I will view a state as defined by its knowledge content - \nwithin one state the knowledge content remains unchanged. In this view, \n \n \n \n\nChapter 1: Introduction \n9 \na change of states occurs whenever additional knowledge of the world is \ngained. Strictly speaking, the act of living is thus in this interpretation a \ncontinual change of states. However, in the present discussion on design it is \nmore useful to view a transformation from one state to the next as triggered \nby the introduction of new knowledge that is determined to be relevant in the \ndesign process. Here, all new knowledge acquired and stored will by definition \nbe viewed as relevant. A new state is then reached after each intervention in \nthe process, and knowing that a second has passed will not necessitate a shift \nfrom one state to the next, provided time (in short increments like seconds) is \nnot termed a relevant variable. It would anyway be extremely difficult (and \nprobably pointless) to develop a language of concepts that had the flexibility \nto describe the information processes occurring when the design process is \ndistracted by a tweeting bird outside the window or interrupted by a trivial \ntelephone call. \nIn some sense, then, design can be viewed as a state-transformation process, \nas formulated by Willem: \"In designing, a transformation occurs. The design \nproblem information is transformed in the mind of the designer into design \nconcepts - potential means of solving the problem - some of which ultimately \nbecome design solutions.\" (Willem, 1988, page 224.) \nIt may now be appropriate to take look at what a design process actually 'is'. \nIn general, there seems to be agreement that it may be seen as a particular \nkind of problem-solving activity, often referred to as the act of solving ill- \nstructured problems. (Simon, 1973; Newell and Simon, 1972) Such problem- \nsolving activities are again seen as quite demanding cognitive tasks, requiring \nthe extensive display of intelligent behavior. (Guilford, 1967; Sternberg, 1985) \nThus, there is a natural opening to the field of cognitive science, in particular \ncognitive psychology - an opening that will be exploited in the pursuit of a \nlanguage of concepts. This point of view will be revisited and elaborated later \non in the thesis, specifically in Chapter 2. Here it suffices to recognize that \ndesign is viewed to constitute a particular kind of problem-solving situation. \nAbove was defined that a shift in states occurs when knowledge that is termed \nrelevant for the design task is introduced. This notion of relevancy (as a relative \nconcept) could cause problems, in that the design engineer does receive \ninputs all the time - inputs that do not carry labels regarding the relevancy of \n \n \n \n \n \n \n \n \n \n \n \n\nHaving identified engineering design by humans as a cognitive activity, there \nremains the issue of actually being able to describe it - the key concern of this \nthesis. As stated earlier, any phenomenon can be described only if there exists a \nlanguage with which it can be described sufficiently for the purpose. While such \nlanguages are, for the most parts, quite well established for the particular \ndisciplines in which engineering design is performed, it Is hardly established at all \nfor the task of describing the design process. Thus, the design object can often \nbe described quite well whereas the design process is more difficult to \ndescribe. \nMost of the terms used in such a description are borrowed from other fields, as \n'iteration', \n'recursion·, \n'creativity', \n‘convergence', \n'divergence', \n‘analysis', ‘synthesis', 'abstraction', 'modelling', and so forth. Indeed, it is \ndifficult to find a single term in the literature that is developed uniquely for the \nsake of describing the design process. This would seem to indicate one of two \nthings; either there are in fact no unique characteristics (for which one needs \nto coin terms) of the design process, or design research is too immature to \nhave developed (or agreed upon) a unique language with which such a \nprocess can be described. \nSome motivations \nIt has repeatedly been proposed above that knowledge production is the \n·essential contribution the design engineer makes to the creation of the design \nobject. It has also been argued that the language of concepts used within the \nfield of studying the design process seems grossly unfit to be for a detailed \ndescription or prescription of it. At this point, it may be appropriate to \n \nChapter 1: Introduction \nsuch information to the situation. However, the same engineer will want to filter \nout what is not related to the task at hand. \"The individual (in a problem (solving) \nsituation) is in a situation where the more or less automatic processes in a way \ncome to a halt. The person is forced to concentrate towards various elements \nto a far more extensive degree than otherwise (in non-problem (solving) \nsituations)” (Raaheim, 1983, page 49, in Norwegian) The concentration on the \ndesign problem becomes particularly intense at the cost of attention to \nincidental phenomena, reinforcing this tendency, and it is only natural that \nsome aspect of relevancy comes into play. \n \n \n \n\nOne benefit is that an expressive, while rigorous, language for the design \nprocess would make it easier to translate between findings from research into \ndifferent fields of design. Establishing basic concepts in the language makes \npossible a definition of composite or abstract terms in the context of a Design \nProcess Language - the DPL. \nThe utility of the present work from a more practical point of view is related to \nthe viewpoint as described above. By being based on the roles that knowledge \nplay, particularly on the knowledge that makes a design engineer able to \nproduce other knowledge, the vocabulary elements bring with them \ndescriptions of fundamental processes and activities (or tasks) required for \nthese roles to actually be fulfilled. \nThe computer is already heavily organized into components, each having unique \nroles in the information processing. The software used in computers is built up in \nthe same way - various unique commands trigger the execution of certain \ntasks. An efficient use of the computer in the engineering design process would, \nof course, be one that delegated to the computer the tasks that the computer \ncould take care of best, and left to the human design engineer the tasks she \ncould do best. With the language of concepts, and the corresponding description \nof vocabulary elements, developed here, can be constructed a model of the \ndelegation of tasks between the human engineer and the external tools used, \nsuch as the computer. \nThere are some additional motivations behind the DPL as goes the application \nof computers in design. One is that the exchange of information between the \ncomputer and the human user is important. As for now, there are generally two \ndifferent languages, where either the computer translates its internal \nrepresentation of information into an understandable language for the user, \nor the user adopts to the computer's way of communicating. The DPL is based \non natural language (English) which, arguably, makes such communication \neasier and more intuitively ·correct'. Another motivation is that as computers  \nChapter 1: Introduction \n11 \nelaborate somewhat more on why it is useful to develop and refine a language \nalso for describing the engineering design process. In this, there will be two \nlines of arguing; The scientific point of view and the practical point of view. \n \n\n12 \nChapter 1: Introduction \nare used in more and more fields, the need for representing 'historic’ \nknowledge of the design process becomes increasingly more important in \norder to 'learn ' from past successes or failures. Such history may be \naccounted for in a language based on a natural language. A third motivation \nlies in the steadily increasing expectations from ‘product models', particularly \nmodel that are to contain information in such a way that it can be set to use \nin all kinds of processes in all stages of life of the modelled product. As the \naspirations go far, so must the language used to meet the aspirations. \nStructure of the Thesis \nChapter 2 establishes the arena through a discussion of literature, both within \nand outside the design research arena. The chapter develops a particular view \nof design, seen from the perspective of theories in psychology regarding \nintelligent behavior. In the chapter is argued that the main invariant in different \nworks is that they all talk about relationships - whether describing the design \nprocess or the design object. \nChapter 3 summarizes some existing means and theories of how to represent \nand manipulate information. In addition, the distinction between content \ntheory and process model is introduced and elaborated. Process is seen as a \nmobilization of knowledge in the content model - abilities are enacted. As in \nChapter 2, it is argued that all the methods treated rely heavily on the relation, \nand that there are commonalities in the kinds of relations used. It is also argued \nthat none of these 'languages' are sufficient for representing all the knowledge \nrequired to represent in a design process. \nChapter 4 introduces the view of design as the process of forming concepts. \nThe design process is likened to the process of communication, where the \nobject of communication is unknown. Design is further viewed as the process \nof testing hypotheses and as the process of proving hypotheses. Design is also \nviewed as the process of building sentences within a language where the \nrelation plays a crucial role - \"the knowledge is in the relations.\" \nChapter 5 is a development of the framework of a language intended to meet \nthe needs put to it in the design process. The terms and the classifications are \nselected from English, where the main groups are verb relations, preposition \n \n\nChapter 1: Introduction \n13 \nrelations, conjunction relations, and adverbs and adjectives. Most effort is spent \nin developing the verb relations, since these are claimed to be most central in \nrepresenting knowledge, particularly that which pertains to the design \nprocess. \nChapter 6 is a short discussion of the virtues of the Design Process Language \nand the explicit relationship between the discussion on design in Chapter 4 \nand the discussion on the DPL in Chapter 5. It also contains a brief illustration \nof how the DPL may be conceived used in practice. \nChapter 7 contains a critique and presents the conclusions to draw from my \nwork. It ends with suggesting important areas for further work. \n \n\n14 \nChapter 2: Literature - setting the stage \nChapter 2: Literature - setting the stage \nSeveral models have been developed to aid in achieving understanding of \nwhat the design process should or does look like. A discussion of various models \nmight be pursued along several 'dimensions', for instance descriptive or \nprescriptive models, conceptual or detail design, automated or creative \ndesign, and so forth. I have chosen to discuss literature on design research in \nterms of two categories; that concerned with discussing the design process per \nse and that concerned with explicitly associating the design process with the \ndesign object. In addition, the idea of design as a problem- solving activity \nrequiring intelligent behavior is explored in the context of cognitive psychology. \nThe platform of the discussion is the Information Processing Theory (IPT), as \nformulated by Sternberg. After this, four different approaches to design \nresearch are discussed - those of Goel and Pirolli, Mistree et. al., Yoshikawa, and \nCoyne et. al.. Attempts are made to both relate the works to the IPT and to my \nown view of design as primarily using relationships to build relationships. \nSternberg - an intelligent approach? \nIt may seem odd to start the discussion into relevant literature in the field of \npsychology. However, as will be shown later, most researchers into design by \nhumans either emphasize or assume that it is a cognitive; intellectual activity. \nWhat would be more appropriate, then, than starting the discussion with theory \nfrom cognitive psychology? It would seem impossible to discuss a language \nwithout discussing what to describe with it. I will therefore distinguish some \nregularities and relationships which are common to the psychologists (at least \ninformation processing theorists) view of problem-solving and design researchers’ \nview of design. This section contains a discussion of the psychologist Sternberg's \nwork so as to form a reference to which other work explicitly treating design can \nbe compared. \nSternberg builds his theory around a so-called component/al analysis of human \n.abilities, focussing on three classes of components: \"Meta-components are \nhigher-order executive processes used in planning, monitoring, and decision \n\\ \nmaking in task performance. Performance components are processes used in \nthe execution of a task. Knowledge-acquisition components are processes \n \n\n \nChapter 2: Literature - setting the stage \n15 \nused in learning new information.\" (1985, page 99) Note the interpretation of \ncomponents as being processes rather than detectable structures or particular \nabilities. A component is \"an elementary information process that operates upon \ninternal representations of objects or symbols.\" (ibid., page 97) Newell and \nSimon (1972) use the same interpretation, and are as careful as Sternberg in \nnoting that ‘elementary’ is a relative term in this context - any component may \nbe broken into more elementary ones in an appropriate language; \" .., there are \nmany ways in which adequate sets of elementary processes can be chosen (in \nconjunction \nwith corresponding \nschemes \nof composition).\" \nThus, any \nclassification is pragmatic in the sense that the classification is one that is \nappropriate in the context rather than correct. \nThe discussion here will focus upon the meta-components of human \nintelligence. Sternberg identified seven such components, which he also terms \nexecutive processes: (l) Decisions as to just what the problem is that needs to \nbe solved; (2) selection of lower-order components; (3) selection of one or \nmore representations or organizations for information; (4) selection of a strategy \nfor combining lower-order components; (5) decisions regarding allocation of \nattentional resources; (6) solution monitoring; and (7) sensing external \nfeedback. For curiosity, it is interesting to compare this division of problem- \nsolving components to the framework for problem solving by Polya as \nillustrated in Box 2.i. \nDecisions as to just what the problem is that needs to be solved is the first part \nof what is often termed problem structuring, A precondition for solving a problem \nis certainly knowledge about what this problem is. While the problem may be very \neasy to identify, it may also be initially quite intangible. As the original structure of \nthe problem becomes insufficient, inconvenient, unachievable, or simply wrong, \nthe problem must be restructured, suggesting that this component stay active at \nall stages in the problem-solving, or design, activity, \nThe importance of problem structuring is frequently stressed in design literature. \nOne of the earliest design researchers, Asimow, said that \"before an \nattempt is made to find possible solutions for the means of satisfying the \nneed, the design problem should be identified and formulated.\" (1962, \npage 20) Of a newer date, Willem says that \"as the input ... the design \nproblem information \n \n\n16 \nChapter 2: Literature - setting the stage \nis a key factor in design.... Each new bit of information allows (the designer) \nto evaluate and possibly eliminate some of these ... ideas.\" (Willem, page 224) \nThis is a kind of view that applies problem structuring for \"shooting out' \npotential solutions as more information on the problem is applied. In fact, \nYoshikawa suggests the same position in his work discussed later in this chapter. \nWhile this stepwise application of problem information is a somewhat radical, \nor dominant, view of the role of the problem information, others conceive it \nmore as a ‘guide' to the designer. Shahin says that \"the designer should have \na general idea about the problem.... Definition of (it) is what the designer is \nactually guided by, while solving the problem.\" (Shahin, 202-203) \nUnderstanding the problem \nWhat is the unknown? What are the data? What is the condition? (Component l) \nIs it possible to satisfy the condition? ... (Component 1) \nDraw a figure. Introduce suitable notation. (Component 3) \nSeparate the various parts of the condition. (Components 1 and 3) \nDevising a plan \nHave you seen (the problem) before? ... (Component l) \nDo you know a related problem? ... (Component 1) \nLook at the unknown! And try to think of a familiar \nproblem having the same or similar unknown ...(Component l) \nCould you restate the problem? Could you restate it \nstill differently? Go back to definitions ... (Component l) \nCould you imagine a more accessible related problem? A \nmore general problem? A more special problem? An analogous problem? \nCould you solve part of the problem? Keep only a part of the condition; \ndrop the other part; how far is the unknown then determined, how can it \nvary? Could you derive something useful from the data? (Components 2 \nand4) \nCarrying out the plan (Component 4) \n... check each step ... (Component 6) \nLooking back \nCan you check the result? ... (Component 6) \nCan you derive the results differently?.Can you see it \nat a glance? (Components 4 and 6) \nCan you use the result, or the method, tor some other \nproblem?· (from Baron, 1987) \nAs is seen, there are clear indications of the presence of at least five of Sternberg's seven \ncomponents. Component five (\"attentional resources·) and seven (\"external feedback\") \nare not referred here, but it may be expected that this is due to the particular situation of \nmathematical problem-solving, where time and the external environment normally are of \ninferior importanee in the problem domain. \nBox 2.i: \nA framework for mathematical problem-solving from Baron, 1987. (Originally \npresented by Polya.) \n \n\nChapter 2: Literature - setting the stage \n17 \nSimon has still another view of the design problem. \"Efforts to solve the problem \nmust be preceded by efforts to understand it.\" (1981, page 111) He continues \nto say that \"... solving a problem simply means representing it so as t,omake \nthe solution transparent. If the problem solving could indeed be organized \nalong these terms, the issue of representation would indeed become central.\" \n(ibid., page 153) Simon makes this statement even stronger other places, \nimplying that problem solving essentially is an act of transforming ill-defined \nproblems into well-defined ones. \"There is merit to the claim that much \nproblem-solving effort is directed at structuring problems, and only a fraction \nof it at solving problems once they are structured.\" (Simon, 1973, page 187) \nWikstr0m, through comparison between observations and theoretical \ninformation, hypothesized that \"an unclear project (or problem) description \ncauses increased, and unexpected, consumption of resources.\" (page 75, in \nSwedish) \nSelection of lower-order components is the process of choosing the \nappropriate lower-order (non-executive) processes, or the interventions, that \nare expected to cause the attainment of a final state from an initial state. \n \n The notion of different order of the processes taking place during design is \nreferred to by several researchers. Christians and Venselaar distinguished \nbetween strategic knowledge, what may be called executive processes, and \nsituational and procedural knowledge, which are components of lower order. \nCoyne et. al. (1991) talk of different languages, where language of plans is the \nlanguage describing the way lower-order components are chosen (or how the \nexecutive processes are enacted) and the language of action describe the \nway the non-executive processes are applied. (A more extensive discussion of \nCoyne et. al. is pursued in chapter 4.) Indeed, Simon lets this component \nbecome central in one of his definitions of design (1981, page 129): \"Anyone \ndesigns who devises courses of actions aimed at changing existing situations \n(initial state) into preferred ones (final \nstate).\" Selecting lower-order \ncomponents is clearly a matter of \"devising courses of actions.\" \nSelection of one or more representations or organizations for information is an \nobvious process in design. Sternberg notes that \"the choice of representation \nor organization can facilitate or impede the efficacy with which the \ncomponent operates.\" (1985, page l 00) \n \n \n \n \n \n\n18 \nChapter 2: Literature - setting the stage \nGoel and Pirolli showed in research work discussed later in this chapter that \ndesigners utilize both internal and external artificial symbol systems. (Goel and \nPirolli, 1990) The notion of using models in relation to design span from simply \nmodelling the design object (Kimbler, Watford, and Davis; Sage; Fitzhorn), \nmodelling the task or problem domain (Simon), modelling the design process \n(Hubka; Mistree et. al.), to even 'modelling the designer· (Yoshikawa; \nMaccallum). Maccallum views \"the design system as a model of an intelligent \nmechanism\" and aims \"... to replace (sic!) this human centered activity with \ncomputer centered activity.\" (1990, page 59) All these activities imply using \nsome sort of information representation whose efficiency will influence the \nusefulness of the model in the design process. In fact some researchers, as \nFitzhorn and Coyne et. al., introduce language explicitly; \"realizable shape is \na language\" (Fitzhorn, page 151) and \"design descriptions are like sentences \nin natural language.\" (Coyne et. al., page 28) Others, such as Alexander (see \nA Pattern Language), have attempted to form complete languages of design \nin particular disciplines (Alexander focused on architecture) based on an \nidentification of syntactic elements and to some extent the grammar with \nwhich to combine them. \nActually, the efficiency of the fundamental problem structuring component \nreferred to earlier presupposes the choice of an efficient information \nrepresentation system. Simon states that \"Solving a problem simply means \nrepresenting it so as to make the solution transparent. If the problem solving \ncould indeed be organized along these terms, the issue of representation \nwould indeed become central.\" (1981, page 153) \nSelection of a strategy for combining lower-order components mirrors the \nobvious fact that not only the identity of relevant lower-order components is \nimportant, but also their sequencing in the process of implementation. The \nmost visible \"proof' of its importance is found in research into computer aided \ndesign, where much work is performed into constructing algorithms for an efficient \nsequencing of various processes (Simon; Newell and Simon) \n.It is more than likely that the process of choosing the non-executive \ncomponents will go hand-in-hand with the process of selecting a strategy for \ncombining them. In any case, it seems clear that the strategy may not be \npossible to lay out 6 priori, so that there will be a constant judgement as to \n \n \n \n \n \n\nChapter 2: Literature - setting the stage \n19 \nwhat non-executive components are to be chosen, and thus how they are to \nbe combined into a strategy. This is equivalent to arranging the application of \nvarious tools in a (relevant) toolkit to ensure, or maximize the probability, that \nthe problem is solved. \nA frequently cited kind of model of the \ndesign process in the marine field is \nthe design spiral, first presented by \nEvans in 1959. The spiral is illustrated \nin Figure 2.1, this particular one \nadopted from Dillon (page 15, 1969). \nThe model, from the domain of ship \ndesign, identifies main activities and \nreflects the idea of the process being \nsequential, recursive, iterative, and \nconverging. What is most interesting at \nthis point, though, \nis that the \nsequencing of the activities is  given \nBASICO£SIGN \nThe \"design spiral\" taken from \nDillon. 1969. \nFigure2.l: \nin the model. While the choice of language, particular tools, and definition of \nproblem are left unattended to by the model and rendered to the designer, \nthe model commits the designer to choose a particular strategy for applying \nthe tools. The relatively high frequency of this kind of prescriptive models (Evans; \nGilfillan; Rawson; Ehrenspiel) could seem to reflect the importance attributed to \nthis component by design researchers. Figure 2.2 is another illustration, borrowed \nfrom Asimow, underlining the persistence of the view that arranging the \ncomponents (processes) is key in determining the quality of the design process. \nDecisions regarding allocation of attentional resources refers to the resources \nvested into the problem-solving process itself rather than the obvious allocation \nof resources in the design object. It is a component because the solution to \nany task, and design in particular, is obviously subject to bounds in the \ntemporal, monetary, or other resources to be spent on the task. \nWhile there is little research into how designers actually use this component, \nsome researchers identify the issue as important. Erichsen says that \"design \nmay be considered the task of coordinating the spending or  resources  to \n \n\n20 \nChapter 2: Literature - setting the stage \nreach a specified goal.\" (1989, page 179, original underscore) Simon elaborates; \n\"the design process itself involves management of the resources of the \ndesigner, so that his efforts will not be dissipated unnecessarily in following \nlines.of inquiry that prove fruitless.\" (1988, page 144) The designer thus needs to \nprioritize among tasks - to focus efforts into areas where the pay- back from \nthese efforts is greatest. Westerberg et. al. says that \"most likely, designers make \nmany decisions based on intuition because of time constraints .. ,,\" (1990, page \n114) implying this dilemma of the designer of \"allocating the attentional \nresources.\" Some researchers have tried to formalize the issue of allocating \ntemporal resources. Wikstr0m discusses this issue through comparing theory \nand empirical data. He says that \"as the size of the design project increases, \nthe percentage of time allocated to the first phases (viability and feasibility) is \nreduced.\" (page 51, in Swedish) \n...., \n...., \n,,.,, \nFigure 2.2: \nAsimow, 1962: Morphology of design. \n \n \nD \n---- tttrcrtlff or \nfttdbecll.loc,p \n \n \n \n\nChapter 2: Literature - setting the stage \n21 \nSolution monitoring is the component that helps problem solvers \"keep track \nof what they have already done, what they are currently doing, and what they \nstill need to do.\" (Sternberg, 1985, page 105) The importance of this \ncomponent in design is obvious when the designer may be seen to have an \nouter environment (like a customer) that demands results at particular points \nin time. Large project scheduling and management is exactly aimed to take \ncare of such solution monitoring. Its importance is less obvious when the \ndesigner operates with no explicit exterior demands. Goel and Pirolli showed \nthat designers use \"personalized stopping rules\" to determine when the \nproblem is solved to a satisfactory degree. These are clearly rules that are \ninvolved in the solution monitoring process. In addition, any kind of \nperformance modelling of the designed object would seem to imply that the \nresults are used for \"monitoring the solution.\" Simon (1981) introduced the \nnotion of the satisficing designer rather than optimizing designer. The solution \nmonitoring process is thus one that terminates when the designer has optimized \nher satisfaction - in other words, when she is content. \nAsimow's model in Figure 2.2 further illustrates the importance of the solution \nmonitoring process. Most of the diamond-shaped icons in the figure signify tests \nof the solution (\"Best?,\" \"Valid?,\" \"Producible?,\" \"Does it work?,\" and so forth) \nas the design process evolves. The 'design history' aspect is dealt with by \nSmithers et. al. who say that \"the record of the concurrent and serial searches, \nleaps of intuition, analyses, syntheses, simulations, prototypes, decisions, and \njudgements, etc .. ,, represents important knowledge ........ It represents a record \nof what parts of the design space were explored, how, and why decisions \nwere made.\" (page 82) Such historical information is important in design both \nto make re-design more efficient and to make final design documentation (or \nspecification) more complete. \nOther researchers highlight the process of retaining knowledge of past \noccurrences as crucial in learning to approach new design problems more \nefficiently, Maccallum says that \"experience of past problems and their \nsolutions ... forms one of the most powerful and important sources of solutions \nto design problems.\" (page 62) Gero and Rosenman say primarily the same: \n\"(Designers) accumulate a library of vocabulary elements within their domain \n,.. each such element having with it associations to other elements and their \nrelevance to other situations.\" (1990, page 66) \n \n \n \n \n \n \n \n\n22 \nChapter 2: Literature - setting the stage \nSensing external feedback is the component through which an individual \nadjusts or learns from observing how the results of the problem-solving process \nare received in the outer environment. M'Pherson formalizes this as an integral \npart of systems design: \n\"The Monitoring System - the information retrieval and feedback \nsystem (-) ...is composed of two parts: \n(i) that specifically designed and inserted to provide information \nfeedback to the management, designers and operational \ncontrollers; \n(ii) the general information and data gathering instruments ... that \ncontribute to the general information ... on the ... system.\" \n(1980, page 552) \nMacCallum says that \"designers operate within an environment and with a \npurpose which necessitates communication and interaction. ... In order to \ndesign, any system must interact with its environment.\" (page 59) Although this \nlatter statement is very strong, it is at least clear that the best (most confident) \ninformation regarding the success of the design activity will come from \nobserving the behavior of the implemented design in its environment. This \nwould seem to be crucial in the adaptation process of the designer. Indeed, \nSimon describes the design system as an adaptive one and concludes from \nthis premise that it is self-evident that feedback must reach the designer at \nsome stage (possible all stages) of the design process. \nIt ought to be clear that the 'list' of components, or processes, discussed thus \nfar by no means can be proved sufficient in a design context, nor that they \nnecessarily constitute distinguishable processes. It ought to be equally clear, \nhowever, that Sternberg's seven components have relevance to design \nsituations, and that the abilities required to perform such processes necessarily \nmust be present during a design situation. Goel and Pirolli (1990) set out to \ninvestigate the relevance of the information processing theory to design, and \nfound good correspondence between IPT and observed design activity. \nNewell and Simon (1972) used the same foundation, albeit from a different \nangle, and provided strong indications of the usefulness of IPT. \n \n \n \n \n\nChapter 2: Literature - setting the stage \n23 \nThe remainder of this thesis is written from the perspective that design involves \nprocesses that can generally be discussed in terms as is done here, and that \nthe seven components form a sufficient basis upon which to base further \ndiscussion. The literature discussed in the following, particularly those explicitly \nconcerned with the design process, will therefore to some extent relate to this \n‘componential analysis', \nGoel and Pirolli - \nAn information processing approach \nGoel and Pirolli (1990) investigated the behavior of three designers in three \ndifferent tasks. They analyzed the findings in the context of information \nprocessing theory (IPT). The primary task of their research was to investigate \nwhether there existed some generic characteristics of design. Their specific \nfocus was on the way designers treat the problem space, or the information \nprocessing space (IPS). Before pursuing, it is useful to note Newell and Simon's \ndefinition, or rather description, of this IPS: \n\"1. \n2. \nThere is a set of elements, called symbols. \nA symbol structure consists of a set of tokens (equivalently, \ninstances or occurrences) of symbols connected by a set of \nrelations. \nA memory is a component of an IPS capable of storing and retaining \nsymbol structures. \nAn information process is a process that has symbol structures for \n(some of) its inputs or outputs. \nA processor is a component of an IPS consisting of: \n3. \n4. \n5. \n(a) \n(b) \na (fixed) set of elementary information processes (eip's); a \nshort-term memory (STM) that holds the input and output \nsymbol structures of the eip's; \nan interpreter that determines the sequence of eip's to \nbe executed by the IPS as a function of the symbol \nstructures in STM. \n(c) \n6. A symbol structure designates (equivalently, references or points \nto) an object if there exist information processes that admit the \nsymbol structure as input and either: \n(a) \naffect the object; or \n \n \n\n24 \nChapter 2: Literature - setting the stage \nproduce, as output, symbol structures that depend on \nthe object. \n7.  A symbol structure is a program if (a) the object it designates is an \ninformation process and (b) the interpreter, if given the program, \ncan execute the designated process. (literally this should read, \"if \ngiven an input that designates the program.\") \n8.  A symbol is primitive if its designation (or its creation) is fixed by the \nelementary information processes or by the external environment of \nthe IPS.\" \n(Newell and Simon, 1972, pp. 20-21.) \n(b) \nGoel and Pirolli studied various designers at work in concrete design tasks, and \nclaimed from their findings eight characteristics of the establishment of the \nproblem space, or eight generic aspects of design: (Goel and Pirolli, page 23) \n(i) \nThe existence of many degrees of freedom entails extensive problem \nstructuring. \nThe authors note that the design problem generally is under-defined, so that \na massive structuring effort is needed. This structuring activity is recursive, in that \nthe initial structure may be based upon lacking information - information that may \nbecome available as the problem-solving process unfolds. They found that \ntightening the problem definition throughout the process is important so that \nthe designer is able to close in on specific solutions. \n(ii) \nDelayed or limited feedback from the environment entails extensive \nperformance modeling, \nThe designer produces descriptions of a product meant to exist in the future \nrather than the product itself. Therefore, Goel and Pirolli say, it is impossible to \nknow for certain how the product, or the artifact, indeed will behave before \nit is constructed. However, to construct the artifact from the specification \nmeans a committal of resources based on a specification that may be the \n. result from wrong decisions, and any correcting measures in response to errors \namounts to either (a) altering the existing artifact or (b) to learn and improve \nuntil the next design task is to be undertaken. In response to this, the authors \nstate, the designer models the artifact to assess expected performance. This \n \n \n\nChapter 2: Literature - setting the stage \n25 \napparently reduces the risk of delivering a flawed specification for \nimplementation or construction. \n(iii) \nThe relative goodness of the answers entails use of personalized stopping \nrules. \nAs other researchers (Simon; Coyne and Gero), the authors recognize that \nthere are normally \"no right or wrong answers in design situations, only better \nor worse ones.\" (Goel and Pirolli, page 28). This is what Simon intimated by \nsaying that the designer satisfices rather than optimizes. The set of decision \nrules thus are not unambiguous, which is to say that no set of decision rules will \nguarantee an objectively optimal artifact to be constructed. Goel and Pirolli \nobserved that the rules determining what is perceived (by the designer) a \nsatisfactory design are individual, or personalized. \n(iv) \nNested evaluation loops in a limited commitment mode control strategy \n(LCMCS).\n0\n \nThe authors observed that the designer has conflicting objectives. She tends \nto 'freeze· the artifact specification while still wanting the freedom to alter it \nthroughout the process. The investigated subjects handled this in two ways. (a) \nThey worked through the entire artifact, completing the specification, before \ntesting it; or (b) by evaluating artifact components as they are generated. \nLCMCS is a term for describing the designer's reaction to this situation, or their \nnegotiation of \"... tension between keeping options open for as long as \npossible and making commitments.\" Goel and Pirolli make the strong claim \nthat this strategy \"... is necessary due to the sequential nature of symbolic \nprocessing ...\" (Ibid.) - there is a limit to how many balls a person can keep \nin the air at one time. \n(v) \nThe necessity for the designer to specify an artifact conflicts with the \nLCMCS. \na \nLCMCS is a result of the combination of two approaches to evaluation of the design \nproduct. One of these approaches implies to start with a kernel idea, work through until \ncomplete specifications are complete, and then evaluate. The other implies the \nevaluation of artifact components as their specifications are generated. (Ibid., pp. \n28-29) \n \n \n\n26 \nChapter 2: Literature - setting the stage \nIn simple terms, Goel and Pirolli observed a serious conflict: The designer wants \nto fix solutions so as to more easily focus on other aspects of the problem, but \nwants to have the option to change the artifact as more information is \ngathered. \"Designers are adept at negotiating this tension between keeping \noptions open for as long as possible and making commitments.\" (page 28) Thus, \nthere is a constant assessment as to whether it is worth the effort to ‘unfix' \nsolutions, altering them, and risking a subsequent effect on other design \ndecisions made in the course of design. For instance, changing major \ndimensions may cause a complete redesign of the entire artifact, and may not \nbe performed if the cost of such re-design exceeds the benefits from the \nchange. \n(vi) \nThe size \nand \ncomplexity \nof \ndesign problems \nrequire \nsolution \ndecomposition (with subsequent danger of 'leaky' modules). \nIn large (complex) problems it is impossible to keep track of all aspects of the \nsolution. Designers thus decompose the problem (and solution) into modules \nin order to handle few problems at a time. Since there invariably will be inter- \nrelationships between the modules, they needed a strategy for handling this \nsituation. Two such strategies were identified: (a) Some modules were put on \n'hold' while the attention was focused on solving others and (b) functional \nlevel assumptions were made to model those relationships. \n(vii) \nThe necessity of abstraction hierarchies to relate goal and artifact. \nWhile the decomposition described above results in so-called abstraction \nhierarchies, the authors noted a different kind of abstraction hierarchy. The \ngoals or objectives tend to be expressed in quite abstract terms, for instance \nas functional requirements, while the artifact is generally expressed in concrete \nterms, as structural configuration. This causes a 'mismatch ' in terminology that \nthe designer must resolve. To do this, she must in some way create a ‘meeting \npoint' of the two kinds of descriptions - a meeting point that is closely related \nto the use of language. \n \n\nChapter 2: Literature - setting the stage \n27 \n(viii) \nThe use of artificial symbol systems. \nIn the solution decomposition and in the goal/structure resolution process the \ndesigner uses artificial symbol systems for representation. These symbol systems \noperate at different levels of abstraction to capture the different 'levels' of \nthe goal formulation and structure specification. \nGoel and Pirolli performs a very useful analysis of particularities in design by \nhuman designers. They identify some characteristics which may be called \ntactical concerns, such as those related to goal-decomposition and \nperformance modeling, as well as more strategic characteristics, such as use \nof language and decision-making in the process. It is Interesting to note that \ntheir findings correspond well with Sternberg's information processing theory of \nmental abilities. Three of Sternberg's meta-components can be directly related \nto the results of Goel and Pirolli; (1) Decisions as to just what the problem is that \nneeds to be solved (I - \"extensive problem structuring\"); (2) selection of one \nor more representations for information (viii - \"use of artificial symbol systems\"); \nand (3) solution monitoring (iii - \"personalized stopping rules\" and ii - \n\"extensive performance modelling\"). \nSternberg's four other meta-components are: (4) sensitivity to external  \nfeedback; (5) selection of lower-order components ('sub-ordinate' skills and \ntools); (6) selection of a strategy for combining lower-order components; and \n(7) decisions regarding allocation of attentional resources. Although these \ncomponents are not directly distinguished by Goel and Pirolli, their ·existence' \nis not in conflict with Goel and Pirolli's findings. Indeed, (5) and (6) are implied \nunder (i) \"problem structuring,\" as an organization of available knowledge. The \ndifference is that Sternberg Identifies these as so important that they deserve \nspecial treatment, separate from the problem structuring activity. \nThe implication from Goel and Pirolli Is that characteristics of observed design \nactivity corresponds neatly with the more general theories concerning human \ncognitive abilities. The authors also cast light over some complex interactions \noccurring in design; the conflict between 'fixing ' solutions to make the rest of \nthe task easier, while keeping solutions ‘unfixed' to update them later on in the \nprocess. The research dealt with super-ordinate skills, and did therefore not delve \ninto the tactical concerns, like for instance: How do designers choose \n \n\n28 \nChapter 2: Literature - setting the stage \nrepresentation language? How are tools chosen in the design process? How \nare different kinds of knowledge applied in particular situations? How does the \ndesigner \nmap \nbetween \nan \ninternal representation to \nan \nexternal \nrepresentation? And, perhaps most important; How actually is language used \nin mapping between different levels of abstraction? Neither did the research \nfocus on developing a theory for distinguishing the various abilities that the \ndesigner necessarily must possess - rather it identified and systematized the \nresult achieved from enacting such abilities. These are relevant questions to be \nanswered in the process towards developing a comprehensive theory of \ndesign. \nMistree et. al. - \n\"A Decision-Based Design paradigm\" \nIn their paper Decision-Based Design: A Contemporary Paradigm for Ship \nDesign, (1990) Mistree and others present a way of viewing the design process, \nclaiming it to constitute a paradigmatic shift. Underlying their work is the \nfundamental premise that \"... designers are and will continue to be involved in \ntwo primary activities, namely, processing symbols and making decisions.\" \n(page 565) Their concrete goal is to design a (computer-oriented) system \nthrough which models of different design processes can be created and used \nby the designer as guidance in producing artifacts. Their particular frame of \nreference is that \"the principal role of a designer, in Decision-Based Design, is \nto make decisions ...... In Decision-Based Design, decisions serve as markers to \nidentify the progression of a design from initiation to implementation to \ntermination.\" (page 572) Logically following this view is that, for instance, \nanalytical tasks and information retrieval become in some sense subordinated \nto the decisions made to perform these tasks. Thus, where the 'typical' model \nis task-oriented without necessarily distinguishing decisions from other activities, \nMistree et. al. place the decision central in the picture of the design process. \nWhen compared to the information processing theory of problem-solving by \nSternberg, this view conspires well. Five out of Sternberg's seven meta- \ncomponents deal explicitly with decisions and decision-focused activity \n(selection). \nMistree et. al. define the design process as \"... a process of converting \ninformation that characterizes the needs and requirements for a product into \nknowledge about (?) a product.\" (page 573) In  Decision-Based Design  the \n \n\nChapter 2: Literature - setting the stage \n29 \nprocess of the designer can be made more efficient and effective in two \nways: (1) By increasing the speed with which design iterations are performed and \n(2) by reducing the number of such iterations. \"An increment in the iteration \nspeed can be achieved if at least some parts of a design process are modelled. \nTo achieve a reduction in the number of iterations not only a model of the design \nprocess but also information that can be used to determine how the process can \nbe improved is needed.\" The authors proceed to say that \"without a model of the \ndesign process that can be represented and manipulated on a computer, it is \nimpossible (!) to provide guidance that is suitable for improving the efficiency \nand effectiveness \" (ibid.) \nThe design process is viewed as a set of decision blocks, where the relationships \namong these blocks are \"not ordered and hence not directed.\" This is termed a \nheterarchical representation of the design process. Designing starts when \"the \nfirst step is taken to extract a hierarchy from a heterarchy, that is, when the \ndominant (first) node ... is chosen.\" In other words, efficiency and effectiveness \ncan be achieved through structuring the decisions involved in the design process \nfrom \"... a pattern or structure (which is) re-entrant or recursive\" into one that is \nordered and directed. (Smith, 1992, page 49) There is thus a clear focus on \ncomponent selection and ordering, in Sternberg's words, or upon the language \nof plans as described by Coyne and Gero later on in this chapter. Mistree et. al. \nare intending to give the computer the 'responsibility for these central activities. \nThe decision rules themselves are modelled and optimization is performed as a \nconsequence of the overall structure (ordering and selection of decision tasks) \nof the meta-model and the decision rules underlying the various decision tasks. \nThe decisions are taken as a consequence of these rules and the particular \nresolution methods, in this case Goal Programming. The decisions the designer \nnormally makes are therefore to a large extent automated while based on \n(hitherto) internal rules that include Goel and Pirolli's personalized stopping rules \nin the process. \nb \nThis is optimization of the decisions, based on a model including the decision rules and \nanalysis based on Goal Programming. This is to be distinguished from optimization of the \ndesign judged from 'objective· criteria - Mistree et. al. are in agreement with Simon's \nview that designer's satlsfice (optimize their satisfaction) rather than optimize. \n \n \n\n30 \nChapter 2: Literature - setting the stage \nTwo other conclusions from Goel and Pirolli are directly supportive of Mistree \net. al; the observation that designers apply solution decomposition (treat problems \nseparately) and subsequently use abstraction hierarchies (assess feasibility of or \nrepresent solutions at different levels of abstraction). This is particularly apparent \nin Mistree et. al.'s definition of meta-design: \"A meta- level process for designing \nsystems that includes partitioning ('decomposing ') the system for function, \npartitioning the design process into a set of decisions and planning the sequence \nin which these decisions will be made.\" (Mistree et. al., page 577) \nFor modelling the design process Mistree et. al. have developed a DSP \npalette of icons which are reproduced in Figure 2.3. In short, phases, tasks, and \nevents designate gradually \"smaller pieces'. \"Events occur within a phase \n... (and) tasks and decisions occur within events.\" Tasks may or may not \ncontain other tasks and decisions. There are three kinds of decisions (expanded \nto four in later work - a 'heuristic decision' was added (see Smith, 1992)); \ncompromise, which implies that there is a trade-off, preliminary selection, which. \nimplies that a set of alternatives result, and selection, which implies that only \na single candidate emerges. Information may be seen as a stock, or a data- \nbase, from and to which activities extract and supply. System and system \nvariables \ndesignate \ninformation \npertaining \nto \nthe \ndesign \nobject, \nGoals/Bounds/Constraints belong to the problem information, and analytical \nrelationship would seem to imply some sort of analysis performed to supply new \ninformation. \nIn lieu of the objective of Mistree et. al., which is to provide an efficient means \nof structuring a design process by means of the decisions, treating the system \nbeing designed as rather parametric, the DSP technique seems like an efficient \nmeans of attacking the problem. It holds good promise for enabling the designer \nherself model her own process, and to make interventions into the process to \nupdate the model as experiences are gained from failures and successes with \nprevious models. Furthermore, it is an appealing thought that the process is \noptimized as seen from the perspective of the designer (from her own rules and \nsets of values) rather than from the design product according to some well-\ndefined 'objective' criteria. This makes possible the introduction of “softer” values \nC \nDecision Support Modelling Technique. \n \n \n\nDecision ... \nCompromise \n@ \n0 \nPreliminary \nSllec:tlon \nSyatllm \nSyatllm \nVariable \nSelaclion \nbJ \nGoals I Bounda \nConstraints \n□ \nAnalytical \nRelationslip \nDSPT palette from Mistree et. al. \nFigure 2.3: \nto reason about 'abstract' concepts, not only about numerically valued \nparameters. \nAnother insufficiency is that the system variables in DSPT designate what is often \nreferred to as a property. However, a statement (property) such as 'length of \n125 meters' In \"the ship has a length of 125 meters\" gives more than one \n'category· of information. It says that the ship has a length, that this length \nhas a value 125 meters, and that the length has a dimension in meters. It is \noften appropriate, or even necessary, that the attribute (length) Is treated \nseparately from its value (125 meters), and maybe even to view 'l 25 meters' \nas a composite itself. (See, for instance, Coyne et. al., 1990, pp. 92-93) Indeed, \nsuch a separation is crucial In the use of frames (Aamodt, page 154) or \nprototypes (Gero and Rosenman, 1990) common in computer-aided design \nsystems. \nffi  \n[!D  \n[IC> \n \n \n \n \n \n \nChapter 2: Literature - setting the stage \n31 \n \nthan \nthose \nthat monetary and \nperformance standards express. In \nthis respect it is an enlightening view \nof the design process. \nPhase \nEvent \nTask \nIn terms of the Design Process \nLanguage, however, the information \nentities introduced in the DSPT palette \nare not nearly sufficient to capture the \nknowledge needed in the design \nprocess. There Is no explicit mention of \nimportant entities such as classes or \nsystem parts (which themselves may \nor may not be systems). It is not \nnecessarily so that it is feasible to \ndefine something as a system once \nand for all. A T-beam will normally \nnot be treated as a system in ship \ndesign, although it certainly may be \nseen as a system of \ninteracting \nmolecules or as a system consisting  \nof web and flange. It  may  be  necessary \n \n\n32 \nChapter 2: Literature - setting the stage \nrelation \ndecomposition \nrelation \nsimilarity \nrelation \ncategorization \nrelation \nevent \nrelation \nelement \npart \ncausal relation \nanalogy \ninstance-of \nrelationship \ntemporal relation \nliteral similarity \nspecialization-of \nFigure 2.4: \n\"A taxonomy of conceptual relations,·adopted from Aamodt, 1991. \nHowever, the most significant drawback with the DSPT terminology, seen in the \ncontext of the DPL is the sketchy treatment of the relationship. Only one kind \nof relationship is introduced, namely the analytical relationship. Viewed In \ncontrast to the philosophy underlying Figure 2.4, for instance, it seems as \nthough Mistree et. al. underestimate the importance of the concept of \nrelations. As will become apparent towards the end of this chapter, the \nDesign Process Language is founded upon the view that the relation is the \nmost important concept in the language with which to describe the design \nprocess. I would claim that the DPL is the framework of a language with which \nthe concepts In the DSPT palette can be described - I argue It to be a more \nbasic language consisting of more fundamental concepts. \nWhat separates the DSPT from other work, and presumably is the reason the \nauthors claim It to constitute a paradigmatic shift, is that DSPT treat the decisions \nas milestones. The mapping of the design process is centered around the stages \nat which decisions are made. In most other work on design process modelling \nsuch mapping is centered around any task, whether analysis or decision.  \nd \nOne of the authors present in later work two new relationships in the DSPT palette; the \nconditional and the limiting relationship. (Smith, page 56, 1992) \n \n \n \n\nChapter 2: Literature - setting the stage \n33 \n of states where any \nMy own work maps the design process as a sequence \ne \nnew information introduced into the designer's memory (or domain) constitute a \nshift in states, similarly to what Hubka (1983, page 188) says: \"Every design \nprocess may be structured into more or less complex partial processes, phases, \nand detailed design steps with the help of a general procedural model. The \nresulting procedural elements are also processes, within which the states of \ninformation are changed.\" This is similar to what Newell and Simon say, where \nthe milestones are any processes that can be described in the language. \nFor a detailed analysis of the process, it is anyway difficult to distinguish between \na decision and an analysis as done by Mistree et. al. - several analytical tasks, \nparticularly when a computer program is applied, implies that decisions are used \nin the course of, or as a means of, analysis - it is not always possible to draw a \nsharp line between the two tasks'.\n0 Thus, a meta-model of the design process \nwould depend upon the kinds of tools applied for analysis, and the freedom to \nchoose a kind of analyses suitable for the context would be limited since the \ndecisions and other tasks are separated in the model a priori to the start of \nthe process. \nYoshikawa - A mapping approach \nYoshikawa (1979, 1981) views the design process as a sort of mathematical \nsearch in an ideal world where all solutions exist - the problem in the design \nprocess is to find these solutions. It must be noted that Yoshikawa primarily \nstrives towards establishing a theory of design that can be useful in terms of \nefficiently applying the computer in the design process. \nYoshikawa's theory can be summarized as follows: There is a set of object S \nwhich contains all objects which existed, does exist, or will exist some time in \nthe future. These objects are completely defined by attributes and \ncorresponding values. The objects have particular (or concrete) functions \nwhich are found In the set of functions, F. Thus, any object (that has a function) \nmaps onto the set F. If all objects have a function, then  𝑺 ∩𝑭 ≠∅. He \ndistinguishes \ne \nAt the very least, most programs would use implicit decisions in the form of IF .. , THEN ... \nstatements. \n \n\nTaxonomy is defined as \"the science, laws, and principles of classification\" (American \nHeritage Dictionary) \n \n \n \n34 \nChapter 2: Literature - setting the stage \ndistinguishes between an abstract function, which denotes a function when \nthis is not related to a particular object, and a concrete function, when it refers \nto the function of a particular object. (Thus, a functional description in a goal \nstatement is abstract, provided it does not refer to a particular solution, and \na functional description in an artifact specification is concrete.) The set of \nabstract functions is termed T. Yoshikawa recognizes that for every concrete \nfunction, there will necessarily be an abstract function. (That is, if there is a \n\"pen can write,\" there must necessarily exist an abstract function \"some things \ncan write\"). Therefore, 𝐹∈𝑇. \nYoshikawa places the concept of topology central in his theory. He makes a quite \ncomplicated argument to prove that T (and all subsets thereof) is a topology on S, \nand uses this consideration in developing the theory. He says that \"the set of \nabstract concepts is a topology of the set of entity concept,\" where entity concept \nis defined as \"a concept which one has formed according to the actual \nexperience of an entity.\" (Yoshikawa, 1979, page 76) These entities 'contain· all \ninformation on attributes and values, without these being 'declared' explicitly. An \nabstract concept \"is derived by the classification of concepts of entity according \nto the meaning or the value of entity.\" With these definitions, it is difficult to see \nthe difference between a topology and a classification scheme. Therefore, I \nchoose to interpret a topology as a description of the classification system, such \nthat a perfect topology implies a perfect taxonomy.1 \nWhat he terms the \"mathematical design process\" is one of applying abstract \nfunctional descriptions onto the set of concrete functional descriptions, \nseparating out F' as a subset of F. The resulting set of concrete functions F' ∈ \nF is mapped back to the set of objects S, a resulting subset s· ∈ S of which \ncontain plausible functional design solutions. If there is more than one object \nin S', a new abstract function is applied to reduce the size of F' and subsequently \ns·. This process is repeated until s· contains only one object or, arguably, until \nthe problem statements are 'exhausted'. \n \n\nChapter 2: Literature - setting the stage \n35 \nYoshikawa identifies four different contexts in which such a mapping may take \nplace: \n\" \n(a) \n(b) \ndesign in a perfect function space, \ndesign in a space with perfect topology and with some \nobjects missing, \ndesign in a space with imperfect topology and without \nmissing objects, \ndesign in a space with imperfect topology and with \nsome objects missing.\" \n(Yoshikawa, 1981) \n(c) \n(d) \nCase (a) implies a situation in which all historic, existing, and future objects \nexist, and with a perfect mapping between the abstract function space and \nthe object space (perfect taxonomy). Thus, establishing search-criteria onto T \nmarks off all possible solutions in S; the \"specification is a filter.\" \nStop \nNext \nSpecification \n  \n \nTest \nstart \nAdd More \nSpecification \nDeliver \nSolution \nFigure 2.5: \nProcess illustration of an implementation of Yoshikawa's design theory. Adopted \nfrom Zeuthen, 1986. \n \n \n \n \n \n \n \n \n \n \n \n\n36 \nChapter 2: Literature - setting the stage \nCase (b), Yoshikawa says, \"represents the essence of design in the actual \nsense, because design implies the creation of an object which does not exist \nin the actual world.\" Notwithstanding the particular definition proposed here, it \nis doubtful whether it is possible to claim the existence of a perfect topology in \nan actual design situation, since this would seem to demand that the \ndesigner knows all possible attributes - \"perfect topology\" - \n(although not \nnecessarily knowing any objects possessing those attributes) and can map any \nspecification In terms of these attributes. As my own work will claim, the \ndesigner may also need to 'design' attributes, or develop their meaning, In the \nprocess of creating an artifact description. For instance, there Is nothing \nprohibiting the designer from establishing 'girk' as a new function or attribute \nas long as it is defined properly in terms of known concepts: \"To 'girk' is to be \ntwo places at once.\" The designer would have to represent 'girk' Into the \nsystem, rewriting the topology, before any mapping towards an entity that can \n'girk' could take place. In view of this, case (d) would seem closer to actual \ndesign work. \nYoshikawa says later on in the 1981 paper that \"the memory capacity of a \ndesigner is finite, so he can not memorize the complete set of objects and \npossibly all functional categorization or complete abstract function set (or a \ncomplete topology - my remark)\" This would indeed imply that the realistic \ndesign scenario is case (d), although Yoshikawa presumes that the only \nproblem is memory-related - not philosophical, or rather epistemological. In \nthis imperfect situation, Yoshikawa discusses what may happen in a search for, \nor mapping towards, a design solution: \n \n\nChapter 2: Literature - setting the stage \n37 \nand check the objects in t'; If objects of more than one are still \nincluded in t', he repeats the process until only one object in t' ... , \nThe new abstract function to be added to the initial specification \nmust be created by the designer. This process needs the \ndesigner's skill. It should be noted here that the so-called design \nincludes this 'designing· of specification. \nHe finds no objects int. In other words, his memory is vacant for \nthe given specification. Then, he starts narrow-sense designing. \nThere are three reasons why he finds no memory of object. \nc) \n(Cl) \nThe intersection of the specified abstract functions is truly \nnull set, due to logical contradiction of them. \nHis memory is really vacant correspondent to the \nspecification. \nHe made a wrong mapping due to inaccurate structure \nof topology in his brain.\" \n(Yoshikawa, 1981) \n(C2) \n(C3) \nIt should be clear from this that Yoshikawa views designing as a form of query \ninto a database through a query (or search) condition based on any conceivable \nfunction or attribute. These functions or attributes are all known. As soon as \nthe query is performed, the set of matching objects contain all plausible solutions. \nIf there is only one solution in the set, the design process is completed. If there \nare multiple solutions, more conditions will be put into the query to narrow the \nset.9 If no objects appear, the query condition must be \n9 \nThe mapping suggested by Yoshikawa may be classified as a kind of discrete, \ncombinatorial problem, similar to that referred to by Zeuthen (1990, page 33): \"Find in a finite, \ndiscrete space (analogous to F) a point (or a set of points) (analogous to {s1' s2’, ‘‘ ., sn’}) \nsatisfying the set of constraints (analogous to t)\" (Comments in square brackets added here.) \nTo \nreduce the number of solutions, or S;, various techniques are suggested, for instance integer \n((linear) programming. \n(linear) programming. This can be shown by establishing a function: \nn \nG(s)=IlH(9 A (G(s;)=l -s;ES') where \nj=l \nH(t) = 1 ifs; satisfies specification j and O otherwise \nG(s,) is 1 if s, satisfies all specifications tl' Application of an integer linear programming technique \nwould seem an appropriate way to find the correct solution. This is a quite well-known and non- \ncontroversial method to use in finding solutions in the kinds of situations discussed by Yoshikawa. \n \n \n\n38 \nChapter 2: Literature - setting the stage \nrelaxed (C1) or the designer must amend by either \"selection of another  \n(object) or by modification of the initial object.\" \nIndeed, Zeuthen says of the Designer's Workbench (DWB), which is an \nimplementation of Yoshikawa's theory, that\"... the basic idea is to prune (cut) the \ntotal space (tree) of solutions by means of heuristic knowledge.\" The \nprocess is illustrated through Figure 2.5 as adopted from Zeuthen. \nThe most significant contribution of Yoshikawa is that he introduces the \nconcept of mapping (by means of attributes and functions) as a significant \nfactor in the design process. Later in the paper, this mapping is cast as a \nspecific kind of relationship between the designer and the designed object. It \nis also a useful idea to visualize all concepts as existing, albeit not necessarily in \nthe way that Yoshikawa does. This will be revisited later on. In addition, the \nidea of a structure relating functions (or functional attributes) and attributes to \nobjects will be exploited. Yoshikawa does not, however, give any indication of \nwhat mechanisms, or abilities, to use in the mapping or in the modification of \nexisting objects. Neither does he explicate how to represent these relations. \nBoth of these are important in understanding design. \nCoyne and Gero - \"The linguistic paradigm\" \nCoyne and Gero develop in Semantics and the Organization of Knowledge in \nDesign a meta-language - \na design process language - as a means for \ngenerating designs, or specifications of artifacts particularly as applied to the \nfield of architecture. One of their main premises is that \"design can be \ndiscussed conveniently as operations within a language, (where) a system can \nbe characterized as a language if it consists of a set of indivisible elements (an \nalphabet), a set of operations (such as union or difference), a vocabulary, and \na grammar.\" (page 68) They say that one can talk of three languages in \ndesign; a language of form, a language of actions, and a language of plans. \nThe language of form is essentially that which is applied to describe the \ndesign(ed) object. Its vocabulary is (in part) composed of the (physical) elements \nfrom which the object is built, and the grammar is composed of rules that control \nthe configuration of these elements, or their mutual relationships. Thus, in their \ndomain of architecture a grammatical rule in this language could be the \n \n\nChapter 2: Literature - setting the stage \n39 \ncommand: (l) \"Place the kitchen next to the living room\" and (2) \"Put a door \nbetween the kitchen and the living room.\" It could also be a kind of production rule: \n\"If this is a single-story house then place the kitchen next to the living room.\" The \nkitchen, the living room, and door are here vocabulary elements, as are \npresumably the other sentence segments, like if, place and next to, although \nCoyne and Gero are somewhat unclear on this point. \nThe language of actions is concerned with ‘organizing’ the language of form, \nor contains grammatical rules which control the selection and ordering (note \nthe correspondence with Sternberg at page 17 - component selection and \ncomponent ordering) of the rules governing the language of form. \"The \nvocabulary ... consists of planning tasks such as ...: \nexpand actions, \norder actions, etc.\" (page 80) \nThe vocabulary elements in the language of actions include the grammar of \nthe language of form - the grammatical rules of the latter language are \nvocabulary elements to be related through the grammar of the prior \nlanguage. Thus, a grammatical rule could be \"First place the kitchen next to \nthe living room and then put a door between the rooms\" or formally \"Enact \nAction (Command) l before Action (Command) 2.\" An expansion of the \nactions could cause: \"In order to place the kitchen next to the living room then \ndo the following:\" Coyne and Gero say that the \"artifact (final state) of the \nlanguage consists of a sequence of actions (or rather commands, it seems) \nthat provides the control for a language of form\" (page 78) - the result arising \nfrom application of this language is \"a statement about actions and their \nordering.\" Coyne and Gero term this a procedural network. (See Figure 2.6.) \nThe language of plans is the language which is the primary focus of the two \nauthors. They say that \"knowledge about the selection and ordering of rules \n('action ' rules) constitute the grammar of actions in the same way that the rules \nin the language of form can be given names that enable them to be treated \nas vocabulary elements in the language of actions, it is possible to “give \nthe rules in the language of action names and regard them as \nvocabulary elements in the meta-language called the language of plans.\" \nOr action or (equest. \n \n \n\n40 \nChapter 2: Literature - setting the stage \n(page 80) The authors term this the language with which the scheduling of \ndifferent actions is performed. The grammar consists of rules that help \ndetermine which plan (or sequence of actions) to pursue. The difference \nbetween a sentence in the language of action and that in the language of \nplans is that there may be several sentences in the prior language which \ndescribe sequences of actions that will bring about the goal. A sentence in the \nlanguage of plans determine exactly which sequence of actions to choose, \nand at what time to effectuate various sequences. It is \"essentially a method \nof controlling production systems.\" (page 72) \nIn essence, the two authors term the knowledge captured through this highest- \norder language domain-independent knowledge. \n\"Rules for manipulating tasks could be based on general strategies \nfor problem solving, such as \nl . \n2. \n3. \n4. \nConsolidation \nDiversification \nConvergence \nDivergence \n... The control strategy for this system could be one in which only a \nsingle scheduling rule is adopted, or there may be an overriding \nstrategy that states, for example, \nAttempt to consolidate, and converge attention (whichever is \napplicable at any given state): if, after a particular period of \ntime, no satisfactory end state is reached, then attempt to \ndiversify.\" \n(Coyne et. al., page 81) \nIncidentally, the rule above would seem to be similar to Sternberg's solution \nmonitoring component. \n.In short, the system of languages developed by Coyne and Gero can be \ndescribed as a three-levelled one in which the grammar of the lower-order \nlanguage becomes the vocabulary elements of the language at the next \nlevel. Each language thus in some sense controls the construction (or at least \n \n \n\nChapter 2: Literature - setting the stage \n41 \nthe 'application) of sentences in the lower-order one. \"From some initial \nrepresentation of a design (the 'initial state), therefore, the grammar rules are \napplied to bring about changes .... It is possible to generate designs that \nconform to a syntactic design grammar.\" (Coyne and Gero, page 70) \nUnderlying this view is that it \"is possible to talk about mappings between \nactions in the same way that we talk about mappings between physical \nattributes.\" (Ibid., page 71) In the context of the present thesis, it is possible to \nreplace the term mapping with relation and retain the general philosophy - \ndesign can then be viewed as the act of building relations. \nThe similarities between the approach of Coyne and Gero and my own \napproach are several. The view that design can be treated as operations \nwithin a language is similar. As are the notions of knowledge at multiple levels, \nand that this layering can be captured in some language (or languages), and \nthe importance of control in the design process.\n1The most important difference \nis in the particular view of language. I will, in the DPL try.to develop the \nframework for a language that is independent of the control-level at which the \nknowledge captured through the language 'exists. ' In this view, the approach \nof Coyne and Gero will be argued to represent a somewhat artificial \nsegregation of knowledge. \nAnother important difference is in the actual structure of the language. Coyne \nand Gero primarily focusses on both vocabulary elements and grammar as \nconsisting of rules. The approach pursued through the DPL may be seen to be \na more 'linguistic' one. Some of the vocabulary elements are: Kinds of \nrelations, for instance verbal (\"I have a car\"), conjunctive (\"I have a car and \na boat\"), and prepositional (\"The car is in the garage\"); classes of 'objects' \nas operated upon by the relations (\"The (system) car (relation) has an \n(attribute) color (value) red\"), and modal relations (\"I should have a car\"). This \nimplies also that a discussion of the composition of the vocabulary elements \nfor Coyne and Gero's language of form is performed - while they treat these \nelements as \"dimensionless spaces\" with no particular meaning attached, \nIn later work, Coyne and Gero (Coyne et. al., 1991, page 37) separates knowledge \nfrom control, which counters the view in the 1986 work of meta-languages as crucial in \nrepresenting control. I will disagree with the view that separating the two is appropriate \n- control may be viewed as being a particular aspect of 'any' knowledge rather \nthan being a particular kind of knowledge. \n \n \n \n\n42 \nChapter 2: Literature - setting the stage \ngrammatical rules are applied in the DPL to assign such 'meaning' to the \nelements. The rules in DPL thus operate at a level beyond that of the two \nauthors. \nBefore concretizing some of the differences in viewpoint, it is useful to extract \none example from the paper of the two authors. At page 78 they give an \nexample of sentences constructed as grammar in the language of form: \nput A east_of B \nput A east_of Band north_of C \nThese are treated as vocabulary in the language of action, the grammatical \nrules in which will expand and sequence the sentences above. To put A \neast_of B then do If we view the result from the successful application of these \nsentences, the following sentences result: \nA is east_of B \nA is east_of Band north_of C, \nrespectively. Intuitively it would seem that these are sentences in the language \nof form, without this being too clear from Coyne and Gero. However, \nestablishing concrete different rules for the two cases (grammatical rules in the \nlanguage of form) would seem to elude the fact that the control in these \nsentences is carried by the verbal relation put and is (the degree of transitive \nverbal relations partly captures the control-issue in the language). Wouldn't it \nthen seem reasonable to let grammatical rules operate upon these relations \nrather than the sentence as a whole? \nIn Figure 2.6, Coyne and Gero exemplifies an application of the language of \nactions. The particular tasks described, painting a ceiling and painting the \nladder (state l ), are expanded (state 2) and ordered (state 3) - one should \nnot paint the ladder before painting the ceiling using that ladder. The \nexpansion and ordering are performed through grammatical rules in the \nlanguage of actions, while the particular actions (paint the ceiling, paint the \nladder) to be ordered and expanded constitute the vocabulary. This \nvocabulary consequently constitute the grammatical rules of the language of \nform. Language of plans is not explicitly used in their example, but it could \n \n\nstate.3 \nFigure 2.6: \nExample from Coyne and Gero \n- language of actions \nmachine, 2) get paint, and 3) spray paint to the ceiling from the floor: \nand Plan C - 7) get paint and 2) throw the paint upwards to the ceiling. \nPlan (or strategy or schedule) A should be selected in this particular \ncontext. \nParts of this situation (that of painting the ceiling) could be described in the \nDPL like: \nl . \"should ‘paint the ceiling’” p, \nKnown \n2. \"must ‘apply paint to ceiling’ to ‘paint the ceiling’”' \nKnown \n \n \n \n \nChapter 2: Literature - setting the stage \n43 \npresumably \nconsist of \ngrammar \nsaying something to the extent: \nGrammatical \nSternberg's \nrule \nproblem \n(Involving \nstructuring \nstate.1 \nmeta-component): \nThe particular context is to paint \nthe ceiling. In this context there \nis a choice among the following \nplans: \nA, B, or C. \nApply \ngrammatical rule II to schedule \nactions \n(combine vocabulary \nelements). \n  \n \ngatladdar \nGrammatical \nrule \nII \n(Involving \nSternberg's component-selection (or \nordering) meta-components): \nget/adder \nIf the task is to paint the ceiling, \nthere are some sets of actions \n(vocabulary elements) that will \nhelp achieve this: Plan A - 7) \nget paint, 2) get ladder, and 3) \napply paint to ceiling: Plan B – \nget \na \npneumatic \npainting \nmachine \n \n\n44 \nChapter 2: Literature - setting the stage \n3. \"must 'have paint' to ‘apply paint to ceiling'\" \nKnown \n4. \"must 'have ladder' to ‘apply paint to ceiling’”, \nKnown \n5. \"should ‘apply paint to ceiling \"' \nMatch l and 2 \n6. \"must 'have paint\"' \nMatch 3 and 5 \n7. \"must·’have ladder'\" \nMatch 4 and 5 \n8. \"have paint\" \nKnown \n9. \"have not ladder\" \nKnown \nl O. \"must ‘get ladder' to 'have \nladder\"' \nMatch 7 and 9 \n11. \"‘get ladder' to 'have ladder’” \nEliminate must from l 0 \n12. \"get ladder\" \nMatch 7 and 11 \n13. \"apply paint to ceiling\" \nEliminate should from 5 \n14. \"applies paint to the ceiling\" \nMatch 2 and 13 and \ngeneral, \ngrammatical knowledge about \nchanging infinitive to present) \n15. \"applied paint to the ceiling\" \nGeneral, grammatical knowledge \nabout changing present to past \nThis is by no means a complete example. For one, the choice of actions would \ncertainly depend on the context, for instance height of ceiling above the floor, \nheight of the painter, and so forth. The grammatical rules needed for \n‘understanding' the various keywords are also numerous and complicated. \nHowever, the example ought to illustrate major differences between the \napproach chosen by Coyne and Gero and my own approach. As they \nthemselves note, their own approach is primarily a means of producing and \ncontrolling production systems (If ... Then ... rules). \nIn the DPL rules would be applied primarily to control the application of the \ngrammar, like: \"If there is a should in the sentence, then this indicates (...)\" or \neven \"An if in a sentence indicates (...).\" Rules are tied to keywords, or groups \n‘ \n\nChapter 2: Literature - setting the stage \n45 \nof keywords (primarily relations). In the above example, should is a relation \nindicating a desired or necessary state or action (or actually sentence or \nproposition) and must is a relation indicating a required state or action. For \ninstance, \"should 'have ladder\"' signals a desire to reach a (future) state where \nthe sentence \"have ladder\" exists. Both of these words belong to a group \nsignaling things to be done - \nin DPL called modal verb relations (also \nincluding will, can, etc.). Other groups of words are the preposition relations \n(to), conjunction relations (and, or), and verb relations (have, get). \nA rule could say that \"if must have and not have then get.\"J More \n(grammatical) \nrules could expand ‘must have· to find what is the \nconsequence if (possessive verb relation) have is preceded by (modal verb \nrelation) must. The tense of the verbal relations might be captured in rules like \n\"If a sentence involving the infinitive tense of a transitive verbal phrase is \nestablished then a new sentence is constructed where the verbal relation is \nreplaced with its present tense\" (\"Apply paint,\" as a command, is immediately \nfollowed by \"Applies paint\") and \"If a relationship involving the present tense \nof a transitive verbal phrase is removed then a new proposition is constructed \nwhere the verbal relation is replaced with its past tense.\" (\"Applies paint\" is \nreplaced with \"Applied paint\" upon ‘terminating’ the activity) This is only \nsketchy indication of the difference between Design Process Language and \nthe 'linguistic paradigm' of Coyne and Gero. The principles underlying the DPL \nare developed in more detail in Chapter 4 and Chapter 5. \nChapter summary \nI had two main intentions with discussing the literature in this chapter. One of \nthese was to disclose whether design may be viewed as general intelligent \nbehavior, in specific the kind of intelligent behavior that humans display in \nproblem solving situations. Upon comparing literature in design with the theory \nof intelligence as proposed by Sternberg, I found that there are several \ncommon points. All major processes that Sternberg, as a proponent of the \nInformation Processing Theory, argued to be important in intelligent creatures \nThe idea that some relations (if, and) are used to establish grammatical rules for \nrelations at another level (''if an ?? then ...') should not constitute difficulties. This is what \noccurs in natural language, where concepts and relations are defined by means of \nalready defined (or known) concepts and relations. \n \n \n\n46 \nChapter 2: Literature - setting the stage \nwere in some way traceable into a wide specter of works in the field of design \nresearch. This set the stage for discussing design in the context of human \nbehavior. \nThe second intention, of most importance to the subsequent discussion in this \nthesis, was to show that when researchers discuss design they really discuss \nhow things relate. Whether these relationships concern how activities are \nordered, how decision rules map between a condition and an action, how an \nobject search space is organized, how objects in that search space are \nlocated, or how decisions are ordered and what is decided upon, the \nfundamental question is still how things relate to each other to form a coherent \nwhole that expresses ideas about how design may be described. The theories \nare built by discovering regularities, and these regularities are described \nthrough establishing relationships among known things - unknown concepts \nare described by relating them to known concepts. I will in the remainder of \nthis thesis take the Idea of the relations further to see whether it can bring \nsome understanding of what design is about or, at least, how a design process \nand a design object can be described. \n \n \n\nChapter 3: Formal knowledge representation \n47 \nChapter 3: Formal knowledge representation \nThe idea that relations are central in representing knowledge has been \npursued by several researchers in several disciplines. In Chapter 2 it was shown \nthat the general notion of relation could be traced into a wide spectrum of literature \nin design research and into all areas of design; from those focused on the \ndesign object to those focused on the design process. \nThe areas of study where symbolic representation of knowledge has been \ntreated most rigorously are those areas focused on developing computer \napplications, particularly within artificial intelligence. An obvious reason for this \nis that the computer traditionally has required the knowledge to be explicit in \norder to process it - no knowledge can be assumed to exist unless it is in some \nway directly represented symbolically or can be drawn from information that \nis represented symbolically. Researchers who focus on enabling computers to \n'behave' in domains of knowledge manipulation, are bound to \"take knowledge \nseriously.\" It is therefore useful to review briefly the way knowledge is indeed \ntreated in these fields. \nMain-stream conceptions of relations \nThis section discusses in brief predicate calculus, production rule systems, \nconnectionist \nmodels, \nentity-relationship \nmodels, \nand \nobject-oriented \nprogramming. The purpose is not to provide a comprehensive and exhaustive \ndiscussion of all strengths and weaknesses of the techniques - the primary focus \nis on the use of relations between concepts in some form or another, and later \non to show that relations are essentially what constitutes the common \ndenominator in these languages. In the next section the various kinds of \nlanguages are discussed in terms of strengths and weaknesses as far as \ndesign goes. \nPredicate calculus \nIn artificial intelligence one of the more predominant and earliest languages \nused for representing and manipulating knowledge was predicate calculus. \nPredicate calculus is essentially a kind of language intended for applying \n \n \n \n \n\n48 \nChapter 3: Formal knowledge representation \nformal rules of logic to make inferences in a well-structured domain. \nsentence is in predicate calculus called a proposition. \nA \n\"There are two types of symbols in predicate calculus: variables and \nconstants. Constants are further subdivided into object constants, \nfunction constants, and relation constants Variables are used to \nexpress properties of objects in the universe of discoursea without \nexplicitly naming them. An object constant is used to name  specific \nelement of a universe of discourse  A function constant is used to \ndesignate a function on members of the universe of discourse.  A \nrelation constant is used to name a relation on the universe of \ndiscourse. Every relation constant is either a mathematical operator \nor a sequence of alphabetic characters or digits. ... The following \nsymbols are examples. \nOdd \nEven \nPrime \nParent \nRelative \nNeighbor \nAbove \nBetween \nNearby \nIn addition, every n-ary function constant can also be used as an \n(n+1)-ary relation constantb\" \n(Genesereth and Nilsson, pp. 14-15, footnotes added here) \nPredicate calculus is a quite pragmatic way of arranging the language. For \ninstance, the reason for Parent to be cast as a relation constant instead of an \nobject constant is to ease the representation of and operations upon the fact \nthat \"Anne Lise is the mother of Bill,\" which turns out in this world to be a \nproposition like Mother (Anne Lise, Bill), where both objects and relation \nconstants are easily identified. One problem arises, however, when we state \nthe fact \"Anne Lise is a mother.\" This can be accomplished in two ways; either \na \n\"The set of objects about which knowledge is being expressed is often called a universe \nof discourse.· (Genesereth and Nilsson. page 10) \nb \nn refers to the number of 'arguments' in the relation - the relation Above would be a \nbinary (n=2) constant, for instance Above ( A, B ). However, In a different language \nAbove might even be unary, like in Is(A Above ( B)) - A is above B! Between could be \ncast as a ternary constant, like in Between(A B, C) - the grammar (rules of  \ninterpretation) determines which is between which. \n \n \n\nChapter 3: Formal knowledge representation \n49 \n(i) as ∃ x Mother (Anne Lise, x), where x is a variable, or (ii) through establishing \ntwo relation constants, Mother-of and Mother, where the former is binary (Mother-\nof (Anne Lise, Bill)) and the latter is unary (Mother(Anne Lise)). \nThe problem with (i) above is that the proposition contains unnecessary \ninformation - the general understanding of the concept mother implies that \nthere is someone to which the person is a mother.c The language becomes still \nmore tedious when we state \"The mother of Bill is the neighbor of Bill.\" \nPresumably \nthis \nwould \nread \nsomething \nlike \n∃ x Mother( x, Bill) A \nNeighbor ( x, Bill). The problem with (ii) above is that two definitions, or \n‘grammatical’ rules, are necessary, and the fact is eluded that the concept \nof mother has characteristics that are constant regardless of the context in \nwhich the concept appears. Thus, it should be possible to use the same \ndefinition, or concept, of mother whether we state that \"Anne Lise is a \nmother,\" \"Anne Lise is the mother of Bill,\" or \"Anne Lise is the mother of Bill and \nMary.\" Incidentally, Mother-of is a combination of concepts, where of is a \nprepositional relation. \nThis inefficiency of language is obvious in the following segment of a Prolog \ncode, cited from McCarthy (1986, page 261): \n\"sterile (X) :- sealed (X), not alive-bacterium (X). \nalive-bacterium (X) :- in (Y, X ), bacterium (Y), alive (Y)\" \n(Note that\":-\" stands for 'if' - reverse implication(<=)) \nIn the cite above, the term alive appears both alone - as a separate function \nconstant - and in conjunction with the term bacterium which is also a separate \nfunction constant. They are joined into the composite alive-bacterium because \nit becomes tedious in this language to use the elementary terms (like in line \ntwo above) every time a reference is needed. There is no way, in predicate \ncalculus, to merge two function constants, such as alive and bacterium, in a \nway like it is done in natural language. In daily speaking the knowledge \nC \nAnyway, in general language the statements that \"Anne Lise is a mother· and \"Anne \nLise is a mother of someone\" might not be considered identical. \n \n \n\n50 \nChapter 3: Formal knowledge representation \ncontained in the cited propositions could be delivered in the form: \"X is sterile \nif it (or X) is sealed and no alive bacterium is in it (or X).\" \nProduction rules \nIn other approaches to artificial intelligence, production rule systems are \nfrequently used in the knowledge representation task. In this language, \nknowledge is represented as condition-action rules, or \"If A Then B\" kinds of \nrules. If the condition A is true then the consequent B follows. The three \nlanguages of Coyne et. al., discussed in Chapter 2, were essentially \nconstructed from such production rules. It is interesting to note what Holland \net. al. say of this kind of language: \"Rules are (the) building blocks; but for \nefficient operation a processing system must have its rules organized in relation \nto each other. Implicit organization arises from patterns of conditions and \nactions: if the action of rule 1 satisfies the condition of rule 2, then the firing of \nrule 1 will tend to lead to the firing of rule 2. (Coyne et. al.'s language of \nactions) Explicit organization can come through pointers that are used to link \nrules directly together. (Coyne et. al.'s language of plans)\" (Holland et. al, \n1989, page 17, comments in brackets added here.) The relations are again \nseen to be central. \nIn advanced systems, there are several kinds of rules where each rule has a \nstrength in performance (which is a function of confidence and relevance, among \nother measures). Competition, or selection, among rules in such production \nsystems is based on their relative strength - a kind of \"survival of the fittest\" \nstrategy, Production systems are somewhat similar to stimulus-response (s-r) \ntheories in psychology and Test-Operate-Test-Exit modules (TOTEs) in machine \nbehavior and, incidentally, also to a large number of models suggested to \ndescribe or prescribe the design process. (See, for instance, Figure 2.2. Asimow \nimplicitly introduced several TOTEs - analyze and evaluate sequences - as \nelements in the design process.) \nConnectionist models \nNeural networks can generally be described as follows: All concepts are \nviewed as nodes in a network, related in some way through connections. Most \nconnections are of zero value (that is, unrelated concepts) and some have \n \n\nChapter 3: Formal knowledge representation \n51 \nvalue close to one (closely related concepts). In this model, some conceive a \nproblem-solving task to start with presentation of a problem which activates \nvarious nodes in the network, the activation of nodes (or concepts) depending \non the strength with which they are associated to the problem. In short, \nconcepts are defined by means of their connection strength to other concepts, \nand solutions to problems are the concepts that get the highest ‘score.' \"In \nthis sense, 'the knowledge is in the connections,’ as the connection \ntheorists like to put it, rather than in static and monolithic representations of \nconcepts.\" (Holland et. al., pp. 25-26) \nA close relative of the neural networks in psychological theory are semantic \nnetwork models, where memory is seen as consisting of connected nodes \n(concepts). In the simplest of these models, the connections between \nconcepts are assumed to be of different 'lengths'. The distance between two \nnodes represents the degree of association between the concepts that these \nnodes represent. (Klatzky, 1980) In the more complex of them, the relationship \nbetween them is not only one of simple correlation, but each concept is \nassociated also to the role it plays with respect to other concepts, as agent, \nobject, goal, and so forth. (Sowa, 1984) The results from activating the 'simple' \nnetwork models is an association among concepts, whereas an activation of \nthe more complex models are more similar to complete sentences. \nIncidentally, these ‘connectionist' models are in some way congruent with \nYoshikawa's view of the world as a highly organized set of concepts, where the \nclosest fit to the problem statements (incremental constraints) is the design \nsolution. \nEntity-relationship models \nOutside the specific domain of artificial intelligence and expert systems, database \nmodelers in particular and computer programmers in general are quite involved \nwith the issue of knowledge representations. One of the more pervasive approach \nof the prior has been that of using entity-relationship (e-r) models. The thinking \nbehind e-r models is actually not unrelated to that behind the connectionist \nmodels. All entities are defined by means of other entities to which they are \nexplicitly related. At the 'bottom' of such a structure are kernel entities, \nmeaning that they \"can exist on their own without being related to other \nentities.\" (Tsichristzis and Lochovski, page 115) The knowledge is captured through \n \n\n52 \nChapter 3: Formal knowledge representation \nthe relations in both connectionist models and e-r models. In addition, the \napplied relationships are quite similar to the predicates, or relation \nconstants, and the entities to object constants in first order predicate calculus.d \nObject oriented programming \nObject oriented programming (OOP) has received much support among \ncomputer programmers and data modelers. It essentially is a means of \nstructuring knowledge as class-subclass-instance-property relationships, where \neach subclass and instance inherits and holds some properties and methods \nfrom its ancestors while new properties and methods may be defined at the \n'subclass' level. Each object 'holds' knowledge of the methods that may affect \nit, and operations are performed through instructions to the objects telling \nthem \"what to do with themselves.\" One of the major advantages to \nrepresenting knowledge within OOP is the aspect of inheritance of properties \nfrom a general category to a less general category of concepts. Thus, mother \nand father both share some properties defined in a general class, for instance \nthat of persons, while having specific properties defined in more specific \nclasses (e.g., those of female and male). Multiple inheritance is allowed, \nimplying that one concept may inherit properties from more than one \n(immediately) general category (or concept). \nOOP also brings with it the possibility of encapsulation, leaving some \nknowledge regarding an object open for public scrutiny while other knowledge \nis private, in OOP terms. Such encapsulation tends to stabilize and provide \nsecurity in a model, in the sense that only that information which is allowed to \nchange may change. \nd \nFunctions (or rather transactions and interventions) cannot be represented in the \ntraditional e-r model. However, recent work has merged object- oriented programming \nand the e-r models to include methods (transactions) to be represented in e-r \nterminology and to allow for inheritance through, for instance, HasSubclass relationships. \n(See Dale, 1991) \n \n \n \n\nChapter 3: Formal knowledge representation \n53 \nWhy traditional languages are insufficient \nMost of the knowledge organization or representation languages\n0 described \nabove have virtues in particular contexts or applications. Except from the \nconnectionist models, they all have been implemented in some way and \nproven to be useful in processes involving transactions on knowledge. \nHowever, there are some features in all of them that make them insufficient for \nthe present purposes; to enable design process and design object to be \nmodelled in the same language. \nThe present section discusses each of these languages that are briefly \ndescribed earlier, with a special emphasis on the problems with object-\noriented programming languages for the reason that OOP is frequently \nconsidered in the context of knowledge representation for automated design \nand life-long product models. \nPredicate calculus is in general based on formal logical rules for operations on \nobjects, where the objects carry no meaning in and for themselves. For the \nmost part, predicate calculus requires the problem to be well-structured, \nparticularly in the sense that the initial condition should contain all the rules \nneeded to reach the final state. In addition, the objects in the universe of \ndiscourse cannot themselves be functions or relations in first-order predicate \ncalculus (FOPC). If logical operations are to be performed that change the \n‘meaning' of existing function constants or relation constants or that introduce \nnew ones, this is higher-order predicate calculus which brings with it serious \nproblems in terms of logical consistency and stability in knowledge \nmanipulation. (Minsky, 1986). The efficient use of predicate calculus is therefore \nessentially limited to FOPC and to well-structured problem domains. Since \ndesign is shown to introduce functions and relations at several levels (Coyne \net. al.'s language system included three such levels) predicate calculus is of \nlimited use. In addition, since the design problem cannot generally be \nassumed to be well-structured predicate calculus seems unfeasible. \ne \nIt is realized that probably none of the representation models discussed above would \nsatisfy the requirements as a complete language. The term language is used here in a \nvery loose sense, as a reference to the particular characteristic features each \n‘scheme· applies in representing and manipulating knowledge. \n \n \n \n\n54 \nChapter 3: Formal knowledge representation \nPredicate \nlanguage \ncalculus thus does not seem to do the trick in establishing a \nwith which to describe an arbitrary universe of discourse and a \nprocess changing this universe. It is, however, useful to note that the function \nconstants may be viewed as relation constants in predicate calculus, as in above \n(A, B) (above as relation constant) as compared to is (A, above (B)) (above as \nfunction constant). This conspires well with what was said earlier; interventions \nand transactions in the design process may be viewed as relations between that \nwhich performs and that which is performed - 'functions' may be viewed as \nrelations. \nProduction systems have a great virtue in their effective control of operations \nin design, which several have shown of empirical importance in design (see \ndiscussion of Coyne et. al. in the previous chapter). The main problem, \nhowever, is that a problem-solving system based on if-then relationships \nrequires two important features aside from an understanding of the semantics \nof the two terms if and then - it requires an 'understanding ' of the antecedent \n(the condition) and an understanding of the consequent (the action). This issue \nis frequently eluded when these expert systems are discussed. There is often an \nimplicit assumption that the condition and the action can be treated as \nstatements that are considered true if their exact match is found in memory. In \nother words, a rule like \"If 'length is larger than maximum length' then 'reduce \nlength\"' 'fires' on finding the string of characters (A) \"length is larger than \nmaximum length.\" (The sentence \"reduce length\" is then hopefully to be found \nas a condition in at least one other rule.) If the sentence (A) did not exist, on \nthe other hand, the only way it could be found were through applying another \nrule, for instance \"If 'Value of length is larger than value of maximum length ' \nthen 'length is larger than maximum length '.\"f \nSince there is no semantics tied to other words than if and then (except from \nsome 'logical operators' like or, and, not, and the like) and assuming that (A) \nis not stored as a string of characters, there must necessarily exist a means \n(rules) of transforming the stored information to a form matching the condition \nof a rule. That is, to assess the truth value of a condition. Should one then store \nall information in such a form that it matched all relevant conditions? It would \nIn the end there must be some semantics tied to other relations, for instance to resolve \nthe truth of relationship involving larger than. \n \n \n \n \n \nf \n\nChapter 3: Formal knowledge representation \n55 \nthen seem that when new information is added to memory one would have to \ninvestigate to which rules that information could be relevant and have to adjust \nthe manner of storage. If semantics were tied to all relations, like larger than, \nthat semantics could help assess whether the condition were true or not, \nwithout necessarily generating specific sentences to spell out that fact. With \nproper semantics, the knowledge could be implicit - without it, it has to be \nexplicit. \nIn short, production systems are generally more logical than they are expressive. \nThey are superb for mapping from an initial state to a final state as sequences \nof decisions. However, when it comes to expressing and interpreting facts of the \nworld, those facts are ultimately stored as strings of characters, where no other \nwords carry meaning than the few keywords in these 'languages'. Thus, the only \nway concepts are related is through the 'logical' relations as mentioned earlier. \nAs viewed in the context of representing the design object and design process, \nas discussed in-Chapter 2 and in remaining chapters, it is not a sufficient \nterminology. Production rules and the keywords used are still important, but as \nwill be shown in Chapter 5 they constitute a particular application of grammar - \nnot a complete language, and the terminology used is subset, important as it \nis, of a larger grammatical system. This terminology must be understood to make \nproduction rules function efficiently. \nConnectionist models have great explanatory powers in their explication of the \nissue of knowledge as relationships. The idea that a set of nodes 'light up' as \na consequence of a particular set of facts, where the highlighted nodes are \n'relevant nodes', is an idea that seems intuitively appealing. However, \nconsider these nodes as all words in a language, and the relations between \nthese nodes as dimensionless 'values '. The relations in the language must then \nthemselves be nodes in the network - sentences would then be formed as a \nconstellation of concept nodes and relation nodes, where the strength of the \nconnections decided which were related with which. However, the sequence \nof the words is certainly a major factor in determining  what the  sentence \nmeans. Assume that the nodes vessel, large, is, and \nthe, form a ‘strong \nquadruple '. The words can be combined into two  meaningful sentences; a \nquestion - \n\"is the vessel large?\" - or into a statement of fact \"the vessel is \nlarge.\" Which is appropriate and what determines what indeed are ‘meaningful’ \n \n \n\n56 \nChapter 3: Formal knowledge representation \nsentences? The problem grows, of course, if there is need to represent \ncomplex facts as in the production systems.g \nThe problem is addressed in some interpretations of these models, where the \nrole that concepts play in relations to other concepts is also included in the \nnetwork. However, in this view it seems that what is stored is more sentences \nthan disparate nodes in a network. Another problem is that there would be a \nhost of concluding ‘sentences' that all could seem to pertain to the solution, \nwhereas all but a few such relationships might be irrelevant information. \nThe connectionist models thus do not provide a means of representing \nknowledge in a form that makes it suitable for use in practical matters. Most \nof them are anyway as yet theoretical constructs that face quite significant \nproblems in terms of implementation. \nAlthough object-oriented programming gives good tools for representing \nknowledge, in particular through class-subclass inheritance, and are highly \nefficient in computer programming, they do have some characteristics that \nintroduces problems when used in design situations. Let me first discuss a \nsituation where OOP is of obvious utility - that situation which exists in \nYoshikawa's theory (see Chapter 2). \nAssume that the design process can be treated as occurring in a situation \nwhere the topology, in Yoshikawa's words, is ideal. In this case all concepts \n(objects or entities) would belong to at least one class, and all imaginable \nclasses would be represented in the topology. Assume further that the design \nprocess proceeds along the pattern roughly suggested by Yoshikawa; \n(1) \nStudy the problem statement and pick out one aspect of it (one \nfunction that the D-object is to serve or one property that it is to hold). \ng \nIt could be argued that if-then relationships are superfluous since the problem-solving is \na consequence of the model itself. However, in most realistic cases the rules should be \novert - the designer may want to plan actions according to what information is \nnecessary to meet conditions. Such knowledge might even come from outside the \nsystem if the concept in question does not exist in the model yet.  \n \n \n\nChapter 3: Formal knowledge representation \n57 \n(2) \nFind the most general class (or a set of most general classesh) of \nmembers that can serve this function or hold this property. \nRepeat with the next function or property, and select from the set of \nmost general classes the set of most general classes that can serve the \nnew function or hold the new property. \nWhen all the information in the knowledge statement is ‘exhausted· then \neither (i) select one of the classes remaining in the set and assign values \nto the attributes that are unvalued or (ii) select an instance of these \nclasses (where values are already assigned to attributes) or (iii) let one \n(or all) of the class definitions be the design solution (that is, assume such \na class description to be a sufficiently detailed specification of the design \nobject since the problem statement does not express more \n'expectations' from it). \n(3) \n(4) \nIs this problem-solving framework sufficient to produce designs? Intuitively it \nwould seem to at least include aspects of the design, in particular those \naspects that deal with prototype selection and refinement. However, a \nproblem arises if any of the following conditions are present: \n(a) \nThe topology is not ideal, which is to say that there is at least one property \nor function which the D-object is expected to hold or serve that may not be \nincluded in any class definition. \nThe solution to the problem demands a new class of objects (or \nconcepts) to appear, where the D-object or the secondary concepts \nconstitute a hitherto non-existing combination of properties and \nfunctions (or relationships among concepts). \nThe particular approach that the designer chooses to pursue is bottom- \nup (decompose problem and find solutions at a detailed level) rather \n(b) \n(c) \nIt is not necessarily so that there is only one general class whose subclasses/members \nsatisfy the requirement. For instance. the functional expectation \"Should have sanitary \nfacilities\" would bring out a host of classes, including '(most) buildings', '(some) trains', \n'(some) airplanes', and '(some) ships', rather than the more general 'man-made \nthings' to which all these classes arguably could belong. If the next functional \nexpectation is \"Should be able to transport containers at the sea\" one would probably \nend up with the class of '(some) ships'. To get a strict (or perfect) class-subclass \nhierarchy as more expectations are treated would demand that the problem statement \nwere structured heavily according to the ‘topology' such that a progressive \napplication of functional expectations causes a monotonic reduction of one general \nclass into one subclass or member of this class. \n \n \nh \n\n58 \nChapter 3: Formal knowledge representaHon \nthan top-down (find a general solution and specify components that \nhelps meet the overall expectations). \nThe designer gradually creates relationships to incrementally describe \nthe D-object (as discussed in Chapter 4). \n(d) \nThe situations (a) and (b) are related to the subjects of class and concept \nformation. OOP rests firmly upon the view that objects belong to a priori defined \nclasses (the ancestors). In other words, OOP singles out particular classes for \n\"special treatment· from which the 'children ' are to inherit properties. Thus, a \ncar may be classified as \"Cars subclass-of Vehicles.\" More untraditional or \nunexpected classes, like in \"Cars subclass-of Things_on_wheels\" or \"Cars \nsubclass-of Killing_devices\" would probably not be considered as represented in \nthe class/subclass hierarchy, and a redefinition of the ·topology' would \nlikely be needed for efficient representation. Such addition of classes is \nhazardous in OOP, particularly due to the danger of making a language that \nMcDermott (1987, page 158) calls 'Computerdeutsch' - classes are defined \nthat capture the aspect of the object that is suitable for the present purposes, \nbut which becomes absurd when stretched to the theoretical limits. \nMcDermott's argument, which essentially dealt with a critique of predicate \ncalculus, could easily be extended to OOP as well. If a 'perfect' topology, in \nYoshikawa's words, were to be constructed, there would arguably be an infinity \nof classes to which 'car' could be a subclass. \n\"Which classification is correct? Silly question! It depends on what you want to use it for.· \n(Minsky, 1986, page 91) \nBox3.i \nIn the case of (c) above, in a bottom-up approach to design rather than top- \ndown, it is difficult to see how class-subclass arrangements are complete \nenough to sufficiently support the design process. As elements are chosen, the \ndesign object gradually becomes defined. However, in this case it does not \nmake sense to move upwards in a hierarchy of classes, since this would only \nbring forth a more general class of that element - not of the system to which \nthat element were to be assigned. For instance, the concept diesel engine \nmight be considered a member of the class 'engines' (as well as other \nclasses), and little would be said regarding to what conceivable  systems this \n \n\nChapter 3: Formal knowledge representation \n59 \ndiesel engine could be related (at least not in the traditional view of \nclass/subclass hierarchies as one of general/less general relationships). The aid \nof an object-oriented language (in the understanding OOP) is essentially \nlimited to either (1) instantiation, which implies identification of instances of \ndiesel engine, or (2) abstraction, which implies to move \"upwards' to the more \ngeneral class ‘engines' to find alternative  (classes of) solutions. There is \nevidence that both abstraction and instantiation are applied in, and may be \nimportant characteristics of certain design situations (see, for instance, Goel \nand Pirolli). However, it is not likely that they are sufficient tools \nsituations, particularly in those described under (a) and (b) above. \nin most \nExample of a class-definition set-up in OOP: \nClass Things_on_wheels \n{ \n}; \nClass Vehicle \n{ \n}; \nClass Killing_devices \n{ \n}; \nClass Car: Vehicle, Things_on_wheels, Killing_devices \n{ \n}; \nThe same set-up in predicate calculus: \n∀ Car (x) => Vehicle (x) \n∀ Car (x) => Thing_on_wheels (x) \n∀ Car (x) => Killing_device (x) \nThe parallel between OOP and predicate calculus should be reasonably clear. \nBox 3.it \nIn case of (d) above the design object is described as relationships that \nincreasingly relate the object to other known things and facts - that is, that \ngradually define the object. In that case, OOP loses even more of its thrust. \nThe specification of the object does not  follow from  its class membership, but \n \n\n60 \nChapter 3: Formal knowledge representation \nrather the class membership follows from the specification of the object. \nIdentification of relevant relationship through referring to class definitions may \nbe tools to find such relationships from which the design object specification \nis built. However, as mentioned in the preceding paragraph, this tool is only \nused pragmatically. In other words, rather than the class-subclass inheritance \nprinciple being the sole guiding one for converging towards a solution, it is one \nof several means to use in that process - it is not sufficient. \nAn additional problem with OOP is its counter-intuitive nature with respect to \noperations upon objects - at least if the context is to describe intelligent \nbehavior as discussed under Sternberg in Chapter 2. In OOP every object holds \nknowledge regarding which methods and procedures may operate upon it. \nThe enactment (or execution) of methods can only be accomplished if the \nobject possesses 'knowledge ' that the specific method in question can access \nthe object. A method that is not explicitly allowed this access is denied it. \nTherefore, there is a built-in restriction on the components that can be \nselected for operations upon specific objects. This is a practical problem of \nthree (related) reasons: (l) It restricts the search in the design process for \ninnovative application of tools that existed, but were not conceived to use on \nthe particular object, when that object was defined; (2) it restricts the object \nfrom being processed in other circumstances than what it was intended for at \nthe outset; and (3) application of new tools demands that the object is \nexplicitly defined to allow those tools to operate on it. \nThere is another problem of a more philosophical and psychological nature. \nIn Sternberg's and most other psychologists view, and as is widespread among \nthe Al community (see for instance Hayes-Roth, 1985; Coyne et. al., 1990; Davis, \n1980), intelligent behavior is closely related to strict control of processes, where \nresponsibility of actions is spread into a hierarchy or network of processes. In this \nview, each lower-level process is delegated control and executes still lower level \nprocesses to perform more concrete tasks. To assume that control over actions \nis only allowed if the objects that these actions are to affect are accessible does \nnot seem very 'psychologically correct·. It would make it difficult to say that the \nprocesses control the outcome - formally it is the objects that filters the processes \nthat control the outcome. Although this object-method view is useful and efficient \nin use in particular applications and contexts, there is a problem in basing a \nknowledge representation language on this philosophy of object-method \nrelationships \n. \n \n \n \n \n \n\nChapter 3: Formal knowledge representation \n61 \nThe problem that an object is prohibited from being processed in other circumstances \nthan what it was intended for at the outset is particularly important in the context of life- \ncycle product models. The fundamental Idea behind this construct is that once a model is \nstarted to become developed, for instance in the design process, the knowledge \ngathered during development may be useful later on in the life of o product - the \nknowledge is to be recycled. For instance, a product model built in the design process \nshould 'follow’ the product into construction, manufacturing, operation, maintenance, \nand even dismantling, and be refined along its lifetime. If simulation is to be performed in \nthe phase of operation, knowledge gained during the design process should be usable in \nthe (simulation) model. To restrict the model to be subjected only to those manipulations \nexplicitly thought of in the design process would seem to put heavy demands on the \nforesight of that modeler or programmer! \nThe issue of OOP and its problems in regards to life-cycle product models is not trivial. A \nconcrete example from a Norwegian shipyard should be illustrative: The preliminary design \nprocess decomposed the vessel into traditional classes like hull, machinery, auxiliary \nequipment, and internal arrangement. In the detail design phase the decomposition was \nchanged, into steel, piping, electrical systems, and woodwork. The construction was \nmodular, in sections of 13 meters - a new decomposition. If a product model that were \nto follow into these three phases were rigidly based on the initial classification, it would \nhave to be reconstructed for each new application. The number of classifications at this \nparticular shipyard was actually moderate. Another Norwegian shipyard could after a \nthorough Investigation identify fourteen different systems of decomposition. \nBox3.iii \nrelationships - it would simply restrict the discussion of control. \nAnother catch treated as objects, with classification according to common \nproperties, decomposition, and subject to intervention from other methods (for \ninstance through learning). (See Newell and Simon, 1972, for an excellent \ndiscussion of decomposability and classification of information processes.) \nThe objects in OOP resemble in some is that methods cannot be objects, in \nthe sense that objects operated upon by methods can be. There is a sense \nto which methods can semantically be way the variables and object constants \nin first order predicate calculus (what can be done to), and the methods \nresemble function constants (what can be done). In some sense OOP is an \nadvanced alternative to first order predicate calculus, but, as predicate \ncalculus, it becomes less potent in higher orders where also methods may be \nsubjects of intervention, i.e., be treated as objects. \nConcluding, it seems that OOP may be appropriate in certain design situations, \nparticularly in any of the following: \n \n\n62 \nChapter 3: Formal knowledge representation \n(i) \n(ii) \n(iii) \nTop-down approaches. \nWhen the D-object can be assumed to closely resemble existing objects. \nWhen all methods that are to be used in the process are a priori known. \nIn any of the following situations, OOP is not very efficient: \n(i) \nWhen the problem solving or design process is of such a nature that a \nconcept is classified according to its properties, and not defined \naccording to the properties of its class. \nWhen the structure (configuration) and property types are frequently \nchanged (and subsequently also the class-membership of that object). \nWhen new methods are in development or when old methods are used \nin an innovative manner. \nWhen new classes are frequently defined. \n(ii) \n(iii) \n(iv) \nIn addition, in an environment where there is talk of control by an intelligent \nmechanism, OOP introduces some significant problems in relation to the issue \nof control. \nProcess vs. Content - Design Process vs. Design Object \nBefore moving on to remaining chapters it is necessary in this section to discuss \nthe distinction between what can be done and what can be done to. This is \na segregation that has caused several problems; where does the boundary \nbetween process and object lie? \nTraditionally, operations upon memory have been treated as separated from \nthe memory at which these operations have been directed. This is even seen \nin research within psychology. Blumenthal notes (Blumenthal, 1977, page 161): \n\"Modern investigators of memory include questions of the forms of \nstorage of memory material, the separation of memory into different types \nor categories, and the distinction of different types of retrieval strategies. \nEarlier analyses of mind described ideas or memories as being associated, \norganized, stored, and retrieved. But when we ask who or what does this \nassociating, organizing, storing, or retrieving, we are thrust back again to \nthe organismic question of the process of cognition - to questions about \nthe user of the information rather than the information itself.\" \n \n \n\nIn traditional computer programming, there is a traditional segregation along \nthe following lines: A combination of programs operate upon the data in the \nform of variables, structures, files, and so forth. The community has to a large \nextent taken for granted the distinction between procedural knowledge, or \n\"implicit knowledge (which is stored) in the sequence of operations performed \nby the program,\" and declarative knowledge, which \"is contained in \ndeclarations about the world. Such statements typically are stored in symbol \nstructures that are accessed by the procedures that use this knowledge\" \n(Genesereth and Nilsson, 1987, page 3) \nDesign researchers are also accustomed to the distinction between content \nand process, or more specifically design object and design process. Christiaans \nand Venselaar talk of four 'kinds of' knowledge - declarative, procedural, \nsituational, and strategic. (Christiaans and Venselaar, 1987) Mistree et. al., as \ndiscussed in Chapter 2, distinguished the process model as one composed of \ndecisions and analytical relationships, while the object description is reduced \nto one defining systems and system variables. The traditional interpretation of \nthe popular term product model in the design context is a manifestation of the \nsegregation of content and process in design, object and method in OOP \nterms, indicating a desire to construct a 'process free ' model of the design \nobject that can be put to use by any conceivable process model, whether this \nis of the actual design process, or the later processes of manufacturing or \noperation. \nIn the context of artificial intelligence, McDermott systematically evaluates \ndifferent approaches to creating a process-free model of the world, and \nconcludes that \"(in) most cases there is no way to develop a 'content theory' \nwithout a 'process model. ' ... A content theory is supposed to be a theory of \nwhat people know, how they 'carve ' up the world, what their 'ontology' is. \nA process model explains how they use this knowledge. A content theory is at \nNewell's 'knowledge level’, supposedly independent of how the facts it \nexpresses are to be manipulated. (McDermott, page 157, 1987) McDermott \nseems to give support to the approaches of, for instance, Mistree et. al. and \nCoyne et. al., and counter the view of, for  instance, Yoshikawa. The prior \nChapter 3: Formal knowledge representation \n63 \n \n\n64 \nChapter 3: Formal knowledge representation \nresearchers include in the models of the process also specific models of the \ninformation being processed. The latter separates the object space as \nsomething whose representation is grossly independent of the 'mapping' \nprocess that locates objects in this space. \nThe question is then what accounts for this interrelation between process model \nand content theory. One answer is that there obviously is a need for consistency \nbetween the two, in that the content must be accessible to the process in one \nway or the other. However, this only says that there must be a unifying language \nsuch that concepts in the content model are ‘understood’ in terms of the \nprocess model.l \nAnother answer might be that one cannot represent all the information that is \navailable, since this would constitute an infinitely large content theory. \nTherefore, the model cannot support all conceivable processes. Of course, the \nmere use of the terms ‘model' and 'theory' imply that these representations \nare selections or simplifications of the world - no models or theories are \ncomplete pictures of what they are to describe. Arguably, there will therefore \nalways be processes that cannot be supported by the content theory simply \nfor the reason that the knowledge needed for these processes to be \nundertaken is yet not included in the theory. \nThe above is not to say that new knowledge cannot be included in the content \ntheory, or that ‘new' or extended processes cannot use some of the \nknowledge that is represented in the 'old’ content theory - it is merely to say \nthat the particular application of the theory - the process model - was not \ncomplete at the time the theory was established. Thus, the clue apparently is \nto use a language in which all content knowledge and all process knowledge \nmay be included, and to use a language that enables content and process \nto be related. This makes possible a gradual expansion of both models without \nhaving to 'throw away' old representations. To rephrase McDermott: There is \nno way to develop a content theory without a process model  unless the \nWhen the terms content and process are used ln this thesis, it is not to be interpreted as \na subscription to the view that these indeed are segregative models. The terms are \nused to loosely separate between when something concerns activity and when it \ndoesn't. It is argued earlier. and will be repeated later, that It is difficult to draw sharp \nlines between that knowledge which pertains to process and that which pertains to \nnon-process. \n \n \n \n \n \n \nh \n\nChapter 3: Formal knowledge representation \n65 \ncontent theory and the existing and future process models are represented, or \nrather representable, in the same language. \n\"It wouldn't be much use to have a theory in which knowledge is somehow stored away - \nwithout a corresponding theory of how later to put that knowledge at work. (Minsky, \n1986, page 120) \nBox 3.iv \nIn most researchers' view, as shown in Chapter 2, some processes run at a \nhigher level than others - general problem-solving knowledge, represented \nfor instance through Sternberg's seven components, is knowledge of a higher \nlevel than the procedures applied for search, calculation, symbol \nmanipulation, and so forth. Newell and Simon stretched this even further by \nshowing that processes can be decomposed into more elementary processes. \n(Newell and Simon, 1972) At the outset of the design process, or in the initial \nstate, there does exist some process model that can 'cooperate’ with the \ncontent theory. The point is that the process model gradually expands as \ncomponent selection and ordering is undertaken, in Sternberg's theory, or as \nthe processes are described in more detail, in Newell and Simon's theory. In \nother words, the process model develops as the process develops, ideally in \nsuch a way that the process causes the desired goal to be reached. \nIn this view, the content theory obviously supports the extension of the process \nmodel even if the extended process is not explicitly conceived or known at the \ntime the content theory was established. Some (higher level) processes are \nrepresented initially in conjunction with the content theory, while other (lower \nlevel) processes are included in the process model as the problem-solving \nprocess evolves. \" \"Cognitive science ... aims to construct a ·working model' \n(initial process model and content theory) of a device for constructing working \nmodels (subsequent process models and content theory).\" (Johnson-Laird, \n1983, page 8, comments in brackets added here.) Similarly, the design process \nmay essentially be viewed as the task of developing content theory and \ndesign process models. \nThis brings back the issue of natural language. Johnson-Laird takes the position \nthat mental models do not have any procedural/declarative dimensions. He \nrather asserts that any mental model includes procedural semantics, where \n \n \n \n \n \n \n \n\nChapter 3: Formal knowledge representation \n66 \n“... There appears to be no strong empirical consequences of claiming that a certain \npiece of information is stored in memory procedurally as opposed to declaratively. The \nchoice of representation largely depends on what the system is supposed to do.” \n(Johnson-Laird, page 248) \nBox3.v \ngrammar plays a crucial role in making such a model 'meaningful'. \"Mental \nmodels are constructed by a semantics that operates on superficial \npropositional representations of the premises. In general terms, this process \nconsists in mapping strings of symbols into models. ... The intentions of a \nsentence can be built up compositionally from the intentions of its constituents \nin a way that depends only on their grammatical mode of combination.\" (Ibid., \npp. 167-168) Process may then be seen as mainly an issue of applying \nknowledge through grammatical interpretation, while content is mainly an issue \nof storing knowledge as relationships among vocabulary elements in the \nlanguage. \nChapter summary \nIn this chapter I have undertaken a brief investigation of existing \nrepresentational systems - representational languages - to see what they can \noffer in terms of representing knowledge about a design object and a design \nprocess. They all, in some form or another, use relations between concepts \nin order to represent knowledge. These representational languages are, \nhowever, too weak in expressive powers for the purpose of representing the \nknowledge that is relevant when the design process and the design object are \nto be described. This is particularly so when the ambition is to use one \n‘content theory' for several different purposes, some of which may not be \nknown at the time when the theory is first 'started ‘. \nI have argued that to make the content theory accessible to also new \napplications the content theory and the process model must be expressible in \nthe same language. \nIn summary, I can say that no existing languages are completely appropriate \nfor use in representing the design process because they either: \n \n\nChapter 3: Formal knowledge representation \n67 \nAre not flexible enough in terms of process control. \nAre not broad enough to meet the particular needs in the design \nprocess. \nDo not give a language for developing content and process in the \nsame framework \nl) \n2) \n3) \nI claim that there is an underlying language which is more general and which \nis the ultimate 'source' of the artificial languages discussed in the preceding. I \nclaim that this source is found among the natural languages. \n \n\n68 \nChapter 4: Resolution through relations \nChapter 4: Resolution through relations \nThe preceding chapter discussed a number of publications, both within the \nfield of design and in the more fundamental field of psychology, all viewing \nthe theme from different angles. The present chapter has two purposes: (1) To \nintroduce design as using and constructing relationships in the process of \nforming a design concept, and (2) to prepare the grounds for discussing the \nDesign Process Language developed in Chapter 5. The present chapter \nconcludes with some axioms about what design may be considered to be, \nand some of these axioms will be used to lay out criteria by which the DPL \nshould be judged and, more importantly, to specify what is to be expressed in \nthe DPL. \nIt is important to recall that neither the DPL nor the axioms formulating design \nas a process of building relationships are algorithms for design. Nor is the \naspiration to describe how design is or should be performed. It suggests a \nframework for a more integrated view of design, allowing the design process \nand the object of the process to be described in the same conceptual system. \nThe purpose of the present chapter is thus to find invariants in design as seen \nfrom different perspectives, and the purpose of the Chapter 5 is to develop a \nlanguage from the view of design as essentially a task of building and using \nrelationships \nbetween \nconcepts. \nDPL \nis \nto provide \nterminology and \nmethodology that enables these relationships to be established. \nThis first part of this chapter discusses the general idea of knowledge as \nrepresented by relationships, or sentences in a language. Then it proceeds to \ndiscuss design as building such relationships and to discuss the premises for this \nprocess - the premises that condition the final result of the design activity. The \nchapter continues to broaden the perspective, arguing that the process of \ndeveloping knowledge about the final result can essentially be represented in \nthe same manner as the final result itself - i.e., as relationships between known \nconcepts. Finally, some loose ends are collected and concludes with a set of \naxioms intended to capture invariants in design when viewed in the framework \n·presented here. \n \n \n \n \n \n \n\nChapter 4: Resolution through relations \n69 \nI \nInitially, it is necessary to distinguish concept from relation. This is done for the sake \nof convenience in discussion and will be modified at a later point. A concept may \nfor now be viewed as something perceptible or concrete, while a relation may \nbe seen to represent an abstract mapping between concepts. Thus, an apple and \nthe ground are concepts, while on is a relation - we can observe both the apple \nand the ground, but we cannot observe the on. \nNote that most of these terms are borrowed from psychology, but that the \ndefinitions do not capture the aspects required if this were a study in that area. \nThey are used here, however, to ease the discussion and to provide a \nterminology that is easy to grasp. \nTable 4.1: \nSome terminology and definitions used in this chapter \nSome fundamentals \nLet me first focus on the issue of concept formation in a communication \nscenario. Assume that the world contains only four tokens - the, ship, red, and \nI Term \nI Description \nToken \nAny string of characters \nSymbol \nA string of characters that denotes a distinct idea \nConcept1 \nA reference to the meaning of a symbol \nPrimary concept \n \nThe aim of the concept formation activity - in a design- \nprocess equivalent to the D-object \nD-object \nThe overall target of a design-process - the primary concept \nSecondary concept \n \nConcepts that are applied to attach meaning to the primary \nconcept \nIntrinsic relationship \n \nA relationship between concepts ultimately related to the \nprimary concepts that does not depend on the situation in \nwhich the primary concept is 'placed’ \nExtrinsic relationship \n \nA relationship between concepts ultimately related to the \nprimary concept that depends on the situation in which the \nprimary concept is 'placed' \nGeneric memory \n \nMemory of items of knowledge stored independently from the \nwords that denote these items \nSemantic memory2 \n \nPart of generic memory that concerns the meaning of words \nand concepts \nPropositional \nmemory2 \nMemory consisting of explicit relations between concepts \n \nDesign memory \n \nKind of propositional memory where all propositions \nconstructed during the design task are stored \n \n\nChapter 4: Resolution through relations \n70 \nis. In addition, it contains the collection of tokens, or the sentence, \"The ship \nis red.\" If the meaning of none of the tokens are known or if there are no \nmeans with which to interpret the sentence, the sentence itself carries no \nmeaning. The sentence only carries meaning if two conditions are satisfied; at \nleast some (possibly all but one) of the individual tokens must carry meaning \n(denote meaningful concepts) and there must be rules that say how they \ninteract when placed together in a sentence. \nAssume a situation where the persons A and B are communicating, where A \npossesses knowledge of the vessel and B doesn't. Three of the tokens denote, \nor symbolize, ‘completely' defined phenomena to both A and B; the, red and \nis. The denotes a definite article, red denotes the value of a particular attribute \n(color), and is denotes a particular relation - the token ship does not yet \ndenote anything to B. From the sentence that A transmits, B can then \nconclude that there is a kind of relationship between the ship and red, and \nthat this relationship is symbolized by is. Immediately, there are three \ninterpretations; either (1) the ship is identical to red, (2) the ship holds some \nproperty red, or (3) the ship is a kind of red. Which interpretation is chosen \ndepends on the grammatical rules that apply. For the moment, assume that \nB chooses interpretation (2). \nSo what? It is now known to B that the ship is red, but this is all there is to it. If \nthe task at this point is for B to simply categorize the token ship according to \nthe color of the real phenomenon it denotes (an actual vessel), it may be sufficient \nknowledge. However, if the task for B is to enter into the real world and identify \nthis particular ship, it is not sufficient (unless it is the only red thing in the world). \nB needs more knowledge that relates this ship to other known concepts, which \nis to say that B needs to know more relationships between ship and known \nconcepts. \nSo, let me expand the universe of concepts known to both A and B to include \nhull, machinery, propeller, and so forth. In addition, both know another relation - \nthe relation have/has. A could then communicate new sentences to B, iike \"The \nship has machinery.\" Assuming that the significance of numeric symbols were \nalso known to both, A could establish that \"The ship has 2 hulls,\" \"The ship has 2 \npropellers.\" At some point, when A has constructed and transmitted enough \nrelationships between ship and known concepts, it is possible for B to distinguish \n. \n \n \n \n \n \n \n \n \n\nChapter 4: Resolution through relations \n71 \nthis particular ship (and possibly other ships) in the real world based upon the \nknowledge carried by the set of relationships (or by the concepts and the \ngrammatical rules applicable to interpret the relations) that A has transmitted \n- B has formed a concept of ‘ship ‘. \nOf course, if A were to transmit a mere (unorganized) collection of the symbols \nintroduced in those sentences this obviously wouldn't do the trick. Of importance \nto B is the way these symbols are combined, specifically that they are placed \ntogether in correspondence with a grammatical rule enabling B to interpret \nthe sentences in the same manner as A The more sentences with which A relates \nship to known concepts, the more defined the concept becomes to B. Thus, \nin order for A to define a new concept to B, both need (1) (elementary) \nconcepts with which to define it, (2) a set of relations which is sufficient to \ndevelop the needed relationships, (3) sentences that combine known \nconcepts and relations, and (4) (grammatical) rules which B can use to \ninterpret the sentences correctly.\n0 All of these must be common to both A and \nB, which is to say that they must use the same language and the same \ninterpretation of that language (or at least of the segment of the language \nnecessary for the communication to take place). \n“Suppose that you chopped each picture into a heap of tiny pieces. It would be \nimpossible to say which heap came from connected drawing and which came from \ndisconnected drawings - simply because each heap would contain Identical \nassortments of picture fragments! ... It is therefore impossible to distinguish one heap from \nanother by simply 'adding up the evidence, ‘ because all information about the \nrelations between the bits of evidence has been lost· (Minsky, 1986, page 202) \nBox4.i \nSo, if concepts are defined in terms of their relationships to other concepts; where \ndoes it all start? What is the point of reference? How do both A and B know what \nthe symbol red signifies? The answer to the last question is probably: \"Because \nboth have experienced what phenomenon red denotes and learnt that red \nactually does denote it!\" They assume an identical frame of reference for the \nconcept red. The same probably applies to the relation is. \na \nWhere nothing else is mentioned, sentence and relationship will be used to denote the \nsame phenomenon; a grammatically correct combination of relations and concepts. \n \n \n \n \n \n\n72 \nChapter 4: Resolution through relations \nBefore continuing, let me state the following assumptions: A concept is either \nstored as generic memory, i.e., as a concept independent of the word that \ndenotes the concept; as semantic memory, i.e., as a concept in generic \nmemory with a word to denote it; or as propositional memory, i.e., with 'explicit' \nrelationships to words symbolizing known concepts (see also Box 4.i, 4.ii). Put \nbluntly; either we need explicit sentences to attach meaning to a concept, or \nwe don't. In the following, two assumptions are made for the sake of \ndiscussion; (1) a known concept is stored in propositional or semantic memory \n(there is a word for all concepts) and (2) definition of a new concept is \nundertaken as an enhancement of propositional memory (or through \nestablishing new sentences relating the concept to other concepts.) \nIt should be realized that the issue of semantics and semantic/propositional memory is a \ndifficult field undergoing extensive research, and too complex an issue to elaborate here. \nThe reason behind the distinction between semantic and propositional memory is to \ndistinguish between that which is implicitly known and that which must be represented \nexplicitly. For instance, in most digital computers the binary digit 00001001 is related to the \nnatural number 9 inherently, or as a consequence of the structure (hardware) of the \ncomputer, and may be interpreted as existing in semantic memory. C equais 9, on the \nother hand, would in most cases be represented explicitly - not as a consequence of the \nparticular hardware, and may be interpreted as existing in propositional memory. Still in \ncomputer terminology, the mapping between 00001001 and 9 does not have to be \nrepresented symbolically, while the mapping between C and 9 does. See Dodd and \nWhite (1980) for a formal discussion of propositional/semantic memory and application of \nlanguage.. \nWith this in mind, return now to the sentence \"The ship is red.\" Assume that the \nconcept of 'ship' (or what characterizes a \"ship') is now known to B as well \nas A.b Assume then that the task for A is to enable B to distinguish this particular \nship from others. The ‘redness' of the ship should be sufficiently established, so \nA pursues to say \"The ship is a container ship,\" \"The ship is a catamaran,\" and \n\"The ship has name 'Anne Lise',\" Depending upon the objective - whether B \nis to distinguish this particular ship from others (needs a specific definition, for \ninstance by name) or is merely generally interested in ships (needs a general \ndefinition, for instance by kind) - A transmits sentences until she is certain that \nthe concept of this particular ship is satisfactorily understood by B. \nb \nThis actually means that if B spots an object she will know whether it is a vessel or not. \n(In other words, the listener accesses enough relationships to classify the object along \nthe vessel/not vessel dimension.) \n \n \n \n \n \n \n \n\nChapter 4: Resolution through relations \n73 \nTo make a preliminary conclusion in regards to design, recall the definition of \nan artifact in the design context: \"A complete, procedural and declarative \ndescription, which when executed by an external agent results in the \nconstruction of an artifact.\" (Goel and Pirolli, 1989) In the present context, the \ndesigner must describe the artifact through so many relationships (sentences) \nthat its (correct) construction is ensured. \nTerming the concept that is the focus of the communication the primary \nconcept, and the concepts used to define it secondary concepts, the \nfollowing rather trivial statements may be made: \n(l) \nThe number and kinds of sentences communicated depends on how \nmuch about the primary concept (object of communication) the source \nperceives the target to know. \nIf most characteristics of the concept are known, the source needs only to \ntransmit sentences distinguishing the current concept (the ship) from others, \nwhereas the more undefined is the primary concept, the more sentences need be \nformulated to 'tighten· its definition. \n(2) \nThe number and kinds of sentences communicated depends on how \nmuch about the secondary concepts used in defining the primary \nconcept are known by the target. \nIf the source utters a sentence like \"The propellers have adjustable pitch\" and \nthe target does not know the meaning of 'adjustable pitch ', the prior might \nDesign is probably the only activity where the future is treated as present. Few would say \n“I am sleeping” before going to bed; or “I have a car” before buying it. Designers, on the \nother hand, invariably present something along the lines of ‘The ship has length 125 \nmeters’ or “The ship has hull”· although the object in question does not exist. Do designers \ntreat future as present? The conflict is clear if the relationship “the ship is red” is \nconstructed and there are two 'possible worlds'; one in which the ship does not yet exist \nand the design process aims to design it, and another in which the ship exists and the \ndesign process aims to alter its color. In the prior case, one might get away with claiming \nthat ”The ship is red”, whereas claiming this in the latter case might cause problems. Is it \nredat the outset, or is it to become red? (Presumably, one could use “The ship is red” and \n“The ship should/will/ought to/is to be green” to distinguish between present and future.) \nThese questions will be dealt with later on in the chapter and in Chapter 5. \nBox4.iii \n \n \n \n \n\n74 \nChapter 4: Resolution through relations \nhave to define this concept through additional sentences like \"'Adjustable \npitch' means that the angle of the propeller blades can be varied.\" Thus, a \nconcept may be defined through relationships to concepts that themselves \nare defined through relationships to still other concepts. In the end, some \nconcepts are known through their relationship to the real world – purely \nsemantic concepts. \n(3) \nThe number and kinds of sentences communicated depends upon how \nthe target is to use the knowledge of the concepts being defined. \nThe kind and extent of information depends upon what is the purpose with the \ncommunication. Obviously, the need for information increases with the number \nof uses to which the information is to be put, and increases also with the depth \nneeded - how much definition a concept needs. \nThese three statements do not represent very radical thoughts, and are indeed \nwhat researchers into speech activity have said for years; theme and context. \nOne of the fundamental premises stated in Chapter l was that designing \nessentially involves the production of knowledge. It then follows that designing \nis essentially viewed as a matter of producing a collection of relationships, and \nthus constitutes and enhancement of propositional memory, alternatively \nenhancement of what is here called design memory (see Table 4.1). (See also \nAamodt, page 149) \nDesigning relationships, or relationships in design \nThe preceding section assumed a situation where the process was \ncommunication - knowledge was to be transferred between a source A and \na target B. A 'possessed ' knowledge about the ship prior to the \ncommencement of the process, and selected what knowledge to ‘transmit' to \nenable B to form a concept of this 'ship' - to conceptualize it. \nShifting the situation somewhat, saying that also A is unknowing of the \ndefinition of the primary concept, complicates matters. Assume that this \nsituation is the initial state of a design process, where the purpose of the \nprocess is to define the primary concept through establishing enough \n \n\nChapter 4: Resolution through relations \n75 \nrelationships between it and secondary concepts. In the context of design \nmemory the task is thus to Introduce relationships that previously didn't exist \nthere - the construction of sentences is not to merely to map from memory \nthat which Is known, but also to add to what Is known in memory.c So, before \ncommunicating to B the sentence \"The vessel has a hull,\" A needs to \ndetermine that the vessel really does have a hull (or needs to construct the \nrelationship) - A needs to design the vessel. It may be said that communicating \na design object is to select relationships for transmission to another such that \nthe design object is described adequately. \nIn the bypass It is worth mentioning that, strictly speaking, the sentence \"The \nvessel has a hull\" would be false until the vessel actually exists - the concept \ndefined through any design process obviously does not exist prior to its definition \nand productlon.d However, where nothing else is noted, the form of presence \nrefers to when the design is Implemented. The Issue of present and future is \ndiscussed in a later section of this chapter. See also Box 4.lli. \nLet me return to the situation of the designer, the object of her efforts referred \nto as the 0-object. All relations (is, has, and so forth) needed to establish the \nsentences describing the D-object are assumed known and the secondary \nconcepts ('hull ', 'machinery', and so forth) needed to describe it are known - \nthe task is thus to relate the D-object to these secondary concepts. Assume further \nthat the designer has the ability to generate an appropriate description of the \nD-object (that is, she has components, tools, and knowledge of objective and \nconstraints so that the D-object will be satisfactorily specified). The sentences \nconstructed will then gradually describe the D-object until, upon termination of \nthe process, the D-object is satisfactorily specified: \nFor now, assume that the memory in question is something that may be called design \nmemory, where that knowledge which pertains to the design activity is explicitly \nrepresented - the design memory may be viewed as a notebook. This is to avoid \ndealing with the issue of whether the designer 'knows' something before remembering \nthat she knows it! It is anyway necessary to assume an external or person-independent \nmemory to exist in order to abstract the discussion away from the brain of the designer. \nand to discuss the activities of a human designer in the same language as design by \nan organization or by a computer. \nd \nThere are exceptions to this. Designing a computer program is one activity where the \nresult from the design process often exists when the process is finished. \n \n \nc \n\n76 \nChapter 4: Resolution through relations \n\"There is a D-object\" \n\"The D-object has a hull\" \n\"The D-object has a machinery\" \n\"The D-object has two propellers\" \nA thought experiment \nAssume that there are three instances involved in the birth of a D-object; a Customer, a \nDesigner, and a Builder. The Customer formulates expectations from the D-object, the \nDesigner describes a D-object that can meet these expectations, and the Builder \nconstructs, or materializes, a physical object that conforms to this description. Let's see \nhow the hypotheses-facts relationships tum out in this conception: \nTarget: Designer \nSource: Customer \nHypotheses: Implicit expectations - desires and needs \nExpect0tions \nProcess: \nFacts: \nProblem description - need assessment \nExplicit expectations - Contract specification, objective Expectations met? \nSource: Designer \nTarget: Builder \nHypotheses: Explicit expectations - Contract specification, objective Expectations \nProcess: \nFacts: \nDesign \nExplicit specification, D-object \nExpectations met? \nSource: Builder \nTarget: Customer \nHypotheses: Explicit specification \nProcess: \nConstruction or implementation - manufacturing \nExpectations \nFacts: \nPhysical object \nExpectations met? \nIn this scenario, the 'facts’ resulting from each 'process’ become 'hypotheses' in the \nnext one - each process aims to transform the description at hand to a result that best \nwill fulfill the expectations stated in the description. As in this example, each phase in the \ndesign process might be seen as processes that seeks to transform hypotheses \n(expectations) into facts (specifications). The degree to which the process is successful \ndepends on the degree to which the 'facts' fit the 'hypotheses'. \nBox 4.lv \nAs in the communication scenario, and what may not be too surprising, it is \npossible for the designer to represent this D-object as a set of sentences, where it \ngradually becomes more defined as more sentences are constructed. In \nsome sense, the designer is in communication with herself. \n \n\nChapter 4: Resolution through relations \n77 \nOf course, the world isn't as simple as the example above might indicate. \nWhat is started is the first sketch of what is commonly referred to as a system, \nof which the 'hull', the 'machinery·, and the ·two propellers' are all considered \nparts. These parts are, however, not sufficiently defined concepts, so the \ndesigner needs to attach more meaning to them. The overall purpose is still to \ndefine the D-object, and the process of defining the secondary concepts may \nthus be viewed as a means to attach meaning to D-object - knowledge is \nto 'flux’ to the D-object through these secondary concepts.e \nSo, the designer continues to create sentences to specify secondary concepts, \nin some sense expanding them: \n\"There is a D-object\" \n\"The D-object has a hull\" \n\"The hull (of the D-object) has a frame\" \n\"The hull (of the D-object) has plating\" \n\"The plating (of the body) has paint\" \n\"The paint (of the plating) is red\" \n\"The D-object has a machinery\" \n\"The D-object has two propellers\" \n\"The two propellers (of the D-object) are adjustable pitch \npropellers\" \nNow there is a problem; the designer may initially exhibit some knowledge of \nthe secondary concepts of 'hull', 'machinery', and 'propellers', (as 'known' \nin semantic memory) but this semantic knowledge is not sufficient for this \npurpose - while the concepts aren't entirely defined by the sentences above \n(which are placed in design memory), they aren't entirely known to the \ndesigner without these sentences, either. In fact, they are somewhere in- \nbetween being defined in semantic memory and design (which is \npropositional) memory, where some knowledge about the secondary concepts \nexists but some doesn't prior to the design process. Let us for now call the \nexisting (unstated) knowledge implicit knowledge and the new knowledge \ne \n Arguably, it wouldn't be necessary to apply these concepts. Had the designer chosen \nto do this the tedious way, the D-object might (theoretically) have been defined as \natoms related in particular ways. Thus, the secondary concepts are indeed secondary! \n \n \n \n\n78 \nChapter 4: Resolution through relations \nHypothesis: \nFact: \nFact: \n“The D-object floats” (Expectation: \"The D-object should float'” \n”The D-object has maximum displacement equal 5000 tons”1 \n”The D-object has maximum weight equal 4500 tons”1 \nMapping from hypothesis to D-obiect: \nKnown relationship: \n“If 'The D-object floats' (expectation) then 'Maximum \ndisplacement (D-object concept) is larger than maximum weight \n(D-object concept)’” \n\"If 'Maximum displacement Is larger than maximum weight· then \n'5000 tons (More concrete D-object concept) is larger than 4500 \ntons (D-object concept) ‘‘ {Instantiating abstract concept with \nmore concrete concept} and ‘ '5000 tons is larger than 4500 tons ' \nis “True”. {Verifying against 'fact’ base} \n“The D-object floats”2 \nNew relationships: \nProven hypothesis: \nMapping from D-obiect to hypothesis: \nNew relationships: \n“If '5000 tons is larger than 4500 tons’ then 'Maximum \ndisplacement Is larger than maximum weight’” and ‘ '5000 tons is \nlarger than 4500 tons' is 'True·· {Verifying condition against \n'fact’ base} \n“If 'Maximum displacement is larger than maximum weight' then \n'The D-object floats’” \n“The D-object floats”2 \nKnown relationship: \nProven hypothesis: \nThis knowledge might be gathered by means of analysis. (It would probably be a \nconsequence of more 'basic’ knowledge, such as a geometrical model of the \nvessel.) Although the statements probably wouldn't be true, since they deal with \nexpectations, they are treated as 'facts' in relation to the concrete hypothesis. \nThe 'proof’  is more the result of a preliminary test based upon forms of analysis \n(for instance. induction and deduction, respectively). The facts used for the \nultimate test can only be gathered when the D-object is constructed, in that \nfuture which the hypothesis concerns. \nBox 4.v \nexplicit knowledge. \nSo. the definitions of the secondary concepts above are based both on \nimplicit and explicit knowledge, and the D-object is in the end defined entirely \nthrough explicit knowledge.1 In other words, all knowledge about the D-object \nOne may interject that the D-object may partly be known semantically as well. For \ninstance, If the D-object is a car there might be properties associated with the concept \n'car' that are generally known without having to be explicated. However, in this case \n'car· is not a primary concept! The D-object is a 'reserved· term to designate \nsomething that is unknown to the world before the commencement of the design \nprocess. \n \n \n \n \n \n \n \n \nf \n\nChapter 4: Resolution through relations \n79 \nis stored as explicit relationships to other, secondary concepts. These secondary \nconcepts may in turn be defined both in semantic memory and in design memory, \nor both through implicit and explicit relationships. The implicit/explicit \ndistinction is elaborated further towards the end of the chapter. \nNote that those secondary concepts that must be related to other secondary \nconcepts by means of has/is relations to become completely known are not \nconsidered sufficiently defined in semantic memory, whereas concepts at the \n‘end' of a has/is sequence may be. It seems that the issue of concept definition \ncan be linked closely to the notion of control in the grammar. In the case above \nthe relation has directs control, where the target concept (to the right side) has \nless control than the source concept (to the left) - the target is ‘possessed ' \nby the source. Suffices it to say here that the further ‘to the right' in a sequence \nof has-relationships, the more fundamental or concrete is the concept.9 \nSaid in another way, since the concept ‘paint' normally (at least in this case) \nis not distinct enough, it must be described further. The concept ‘red ', however, \nis assumed known - few designers would continue specifying what ‘red ' means, \nunless they were intending to qualify it with nuances, brightness, and so forth. In \nfact, the designer in this case treats this particular concept as being generally \nknown, or something that both she and others could distinguish simply by name \n- its definition is complete in semantic memory. The same is the case with the \nrelations (is, has) whose meaning can be assumed given through general, \ngrammatical rules. So, one might preliminarily hypothesize that the designer \nseeks to create sentences which relate items (concepts) that are under-defined \nto items (concepts) that are satisfactorily defined. Of course, if it were implicit \nthat red paint was the only kind of paint existing, the sentence explicating that \n\"The paint (of the plating) has color red\" would probably be unnecessary, and \nthe concept 'paint' would be over-defined (or its definition would be redundant) \nor superfluous. \ng \nThis seems to be a pattern when transitive verb relations are used to relate two \nconcepts. \n \n \n \n \n\nChapter 4: Resolution through relations \n80 \nQuality assurance and concept formation \nConsider what happens in a design process where it is of ultimate importance to avoid \nmisunderstandings of what the design result should look like when implemented, like is the \ncase in the North Sea offshore industry or in the aerospace industries. One would expect \neven elementary concepts to be specified - little would be taken for granted. This in fact \nmeans that more secondary concepts are described through relationships, reducing the \nrisk of misinterpretations. \nIt might be expected that as the cost of misinterpretation increases, the number of \nconcepts introduced in the description of the D-object increases. If the cost of applying a \nwrong engine type increases, actions would likely be taken to define the engine in more \ndetail, i.e., relating It to more secondary concepts. As a matter of fact, the detail design \nphase may be viewed to be an effort to specify secondary concepts that have remained \nunder-defiAed after the completion of the preliminary design phase. \n'Maybe it's a weakness of human designers that we leave up to chance \nto formulate concepts that we ourselves should have defined in order to \nget a result that corresponds to our expectations?' (Stian Erichsen, \npersonal communication, 1993) \nBox 4.vi \nDirection in designing relationships \nAt this point it is useful to stop for a moment and adjust the scenario before \ncontinuing to discuss design and relationships. Assume that all there is is a \nlanguage with which to describe an object. What would happen if the designer \nchoses secondary concepts and relations at random, puts them together in \nsentences, and tests the result after its implementation by observing which \n‘survive' and which don't? Assume that there is an environment - the World - of \nwhich the designer initially doesn't know anything. The designer would probably \nexperience a catastrophe! Although the probability of acceptance is greater than \nzero, the undirected construction of sentences would most certainly lead to \nfailures. Fortunately, this is as far away from human design as Is possible to \ncome. As most researchers acknowledge, human design as opposed to \nNature's design is a directed activity- a human designer exhibits purposeful \nbehavlor.h \nIt is noted that Nature may have a purpose with her design, but it would hardly be \ncalled 'design’· in the same manner as we talk of design by humans. \n \n \n \n \n \n\nChapter 4: Resolution through relations \n81 \nSo, the question arises: \"By what is design directed?\" \nIn general terms, one \nanswer is that it is directed by what the designer wants her D-object to become \nin the real world, or what purpose she perceives the D-object to serve. It is \nalso directed by the resources at disposal to the designer in both designing \nand implementing the result, the limitations and constraints put upon the solution \nand the process, personal preferences (internal value systems), the state of the \nenvironment at large in which the D-object is to be placed, and so forth. \nHowever, let me first focus on the purpose with the D-object once \nimplemented. \nGlynn says of designers that they \"... move from the relatively disharmonious \nand unmanageable elements that constitute the problem, to the hypothesizing \nof solutions that aim to render them harmonious and manageable.\" (Glynn, \n1985, page 123) In this view, design is similar to the process of generating \nscientific hypotheses. The final, that is, implemented and constructed, result \ncan then be viewed as the fact in relation to which the design specification \n(set of hypotheses) is tested.  \nIt is useful, in this analogy, to discuss in some detail the process of moving from \nproblem to the solution. First cast the purpose as formulated by a set of \nsentences describing a desired future, or expectations from the D-object. \nTerming the sentences as hypotheses about the future, the scientific approach \ndemands that these hypotheses are testable, and their verification or \nfalsification results from the outcome of the tests. \nIdeally, these tests are performed by observing the facts of the future which \nthe hypotheses describe and see if these facts fit the hypotheses. In a design \nsituation, the facts directly related to the D-object are under the designer's \ncontrol, so the designer may indeed specify them - that is, she has the luxury \nof designing facts that appear to best withstand the testing of the hypotheses. \nThe description of the D-object then is a set of sentences, the implementation \nof which will be the expected best ‘fit' to the hypotheses. Thus, a hypothesis \n{purpose} like \"The D-object has {is to have} a capacity of 3500 containers\" is \nobviously verified if the resulting D-object is shown to have a capacity of 3500 \ncontainers. However, as mentioned in Chapter 2, the designer can rarely \nimplement or construct the D-object to  perform the test - she  must describe \n \n \n \n \n \n \n\n82 \nChapter 4: Resolution through relations \nthe D-object and treat this description and the deductions made from them \nas if this knowledge constitutes facts. \n\"To state a problem is to designate (1) a test for a class of symbol structures (solutions to \nthe problem), and (2) a generator of symbol structures (potential solutions). To solve a \nproblem is to generate a structure, using (2), that satisfies the test of (l)’. (Newell and \nSimon, 1975, page 301) \nBox 4.vii \nA problem arises to the designer now, since the hypotheses normally are \nstatements concerned with how the D-object functions in the future, or the role \nit will play - not how it is shaped (or how to meet demands regarding \nfunction). The latter is, of course, what the designer is to describe.' Therefore, in \norder to verify the design of a D-object the designer needs to either (i) interpret \nits (structural) specification in terms of the concepts used in the hypotheses \n{purpose, or expectations}, (ii) to interpret the hypotheses in terms of the \nconcepts used in the (structural) specification describing the D-object, or (iii) \nboth. Either way, there must be some means to relate the D-object specification \nto the hypotheses - that is, the designer must construct sentences describing \nthese relationships. In some sense, this is analogous to what was earlier referred \nto as \"extensive performance modelling\" - it is a means to assess to what degree \nthe resulting object will satisfy requirements. \nThus, it is not sufficient for a language to enable the construction of sentences \nrelating the D-object to its individual make-up (D-object specification). It is \nnecessary for this language also to enable the construction of sentences \nrelating the specification of the D-object to the expectations put upon it, or the \npremises of the D-object (the hypotheses), This can be performed in two \nways. Either the designer (l) ·translates' the 'hypotheses· to 'facts', which \nis to say that the (functional) goal statement is transformed into a (structural) \ndescription (point (i) above), or (2) translates the 'facts' into 'hypotheses', \nwhich is to say that structure is transformed into function (point (ii) above). In \nSome researchers claim this to be the essence in design; to move from a functional or \nabstract description to a technical or concrete description. The design process thus \nbecomes a mapping between a function space and an object space, or between a \nproblem space and a solution space (see earlier discussion on Goel and Pirolli and \nYoshikawa, e.g.). \n \n \n \n \n\nChapter 4: Resolution through relations \n83 \nany case, there must be some means of translating in order for the designer \nto 'prove ' the 'hypotheses·. An illustration of such a mapping situation is \ngiven in Box 4.vii. \nThis simple example should serve to illustrate roughly the idea behind the \nmapping between a D-object and what may be called the premises for its \nexistence, i.e., the hypotheses towards which it will be tested. The idea that \ndesign can be viewed as generating facts to match hypotheses indicate that \na 'design language· must make possible the derivation of a specification and \na later test of this specification against the formulated purpose. It should be \nreasonably clear that the mapping idea is valid also for other kinds of \nrelationships. If the problem is to relate the D-object to its environment, \nsentences must be built to map between concepts describing the D-object and \nthe environment. So also for other such relationships (for instance, between \nthe D-object and the system of values used in determining its utility). \nAs a final example on the relationship between the knowledge of the D-object \nand other 'kinds of' knowledge, consider Simon's definition of an artifact: \"An \nartifact can be thought of as a meeting point - an 'artifact' in today's terms - \nbetween an 'inner' environment, the substance and organization of the artifact \nitself, and an ‘outer’ environment, the surroundings in which it operates. If the \ninner environment is appropriate to the outer environment, or vice versa, the \nartifact will serve its intended purpose.\" (1981, page 9) This implies that the D-\nobject has two 'lives’ - one strictly internal and one depending on external \ncircumstances, one of internal composition and configuration and one of \nexternal role and function. The characteristics of the object that are invariant \nwith the state of the outer environment are here termed intrinsic concepts, \nwhile characteristics that varies with this state are termed extrinsic concepts. \nThe latter characteristics would, in Simon's terms, seem to describe the \nartifact - the meeting point between the internal and the external environment. \nAs a matter of fact, the artifact may be viewed as all the extrinsic concepts \nof the D-object. To indeed map between the D-object and the circumstances, \nthere must be relationships between the extrinsic and the intrinsic concepts of \nthe D-object, as well as between the extrinsic concepts and concepts \ndescribing the circumstances. The artifact is thus a set of concepts that are \n \n \n \n \n \n \n \n \n \n \n \n \n\n84 \nChapter 4: Resolution through relations \ndefined through a set of relationships both to intrinsic concepts of the D-object \nand concepts describing the circumstances. \n• “(In problem solving) the cognitive system attempts to find a sequence of actions that \nwill transform the initial problematic state into a goal-satisfying state. An adequate mental \nmodel can accomplish the task by mimicking the environment up to an acceptable level \nof approximation, The model need only describe aspects of the environment and of the \n(cognitive) system's action that are relevant to the attainment of the goal-satisfying \nstates.” (Holland et. al., page 39) \nBox4.ix \nAssume now that the goal for the designer is to represent the inner environment \nseparately from its outer environment. The inner environment consists of the \nconcepts describing the D-object that remain unaffected by the ‘operating \nconditions' whereas the artifact represents the behavior that depends on \nthese operating conditions. There must therefore necessarily be a means to \nmap between the outer environment and the inner environment to assess \nbehavior, i.e., a means to construct relationships relating concepts 'belonging \nto' the inner environment to concepts 'belonging to' the outer environment. \nIn other words, there must be a way to describe the artifact. \nThe above introduces the problem of how the designer knows where the inner \nenvironment (what will be termed the D-object) ends and the outer \nenvironment (what will be termed the environment) starts. One way could be \nfor the designer to pose the question: \"What relationships between concepts \nare constant regardless of the situation in which the D-object is placed?\" \nObviously, the composition of material is constant - steel is steel and plastic \nis plastic wherever it is placed, and a welded joint is welded whether it is \nplaced on Earth or on the moon. Likewise, a  beam is  connected to the same  \nstrut regardless of the location of the structure - \npreserves the \"autonomy of the artifact.\" \nmaterial composition \nThe grand problem, however, arises when the designer is to determine what \nreally are 'deduced ' concepts, that is, those which are not intrinsic to the D- \nobject. The speed of a vessel is certainly dependent on the environment in \nwhich it operates and is therefore a non-intrinsic concept. Strictly speaking, the \nweight of the same vessel may also be viewed to be defined by a relationship \n \n \n \n\nChapter 4: Resolution through relations \n85 \n\"The solution is that we need to combine at least two different kinds of descriptions. On \none side, we need structural descriptions for recognizing chairs when we see them. On \nthe other side we need a functional description in order to know what we can do with \nchairs. But it's not enough merely to propose a vague association, because in order for it \nto have some use, we need more intimate details about how those parts actually help a \nperson to sit. To catch the proper meaning, we need connections between parts of the \nchair structure and the requirements of the human body that those parts are supposed to \nserve.”(Minsky, 1986, page 123) \nBox 4.x \nbetween the inner and the outer environment (mass and gravity, respectively) \nand thus to be an extrinsic concept. What then about the mass? It would most \ncertainly be treated as 'belonging to· the D-object, but if the argument above \nis stretched to its limits it may also be seen to be an extrinsic concept - it \ndepends on the speed with which the D-object travels.l Of course, it makes \nlittle sense to pursue this to the extreme and there must therefore be a \njudgement made as to what reasonable variations in environment (what \n‘scenarios') are expected, and accordingly segregate the interior of the D- \nobject from the circumstances - the concepts representing variations in the \nenvironment would then constitute the concepts to which it should be possible \nto relate the D-object (or rather the secondary concepts to which the D-object \nis related). The relationships between the object and the environment can then \nbe called the artifact. \nApplying relationships to build relationships \nSo far, the discussion has focused on sentences describing a D-object, and the \nrelationships between the D-object and the premises for its existence. Little has \nbeen said of the manner in which these relationships are constructed, which is \nof fundamental importance in design. Hitherto the design process has been \nreferred to as sequences of interventions and transactions that manipulate \nknowledge - interventions and transactions that manipulate sentences relating \nthe concept D-object to other concepts. The purpose in the Design Process \nLanguage (DPL) is to allow these interventions and transactions to be discussed \nm=mv=0/(l-v2/c2), according to Einstein's theory of relativity. \n \n \n \n\nChapter 4: Resolution through relations \n86 \nin the same manner, or by the same language, as the D- object and other \nknowledge. This section explores this possibility. \nBut first we need to find out what these interventions and transactions are. In \nthe context of literature discussed in Chapter 2, they are what Goel and Pirolli \nand Newell and Simon call information processes. They are what Sternberg \ncalls components and what Mistree et. al. call activities, primarily symbols \nprocessing and decision making. Yoshikawa terms them mappings while \nCoyne and Gero cast them as operations within a language (alternatively \nactions). One common factor is that they in sum represent the active aspect \nin the design \nprocess – active in their manipulation of the information/knowledge \nbase. \n \n \nThe interventions and transactions may also themselves be viewed as \nknowledge, as several have explicitly stated. (Guilford, 1967; Sternberg, 1985a \nand 1985b; Cristiaans and Venselaar, 1987) Another conclusion to draw from \nliterature is that they may be conceived as distinct entities. Mistree et. al. \ndistinguish them in the form of various classes of activities, Coyne et. al. view \nthem as specific rules, while Sternberg and Newell and Simon consider them as \nparticular processes. Yoshikawa implies that they can be identified as kinds of \n\"search and evaluate' activities. Goel and Pirolli do not distinguish specific \nprocesses, but observe that whatever they are they appear to characterize design \nbehavior. In short, there is support of the idea of discussing them as distinct \nconcepts. \nFinally, it may be concluded that the activities are in some way related. Some \ninterventions and transactions must come before others (in sequential \nprocessing), some depend on how others are accomplished (component \nselection before component sequencing), some will arguably be better than \nothers (according to some measures), while some are parts of other higher- \nlevel interventions and transactions (elementary information processes vs. \ncomposite, as Newell and Simon discuss them.) \n. This corresponds to the view described in the earlier sections; the process may \nbe viewed as sentences where concepts are combined through relations, and \nwhere new sentences, or relationships, are viewed as knowledge. Two \nquestions then arise: (l) Are concepts, relations, and grammatical rules for \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nChapter 4: Resolution through relations \n87 \nLet me try to illustrate what the design process may look like in real life and some \ncharacteristics that distinguishes it from natural evolution. Picture a river flowing, where the \ninitial condition Is water present at a location above the sea level, and the implicit \npurpose for Nature is to transport this water down to the sea level. Nature intends to \n\"change an existing situation into a preferred one· The solution favored is to choose the \npath of minimum resistance - in fact the chief (or only) priority is to get the water down \nto the sea in the cheapest possible way. The time it takes to reach there is unimportant, as \nis the choice of scenery en route. In the course of action, some implicit constraints are \nexperienced, for instance disallowing the water to toke a shortcut over a hill and forcing it \nto travel around that hill instead, and disallowing tt to take a break to catch its breath at \narbitrary locations. When the water reaches the sea Nature 'knows’ its task is done \nwithout any ‘stopping rule.' In fact, Nature designs without thinking, and it can do so \nbecause it has perfect 'knowledge’ of goal,, constraints and pri0rities, and of the \nenvironment and the functional relationships outlining the most optimal solution \n(according to the priorities). \nPicture the designer out to do the same job: First she would need to map the expected \nflow of water, including daily variations, and account for some 20-, 50- or 100-year flood \ncondition. After this, she would start to mop the terrain along several possible routes to the \nsea and determine possible outlets. Then she would start to evaluate what consequences \nan outlet of water would have on fisheries, fog-conditions, the nearby aquaculture facility, \nand so on. She would proceed to screen out alternatives until she were left with a set to \npursue. In the process, she has received a specification from her employer telling here \nthat the water cannot toke more than two days to travel, and that it be used for \ngeneration of electricity at three locations along the way. In addition, every liter is to be \nused as drinking water by at least two persons before it arrives at the sea. The project cost \nhas a roof of USD 1.5 billion, and the construction period cannot last for more than seven \nyears. Our design engineer is in a bind. There are constraints all over the place, both \nimposed by nature, the employer, the communities, local politicians, and conservationist \ngroups. There are multiple objectives, including the tangible ones like relocation of water, \nproduction of drinking water and of electricity, and the more intangible like preservation \nof the environment. She doesn't know very well how the running water in time will \nInfluence climate and how it will erode the ground, nor does she know with certainty how \nmuch water can be expected. To investigate this, she needs to locate or make some \nmethod to assess these effects. In addition, the alternative solutions are numerous, and \nthere Is a large number of decisions to make. In short, she must intervene constantly \nthroughout the design process. \nThis Is to illustrate that the conscious design of an engineering artifact implies several \ninterventions from the designer, which in natural evolution would be superfluous. It is these \ninterventions that we seek to facilitate in the work on studying, explaining, or designing the \ndesign process. It is also the artificial relationships between phenomena that the designer \nIs to investigate and describe in the course of action. \nBox 4.viii \ndescribing the design process indeed so unique that a separate language is \nneeded? (2) if not, is it useful to represent these \"process' concepts and \nrelations in the same language as the \"object' concepts and relations? \nThe tricky issue of distinguishing object and process was briefly discussed \ntowards the end of Chapter 3. In that section, there was a process model \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nChapter 4: Resolution through relations \n88 \noperating on a content theory. One way to interpret these two constructs is \nthat the former may intervene upon the latter and change it while the opposite \nis not true. Let me, for the sake of discussion, refer to the process model as \nactive knowledge (ability to perform) and the content theory as passive \nknowledge (no ability to perform) without stating whether they are separate \nor not or presenting formal definitions of the respective at this point. \nOf course, the process model-must be allowed to intervene upon Itself or else there must \nbe something else that con intervene upon the process model. This must be so since a \nfixed and detailed strategy constructed once and for all at the outset of the design \nprocess is not congruent with most views of design as rather ill-structured problems and of \nthe designer as an adaptable mechanism. The designer must change the process model \ncontinuously. \nBox 4.xi \nLet me then answer the last question stated above first; Is it useful to represent \npassive and active knowledge in the same language? Is it useful to describe \na design object in the same language, using the same words, using the same \ngrammatical rules, as the design process? \nIn the context of Coyne et. al. discussed in Chapter 2, the language of form \n(passive) is operated upon by the language of actions (active). In other words, \nthere will necessarily have to exist relationships between the passive and the \nactive knowledge. If we were to use different languages for the passive (or D- \nobject and others) and the active (process) knowledge, it would seem that we \nneeded to establish a third meta-level language in order to relate concepts in \nthe two languages to each other - the mapping would have to be performed \nat a level 'above' both object language and process language. \nThere are several reasons for the relationships indicated above to be represented \nexplicitly. One is that the choice of transactions and interventions in the design \nprocess depends upon what is known, and what is required to be known, about \nthe D-object. This may be called inputs of passive knowledge to the design \nprocess. Another is that the D-obiect results from the execution of the process - \nthe design process generates output. If we do not to represent the design \nprocess and the D-object in the same language, we necessarily need to \nrepresent the process separately from what the process operates upon. At \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nChapter 4: Resolution through relations \n89 \nthe very least, this seems quite inconvenient in most cases. The increasingly \npopular work on developing generic product models will be hampered by this \nproblem - how is it possible to make models that can be set to all possible \nuses without having a generic process language that can access this model? \nThe artificial intelligence community has struggled with it for years - how is it \npossible to construct intelligence mechanisms without \"the intelligence \nknowing what to be intelligent about?\" So, it may be expected that there \nindeed are great advantages of having a single language in which both the \npassive (object) and the active (process) aspects of design can be    \ndescribed. \nThen the first question stated above remains: Is it possible to do this? Let me \nturn the question around, and ask: Why shouldn't it be possible? \nThe most difficult problem lies in the active/passive distinction. Intuitively there \nis a difference in nature between the two 'kinds of' knowledge. In linguistics, \nthis difference is traditionally captured in distinguishing among transitive and \nintransitive verbs, or verbal relations, while the artificial intelligence community \ndistinguishes between declarative and procedural knowledge. \nIn the linguistic approach, is is a non-transitive verbal relation, while writes is a \ntransitive verbal relation. In natural language the rules regulating these relations \nare captured in the same system. So, the difference between the sentence \n\"The ship has a hull\" and \"The designer writes a specification\" lies essentially in \nthe kind of verbal relation used. By knowing the meaning of the relations it is \npossible to distinguish knowledge of passive from knowledge of active. \nOther kinds of relations can be classified as well. Consider \"The ship is at the \ndock\" and \"The procedure X executes before the procedure Y.\" These \nrelations belong to the same family - the prepositional relations - and have \nas such common characteristics. The same applies to conjunctive relations; \n\"The designer has a computer and a calculator\" and \"The designer executes \nprocedure X and procedure Y\" - the same general rules apply to interpret the \nsentences. Another example makes the connection in the language even \n. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\n90 \nChapter 4: Resolution through relations \nstronger. Assume that the procedure X consists of .two parts, 'read ‘ and \n'write’. This may be described as follows: \n\"X has a read-procedure\" \n\"X has a write-procedure\" \nCompared to the example on page 75, the resemblance ought to be clear. In \nthat case, the relation has was used in describing parts of an object, whereas \nin the sentences above it was used to describe 'parts’ of a process. Process \ndescription has so many similarities to object description that it should be \npossible to establish a common language based upon natural languages.k The \nlinguistic approach will be taken in developing the Design Process Language \nin the next chapter. \nIt is useful now to summarize by means of an example. Assume the role of an \noutside observer that is to describe everything (all transactions and interventions) \nthat a designer performs in a design process to a listener not observing the \nprocess. As in the first section of this chapter, there is a communication situation. \nHowever, the context of the communication is now a design process as \nopposed to a design object. So, the moment the designer finds that \"The ship has \na hull,\" the observer could say something like \"The designer finds that 'The ship \nhas a hull'.\" If the designer makes note of this new relationship, the observer \ncould say something to the extent that \"The designer writes down that 'The ship \nhas a hull’.\" It is characteristic of the comments of the observer that those \nsentences describing interventions and transactions can be described as a \nrelationship between the designer and that at which the interventions and \ntransactions are directed - in the examples above, the sentence \"The ship has \na hull.\" Indeed, every transaction that the designer performs can be described \nby the observer through using some verbal relation (and possibly other relations \nas well). Like the D-object was described as sentences relating it to known \nconcepts, the design process can be described as sentences relating the \ndesigner to these sentences. \nWhat is said thus far may be radical in terms of the traditional view of design - i.e., \nprocess and object viewed as separate concepts. In natural language their relation is \nself-evident - while there exist rules allowing for distinguishing active from passive these \nrules are different aspects of the same language. \n \n \n \nk \n\nChapter 4: Resolution through relations \n91 \nA note on knowledge and meaning \nEarlier in the chapter it was distinguished between explicit and implicit  \niknowledge. For instance, \"red\" has a high implicit content to most whereas \n\"girk\" does not. This has to do with knowledge and meaning. Assume that the \ndesigner is a closed system, with no interface to the external world. Thus, the \ndesigner does not know the significance of the symbols being processed \nbeyond their significance to other symbols - there is no implicit knowledge.' \nAssume further that the system is complete, in that all relationships needed to \nconstruct the required relationships are present - the designer can relate the \nsymbols in a way such that the hypothesis is proven - such that the \nexpectations are met. \nIn this system, it is possible to use any notation as long as the system remains \ncomplete - the symbols 'length ' and 'beam ' can be switched as long as \nall appearances of the two symbols are switched (for instance, \"Length must \nbe greater than beam\" is replaced with \"Beam must be greater than length\"). \nThe designer in this closed system can perform the design task and produce \na consistent design that meets the expectations without knowing the \n‘meaning’ of the symbols outside that system. The symbol 'length’ is just any \narbitrary symbol that is related to another symbol, like in \"Length equals 120,\" \nas a consequence of the existing relationships. (For instance, \"Length equals \n(displacement divided by (beam times draught times block coefficient)).\") Why \nwould it cause problems to switch the symbols 'length ' and 'beam ' as long as \nthe complete design system is revised to make it consistent with this new \nterminology? Why isn't it sufficient to have internally consistent knowledge in the \ndesign system? \nThe answer obviously lies in the fact that the specification the designer produces \nis to be used in later processes. Some other system is to interpret the \nspecification in terms of what the symbols mean in its own frame of reference. \nJust as any drawing that is to be used for construction purposes are affixed \nAssume that the relations are known, such that the implication of a symbol having a \nrelation to another symbol, like in \"length equals 120,\" is known as far as symbolic \nprocessing is concerned. (For instance, the system then 'knows· that the symbol \n'length· can be replaced with the symbol '120· in a formula where 'length ' \nappears.) \n \n \n \n\nChapter 4: Resolution through relations \n92 \nscales to relate the 'internal ' scale that the designer used to a scale known \nto the constructor, so must all symbols that bear significance to the constructor \nbe understood by that constructor. In the end, the recipient of the specification \nmust either possess or form a concept of what the symbol 'length’ means - it \nmust eventually be defined in terms of his or her implicit concepts. In this \nparticular case, 'length ' must probably be related to a unit to make the symbol \n'length' understood in terms of the concept designated through the symbol \n‘meter' (while 'length' to most is uniquely known to be a measure of \ndimension, it is not uniquely known what kind of dimension). Through such a \nprocess does 'length ' become a meaningful concept also outside the design \nsystem. \nThis illustrates the distinction between implicit and explicit knowledge - \nbetween the knowledge that is represented as relations among symbols and \nthe one that exists between a symbol and its 'real' designation. The symbol \n'meter· is a (semantic) concept because to most it carries meaning beyond \nitself, whereas the symbol 'length ' carries meaning when the design system \nis opened to allow for it to be related to concepts known outside that system, \nor semantic concepts. \nThis is not a trivial distinction. If the designer chose to specify the design object \nin a language not understood by the one that were to construct the system, \nthere would be no way to secure that the artifact indeed would become what \nthe designer intended it to be. If the designer then states that \"A weld is to \nconnect the web and the flange\" and leaves the symbol ·weld· further \nundefined this could imply one of two things: Either (i) any 'weld· would do, \nimplying that the general definition (for instance, the 'class-description’) of \nweld is sufficient, or (ii) the constructor is expected to develop  further the \nconcept of ‘weld ‘ by relating it to 'height’, 'length', 'fill angle', and \nso \nforth. While some aspects of this ‘weld· are known to both the designer and \nthe constructor, which is to say that both share some concept of ‘weld ', there \nmay be some aspects that are only known by the designer, and thus have to \nbe explicated by her. This might, for instance, be the actual values of the \nrespective attributes. Some is implicit knowledge (that a weld has a 'length’) \nand some is explicit (what this 'length’ actually is, both in value, unit, and \nmeasured from and to). \n. \n \n\nA designer can often assume (i) to apply to, for instance, concepts like \n‘meter' (can hardly be misunderstood), numeric symbols and unique names.m \nThese are concepts that need no further definition. She would assume case (ii) \nin other design situations, where she would expect the target to understand or \ndeduce the true meaning of the concept. To aid in this process, however, she \ncould make one important modification; just as the designer works to fulfill \nexpectations put to the design object, she might herself state expectations \nfrom, or functions of, 'weld · and assume the target to meet these \nexpectations. For instance, the designer could describe ‘weld ' through a \nrelationship like (a) \"The weld should resist forces of ...\" instead of describing \nit through relationships like (b) \"The dimensions of the weld are ...,\" where (b) \nis a combination of concepts that are expected to satisfy (a). Few designers \nwould specify every tiny part of the design object at one go - they would \nprobably tend to define some concepts through such expectations as in (a) \nand trust that the next stage, the target, ensures these expectations to be met \nby developing specifications as in (b). Indeed, the designer both proves \nhypotheses in the design process (combines concepts to meet expectations) \nand generates hypotheses (states expectations that the next stage is \nsupposed to meet). This is all part of the concept formation process. \nIn plain terms, this amounts to a design process that could be described \nthrough the following steps: \nm \nMost engineers who have functioned in both the metric (SI) system and the American \nsystem of notation would know the problem of confused concepts. Consider the use of \nthe concept tons (SI metric, 1000 kg.; US short, 2000 lbs.; and long, 1016 kg.) and the \nAmerican lbs (weight) and lbs (mass). Even in one system it becomes difficult - does \ngross tonnage refer to register tonnage (volume) or to tons (weight)? \n \n \n \nChapter 4: Resolution through relations \n93 \nConsider the two cases above. In case (i) the situation is fairly simple to the \nconstructor - as long as anything that can be called a 'weld’ connects the \n‘web’ and the 'flange’, everything is fine. However, it is sufficient that there is \nonly one weld that won't do to make the concept 'weld' under-defined -\n\"My Kingdom for a horse\" is a bad bargain if the 'horse· isn't alive! In case (ii) \nthe  designer  expects  the constructor  to  form the  concept ‘weld ' to suit the \npurposes - \nthere is an expectation that the  constructor will  specify the \nconcept further in an 'appropriate' manner - \n\"Well, I guess when he says 'a \nhorse' he presumably means a horse that is alive and well!?\" \n \n\n94 \nChapter 4: Resolution through relations \n(1) \n(2) \nThe designer has a set of initial statements of functional expectations.n \nThe designer starts to develop a structural description that can either (i) \ncompletely meet some of the expectations or (ii) contribute towards \nmeeting them. That is, she starts to develop a structural description that, \nwhen completed, can help prove all expectations to be met. \nAs aspects of the structure are described, the designer states new \nfunctional expectations that follow (are translated) from the initial \nexpectations, but which are adapted to the particular kind of structure \nin development. \nThe new functional expectations are resolved through refining the \nstructural description such that the new expectations can be provably \nmet, and possibly through generating new functional expectations that \nare adapted to the new structure. \nAt some point, when the process through steps (1) through (4) has \nevolved such that the structural description and the functional \nexpectations are sufficiently detailed, the designer concludes that (i) the \nstructural description at her stage and (ii) the remaining functional \nexpectations are sufficient, where 'sufficient· means (A) that the initial \nexpectations are provable from the structural description and the \nfunctional expectations and (B) that the recipient of the design will \nunderstand the design sufficiently well such that the materialized result \nwill prove the initial expectations to be met as in (6). \nThe designer delivers a description of the D-object which is a mixture of \nfunctional expectations (at a low level) and a structural description \nwhich is such that they together, if true in the materialized result, will \ncause the initial functional expectations in (1) to be met. \n(3) \n(4) \n(5) \n(6) \nThe ultimate result from the design process is then a mixture of 'facts· and \n‘expectations·, where the facts could be a description of the materialized \nstructure and the expectations could be a description of what the elements of \nthat materialized structure are to perform. An outline specification of a ship is \na good example of this. \nThroughout the process It may be that these expectations are revised as new \ninformation of opportunities or constraints is gathered. However, in the proceeding \nassume that the expectations do not change, that is, the overall purpose with the D- \nobject remains constant. \n \n \nn \n\nChapter 4: Resolution through relations \n95 \nA note on function and structure \nAs argued above, the specification generated by the designer is composed \nof sentences belonging to, roughly speaking, one of two main categories: (1) \nThose used in the structural description of the concept, such as dimensions and \n'possession' of specific parts, and (2) those used in stating functional \nexpectations, or the roles that these parts are to fill. The distinction is frequently \nused in design and is a useful one except that it is somewhat elusive, as will \nbe shown below. \nAssume that the concept is a part of a system - a concrete and tangible \nconcept. In this case, it could be expected that the concept had to facets; one \nfunctional and one structural. The description of the functional facet is then \none that preconditions the description of the structural facet. The concept \n'hull', for instance, has some description according to dimensions, as well as \nseveral other characteristics. Assume that 'hull ' is structurally described as \nfollows: \n1. \"Vessel has hull\" \n2. \n3. \n4. \n5. \n6. \n7. \n8. \n9. \nl 0. \n11. \n12. \n13. \n14. \n15. \n16. \n17. \n\"Hull of vessel has length\" \n\"Length of hull equals 140 meters\" \n\"Hull of vessel has beam\" \n\"Beam of hull equals 30 meters\" \n\"Hull of vessel has draught\" \n\"Draught of hull equals 14 meters\" \n\"Hull of vessel has block coefficient\" \n\"Block coefficient of hull equals 0.67\" \n\"Hull of vessel has volume displacement\" \n\"Volume displacement of hull equals 39,396 meters3\" {deduced} \n\"Hull of vessel has weight displacement\" \n\"Weight displacement of hull equals 40,538 tons\" {deduced} \n\"Hull of vessel has weight\" \n\"Weight of hull is 4,000 tons\" \n\"Hull of vessel has net buoyancy of 36,538 tons\" \n\"Hull of vessel is leak-proof\" \nAll the relationships above are supportive of the functional relationship: \n \n \n \n\nChapter 4: Resolution through relations \n96 \n18a. \n18b. \n19. \n\"Hull of vessel should have net buoyancy larger than 36,000 tons\" or \n\"Hull of vessel should ensure that the weights are supported\" and \n\"Weight of vessel excluding hull equals 36,000 tons\" \nThe elusiveness in the division into structure/function is particularly clear in \nsentence 17. In order to satisfy that function (of 'leakproofness’) one could \nlater produce a functional description as in \"All plate joins are impermeable\" \nor a structural description as in \"All plate joins are made of impermeable \nmaterial.\" One could thus expect that a structural description at one level (for \none concept) becomes a functional description at another level (for another \nconcept). For instance, \"All penetrations of the hull are fitted with leak-proof \nbearings\" is part of a structural specification of the functional \"Hull of vessel \nshould be leak-proof.\" \nThis indicates that it may be flawed to call some description structural or \nfunctional once and for all. Even the relationship \"Length of hull is 140 meters\" \nmay be difficult. It can be transformed in the next phase to become \"Length \nof hull should be 140 meters\" which may be seen to proximate a statement of \nfunctional expectation (as seen from the perspective of the constructor) - not \nof structural fact (as seen· from the designer). When the constructor makes a \nhull that is 140 meters, he tries to meet the expectations posed by the designer! \nIn some sense, one may see the functional facet as capturing the rationale \nbehind the structural facet. In other words, the latter is intended to satisfy the \nformer. For instance, part of the functional expectations of the hull of a ship is \nthat it should \"Make the ship float,\" while parts of its structural description may \nbe \"Length equals 140 meters,\" \"Beam equals30 meters,\" \"Draught equals 14 \nmeters,\" and \"Block coefficient equals 0.67.\" Is then the statement \n\"Displacement equals 39,396 meters3\" an expression of structural nature or \nfunctional nature? It may be both, depending on where we stand. Seen from \nthe 'perspective' of the ship, the statement is of structural nature, in that it \nsatisfies the demands put to 'hull ' from 'ship'. Seen from the perspective of \nthe 'hull ', it is of a somewhat more functional nature, in that 'length', \n'beam', 'draught', and 'block coefficient' satisfies the demands put to them \nfrom the 'hull'. The issue is a difficult one to resolve. Suffices it to say here \nthat there exists on ambiguity, and that it is difficult to separate the world into \none dealing with  structure  (or  'facts)  and  one  dealing  with  function (or \n. \n \n \n\nChapter 4: Resolution through relations \n97 \n‘expectations’). The division is context dependent and thus may be \nexpected to change as the design process evolves. \nLet me, in conclusion, propose the following: \nA design object is S-F complete if the combination of structural \ndescription and functional expectations is such that it, if true in \nthe materialized result, would prove the initial expectations to \nbe met. \nIn other words, if there is only one function needed to meet the initial \nspecification that is either (i) not stated as a functional expectation to the \nconstructor or (ii) does not result from the materialization of the structural \ndescription, then the D-object is not S-F complete. \nIt is further possible to say something about what is relevant knowledge related \nto the D-object: \nIf the D-object is S-F complete and there are parts of the \nstructural description or functional expectations that can be \nremoved without causing the D-object to cease to be S-F \ncomplete, the D-object is S-F overloaded. \nThis says that if there may be statements about the D-object that can be \nremoved without this causing any change in the degree to which expectations \nare met. This may mean either that (i) there is irrelevant knowledge about the \nD-object or (ii) there is redundant knowledge about the D-object. In any case, \none would expect that the statements may be removed without any \nimplication to the way the materialized result corresponds to the expectations. \nAxiomatization \nAs stated in the beginning, this chapter had two purposes. One was to discuss \ndesign from the particular perspective of concept formation, and to find \ncharacteristics of the process from that point of view. The other was to prepare \nthe ground for building a Design Process Language through which concepts \nmay actually be formed. \n \n \n \n\n98 \nChapter 4: Resolution through relations \nSome of the findings summarized here will be used in developing DPL in Chapter \n5. There is no argument, however, that DPL will capture all aspects of the design \nprocess as formulated here. Neither is it necessarily so that all the statements are \nrelevant for the sake of developing the DPL. The conclusions of this section, in \nthe form of axioms, is therefore primarily to draw some lines from the discussions \nperformed so far. That some of the axioms are used while others aren't used in \nthe remainder of the thesis will hopefully not constitute difficulties. \n4.1: Definition \nIf a concept is known in terms of its relationship to other, known, \nconcepts, it is considered as known in propositional memory. \nThis simply states a definition of propositional memory, such that if two \nconcepts are explicitly related this is 'propositional· knowledge. A concept \ndescribed in this way can be termed a propositional concept. \n4.2: Definition \nIf a concept is known in terms of its relationship to the real \nworld, it is considered as known in semantic memory. \nA concept that is known because it can be directly related to a ‘real' \nphenomenon, this is a semantic concept. This is in contrast to the \npropositional concepts defined in 4.1. \n4.3: Definition \nKnowledge generated during the design process is considered \nto reside in design memory, where design memory is a subset of \npropositional memory. \nA quite self-explanatory statement saying that the relationships constructed \nthroughout the design process are considered stored in design memory. Note \nthat this does not necessarily mean that there is a physical location as such \n- it is merely a means to reference 'design knowledge'. \n \n\nChapter 4: Resolution through relations \n99 \n4.4: Definition \nA concept is formed by establishing relationships in propositional \nmemory where the concept is related to other concepts. \nThe knowledge that is produced during the design process is represented as \nrelationships in propositional memory. This is to say that it is assumed that one \ncannot define a concept semantically in the design process (which is again \nto say that a designer cannot describe a concept through actually point at \na 'real' occurrence of the phenomenon to which the concept refers). \nAnother way to put this is that all semantic concepts used in the process must \ninitially exist. \n4.5: Definition \nA generally understood concept is either a semantic concept \nor is related to such a concept through relationships in \n· \npropositional, but not design, memory. \nThis definition states that a concept is generally understood if it is 'described' \nin semantic memory and in that part of propositional memory which is not \ndesign memory. The assumption is that all have access to a generally \nunderstood concept. ('All' in this context means all that are expected to \nunderstand the concept of the D-object.) \n4.6: Axiom \nThe design process may be viewed as a concept formation \nprocess. \nThis axiom follows from earlier discussion, where the D-object was a concept that \nwas initially unknown. Since the D-object cannot be a generally understood \nconcept since it is non-existing at the outset, the designer must define it in terms \nof (ultimately) generally understood concept. This process of definition is called \nconcept formation, sometimes also conceptualizing. \n \n \n \n \n\n100 \nChapter 4: Resolution through relations \n4.7: Corollary \nThe primary purpose of the design process is to form a concept \nthat can meet the expectations put to that concept. \nAs described earlier, the design process is a directed search towards defining \na concept- conceptualizing the D-object. The direction of the search is given \nby the expectations that the D-object is to meet - expectations that include \nrequirements and constraints. Roughly speaking, the success of the concept \nthat is formed depends on the degree to which it meets the expectations. \n4.8: Theorem \nDesign may be viewed as a process of generating relationships \nbetween the concept in formation and concepts that may \nalready be known or may have to be formed in propositional \nmemory. \nIn view of Axiom 4.6 and the definitions of how a concept becomes 'known’, the \nconcept being formed can only be formed by relationships being established \nbetween it and other concepts. If these other concepts aren't generally \nunderstood, they have to be described in terms of their relationships with other \nconcepts. This repeats until all concepts initially not generally understood \nwould become so if design memory could generally be accessed. \n4.9: Theorem \nIn the end, for a D-object to be generally understood, at least \nsome concepts related to it must be generally understood. \nIn some sense, this theorem overlaps Theorem 4.8, but stresses the point that \nsome generally understood concepts must be related to the D-object: It was \nargued earlier in the chapter that in a purely symbolic system this weren't \nnecessary. However, design aims to define a concept ultimately to be \nmaterialized in the 'real ' world and by some ‘constructor' that necessarily \nneeds to know the implication of the D-object in ‘real' terms. \n \n \n\nChapter 4: Resolution through relations \n101 \n4.10: Axiom \nThe set of relationships describing the concept of the design \nobject may be viewed as facts by the designer. \nAs discussed earlier, the designer is to conceptualize a D-object that can meet \nthe expectations put to it. In short, the D-object is then described such that \nwhen placed in its environment, it will prove the expectations to be met. The \ndesigner models the D-object for performance, and may be viewed as treating \nthe D-object as a set of facts - as already having been built according \nto the description. \n4.11: Axiom \nThe set of relationships describing the concept of the \nexpectations may be viewed as hypotheses by the designer. \nIn relation to the above axiom, the designer may view the expectations as a \nset of hypotheses that she is about to prove with the D-object. As scientists test \nhypotheses against facts to verify the hypotheses, the designer tests the design \nresult to see whether it meets the expectations. \n4.12: Theorem \nThe design process may be viewed as a process of proving \nhypotheses. \nAs a consequence from axioms 4.1O and 4.11, one may cast the design process \nas a process of proving hypotheses. The design process is shown to be a directed \nsearch for a solution - a D-object. In this view, the expectations may be cast \nas hypotheses that the D-object is to prove. The actual proofs are performed as \na kind of 'performance modelling· where the specification and the outcome of \nthe performance analysis of that model constitute the ‘facts’. \n \n \n \n \n \n \n\n102 \nChapter 4: Resolution through relations \n4.13: Axiom \nThe set of relationships describing the concept of the design \nobject may be viewed as hypotheses to those that materialize \nthe design object. \nThis axiom changes the perspective from the designer to the agent that is to \nmaterialize the D-object. For this agent, the D-object is a description of the \nexpectations to be fulfilled by the process of materializing. The D-object \nspecification may then be viewed as hypotheses which are to be proven by \nthe result of the materialization. (In a ship design situation, a trial trip may be \nan appropriate ‘test'.) \n4.14: Axiom \n \nThe set of relationships describing the materialized concept of \nthe design object may be viewed as facts. \nIn consequence of the previous axiom, the implemented (materialized) result \nconstitute the facts towards which the hypotheses (which now is the D-object \nspecification) can be tested. In a ship design situation, the physical ship is the \nfacts and the building specification is the hypothesis. \n4.15: Theorem \nThe design process may be viewed as the overall process of \ngenerating hypotheses. \nAs in the situation described in Theorem 4.12, with the perspective changed \nfrom that of satisfying expectations (posted by a 'customer'), the designer may \nnow be viewed as one that aims to construct hypotheses to be met by the \nagent that is to materialize the D-object. Note that the D-object is more \n'hypothetical' than 'real', and therefore is subject to verification by testing \nafter its materialization as well as after its design. \n \n\nChapter 4: Resolution through relations \n103 \n4.16: Definition \nThe creation of a product Is viewed as occurring through two \nphases or processes; design and materialization. The phase of \ndesign defines a concept that is called the D-object, while the \nphase of materialization Implements this concept into a product \nthat can be described as the D-object. \nThis Introduces a view of design occurring in two phases, where one alms to \ndefine the concept of D-object while the other alms to transform this concept \n(which Is yet only abstract) to a concrete and existing concept. It Is clear that this \nsegregation Is only one of many possible, but it Is Introduced here to ease the \ndiscussions. \n4.17: Axiom \nA relationship may be viewed as a sentence In a language. \nIt has become apparent in the course of discussions of literature on design and \nknowledge modelling, both in Chapter 2 and Chapter 3, that the relationships \ndiscussed so far are similar to sentences In some language. Earlier in this \nchapter the Idea has been further developed. The language in question will \nbe referred to as a design language. \n4.18: Definition \nA sentence in the design language has two main categories of \nsymbols; concepts and relations. \nIt should be clear from the discussions so far that the two main ‘carriers' of \nmeaning are concepts and relations. \n4.19: Definition \nA relation in a sentence applies to relate concepts or sentences \nwithin the sentence. \nThis Is quite self-evident. It has frequently been shown that concepts are \nrelated by means of relations, and also that sentences themselves may be \nrelated. Pronouns that are useful in a design language are normally used as \nplace-keepers for concepts and may thus be treated as ordinary concepts. \nSome exceptions are discussed In Chapter 5. \n. \n \n \n \n \n \n\n104 \nChapter 4: Resolution through relations \n4.20: Corollary \nA concept is formed according to what kinds of relations are \nused to relate it to other concepts. \nThis is a quite self-evident statement, since what relates concepts are relations, \nand what brings meaning to concepts is the way concepts are related. Thus, \nthe relation used in a sentence is critical in determining what meaning that \nsentence ‘carries to ' the concepts. \n4.21: Axiom \n \nThe design object may be described through a set of \nsentences. \nIn the course of discussions in this chapter it has been shown that the design \nobject may, as any other concept, be described through its relationship with \nother (ultimately known) concepts. It may thus be described through a set of \nsentences. \n4.22: Axiom \nThe process of design may be described through a set of \nsentences. \nThis has been developed throughout the course of this chapter. Since the process \nIs described, both by myself and others in Chapter 2, as a set of activities related \nIn some way (ordered), it follows that it is possible to construct sentences in which \nthe related concepts refer to activities or other processes. \n4.23: Axiom \nIt is possible to define relations to express any kind of \nrelationships needed in design. \nIt Is hard to prove the correctness of this axiom. However, since design (as viewed \nIn this thesis) deals with ‘symbolic· knowledge, or that which may be denoted by \nwords, It Is self-evident that there exists means with which the concepts receive \nmeaning through other concepts. There must necessarily exist means of \nrepresenting such knowledge, and the axiom claims that the relations used \nare definable. \n \n\nChapter 4: Resolution through relations \n105 \n4.24: Theorem \nSuch relations as in Axiom 4.23 may be categorized. This \ncategorization may be seen to correspond to what kinds of \nrelations between concepts are required to be expressed in a \ndesign situation. \nThe intention behind this corollary is to indicate that various relations play various \nroles in a language. The relations may be grouped according to what kinds of \nrelationship they express in the design context. That is, whether there is a \npossessive relationships (mainly transitive, verbal relations), a relationship of \nintention and future (modal auxiliary verbal relations), or spatial and temporal \n(prepositions and adjectives). \n4.25: Axiom \nA sentence may be interpreted through grammatical rules \noperating on the relations in it. \nIn linguistics, the main grammatical rules operate on the verbal and other \nrelations in the sentence. What the sentence says about how a concept \nbecomes defined in a design language depends on how the relations \nconnecting these concepts are interpreted. It seems proper to claim that \ngrammatical rules apply to the relations, rather than the concepts, in the \nlanguage. \n4.26: Axiom \nIt is possible to separate between those sentences describing \nhow a particular role of a concept is or will be fulfilled (structural \ndescription) and those sentences describing the roles that the \nsame concept indeed does or shall fulfill (functional \ndescription). \nThis says that there is a distinction between a concept and the implication of the \nconcept. For instance, it is possible to distinguish between a ship and its role or \nfunction. Some (Goel and Pirolli, e.g.) have called this a distinction between a \ncausal structure specification and function. Yoshikawa distinguished, on his \nside, between an entity and a concrete function. The distinction may be \nillustrated in two ways; one in the hypothesis-proving view of design, and \nanother in a more 'concept-formation' view: \n \n \n\n106 \nChapter 4: Resolution through relations \nHypotheses -> Facts -> Hypotheses -> Facts \n? floats? -> planned ship floats! -> materialized ship floats? -> \nmaterialized ship floats! \nExpectations -> Structure -> Environment -> Function -> Expectations. \n\"D-object should float in water\"-> \"D-object is a ship\"-> \"Ship in water\" \n-> \"Ship floats in water\"-> \"D-object does float in water\" \n4.27: Hypothesis \nThere exist relations that may be used to construct the needed \nsentences in order to form a concept in the design process. \nI hypothesize the existence of such relations, and aims to show these \ncategories in Chapter 5. This hypothesis applies to the knowledge being \ngenerated in the process. \n4.28: Hypothesis \nThere exist relations that may be used to express the needed \nrelationships between concepts applied in the design process. \nAs above, but the relations are used to express knowledge that is used in the \ndesign process - not that which is produced in it. The two hypotheses \nseparate between that which is known and that which is becoming known in \nthe process. \n4.29: Hypothesis \nThe categories of relations whose existence were hypothesized \nin 4.27 and 4.28 may be seen as categories in the same \nlanguage. \nThis statement hypothesizes that the 'process' and 'content· knowledge that \nexists, and that one which is produced, may be described in the same \nlanguage and interpreted through the same kinds of grammatical rules. This \nwill be treated in the course of Chapter 5. \n \n \n \n\nChapter 4: Resolution through relations \n107 \nChapter summary \nIn this chapter I have performed parts of the main development in the thesis, \nthrough introducing the view of the design process as a process aimed at \nforming concepts. To perform the concept formation, a designer needs to form \nthe concepts of plans and sequences of activities to use in forming other \nconcepts - produce this new knowledge. The design process is described as \na set of relationships between abilities that may be represented as concepts \nin the same language as that which describes the design object. Thus, like \n\"Activity A follows activity B\" is a process description and \"Deck A is above \ndeck B\" is a content (object) description, they are both relationships among \nconcepts and both representable in the language. These relationships are \ntermed sentences in the Design Process Language. A designer tries to form \nnew concepts by relating them to known things in a way such that all \ninformation relevant for assessing the general behavior of the design object, \nmay be defined from knowledge about known things. \nI have developed an alternative view of design as proving and/or constructing \nhypotheses. The designer may be viewed to attempt to prove hypotheses \nabout how the design object will behave in the future, by designing her design \nobject such that it has the best chances of displaying such behavior as \nexpected. On the other hand, nothing that the designer does is necessarily \n'objectively' true in the future - there is another stage after the design in which \nthe description is to be materialized. Seen from that angle, the designer \nconstructs hypotheses that the constructor performing in the next stage (the \n‘materialization stage) will take over and try to satisfy through materializing a \nproduct that has the best chances of proving the hypotheses that the designer \nconstructed. The designer may actually be seen as a·mediator between a \n'customer ', who expresses expectations, and a 'constructor ' that \nmaterializes the design object as shown in Box 4.iv. \nTowards the end of the chapter, the commonly referenced division between \nstructure and function is argued to be somewhat elusive. It is difficult to see \nwhere the one ends and the other starts. It is claimed that the specification of a \ndesign object is a combination of expressions of structural and functional nature. \nThis specification should be S-F (structurally-functionally) complete at the end \nof the  process, i.e.,  the  combination  of  new  functional  expectations  and \n \n \n \n \n \n \n\nChapter 4: Resolution through relations \n108 \nstructural description presented by the designer should be such that the \nspecification can prove the expectations that the designer set out to meet - \nor such that it can prove the initial hypothesis. In other words, all parts of the \ndesign object are either described structurally, in terms of dimensions and other \n‘tangible' information, or functionally, in terms of behavior expected from a \nspecific part. As a designer in a conceptual design phase may lay out the \nmain dimensions of the hull in terms of 'length', 'beam', and 'draught· of \na vessel (structural), the same designer in the same phase may describe the \n'engine' in terms of expected behavior (functional). \n \n \n \n \n \n \n\nChapter 5: Developing relations \n109 \nChapter 5: Developing relations \nIn previous discussions the relations were shown to be crucial in representing \nknowledge. This chapter will briefly summarize the most important findings \npresented so far and draw some implications of them in terms of the Design \nProcess Language (DPL). The purpose is chiefly to discuss different phenomena \nrelated to design and to develop the kind of relations used to express them. \nI do not intend to define these particular relations nor any grammatical rules. \nI intend to show that it is possible to classify the relations so that the classes are \nmeaningful in the context of design. I will further argue that it is possible to \nbuild a language from these relations that is an expressive one in the context \nof design, both for the general purpose of developing theories about design \nand for the specific purpose of developing a computer-based design \n‘assistant'. \nThus, while it is probably easiest to see the application of DPL in the context of \nautomated design, it may be less apparent that the discussion of language is \nclosely related to the discussion of the phenomena that the language is to \nexpress. Thus, the DPL may be seen as a means towards an end which is to \nshed some light over what phenomena that are involved in design process \nand object description. I thus hope that the dual purpose of this work will shine \nthrough; to discuss phenomena regarding design as the language develops, \nand to develop the language as the phenomena are discussed. \nRequirements of the Design Process Language \nIn the course of the previous four chapters, several characteristics of the design \nprocess, and the knowledge used and produced by it, have been \ndistinguished. It is thus possible to develop some requirements by which the DPL \nshould be judged for 'epistemological adequacy’ in design contexts.\na \na \n\"A representation is called epistemologically adequate for a person or a machine if It \ncan be used practically to express the facts that one actually has about the aspect of \nthe world.\" (McCarthy and Hayes, 1973, page 399) \n \n \n \n \n\n110 \nChapter 5: Developing relations \nLet me recapture the hypotheses 4.27, 4.28, and 4.29, from the previous \nchapter: \nThere exist relations that may be used to construct the needed \nsentences in order to form a concept in the design process. \nThere exist relations that may be used to express the needed \nrelationship between concepts applied in the design process. \nThe categories of relations whose existence was hypothesized \nabove can be seen as categories in the same language. \nRecall that a concept is formed through sentences ultimately relating it to \nconcepts that are known either in propositional memory or semantic memory. \nFor a D-object to be generally known, at least some concepts used to define \nit, as well as all the concepts that defines the D-object, must be generally \nknown. A sentence is built from two main categories of symbols - concepts \nand relations. The relations could (according to Axiom 4.25) be operated upon \nby grammatical rules and categorized according to the phenomena that they \nexpress (Axiom 4.24). \nIt then remains to develop two main ideas in order to establish a framework for \nthe Design Process Language; (i) the particular phenomena that are necessary \nto express as relationships in design, and (ii) the groups of relations used to \nexpress these. In this section I will show some examples of sentences describing \nphenomena that one would expect to be relevant in the design context. I will also, \nwith reference to these examples, introduce some requirements that the relations \nin the Design Process Language must satisfy. Thus, (i) above will be started here \nbut continued through the discussion of each \ncategory \nof relations. It is \nnecessary to develop these ideas in a stepwise fashion, since in my view it \nmakes little sense, as frequently stated earlier, to discuss the phenomena to \nbe described separately from the language used to express them. \nI have two main reservations to state. The first is that I do not claim these \nrequirements to constitute a complete set of requirements that the relations \nare to satisfy. One reason for this is that to do this would bring me far beyond \nthe limits of my abilities, specifically in terms of temporal resources at disposal. \nAnother reason is that it may simply not be possible to prove sufficiency in a \n \n \n \n0\n\n111 \nChapter 5: Developing relations \nlanguage used for the purposes of expressing phenomena in design because too \nlittle is known about what design is. The other reservation is that I do not claim to \nsatisfy all the requirements stated here, grossly of the same reasons as above. \nWhat I can do is to claim that all requirements are relevant and that the Design \nProcess Language is a useful continuation on the road towards achieving \n'epistemological adequacy' in the context of design. \nOne kind of phenomenon is related to that of expressing activities, events, \nprocesses, and the like. The relation of interest here is the verb that describes \nthe kind of activity being performed: \n\"The program calculates the weight of the ship\" \n\"The designer starts the weight calculation \nprogram\" \n• \nIt must be possible to define the activity of doing something. \nAnother kind of phenomenon is that concerned with what a concept is, how \nit is identified, and what it possesses of parts and characteristics. In addition, \nit is necessary to describe in what circumstances a concept exists - that is, \nhow it relates to other concepts not possessed by it: \n\"The vessel is a container ship\" and \"The vessel is 50 meters long\" \n\"The vessel is the container ship\" \n\"The vessel is at the dock\" and \"The vessel satisfies the \nrequirements\" \"The vessel is the one at the dock\" \n\"The vessel has a length of 50 meters\" \n\"The company owns the vessel\" and \"The vessel is the property of \nthe company\" \n\"The vessel is at the dock\" \n* \nIt must be possible to define the ‘content' of a concept, \nIt must be possible to define how a concept relates to other concepts \nnot included in its 'definition'. \n \n\n112 \nChapter 5: Developing relations \nAnother kind.of relation is that which simply has to do with stating the existence \nof a concept: \n\"There is a D-object\" \n\"There are expectations\" \n* \nIt must be possible to define the existence of a concept. \nAn important category of relations are those that concern ability, futurity, \npossibility, determination, expectation, and in general those phenomena \nthat have to do with planning and purpose. In addition, the relation do is \nimportant in stating 'facts' in different tenses: \n\"The program can calculate the number\" \n\"The program could calculate the number\" \n\"The number may equal 7\" \n\"The number might equal 7\" \n\"The program might calculate the number\" \n\"The D-object should satisfy the requirements\" \n\"The program will calculate the number\" \n\"The vessel ought to look nice\" \n\"The hull must resist water-pressure\" \n\"The designer must calculate stability\" \n\"The hull does resist water-pressure\" \n\"The designer did calculate stability\" \nIt should be possible to describe an ability to perform an activity. \nIt should be possible to describe the necessity of performing an activity. \nIt should be possible to describe the determination of performing an \nactivity. \nIt should be possible to describe the purpose or expectations of a \nconcept. \nIt should be possible to describe what is required of a concept. \n* \n* \n* \n* \n* \n \n\nChapter 5: Developing relations \n113 \nAnother kind of phenomenon of importance is how concepts, or objects, \nrelate in space and time. Further, it is important to refer to a concept through  \nits affiliated concepts or Its source - that is, to related concepts: \n\"The machinery is on deck 3\" \n\"Plan A will be executed before plan B\" \n\"Machinery is subsystem of vessel\" \n\"The formula is calculated by the program\" \n\"The propeller is connected to the propeller shaft\" \n\"The vessel is analyzed as a structure\" \nIt should be possible to describe how concepts spatially and temporally \nrelate. \nIt should be possible to refer a concept through its related concepts \n(\"owner' or 'origin). \n* \n* \nAnother important kind of relations are those joining sentences or concepts. \nSuch joining may, for instance, be logical, causal, inclusive, or exclusive: \n\"The beam increases with increasing length\" \n\"The program runs while increments are large\" \n\"The vessel satisfies requirements if length is less than 140 meters\" \n\"If one concept is.cheaper than another concept then choose the \ncheapest concept\" \n\"The Color is Red or Green.\" \n\"The machinery is a steam turbine or a gas turbine\" \n\"The Crane is on the Deck because it should reach (both) Cargo Hold and \nShore\" \n\"The length is larger than maximum length therefore the designer must \ndecrease length\" \n\"The designer must decrease length since the length is larger than \nmaximum length\" \n\"The designer executes Program A when Program B has executed\" \n\"The designer executes Program A or Program B\" \n \n \n\n114 \nChapter 5: Developing relations \n\"The designer executes Program A if Program B fails\" \n\"If Program A is faster than Program B then \nthe designer executes Program A\" \n* \n* \nIt should be possible to logically relate sentences or concepts (if, while). \nIt should be possible to causally relate sentences or concepts (since, \nbecause). \nIt should be possible to inclusively relate sentences or concepts (both, \nand) \nIt should be possible to exclusively relate sentences or concepts (neither, \nnor). \n* \n* \nIt should be possible to describe the purpose of performing an activity.  \nIt should be possible to define rules of selecting among concepts. (if, \nthen) \nIt should be possible to make alternative definitions of concepts. (or) \n \n* \n* \n* \nIn the design process, an important activity is to compare alternatives, or \ndescribe one concept in comparison to another concept: \n\"Vessel A is larger than vessel B\" \"Program \nA calculates faster than Program B\" \n\"Choose the cheapest vessel\" \n\"Vessel A is cheaper than vessel  B\"  \n\"Vessel A is the cheapest' \nIt should be possible to describe how concepts compare. \nIt should be possible to describe a concept as compared to others. \n* \n* \nSome other modifiers are discussed in the case where fuzziness or uncertainty is \nintroduced into the design process: \n\"Vessel A is possibly cheaper than vessel B\" \n\"Vessel A is not cheaper than vessel B\" \n \n\nChapter 5: Developing relations \n115 \nIt may be useful to introduce fuzziness in otherwise deterministic relations. \nIt should be possible to represent negation of a statement. \n* \n* \nThe sentences shown so far are propositions stating facts about the world. \nHowever, it is necessary to be able to enact, or mobilize, abilities and to make \nqueries regarding what is stated about the world: \n\"The weight is 12,000 tons\" \n\"Execute program A\" \n\"What is the weight?\" - \n\"Which program is executed?\" \nIt should be possible to distinguish between commands, propositions, \nand questions. \n* \nAnother issue is that dealing with a historical record of a design process. In \naddition,it is often necessary to distinguish between future and present, \nspecifically as goes for planning activities: \n\"The program will calculate weight\" - \n\"The program calculates weight\" \n- \"The program calculated weight\" \nIt should be possible to distinguish between past, present and future. \n* \nSome terminology is traditionally introduced to denote knowledge about \nknowledge. These are specifically those that have to do with classification, \nattribution, and systemizing. All these terms imply at least two concepts and a \nrelation between these concepts: \n\"The D-object is a ship\" - \n\"Ships is a class\" - \n\"‘Anne Lise' is an instance of \nships\" - \"Container ships is a subclass of ships\" \n\"The ship has a length\" - \n\"Length is an attribute of the D-object\" \n \n\n116 \nChapter 5: Developing relations \n\"The length is 140 meters\" - \n\"140 meters is the value of length\" \n\"The ship has length 140 meters\" - \n\"140 meters length is a property of the \nD-object\" \n\"The ship is a system\" - \n\"The machinery is a part” - \"The machinery is an \nassembly' - \n\"The machinery is a subsystem\" \nIt should be possible to define classes and class-related concepts. \nIt should be possible to define attributes, values, and properties. \nIt should be possible to define systems and system-related concepts. \n* \n* \nThe framework of natural language \nThe remainder of the thesis develops the Design Process Language (DPL), As \nhas been frequently stressed, one of the main purposes with the DPL is to \nenable design process modelling and D-object modelling in the same general \nlanguage. It has also been stressed that process and content are tightly \ninterwoven, and that they are grossly inseparable. The inter-dependency \nbetween process and object is particularly apparent when the designer as an \nintelligent system learns from experience or constructs new tools to solve new \nproblems. In both cases, adaptation requires the system to access all \nknowledge in the content theory introduced in Chapter 3. \nConcretely, the aim with DPL is to both give tools for describing the content of \nmemory at any given state and for describing interventions that affect the content. \nThese interventions may be perceived as performed by ‘agents' that may be seen \nas parts of the content theory, in McDermott's words. Thus follows: In DPL the \nprocess model is a particular aspect of the content theory, in which agents \n(belonging to the ‘content) are mobilized to perform a process. The mobilization \nis performed by using certain relations in the language, in particular (latent) \nactive (or modal, transitive) verb relations. For instance, (1) \"Joe designs a \nvessel\" is a mobilization of the relationship (2) \"Joe can design a vessel.\" The \nrelationship (2) belongs to a content model, while (1) belongs to a process model. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nChapter 5: Developing relations \n117 \nIt is useful also to view the design process as a process of constructing working \nmodels. A designer will necessarily plan ahead the steps to make in course of \ndesign - the interventions are premeditated. However, just as no chess-player \ncan plan all steps to take in detail before the game starts and therefore must \nrevise and extend the process model as the game develops, so must the \ndesigner. This highlights the role of Sternberg's ‘components' that were \ndiscussed in Chapter 2, in particular the components \"component selection\" \nand \"component ordering\". When the designer chooses a plan of work, it is \npossible to describe this as a plan that ensures a mobilization of latent abilities \n(can-relationships) to enact in the future. Such a situation is illustrated in Box 5.ii. \nAssume that the following is represented in content theory: \nl. \n2. \n3. \n4. \n5. \n6. \n“3*2” is a Formula \nCalculation_f can calculate a Formula \nCalculation_f can return a Result \nCalculation_f is a C-program \nCalculation_f has Code \nCode of Calculation_f Is \ndouble main (Formula) \n. \n{ \nreturn (Result) \n} \nThe following might belong to the process model: \n7. \nCalculation_f calculates “3*2” and returns Result \nThe process model may be viewed as a mobilization based on sentences in the content \nmodel. The specific process enacted in sentence 7 is performed by removing the relation \ncan (a modal verb) from sentence 2. After the process has been mobilized and de- \nmobilized, the following sentences might be added to the content theory: \n8. \n9. \nThe Result Is 6 \nCalculation_f calculated “3*2” and returned 6 (a historical record) \nAs is seen from the very superficial illustration, the language used in both content and \nprocess description is the same - the difference lies in the kinds of (modal con) or also \naspects of (infinite to present) relations used. In this case the process was described \nthrough the verb relation calculate. \nIt should easily be recognized that there must exist a connection in the language used in \nboth content theory and process model. The construction of the sentence (7) (that is part \nof the process model) depends on access to the sentences (1) through (6). \nBox5.i: \nAn example of a representation of ‘content' and 'process' in the same \nlanguage. \n \n \n \n \n \n \n\n118 \nChapter 5: Developing relations \nProblem: \nFind and modify a prototype vessel to introduce into ‘content theory’: \nPlan: \nStep \nAction (relationship in 'process model ‘) \nAbility (in ‘content theory’) \n“can find a …” \n(l) \n(2) \n(3) \n(4) \nFind a comparable, existing vessel \nAdjust parameters to fit the current conditions by ...  “can adjust parameters ...” \n“can test whether ... “ \n“can proceed if vessel is ok” \nTest whether vessel is OK by ... \nProceed If vessel is OK \nBox5.il: \nPlanning a mobilization of abilities in design. \nAs has been argued in Chapters 3 and 4, to represent knowledge is essentially \nto establish relationships among concepts, whether these relationships describe \n'process · or 'content ', I focus on the kinds of relations that may be relevant \nin developing a language that will make possible the representation of knowledge \nas it pertains to design object and design process. I will first argue for the use \nof natural language as an appropriate platform, and will then pursue to \nindicate some invariants in the classes of relations in the DPL. \n“(T)here are psychological grounds for supposing that mental models are constructed by \na semantics that operates on superficial propositional representations of the premises. In \ngeneral terms, this process consists in mapping strings of symbols into models.” (Johnson- \nLaird, page 167) \nBox5.iii \nIt is noteworthy that most models and model languages indeed do apply \nselected elements from natural language to describe relations. Predicate \ncalculus and formal logic tend to apply terms categorized as prepositions in \nnatural language, such as Above, Below, On, and so forth, as well as verbs like \nimplies (=>) and equals(=). The conjunctives and, or, and if are used frequently \nboth in general computer programming and specifically in 'expert systems' \napplying production rules and formal logic based on fundamental axioms and \ntheorems. In addition, a variety of representational systems make use of \ncomposed relations like part-of(noun-preposition relations), has-subclass(verb- \n.noun relations), composed-of (verb-preposition relations), less-than (adjective- \nconjunctive relations), if-exists (conjunctive-verb relations), and can-calculate \n(verb-verb relation). Again, it is apparent that such relationships are closely \n \n \n \n \n \n \n \n \n \n \n \n\nChapter 5: Developing relations \n119 \nrelated to sentences in natural language, where the relations in specific are \nselected terms from natural language. \n“Once we assume that language and thought are different things, we're lost in trying to \npiece together what was never separate in the first place.” (Minsky, 1986, page 198) \n.Box 5.iv \nSome of the reason for key terms in natural language appearing in ‘artificial' \nlanguages is that it simply is convenient. Using terms that are ‘naturally' \nunderstood may help the users of the 'artificial ' languages grasp the semantics \nof these terms. It is, of course, not necessary to use 'natural ' terms in these \nlanguages. Both automated and human systems may operate on entirely \nabsurd terminology (as seen from the outside) provided that these terms are \nunderstood by the system that applies them and that there is a consistent \ngrammar. In predicate calculus, for instance, the particular terms could easily \nbe redefined without any loss in efficiency - all semantics is explicitly \nintroduced in the universe of discourse without the terms having to mean \nanything outside this universe - the system is closed. \nIn most computing languages, the names of particular relations, like IF ... THEN, \nDO ... WHILE, FOR .. ., GOTO ..., \nare probably transferred from natural \nlanguage for sakes of 'convenience' in order for the programmer to more \neasily understand the semantics attached to the terms - not because the \nwords themselves are unreplaceable. \n\"How much more convenient it would be if theories of thinking, instead of employing \nconventional mathematics, could be expressed formally using the same kind of symbolic \nrepresentation as are used in thought itself!\" (Langley et. al., 1987, page 33) \nWhen it comes to meaning the picture is different; the semantics, or the \noperations, affiliated with the terms is indeed central in performing operations \nupon and representing knowledge. This should come as no surprise. Natural \nlanguages have evolved to reflect the needs of humans to represent \nphenomena - in particular to support cognitive processes. As Johnson-Laird \nindicates above, the possibility of performing intellectual processes rests upon \nthe fact that the language itself has a grammar that supports such processes. \n \n \n \n \n \n \n \n \n\n120 \nChapter 5: Developing relations \nThus, Johnson-Laird implies that the development of early abilities to make \ninferences does not follow from a child's ability in formal logic, but rather from \na child's ability in language, specifically to understand the power of the grammar. \nFor instance, a child knowing that \"a cat cannot fly\" will know that if something \nflies it Is not a cat. Johnson-Laird argues that this deduction is tied to knowledge \nof the semantics of if - not to knowledge of the logical rules (e.g., modus tolens) \nthat formalize this deduction. This is illustrated in (1) and (2) below. \n(1) Representation in predicate calculus. \n(2) Representation in 'natural’ language \nThis ‘semantics of language' is one of the prime reasons for the Design Process \nLanguage to be developed on the platform of natural language. One \nfundamental premise is that if main classes of relations in natural language are \nidentified, this will shed light on how design process and object can be \nrepresented. In addition, as key terms are found in this language, it may be \nexpected that key characteristics of the design process and object - or design \nknowledge - can be affiliated with these terms. As each relation, roughly \nspeaking, has a unique role in language so will the phenomenon it describes \nhave a unique role in a relationship describing some 'real ' phenomenon, as \nindicated at the beginning if this chapter. \nIt does not require a language that is as rich as the spoken or written one to \napply elements, or at least the general structure, of it in design object and \nprocess modeling. The design process is for the most part the result of a quite \npremeditated effort, where activities are intended to be tightly controlled. This   \nreduces the need for a large set of qualities and words found in natural \nlanguages, as for behavioral and mental 'processes' (see Table 5.1). \n \n\nChapter 5: Developing relations \n121 \nIt is not argued here that the English terms used are necessarily the best ones \nto use in DPL. Neither is the purpose to necessarily distinguish some relations as \nmore important than others. It is instead to argue that there are some groups \nof relations that are important in describing the design process and the knowledge \nthat this process manipulates. It is further to show that the linguistic categories \nused here are good categories for discussing the role of the relations in any \nlanguage such as the DPL. \nThere may be some reasons for natural language not to be considered \nappropriate in the context of DPL. I will counter some possible arguments in \nbrief here: \n(1) \nNatural languages are too ambiguous for use in highly structured \nprocesses, that is, where logic or computer application is central. \nIf DPL were to be a complete language for describing any conceivable \nphenomenon, this would be a legitimate concern. However, the scope of the \nDPL is to provide a language where important (and not necessarily all) \nphenomena can be described and manipulated. It is further not to be a \nmeans for a machine to understand the way humans communicate. To the \nextent that machine/human communication is the issue, the crucial idea is to \nlet their respective languages 'meet’ at the point where the DPL is structured \naccording to rigorous rules, but where those rules and the terminology is a \nsubset of the natural language. Thus, DPL singles out the more structured parts \nof the English language and defines relations such that the terms denoting \nthese relations are uniquely understood in a design environment. I claim that \nthis may be an epistemologically sound (or strong) and intuitively appealing \nform of communication and processing. \n(2) \nNatural language representation is inefficient for speedy search and \nretrieval, as is required from large database systems. \nThere are particularly two reasons why this is not a relevant question in the context \nof DPL: (i) DPL is not developed with a view towards achieving efficiency (in terms \nof information processed per CPU) - \nit is geared towards achieving \nepistemological adequacy (see footnote (a)) in the context of design; and \n(ii) if DPL indeed were primarily focused on developing a language for  \n \n\n122 \nChapter 5: Developing relations \ncomputer purposes, it is more than likely that developments in computing \ntechnology would increase the processing speeds of information to the extent \nthat the problem would be more what kinds of information to process rather \nthan how fast it should be processed. \n(3) \nIt is too rich in concepts for most purposes, as in most traditional \ncomputer programming, and requires a too extensive syntax. Thus, the \ngrammar would be overly complicated. \nAs already said under (l ), DPL is a segment of a natural language, where the \nrelevant grammatical rules are chosen to meet the requirements of a \nlanguage constructed for describing design process and object. As in any \ntraditional (computing) languages, the syntax and grammar may be reduced \nto only be epistemologically adequate, where any user and context \ndetermines the interpretation of 'adequate·. \n(4) \nA complete syntactical description (including grammatical rules) is too \nextensive to practically implement in computers. \nThis is discussed under (l) and (3); the extent of the DPL can be adjusted to \nany purpose, and computer technology will probably reduce this problem to \na detail. \n(5) \nIt is not sophisticated (scientific) enough. \nSince there already exist languages that have shown to be powerful in terms \nof representational abilities, I can see no need to construct an entirely new \nlanguage from scratch. It seems more appropriate to extract from those \nexisting languages the rules needed to represent a phenomenon adequately. \nThis approach may be pragmatic, and in some sense cynical, but there are \nchances that the result is a more complete and intuitively 'right' kind of \nlanguage. \n \n \n \n \n\nChapter 5: Developing relations \n123 \nin the Design Process Language \nRelations and modifiers \nThe main classes of relations in DPL are the verb relations, preposition relations, \nand conjunctive relations. In addition, there are the classes of adverb and \nadjective modifiers. These latter terms are briefly described - the focus is to \ndevelop the verb relations since these may be argued to have a most central \nrole, particularly as goes process modelling. Towards the end are introduced \nsome abstract terms that are frequently used in ‘talking about knowledge ' \n- terms that refer to what 'kind of' concept being discussed. For the sake of \ndiscussion, let me focus the scope of the discussion to simple propositions, or \nrelationships that are either true or not. Thus, questions and commands, for \ninstance, are discussed separately - the general understanding of the \nrelations are assumed to be the same regardless of whether they are used in \na question, command, or proposition. \nVerb relations \nVerbs are central carriers of meaning in the language - they are present in ll \ncomplete sentences in daily conversation. This section discusses the main kinds \nof verb relations.in a Design Process Language. \nThe earlier discussions have referred to roughly four kinds of verb relations, \nthose that concern existence, those that concern possession, those that \nconcern action, and those that concern future, determination, requirement, \nand the like. This division is by no means exclusive - one verb may play \ndifferent roles according to the context in which it is used. Furthermore, it is \ndifficult to establish criteria for determining whether one verb belongs to one \nclass or the other, and several verbs do not necessarily belong to either of \nthese classes, as may be the case with those verbs that concern mental states, \nsuch as love, like, hate, and so forth. As mentioned on page 120 the classes \nof verbs discussed here are those that are viewed to be most relevant in \ndescribing design processes as structured and goal-directed problem solving, \nand in describing objects that essentially are quite tangible. \nResearchers into linguistics have been involved in discussing the roles that verbs \nplay in communication between humans and in representing information, and \n \n\n124 \nChapter 5: Developing relations \nTable 5.1: \n\"Process types. their meanings, and key participants:\" (Halliday, 1989, \npage 131) \nresults from work within this field can be applied in the context of DPL. Halliday  \nsummarizes the verb relations (process types) in the manner as shown in \nTable 5.1. \nThe scope here is limited to three of Halliday's 'process types· - material, \nrelational, and existential verb relations.b This is not to say that the other \nrelations are irrelevant or unimportant, and not to say that these relations \ncannot be included in the same frame of reference. It is merely to say that the \nkinds of relations presented here are the more relevant in a design situation. \nThe last category of relations are the modal verb relations. \nMaterial verb relations \nTransactions, as referred to earlier, have the characteristic feature of causing \nchanges in state. In other words, they in some way alter the content theory or \nprocess model when enacted - there is generally an obiect of their actions. \nb \nWherever Halliday uses the terms processes, in the sense of process carried between \nsegments in a sentence, the term relation is used here, in the sense of relations \nbetween concepts in a sentence, i.e. a relationship. Also, Halliday refers to processes as \nprocess clauses, including adverbs, for instance. The discussion here singles out the \nverb, which after all is the 'carrier ·. \nProcess type \nCategory meaning \nParticipants \nmaterial: \naction \nevent \nbehavioral \nmental: \nperception \naffection \ncognition \nverbal \nrelational: \nattribution \nidentification \nexistential \n'doing· \n'doing· \n'happening · \n'behaving' \n'sensing' \n'seeing· \n'feeling' \n'thinking· \n'saying· \n'being' \n'attributing· \n'identifying· \n'existing' \nActor. Goal \n \n \nBehaver \nSenser, Phenomenon \n \n \n \nSayer, Target \nToken, Value \nCarrier, Attribute \nIdentified, Identifier \nExistent \n \n \n \n \n \n \n\nChapter 5: Developing relations \nIt is clear that a language such as DPL must be capable of expressing such \ntransactions. Grossly speaking, it is possible to cast them as relations between \nthemselves and some aspect of the world. These relations are the material \nverb relations. \nThe material verb relations imply that \"some entity 'does' something - which may \nbe done 'to· some other entity. So we can ask about such processes, or 'probe' \nthem, in this way: What did ... do? What did ... do to ...?\" (Halliday, 1989, pp. \nl 03-104) In other words, the transactions and interventions experienced in the \ndesign process are material processes. Whenever there is something that in \ncommon terms would be called activities, these activities are described through \nmaterial verb relations. \nIt can generally be assumed that this class of verb relations belongs to the \nclass of transitive verbs. This is to say that the verb carries a process from a \nsubject to an object, i.e., the verb relates a subject to an object. The object \nmay be only implicit, like in \"The program calculates,\" where it is understood \nthat something (an object) is being calculated. \nIn the context of the material verb relations, the transitivity is intuitively strong \n- \nthe relationship between the subject and the object is one where the \nsubject actually may change the object. This is not so with all transitive verbs, \nsuch as have, contain, include, and so forth. While these latter verbs represent \nrelations between that which has, contains, or includes and that which 'is’ had, \nincluded, or contained, they do not represent any change in the object the \nrecipient - of the relation. This is as opposed to the material relations execute, \ncalculate, remove, and so forth. To calculate something affects the state of \nthat something, whereas to have something does not. \nThis interpretation introduces at least one new problem: What does it mean to \naffect the state of something? To answer this, the ·universe of discourse· must \nbe kept in mind - the task here is primarily to represent the knowledge that \npertains to the design process and the object of this process. In addition, it is \nfocused on using and developing symbolic representation through sentences \nin the DPL. In this view, it is clear that whenever a new sentence is introduced \nthat differs from a previous sentence, this brings new knowledge into the \ndomain and thus the state (of design memory) is affected. \n \n\n126 \nChapter 5: Developing relations \nSay then that whenever a sentence is constructed this reflects some behavior or \nphenomenon that can be observed in the design process. In other words, the \nsentence is a true description of a phenomenon. Assume further that the \nsentence describing the phenomenon and the phenomenon itself appear \nsimultaneously - there is no time-lag. Thus, it is possible to consider a sentence \nas causing something, although the something actually is caused by the \nphenomenon the sentence describes. In other words, a process description \nmay be treated as the process itself, \nUnder this assumption it appears that if a change in design memory directly \nresults from the construction of a sentence, the relation in that sentence is a \nmaterial and a strong transitive verb relation. For instance, \"The program \ncalculates the weight of the ship\" causes a new sentence to appear, saying \nthat \"The weight of the ship equals ...,\" The relation calculate can be said to \nbe a direct material verb relation, henceforth referred to as DMR. Said in \nanother way, if a new sentence B appears immediately following the sentence \nA, and if B would not have been constructed were it not for A, then A is a \nDMR sentence. \nA new potential problem may seem to arise when a sentence such as \"The \ndesigner starts the weight calculation program\" is constructed. In this case, no \nnew knowledge apparently is introduced before \"the program calculates the \nweight of the ship\" appears. However, recall that design memory also consists \nknowledge of the process itself. Thus, the latter sentence represents the \nknowledge added to memory. These relations, like start, trigger, execute, are \nhenceforth referred to as indirect material relations, or IMRs. Other relations in \nthe same category are stop and terminate. These relations describe the \ndestruction of an DMR and are also referred to as IMRs. In view of this, the \nfollowing definitions can be proposed: \nDefinition 5.1: \nIf one of the direct consequences of a sentence is that other \nsentences are introduced into design memory, then the verb in \nthat sentence is a direct material verb (DMR) relation. \n \n \n \n \n \n\nChapter 5: Developing relations \n127 \nDefinition 5.2: \nIf the only direct consequence of a sentence is that other SMR \nsentences are introduced into design memory, then the verb in \nthat sentence is an indirect material verb (IMR) relation. \nIn this framework, the \"process model ' referred to earlier is an ordered collection, \nespecially of sequences, of MR sentences. The segregation into direct and \nindirect MRs roughly corresponds to Halliday's division in Table 5.1, where \n'action' may be viewed as a DMR and 'event' as an IMR. \nIntention, circumstance, and possession \nHalliday terms as relational processes those relations that concern, in a wide \nsense, the existence of a concept or rather the way a concept exists. He \nseparates into three types; \n\"(l) \nintensive \n'x is a' \n‘x is at a' \n‘x has a' \n(2) \n(3) \ncircumstantial \npossessive \nEach of these comes in two modes: \n(i) \nattributive \n(ii) \nidentifying \n‘a is an attribute of x' \n‘a is the identity of x \"' \n(Halliday, 1989, page 112) \nIn the context of the D-object, examples of these types and modes are: \nl .i. \n\"The vessel is a container ship\" \n\"The vessel is 50 meters long\" \n\"The vessel is the container ship\" \n\"The vessel is at the dock\" \n\"The vessel is the one at the dock\" \n\"The vessel has a length of 50 meters\" \n\"The company owns the vessel\" \n\"The vessel is the property of the company\" \nl .ii. \n2.i. \n2.ii. \n3.i. \n·3.ii. \n \n\n128 \nChapter 5: Developing relations \nIn a design situation, it would seem that the most relevant mode is the attributive \nmode. Most likely, the matter of identifying a concept is less of a problem than \nattributing 'content· to that concept. There is an important exception in \nrepresenting choices among alternatives. In that case, the process would \ninvolve the identification of the alternative to pursue among a set of alternatives. \nHowever, the attributive mode is focused here, since this is the mode that is \noperational when a concept is described, or attributed meaning. \nHalliday divides each circumstance-attributive relation into two additional \ncategories of clauses - (a) \"circumstance as attribute\" and (b) \"circumstance \nas process.\" In (b) the relation is carried by the verb alone, while in (a) the \nclause is composed of a verb and a preposition or adjective. Thus, we get: \n2.i.a. \"The vessel is at the dock\" \n2.i.b. \"The vessel satisfies the requirements\" \nThe relations predominantly discussed here, the attributive modes of the \nintensive, circumstantial, and possessive verb relations, may all be used for \ncapturing different aspects of concepts. I will briefly discuss their relevance as \napplies to the D-object, but the discussion can be extended to other concepts \nas well. \n\"In the intensive type, the relationship between the two terms is one of \nsameness; the one 'is' the other.\" (ibid., page 114) These intensive relations \nare used for relating the D-object to secondary concepts that may serve to \nidentify the D-object. There are particularly two 'kinds of· secondary concepts \nthat enter into such a sentence; those that concern concepts generally viewed \nas attributes and those that concern concepts generally viewed as classes. An \ninstance of the first kind is the sentence (A) \"50 meters is the length of the vessel\" \nwhile an instance of the second kind is the sentence (B) \"The vessel is a (kind \nof) container vessel.\" These two sentences are fundamentally different in \nnature. Whereas in (A) the vessel is identified by a particular characteristic, \nunaffected by any classification, in (B) the vessel is identified through \nclassification, unaffected by any particular characteristic aside from class \nmembership. \n. \n \n \n \n\nChapter 5: Developing relations \n129 \nThere is a sense to which this is a logical segregation in the design context. \nSeen from the perspective of the D-object, (A) relates the D-object \n'downwards' to a more elementary and concrete concept that serves to define \nthe particular characteristic 'length.' (B), on the other hand, relates the D-\nobject ‘upwards' to a more composed and abstract concept that serves to \ndefine a set of characteristics of the D-object. In the context of object- oriented \nprogramming, (A) is a relationship between the D-object and local properties, \nwhile (B) is a relationship between a D-object and its super-class. Another way \nto view this is that in (A) the vessel is described such that it is possible to \nclassify it as something, while in (B) the vessel is described such that it is possible \nto characterize it (through class properties). \n\"In the circumstantial type, the relationship between the two terms is one of \ntime, place, manner, cause, accompaniment, matter or role,\" (ibid., page 119) \nThe circumstantial clauses (CC), as applied to the D-object, are highly relevant \nin describing the (not surprisingly) circumstances of the D-object. In other \nwords, connections between the D-object and the expectations or the \nenvironment are predominantly circumstantial. Examples of this are the \nsentences \"The D-object satisfies the requirements\" (process) and \"The D- \nobject is situated at the dockside\" (attribute). As said earlier, these relations are \neither composite (attributive - from verbs and prepositions or adjectives) or \nsimple (process) verbs.c \nThe easiest way to visualize the circumstantial relations is to distinguish between \nwhat a concept A means 'in isolation ' and what it means with respect to \nanother concept B not included in the definition of A It is possible to place A \nand B in different circumstances without changing their 'isolated' definition. A \ncircumstantial relation is, however, established when \"A is (placed) next to B.\" \nBoth A and B are internally the same, but their mutual relationships is different \n- they have a new circumstantial relationship. \nA circumstantial clause built from a verb and a preposition differs in one \nrespect significantly from a clause built from a verb and an adjective. Whereas \nC \nWhen discussing the circumstantial relations as attributive it is clear that they are clauses \nrather than specific relations. Thus, they are either composed from verbs and \nprepositions or verbs and adjectives. They are discussed both here, as well as under \nprepositions and adjective modifiers, because of this mutual influence. \n \n \n \n \n \n \n \n \n \n\n130 \nChapter 5: Developing relations \na CC including a preposition will not be applicable to relate the D-object to \nits intrinsic concepts (see definition in Chapter 4), the CCs including an \nadjective may be used for this purpose. \nThe D-object is by definition a concept that receives meaning only through its \nrelations to secondary (intrinsic) concepts. To claim that the D-object has a \ncircumstantial relation including a preposition to intrinsic concepts is \ndangerous, since the intrinsic concepts are all related (as ‘content) to the D- \nobject. For instance, to say that \"The vessel (D-object) is above the keel\" \nbecomes contradictory since 'the keel ' is involved in defining 'the vessel'. \nAs it turns out, it is difficult, if not impossible, to construct a meaningful sentence \nin which the D-object has a circumstantial relationship including a preposition \nto its intrinsic concepts. At best, such a sentence would be unresolvable, like \nin \"The vessel is connected to its rudder.\" (What is connected to the rudder?) At \nworst it becomes contradictory, like above. (Is the keel above itself?) Of course, \nthe intrinsic concepts may have such circumstantial relations with other intrinsic \nconcepts, like in \"The rudder is connected to the autopilot\" or \"The engine is \nabove the keel.\" There are thus three ways in which circumstantial relationships \nincluding a preposition apply to a D-object; either as relationships between \nintrinsic concepts, between intrinsic and non-intrinsic concepts (\"The hull is in the \nwater\"), or between the D-object and non-intrinsic concepts (\"The D-object is at \nthe dockside\"). \nWhen it comes to the CCs including adjectives the picture is different. Generally, \nthe adjective modifiers are applied to compare some aspects of the D-object \nto its parts. Thus, statements such as \"The vessel is longer than the hull\" are \nallowable. Roughly, it is possible to say that a D-object may be compared \nto its parts, but not positioned according to them. \n\"In the possessive type, the relationship between the two terms is one of \nownership; one entity possesses another.\" (ibid., page 121) The possessive \nrelations describe relations between a concept and concepts 'had ', or \npossessed, by that concept. This applies to parts serving to define a D-object \n(semantically, has-part), members of a class (has member, contains, includes), \nand characteristics 'had ' by concepts (has attribute, has value, has property). \nIn a sense, the possessive relations mirror the intensive relations described \n \n\nChapter 5: Developing relations \n131 \nearlier - \"The vessel is a container ship\" is analogous to \"The class of container \nships has the vessel (as a member),\" and \"50 meters is the length of the vessel\" \nis analogous to \"The vessel has a length which has value (or equals) 50 \nmeters.\" \nThe target of possessive relations can generally be referenced by using the \npreposition of. The 'rudder' in \"The vessel has a rudder\" becomes \"The rudder \nof the vessel.\" The 'vessel· in \"The class of container ships has the vessel (as \na member)\" becomes \"The vessel (which is a member) of the class of container \nships,\" The 'length· in \"The vessel has a length\" is referred through \"The length \nof the vessel.\" This will be discussed further in the section on (referential) \npreposition relations. \nExistential relations \nThe existential relations \"represent something that exists or happens.\" (ibid., \npage 130) \"There is a D-object\" refers to the mere existence of the concept \n'D-object' and does not tell anything about what this concept means. It may \nbe viewed as a means of signaling the existence of a concept that either (l) \ncan be used to describe other concepts, (2) must be described by means of \nother concepts or (3) that is irrelevant. \nIn the context of the Design Process Language, the first steps to take in the \ndesign process include to introduce the sentence \"There is a D-object\" into \ndesign memory, and to interpret the expectations (\"There are expectations\") \nin terms of this new concept, like \"The D-object should float.\" If these are the \nonly sentences in design memory, the task would be to relate the D-object in \nsome way to the concept 'float’. \nModal relations \nThe design process can be safely assumed to be characterized by some key \nterms like 'future', ‘uncertain ', 'planning ', 'ability', 'hypothetical ', and other \nterms signaling what is to be, become, or be done. None of the relations \nintroduced so far can adequately deal with such situations. In a sense, the \nverbs previously discussed are somewhat deterministic in the sense that they \nare either true or not. There is yet no way to describe an expected, desired or \n. \n \n\n132 \nChapter 5: Developing relations \nrequired state as outlined in Chapter 4, for instance \"Vessel has length 50 \nmeters\". In terms of the prior relations, either the vessel 'has' this length or it \n'has not’. Fortunately there are tools that modify these verbs - modal auxiliary \nverbs, here referred to as modal relations. \nIn the Design Process Language the modal relations are used for indicating \nthat a relationship is possible, plausible, able, to become true, and the like. \nGrammatically, a modal auxiliary verb is used for \"expressing the mood of a \nverb,\" where 'mood' is·defined as \"a verb form or a set of verb forms inflected \nto indicate the manner in which the action or state expressed by a verb is \nviewed with respect to such functions as factuality, possibility, or command.\" \n(American Heritage Dictionary) The modal verbs include can, could, may, \nmight, must, ought, shall, should, will, and would. A modal verb always occurs \nin conjunction with another verb in the sentence. (Butler, 1988) I will briefly \ndiscuss the semantics of each of these terms as applied to a design language. \nCan is used here as a relation applying exclusively to the material relations. In \nother words, it applies to relations that express transactions, or state-changing \nprocesses in the design process. In this interpretation, can is a means of \nexpressing ability of performance. For instance, the sentence \"The program \ncan calculate the number\" is legal whereas the sentence \"The number can equal \n7\" is illegal.d This modal relation is necessary in a language where content and \nprocess is to be expressed in the same language and memory. The reason for \nthis is that there must exist means to distinguish between an ability to do \nsomething and the mobilization (or enactment) of this ability. If can did not \nexist in the language it would be difficult to resolve whether something \nexpressed an action or a possible action.\ne\n \nd \nIf something can something, ii should be possible to ask \"What can it do?\" Obviously \n'the number· can't do anything while 'the program‘ can. \nTo completely resolve the notion of can is a quite involved philosophical question. \nMcCarthy (1973) has an extensive discussion on what the term actually implies in terms \nof artificial intelligence. The discussion by McCarthy goes along the lines: If a program \ncan't do something until told to do it, can it do it? Such discussion will not be pursued \nhere. \n8 \n \n \n \n\nChapter 5: Developing relations \n133 \nCould is the past tense of can. Although it has no central position in DPL one \nuseful Interpretation is that It expresses the same as the composed modal relation \n\"can and might” below. The sentence \"The program could calculate the \nnumber\" then means that the program has both the ability to calculate the \nnumber, and that there Is a possibility that this ability will be mobilized in the \nfuture. (That is, the conditions for the ability to be enacted are present.) Thus, \npossibility and ability to perform a certain transaction in the design process \nmay be expressed through this modal relation. \nMay is used for expressing possibility and applies to all other verb relations. In \na design situation It would probably be used for introducing a relationship \nwhose truth is not established. There are, however, multiple interpretations, like \nin \"The number may equal 7.\" This could mean either (1) that the number is \n'allowed' to equal 7 or (2) that there are indications that the number is 7. For \nsake of simplicity, the interpretation (l) is chosen here for may while (2) is \ncaptured through might, such as in \"The number might equal 7.\" In a sense, \nthis is congruent with traditional interpretations In linguistics where might is seen \nas a ‘weak' form of may - the latter is permissive in nature while the former \nis rather informative.t \nAn additional ambiguity arises when might is used in conjunction with a \nmaterial relation. To say that \"The program might calculate the number\" could, \nwith respect to the interpretation (2) above, mean that either (a) there are \nindications that the program will calculate the number in the future or (b) there \nare indications that the program can calculate the number. It would be \nconvenient If it were possible to use double modal relations, such as in \"The \nprogram may can calculate the number\" for interpretation (b). It is \nquestionable whether this should be permitted, particularly due to the danger \nof making absurd sentences, such as \"The program should might can \ncalculate the number.\" One way to make such sentences more 'readable' \ncould be to use conjunctive and to combine modal relations, like in \"The \nprogram may and will calculate the number\" for (a) and \"The program might \ncalculate the number\" for (b). This interpretation is adopted here. \nContrast \"You may do it\" with \"You might do it.· When may is used the statement \ngenerally would grant permission - when might is used the statement generally would \nbe Informative (of option). \n \n \n \n \n \n\n134 \nChapter 5: Developing relations \nThe modal relation shall is a quite complex modal relation. Lexically it is defined \nas follows: \"1. Used to indicate simple futurity: ... (The vessel shall sail the seas). \n2. Used to express: a. Determination or promise: ... (The job shall be done \nsoon). b. Inevitability: ... (The process shall take time). c. Command: ... (The \ndesigner shall do the job). d. A directive or requirement.... (The vessel shall \nmeet the requirements)\" (American Heritage Dictionary, comments in brackets \nadded here) Due to these multiple interpretations and due to the fact that \nshould, must, and will, seem sufficient for capturing these interpretations, the \nmodal relation shall is not used in DPL.\ng \nThere are two interpretations of the relation should that are relevant in the \nDesign Process Language: (a) As expression of probability or expectation, as \nin \"The D-object should satisfy the requirements,\" or (b) as expression of \nconditionality or contingency, like in \"Should the result be wrong then the work \nmust be redone.\" The interpretation chosen here is that should expresses an \nexpectation of a future state, such as In (a). The relation particularly relates to \nthe expectations put on the D-object, as discussed in Chapter 4. Interpretation \n(b) seems to be manageable through the conjunctive relation if, and there is \nno apparent reason for making the definition of should ambiguous in order to \n'duplicate' the role of if in the language. \n· The modal will is of the more multi-faceted such relations. American Heritage \nDictionary gives the following definitions: \"Used to indicate: 1. Simple futurity: \n... (The vessel will eventually be built. 2. Likelihood or certainty: ... (The vessel \nwill be large). 3. Willingness: ... (I will design it).  4. Requirement or command. ... \n(You will design it. 5. Intention: ... (I will design it if I get paid) 7. Capacity or \nability: ... (The vessel will float.\" (comments in brackets added here) The \ninterpretation used in DPL is one In the intersection of 1, 2, and 4. Will is used \nto modify the material relations as a transaction that Is to be mobilized (with \ncertainty) at a later stage in the design process, as in \"The program will calculate \nthe number.\" It thus has a particular application in executing plans of \ntransactions in the process, as shown below. \ng \nIt may, however, be argued that interpretation 2.d. is a substitute for the weaker should, \nas discussed below. That would make the expectation stronger, bordering to a \ncompetition with must. \n \n \n \n \n \n \n \n\nChapter 5: Developing relations \n135 \nWould, as a past tense of will, does not have a central role in DPL. Its only \nsignification might be to conditional actions, in the sense that if certain \nconditions were present then an action would follow - \"If the length were \nlonger than maximum length then the program would alter the length.\" \nHowever, such hypothetical events are either captured through will, as through \nconjunctive relations like \"If the length is longer than maximum length then the \nprogram will alter the length.\" \nThe modal relation ought is a weak modifier, and is scarcely used in DPL. \nSemantically it is close to should, in that it generally indicates obligation or \nduty, desirability, or probability and likelihood. The definition used in DPL is that \nit expresses a desire of a future state in the design process, in contrast to should \nthat expresses expectations of a future state. It may thus be used for planning \npurposes, such as in \"The vessel ought to look nice.\" (Note that this relation \nnormally is followed by the preposition relation to.) For most practical purposes in \nthe design process, ought is not a necessary relation. \nThe last modal relation is must, one of the stronger such relations. In DPL it \nexpresses a required transaction or state, without any promise of this \ntransaction or state to actually 'appear' in the future. One general usage in \ndesign would be to express rigid constraints, such as in \"The hull must resist \nwater-pressure\" or as \"The designer must calculate stability.\" For non-material \nverb relations all must relationships have ultimately to be matched with \nrelationships either (a) replacing must with does, as in \"The hull does resist \nwater-pressure,\" or (b) change the infinite tense of the verb to its present tense, \nas in \"The hull resists water pressure.h As material relations are concerned, the \neasiest way to handle the must relationships is probably to delete it as soon as \nthe required transaction is performed, and replace the sentence with either (i) \ndid, as in \"The designer did calculate stability,\" or (ii) replacing the material \nverb relation with its past tense, as in \"The designer calculated stability.\" \nAn additional verb relation is useful, if not necessary; the auxiliary (not modal) \nverb do. This relation may be used for expressing either relationships that are \ntrue or that have been true at some time. This is illustrated above. However, \nIt is possible that the definition of will should be extended to include non-material \nrelations as well, such that it became possible to say that \"the hull will resist water- \npressure\" as a promise. \n \n \n \nh \n\n136 \nChapter 5: Developing relations \nthe do relations are not absolutely required - \nonly helpful in creating \nmeaningful sentences that are also easily understandable. The modal relations in \nDPL are summarized in Table 5.2. \nNote that no modal relation expresses absolute certainty of things to be. Even \nwill and must point to the future, and are thus uncertain. This conspires well with \nthe lack of certainty of the future with which designers are concerned, as has \nbeen frequently mentioned. Let me illustrate with a small example: \nInitially, there is knowledge of abilities and a conditional (potential) plan: \nAbilities \nSequence Conditional actions \nCan (do) \nCan (do) \nCan (do) \nC ... \nA ... \nB ... \nIf (condition) then should (do) C ... \nIf (condition) then should (do) A ... \nIf (condition) then should (do) B .. . \n? \n? \n? \nTable 5.2: \nDifferent modal relations in DPL. \nModal relation \nDescription \nScope \nCan \nCould \nMay \nMight \n \n \nShall \nShould \nWill \nWould \nOught \nMust \n \n(Do) \nAbility to perform \nAbility, possibility, and plausibility to perform \nPossibility \nPossibility and plausibility of relationship being \ntrue. \nPossibility and plausibility of ability’ \nNot used \nExpressing expectation of future \nCertainty of 'execution' (or mobilization) \nNot used presently \nExpressing desire for the future \nExpressing required state \nExpressing required transaction \nModifying tense of verb relation \nMaterial \nMaterial \nNon-material \nNon-material \nMaterial \n \nNone \nBoth \nMaterial \nNone \nBoth \nNon-material \nMaterial \nBoth \n \n \n \nl \n\nChapter 5: Developing relations \n137 \nUpon determining that the \"condition is true,\" and making a sequence of \nenactment, there is a concrete plan to follow in mobilizing those abilities in the \nfuture: \nAbilities \nSequence \nAction to perform \nC ... \nA ... \nB ... \n3 \nCan (do) \nCan (do) \nCan (do) \nWill (do) C ... \nWill (do) A ... \nWill (do) B ... \n2 \nThe actual execution of the ordered plan (mobilization) could be represented \nas \"Do A then B then C\": \nAbilities \nSequence Plan in-execution - mobilization \nCan (do) \n(Did) A ... {Transaction already undertaken} \nA ... \n(then) \n2 \n(then) \n3 \nCan (do) B ... \n(Doing) B ... {Transaction being undertaken} \nWill \n(do) \nCan (do) C ... \nC \n{Transaction \nstill to \nbe \nundertaken} \nThe auxiliary verb do signals what has been done, what is currently being  \ndone, and what remains to be done. \nPreposition relations \nIn describing design process and object, it is necessary to be able to represent \nhow concepts that may exist independently are placed together, or configured, \neither to perform a certain task (as in a plan) or meet a certain functional \nrequirement (as in a geometrical layout of a structure). In other words, \nconcepts may be treated as 'blocks' that are related to each other in space, \ntime, or 'cause·. The blocks themselves may. in turn, again consist .of more \n'elementary' blocks that are related. For instance, subsystems of a vessel such \nas machinery, cargo holds, and fuel tanks, may be moved without any change \nto these subsystems' internal description. Moving an engine does not alter the \nrelationship between the cylinder head and the cylinder rod, and using a sub- \n \n \n \n \n\n138 \nChapter 5: Developing relations \nroutine at a new location in a process does not change the relationships \nbetween that subroutine's 'own' subroutines. \nThe relations expressing temporal or spatial relationships would be expected \nto be absolutely required in the Design Process Language. It is frequently \nnecessary to express such relationships through using preposition relations, as in \n\"The machinery is on deck 3\" and \"Plan A will be executed before plan B.\" In \naddition, relations expressing more 'causal ' connections may be encountered \nfrequently - for instance in modelling event-consequence scenarios in technical \nsystems, where what is important is interactions of causal nature rather than \ninteractions of temporal or spatial nature. \nOne instance of the use of such relations are in structural design. A structure \nis determined as much from relationships among structural members as the \n'content' of the members themselves. Indeed, it commonly is the case in \nstructural design that such relationships are determined before the content of \nthe members. \nThe use of preposition relations is closely related to the use of circumstance \nverb relations as described earlier. A preposition relation will never act without \nsome kind of verb relation, notably the circumstance verb relations. In some \nsense, one can say that the preposition relations are directing while the verb \nrelations are enacting. \nGrammatically, a preposition is defined as \"... a word (or word construction) \nthat indicates the relation of a substantive to a verb, an adjective, or another \nsubstantive.\" (American Heritage Dictionary) Said in another way, they are \nrelations that apply between concepts, indicating how concepts relate to each \nother in terms of particularly space and time. Examples of preposition relations, \nhenceforth referred to as PRs, are; In, Out, Inside, Around, Outside, From, To, \nAfter, Before, Above, Below, With, Without, Of, For, Between, At, By, Within, In-\nbetween, Next, Beside, Previous, Under, and Over. Examples of typical \nrelationships including circumstance verb/preposition relations are: \"The crane is \non the deck.\" \"The crane moves the cargo from the deck to the shore,\" \nand \"Subroutine 'Read' executes before subroutine 'Display'.\" \n \n \n\nChapter 5: Developing relations \n139 \nIt is particular of the preposition relations that they have various characteristics \nsome of which 'belong ' to one particular PR and some of which relate one \nPR to other PRs. Thus, the semantics of the relations can be defined in terms of \nhow they compare to other similar relations. One would expect that knowing \nthe semantics of prepositions would help humans in spatial and temporal (and \nto some extent causal) reasoning. \nSome aspects of the PRs are helpful to classify the by semantics. The classes \nare introduced here as transitive, \nreversitive, inversitive, synonymous, \nimplicating, and referential. Formal definitions of each term in these classes are \nnot given here - the semantics is generally understood. It should however be \nrealized that whether some PR has a particular characteristic depends on how \nthat PR is defined. For instance, if on is defined as a temporal PR then it \nwouldn't be classified as implicating with above. The purpose here is thus to \nsuggest the semantics of PRs in general and to classes of PRs - \nnot the \nparticular meanings of individual PRs. \nTransitive \nTransitive PRs have the characteristic as illustrated in: If \"A is PR B\" and \"B is PR \nC\" then \"A is PR C.\" Examples are the PRs Above, Below, Before, After, Inside, \nAround, Within, With, Of, Under, and Over. All PRs that have inverses, as \ndescribed below, are transitive. \nTransitivity is of particular use to design in two respects; understanding how two \nconcepts relate in space and time although they are not explicitly related \ninitially. For instance, in a spatial design object one may know that if \"Deck two \nis above deck one\" and \"Deck three is above deck two.\" From the semantics \nof above it should be possible to find that \"Deck three is above deck one.\" If \ndeveloping a plan of actions to pursue in the design process it might be \nnecessary to know that if \"Action A is executed before action B\" and \"Action \nB is executed before action C\" then \"Action A is executed before action C.\" \n \n\n140 \nChapter 5: Developing relations \nReversive \nThese are individual PRs that have the characteristic as illustrated in: If \"A is PR \nB\" then 'B is PR A.\" Examples are the PRs Next, Beside, and (possibly) Outside. \nReversitivity enables reasoning about both concepts related through the PR. \nA typical example would be the relationship \"The engine room is beside the \nfuel tank\" where it could then be found that \"The fuel tank is beside the \nengine iOOm.\" \nInversive \nThese are pairs of PRs that have the characteristic as illustrated in: If \"A is PR, \nB\" then \"Bis PR2 A\" and If \"A is PR2 B\" then \"B is PR, \nA.\" \nPR,: \nPR,: \nPR,: \nPR1: \nPR,: \nBelow \nBefore \nInside \nUnder \nWithin \nPR2: \nPR2: \n· PR2: \nPR2: \nPR2: \nAbove, Over \nAfter \nAround \nAbove, Over \nAround \nAll of this kind are also transitive. Typical use of such inversitivity is to find that  \nif \"Deck one is below deck two\" then \"Deck two is above deck one.\" This \nsemantics would enable the system to answer to command like \"Calculate \nweights above deck one\" although all relationships might be stated with the below \nrelation. Equivalently, it would not be necessary to question plans in terms of \nrelationships involving after, if two concepts are already related by before. \nSynonymous \nThese are pairs of PRs that have the characteristic as illustrated in: If \"A is PR, \nB\" then \"A is PR2 B\" and If \"Bis PR2 A\" then \"Bis PR, A.\" \nPR,: \nPR,: \nBelow \nAbove \nPR2: \nUnder \nPR2: \nOver \n \n \n\nChapter 5: Developing relations \n141 \nThe use should be apparent. Synonymocity makes unnecessary a dual \nrepresentation even though two different transactions are based on different \nterminology. If \"Deck one is below deck two\" then \"Deck one is under deck \ntwo\" and vice versa. \nImplicit \nThese are pairs of PRs that have the characteristic as illustrated in: If \"A is PR, \nB\" then \"A is PR2 B\" but not necessarily If \"A is PR2 B\" then \"A is PR, B\" \nPR2: \nAbove, Over \nAs other aspects, this leaves unnecessary dual representation with the relation \non to also support interpretations that.focus on other relations. If something is on \nsomething it is also above it. (Of course subject to the definition of on.) Thus, if \n\"Engine is on the floor\" then \"The engine is above the floor,\" but not \nnecessarily vice versa. \nReferential preposition relations \nSome of the PRs do not necessarily describe spatial, temporal, or causal \nrelations. One particular category may be termed referential PRs, including of, \nby, to, and as. These PRs are useful relations in the language, and of is \nparticularly frequent in existing knowledge representation languages as in part- \nof, instance-of, subclass-of, and member-of. \nThe PR of is used in DPL to refer back to a possessive relationship. Generally it \ncan be said that if \"A has B\" then B can be referred to as (i) \"B of A.\" This \nreference can be performed through referring to what aspect of A that B \ndescribes \n- \nwhether \nit \nis 'part·, \n'member', \n\"subclass', \n'instance', \n'attribute', \"value', or \"property' as discussed in the section \"Abstract concepts\" \nbelow. A relationship might look like \"A has? B\" then (ii) \"Bis? of A,\" where '? \n' can be any of the above terms_! Consider the difference of (i) and (ii). In the \nrelationship \"Vessel has subsystem machinery\" the latter term can be referred \nAs will be argued later, these 'abstract concepts· are not necessary in DPL. However, \nsince they are very frequently used in daily speaking and in design terminology, they \nare discussed here. \n \n \n\n142 \nChapter 5: Developing relations \nto as (A) \"Machinery of vessel\" or as (B) \"Machinery is subsystem of vessel.\" The \nstatement (A) is more of a reference to 'machinery· whereas (B) is more of a \ndefinition of ‘machinery'. The of relation may be considered as a transitive PR as \ndefined above. Consider \"A is subclass of B\" and \"B is subclass of C\" which \nimply that \"A is subclass of C\". \nThe PR by has another function in terms of reference. This PR is frequently used \nto relate a concept to something which has performed transactions on that \nconcept like in \"The program calculates the formuia\" which implies that \"The \nformula is calculated by the program.\" In general terms, it can be said that if \n\"A MR B\" then \"B Is MR'ed by A,\" where MR stands for a material relation as \ndescribed earlier. The PR can also be used in conjunction with other transitive \nverbs, like In \"The weld connects the two beams\" which becomes \"The two \nbeams is connected by the weld.\" However, this is not a rule - consider \"The \nvessel has machinery.\" It becomes queer to claim that \"The machinery is had \nby the vessel,\" even though have is a transitive verb. \nThe preposition relation to is often used in conjunction with an adjective, as in \nadjacent to, next to and previous to,· or with verbs other than· is, as in is \nconnected/connects to - \"The propeller is connected to the propeller shaft.\" It \nis difficult to resolve the to preposition relation due to this characteristic - the \nsemantics is more tied to the verb or adjective relation than to the PR. \nHowever, there may exist a general rule for the case of reversitive relations, \nsuch that If \"A is VR/ADJ to B\" then \"Bis VR/ADJ to A,\" where ADJ stands for \nadjective modifier (described in a later section) and VR stands for a verb \nrelation - most relations including verbs or adjectives and to can be reversed. \nExamples of reversitive VRs are Connected and Linked, and of reversitive ADJs \nare Adjacent, Close, Near, and Opposite. \nHowever, other verb relations, apparently including all MRs, have an opposite \ninterpretation. Consider Moved and Sent, where the rule is false, as is seen in \n\"The cargo is moved to the shore\" which then would become \"The shore is moved \nto the cargo.\" This is because the MRs are transitive verbs, where the agent \n(subject) affects an object, and where the to phrase constitutes a \ncomplement - in this case the direction of the transaction. \n \n \n\nChapter 5: Developing relations \n143 \nThe last referential PR discussed here is as. It has an interesting property when \nused to reference a particular context. Consider, \"The vessel as a transport \ndevice\" which signals what aspect of the vessel that is interesting in the actual \ncontext. Depending on the definition of a 'transport device', the vessel would \n'inherit' its characteristics, such as its capacity, the kind of cargo, its speed, \nand so forth. \"The vessel as a structure\" would probably cause quite different \ncharacteristics to be focused, such as in the form of structural members, their \ndimensions, and their geometric configuration. It is then possible to state \"The \nvessel is analyzed as a structure.\" \nAs was discussed in Chapter 3 under Object Oriented Programming, an object \nmay inherit properties from the class to which it belongs. However, since there \nis an infinity of classes to which one object may be assigned, it may be \nappropriate to reference its particular class membership through as. This PR \nbecomes more important when a class is more seen as a particular concept \nthat is used to define other concepts. In that case, there is not necessarily a \nclass-subclass hierarchy, and the way to point to particular characteristics \ncommonly defined through a member-of relation becomes to point to \nparticular concept through an as relation. This will be discussed further under \nthe section 'Abstract concepts'. \nConjunctive relations \nThe conjunctive relation is used to connect other complete propositions or \nconcepts within a proposition. A conjunctive is formally defined as a word or word \nconstruction that is \" ... serving to connect elements of meaning and construction \nin a sentence.\" (American Heritage Dictionary) Examples of conjunctive relations \n(CRs) are; With, While, Both, And, Either, Or, Neither, Nor, Also, As, Than, Ergo, \nTherefore, When, Although, Since, Because, Where, and Whether. \nThere are several reasons why the conjunctive relations are absolutely needed in \na Design Process Language. One of the reasons is that design involves \nfrequent use of decision rules, which are efficiently represented through using \nthe conjunctive \nadverb relation \nrelation (CR) if, particularly in 'companionship· with the \nthen. Another reason is the need to represent 'logical' \nrelationships among concepts or other relationships, traditionally as carried by \n \n \n\n144 \nChapter 5: Developing relations \nthe CRs and and or, but possibly including either, neither, both, and nor. \nAnother reason is that it might be necessary to relate a cause with its effect or \na condition with an effect (if-then, or only if), or to express logical properties of \nthese conditions or effects, or to represent alternatives (or). \n\"The effective procedure for propositional reasoning embodies one fundamental principle \nthat I shall argue governs the psychology of reasoning: the logical properties of \nconnectives (conjunctive relations) derive from their meaning ........... The solution to the \nproblem of if is to search, not for a single uniform logic of the terms, but for a single \nuniform semantics from which its logical vagaries emerge. Such an analysis will strengthen · \n... the case for the fundamental semantic principle that the meaning of a term gives rise \nto its logical properties.” (Johnson-Laird, pages 54 and 56, comment in bracket added \nhere) \nI will discuss the conjunctive relationships in three categories; inclusive \n(conjunction), exclusive (disjunction), and causal. There may be other categories \nof interest, but the three proposed here seem most relevant in a design context. \nSome conjunctions apply to connect other complete sentences, such as \nbecause, if, since, and while. Others may also be applied to connect individual \nconcepts, such as and (\"The ship is red and blue\"), both (\"The ship is both red \nand blue\"), and or (\"The ship is red or blue\"). \nInclusive \nIn this category are those conjunctive relations where the two relationships joined \nby the CR are both true. These are statements of the kind \"A CR B\" such that A \nand B are both true sentences to concepts. Among these are the CRs and, \nboth, and also. Examples of their use is as follows: \n\"If the length and also the beam are given then the L/B ratio may be found\" \n\"The L/B ratio may be calculated if both length and beam are given\" \nDisjunctive/exclusive \nIn this category are those conjunctive relations where at least one of concepts \nor sentences joined by the CR may be false. These are statements of the kind \n\"A CR B\" where A or B or both may be false. Among these are the CRs either, or, \nneither, and nor. \n \n \n\nChapter 5: Developing relations \n145 \nIntuitively, there are three such expressions that may be of particular use; either \n(i) all sentences or concepts are false or (ii) one, and only one, is true \n(exclusive or) or (iii) all may be true: (A true concept is one that is a correct \nconcept to link to the 'target' concept. For instance, in \"Color is red or blue,.  \nHere, either 'red ' or 'blue ' is the concept to relate to 'color' - the true concept.) \nSentences like in case (i) uses two particular conjunctive relations; neither and \nnor. They should be quite self-explanatory; \"The color is neither red nor blue.\" \nFor sentences as in case (ii) it is more difficult to find unique relations. However, \nit is probable that the conjunctive either, operating with or, is a natural relation \nto use for this purpose. \"The color is either red or blue.\" \nFor sentences as in case (iii) the ordinary or relation will do. This does not say \nanything about exclusiveness; the statement is true even if both A and B are true. \nConsider; \"If the displacement is lower than required displacement then I should \nalter length or beam or draught (or all three).\" \nCausal \nIntuitively, there are two kinds of causal conjunctives; retrospective \n(predominantly historical) and hypothetical (future). In this category are those \nconjunctive relationships where one relationship in some sense describes or \ncauses the other relationships joined by the CR to be true. Thus, \"A CR B\" means \nthat either (i) B is true if A is true, (ii) A is true if B is true,\" or (iii) A is true despite \nthe fact that B is false. \nAmong case (i) CRs are therefore, and ergo. \"The maximum length is 140 \nmeters therefore length is too long.\" \nAmong CRs of type (ii) are with, while, as, because, and if, \"Length must be \nreduced if it is longer than maximum length,\" \"Length changes with \n. displacement,\" \"Length changes as displacement changes,\" and \"The crane \nis on the deck because it should reach (both) cargo hold and shore. \n \n\n146 \nChapter 5: Developing relations \nAmong case (iii) CRs are although and however, as in \"Length must be \nreduced although displacement is to be constant\" and \"Displacement is to be \nconstant however the length must be reduced.\" \nAdjective modifiers \nThe adjectives, as well as the adverbs, are more modifiers than relations. They \nare discussed here, however, since they closely proximate the relations. The \nadjective modifiers are similar due to the way they are used in DPL - in \ncomparisons (see below), while the adverbs modify verbs that themselves are \nrelations - ‘following · the verbs into these verbs ' roles as relations. \nThe adjective modifiers are generally terms that apply in comparison to other \nterms. Lexically an adjective is defined as \"(grammatically) any of a class of \nwords used to modify a noun or other substantive by limiting, qualifying, or \nspecifying.\" (American Heritage Dictionary) In general, the adjectives thus do \nnot assign any objective value to the concept to which they apply - they assign \na property valuable only in terms of some lower level values. For instance, \nthe truth of the sentences \"The vessel is large\" or \"The program calculates \nfast' depends on what the adjectives large and fast imply. \nThe most common usage of these modifiers are when concepts are compared to \nother ‘equivalent' concepts, such as in \"Vessel A is larger than vessel B\" and \n\"Program A calculates faster than Program B.\" However, it is typical of several \nadjectives that the interpretation is relative as well - does large mean heavy, \nvoluminous, lengthy, or what? One can always 'probe' a description of the \nkind \"The vessel is large\" with \"How large?\", whereas it normally does not make \nsense to probe quantified attributes in this way. \nOne important exception to this relativity are numbers, which actually function \nas adjectives in some respects, like in \"The vessel has length 140 meters.\" Here, \n‘meters' is a (semantic) concept while '140' is an adjective that modifies \n‘meters’ but which Is not relative. The same information could be stated as \n.\"The vessel has length,\" \"Length (of vessel) equals 140.\" and \"Unit (of length) \nis meter.\" In this case, '140' is grammatically a noun, or a proper concept in \nthe DPL. \n \n \n\nChapter 5: Developing relations \n147 \nIt is important to distinguish when the number plays the role of a noun and \nwhen it plays the role of an adjective, particularly since the grammatical rules \ndiscussed later on separate between the roles of adjectives and the nouns \n(which in DPL are the concepts). Some other adjectives display similar behavior \nas the numbers, notably those adjectives that have their 'origin ' from nouns, \nsuch as terms designating names of colors - 'red', 'blue', and  so  forth  are \nboth nouns and adjectives. The discussion below concerns those adjectives not \noriginating from nouns. \n) \nIn design, most adjective modifiers will be used in comparisons, or circumstance \nverb relations, rather than in describing a concept 'in isolation '. One reason is \nseen in the following example; if (i) \"Vessel A has length 140 meters\" and (ii) \n\"Vessel B has length 130 meters\" it could be concluded that \"Vessel A is longer \nthan vessel B,\" whereas stating that \"Vessel A is long\" and \"Vessel B is long\" \nwouldn't tell much in their comparison as regards length. Adjective modifiers could \nbe used to state that \"Vessel A is 140 meters long\" and \"Vessel B is 130 meters \nlong.\" Here, values are 'given to ' the adjectives and 'long ' assumes the same \nrole as the attribute 'length'. Another way of ‘quantifying' the adjective/attribute \ncould be through using adverbs like somewhat, slightly, significantly, very, \nextremely, and so forth. As will be argued in the next section, this might be \nuseful in a system supporting 'fuzzy' knowledge, but will not be used in \nDPL. \nTo the extent that adjective modifiers are used in DPL they will refer to attributes \n- \nnot to values of these attributes (or actually complete properties - \nattribute/Value pairs). Thus, just as the attributes tell something about the \nconcept to which they belong, leaving some relationships to be constructed \nbetween the attribute and its value, so may adjectives be valued. However, \nwhen describing a concept as in Chapter 4, through relationships, the \nadjectives will be avoided. Instead will be used a noun functioning as an \nattribute to capture the adjective, as in \"has length\" for 'long' and \"has weight\" \nfor 'heavy· or ‘weighty'. This removes some of the 'relative' nature of such \nstatements. \nThe adjective modifiers are used in DPL when the relationship indicates an \nexisting or possible comparison among concepts that share the same kind of \nattribute, as in (i) and (ii) above. This is used in (1) stating inequality criteria for \n \n \n \n \n \n\n148 \nChapter 5: Developing relations \nselection, as in \"Choose the cheapest vessel,\" (2) comparing alternatives in terms \nof inequality, as in \"Vessel A is cheaper than vessel B,\" and (3) identifying one \nconcept as the answer to an inequality criterion, as in \"Vessel A is the \ncheapest.\" \nTwo exceptions to the relativity discussed above, aside from those adjectives \noriginating from nouns, are the adjectives false and true. These adjectives are \nabsolute in the sense that for most practical purposes in design there is no \ninterpretation that makes true become 'less true'. If anything, if something is \nnot true it is false - if a sentence becomes \"untrue' it becomes false. \nTypically, the adjective relations deal with relationships in terms of value, space, \ntime, and certainty. Incidentally, this corresponds to several researchers' view \nof what characterizes objects. (See for instance Guilford, 1968 and Baron, \n1987) \nThe adjective modifiers share certain properties with the preposition relations, \npossibly because they are \"comparative ', which is to say that they bear meaning \nonly with relation to some other concepts and a verb relation. Thus, as with the \nprepositions, they are possible to categorize according to some main \ncharacteristics, although the categorization according to these groups is not \nas efficient as for the preposition relations. \nTransitive \nThese individual ADJs have the characteristic as illustrated in: If \"A is ADJ PR B\" \nand \"Bis ADJ PRC\" then \"A is ADJ PRC.\" Examples are the ADJ-PR pairs involving \nthe preposition than, as in taller than, larger than, smaller than, and less than. \nReversive \nThese are individual ADJs that have the characteristic as illustrated in: If \"A is \nADJ PR B\" then·\"B is ADJ PR A.\" Examples are the ADJ-PR pairs involving the \npreposition to, as in close to, next to, and adjacent to. The same applies with \nthe preposition as, such as in as low as, as good as, and as large as. \n \n \n\nChapter 5: Developing relations \n149 \nInversive \nThese are pairs of PRs that have the characteristic as illustrated in: If \"A is ADJ, \nPR B\" then \"B is ADJ2 PR A\" and If \"A is ADJ2 PR B\" then \"B is ADJ, PR \nA.\" \nExamples are ADJ-PR pairs involving the preposition than, as: \nBetter \nHigher \nLonger \nHeavier \nCloser \nADJ2: Worse \nADJ2: Lower \nADJ2: Shorter \nADJ2: Lighter \nADJ2: Farther \nADJl: \nADJl: \nADJl: \nADJl: \nADJl: \nAdverb modifiers \nThe adverbs are words that modify verbs, adjectives, or other adverbs. The \nmost common usage is as a modifier to verbs. In design, one would not expect \nthe adverbs to be too frequent for the same reasons as with the adjectives \n- they are relative. They may, however, be of use in modifying verb relations \nin the DPL according to certainty, as in \"Vessel A is possibly cheaper than \nvessel B.\" indicating that the relationships must be resolved in the process to \neither remove possibly or change the relationship. It is conceivable also that \nan extensive analysis and subsequent use of adverbs, introducing levels of \ncertainty as certainly, probably, possibly, plausibly, viably, likely, uncertainly, \nunlikely, hardly, improbably, impossibly, and so forth, could provide a useful \nterminology for representing 'soft' information regarding certainty. Some have \nadvocated that an 'intelligent' system must be able to cope with such \n'fuzzy' terminology. (See, for instance, Minsky, 1991) \nAn exception to the avoidance of adverbs is the adverb not. This term is \nomnipresent in both computing languages, as a 'negation operator', in logical \nproblem solving systems, and in standard design terminology. It is a \n‘substitute' for the use of the adjectives false and true, and is necessary due to \nthe fact that it is almost as important to say what something isn't as what it \nis. One might, of course, simply leave sentences unstated and treat them as false \nuntil they are explicitly established, as in non-monotonic reasoning. (Genesereth \nand Nilsson, 1988) However, it is often necessary to actively use the not adverb, \nas in \"The displacement is not larger than weight,\" causing a particular (active) \n \n\n150 \nChapter 5: Developing relations \nfocus on the displacement. The alternative would be to leave the sentence \nout and let the designer imply any not-relationships that must be handled. \nWH- terms \nWH- terms are particularly used in questions. These include who, what, which, \nwhere, why, when, how, and so forth. (See Halliday, 1985, pp. 83-85) \nThe WH- terms are used here as interrogative - as applied to questions. They \ntypically occur in the beginning of a sentence and demand an answer. \"Who \ncalculated the number\" will be answered as \"Program A\" if the proposition \n\"Program A calculated the number\" or \"The number was calculated by \nProgram A\" resides in memory. \"Why is length 140 meters\" will trigger a search \nfor a conjunctive relation such as because, since, therefore, and so on, that \nrelated one sentence A with another sentence (B) \"Length is 140 meters\" like \nin \"A therefore B\" or \"B since A\" or \"B because A.\" The sentence \"What is \nlength\" is ambiguous (it could ask for whether length is an attribute or a part, \nor what length is in value). Assuming the query is for a value, the answer would \nbe \"140 meters\" upon locating (B) above. Similar behavior can be 'coded’ \nas rules into the Design Process Language to produce correct mapping into \nmemory for different WH- clauses. \nOne can of course use these terms for planning design, as in \"What (who) can \ncalculate the number\" which returns \"Program A (and ...) \" assuming \"Program \nA can calculate the number\" is found. \nSome issues on general grammar \nThe issue of grammar is an immensely difficult question to resolve in general, \nsince there is a large number of rules that interact in so many different ways. \nIt is far beyond the scope of this thesis to treat the issue of grammar - I have \npointed to categories of relations relevant in the design context upon which \ncould be expected that the grammatical rules should operate. I have thus no \nintention of delving deeply into this question, but give some indications as to \nthe kind of grammar needed to understand sentences, or relationships among \nconcepts. \n \n\nChapter 5: Developing relations \n151 \nThe set of grammatical rules needed to resolve sentences in the Design Process \nLanguage is significantly less complex than the set of rules needed to resolve \nsentences in a natural language. The reason for this is that the relations, which \nis the prime object of resolution by the grammatical rules, are fewer and more \nrigidly defined in DPL than in ordinary language. The issue of grammar is, of \ncourse, most important when the DPL is conceived as applied in a computer \nenvironment. \nThere are two issues that are of particular interest when discussing grammar in \nthe context of DPL the issue of whether (i) a statement is a true/false \nproposition, a question, or a command, and (ii) a statement is in past, present, \nor future, and how to change the tense of statements as the design process \nevolves. \nA predominant view within linguistics is that sentences can be analyzed \nthrough parsing them into particular phrases, each of which can then be \nfurther broken down into new phrases. The grammatical rules, in this \nconception, operates then upon such a phrase-structure as a context free \nconstruct. Major phrases are noun phrases (NPs), verb phrases (VPs) which in \nturn are decomposed into more 'fundamental' phrases, such as nominal \nphrase (NOM) and preposition phrase (PP) and categories as nouns, \nadjectives, pronouns, verbs, and the like. In phrase-structure, the sentence \"The \nlength of the vessel equals 140 meters\" could be parsed as follows: \nNP: \"The length of the vessel\" \nDeterminer: 'The' \nNOM: \"length of the vessel\" \nNoun: 'length' \nRelative clause - PP: \"of the vessel\" \nPreposition: 'of' \nNP: \"the vessel\" \nDeterminer: 'the' \nNoun: 'vessel' \nVP: \"equals 140 meters\" \nVerb: ‘equals' \nNP: \"140 meters\" \n \n \n\n152 \nChapter 5: Developing relaHons \nAdjective: '140' \nNoun: 'meters' \nChomsky developed transformational rules to interpret sentences. These rules \nhad various roles in the grammar, some for transforming present to past, while \nothers used for transforming active to passive. For instance, with respect to the \ndiscussion on the referential preposition relation by, one could get the following \nresult from the sentence \"The Program calculated the number\": \nNP1 - VP-> NP1 - V - NP2 is transformed to passive through: \nNP2 - was - V – by + NP1 {Would predominantly apply to material relations.} \nNP1: \"The Program\" \nVP: \"calculated the number\" \nVerb: ‘calculated ' \nNP2: \"the number\" \nTo passive: \nNP2: \"The number\" \n‘was' \nVP: ‘calculated ' \n'by' \nNP1: \"the Program\" \nThis results in the phrase \"The number was calculated by the Program.\" \nThere is a large number of rules in transformational grammar, each having a \nunique role in rephrasing sentences. Most of these rules operate upon the \nrelations, as cast in this chapter. (See Johnson-Laird for an extensive discussion.) \nAmong the rules proposed in the transformational grammar are those that \nhave to do with questions, specifically WH-clauses. These clauses, determined \nby a WH- pronoun as discussed earlier, are important in asking questions of \nwhat is in stored in memory. Thus, \"What is the length of vessel\" would trigger \na transformational rule that resolved the question and matched this with an \nexisting proposition. \"Length  of vessel is  140 meters\" or \"140  meters is the length \n. \n \n \n\nChapter 5: Developing relations \n153 \nof the vessel.\" \"What can calculate the number\" could be matched with \"The \nProgram can calculate the number\" and \"What calculated the number\" with \n\"The Program calculated the number.\" \nWhen the system must resolve commands, such as \"Calculate the number,\" \nthe picture is different. Which ability (which procedure) should be enacted to \nperform this activity? In this situation, one would expect that the command \nwould primarily mobilize an ability that was planned ahead in the design \nprocess by using a modal relation, like in \"Program A will calculate the \nnumber.\" A rule resolving a sentence with a material relation (calculate) and \na missing subject could then be to search memory for the modal relation will in \nconjunction with the desired VP \"calculate the number\" and distinguish the \nmissing subject as 'program A·. Such a rule could then cause the construction \nof \"Program A calculate the number.” \nIf a will relation is not found with the VP, one would expect the rule to query \nthe designer (or another authority) something like \"What will calculate the \nnumber?\" Such rules are, like most other issues of formalized grammar, only \nrelevant in case of automated implementation of DPL - not when DPL is to be used \nas a basis for describing a design process as viewed from an outside observer. \nIn the latter case, one focus more on what the particular relations imply than \nhow they are identified and resolved in an automated system. \nJohnson-Laird distinguishes procedures that a system may have to ensure a \ncorrect interpretation of propositions, commands, and questions. Several of \nthese propositions have to do with verifying that a new proposition does not \nconflict with existing propositions. Such verification must be closely related to \nthe resolution of relationships. If the proposition \"The length must be larger than \n140 meters\" exists, and a proposition is suggested like \"The length is 120 meters,\" \nthe procedures (semantics) of the system would resolve a conflict through \"The \nlength is not larger than 140 meters\" and disallow that proposition to be accepted. \nThis goes back to the discussions in Chapter 4; one should establish \nrelationships to prove or disprove hypotheses. In this case, the _hypothesis \nthat \"Length is larger than 140 meters\" would be disproved by the 'fact' that \n\"Length is 120 meters\" and the latter statement would either be rejected or \nelse the conflict would have to be mediated by an authority. \n \n \n \n \n\n154 \nChapter 5: Developing relations \nAbstract concepts \nAmong the terms that have become usual in design terminology as well as in \ndally speaking are those that point to 'knowledge about knowledge', This is \nto say that they refer to some other concept through describing the role that \nthis concept plays in the knowledge representation system. They always \npresuppose the existence of another concept. The most common terms are \nsystem, subsystem, part, class, subclass, member, instance, property, attribute, \nand value. Sometimes the abstract concepts assembly (as a sort of subsystem) \nand element (as a sort of part) are included among such concepts Also the \nmere concept of relation is often included among such abstract concepts. \n(See, for instance, Guilford, 1967) \nIt is important to note that the terms above do not refer to empirical truth, as \nin \"The vessel is a system\" in all situations, but may be more appropriately \nviewed as context specific. The terms are more pragmatic means for human \n(and automated) Information processing systems to organize knowledge so as \nto use this knowledge efficiently in particular situations. For instance, in one \nInterpretation a vessel may Indeed be a system, as in a ship design situation, \nwhile in other interpretations the same vessel may be a part of a system, as in \ntransport systems design. 'Vessels' may also be classes of objects. In some \nsituations 'Volvo 640' may be an instantiation upon a class (for Instance, if I \nwere to choose a new car - \"Which mark should I choose?\"), and in others it \nmay be a class Itself (for instance, If the Volvo factory were to categorize this \nline of cars according to 'color' - \"How many red 640s did we send out last \nmonth?\"). \nThus, the terms are helpful aids In categorizing concepts and referring to them \nin particular situation, and whether one·concept Is called a system or a part \nor a class or an Instance is relative to the situation. I will discuss the terms under \nthree headings; composition and aggregation, classification and abstraction. \nand attribution. \n \n \n\nChapter 5: Developing relations \n155 \nComposition and aggregation \nTo call a concept S a system generally implies that it is possible to perform \ntransactions on S that affects the circumstances (extrinsic description) of S while \nnot affecting the (intrinsic) description of S. For instance, it is possible to move S \nwithout altering the relationships among the parts that make up S. Further, to put \nthe label, or relate the concept, \"system' on S implies that there are more \nfundamental concepts through which S is described. \nIt is easy to be led into thinking that a representation of a system remains \ninternally consistent as transactions are performed on that system. This is not \nnecessarily true - consider a representation of an engine as (l) \"Engine has \nengine block,\" (2) \"Engine has carburetor,\" and (3) \"Carburetor is above \nengine block.\" If the engine for some reason is flipped over (\"Rotate engine \nvertically 180°\"), the relationship (3) ceases to be true, whereas a ‘move' \ntransaction may preserve the internal consistency of the system.J Thus, care \nmust be taken in treating a system as a block that remains internally \nunaffected by the context in which it is placed. \nThe most important role of relating the ‘system· concept to S is to refer to a whole \nthat 'is more· than the sum of its components. In other words, the system \nexhibits characteristics - has functions - that results from a particular combination \nof components. The system S is a concept that becomes defined through \ncomponents serving to both define S directly and that attribute to it some \ncharacteristics that neither of its components have in separation. \nThe components of a system are commonly referred to as parts or elements. \nTraditionally, these are considered as some kinds of ‘atoms' and are treated \nas building blocks. In relation to the discussion in Chapter 4, the parts are intrinsic \nconcepts used to describe concepts that in turn are used in describing the system \nto which the parts belong. In the end, the parts will serve to describe extrinsic \nconcepts of the system S, or serve to enable S to meet the expectation put to \nit. In this concept formation process both the individual characteristics of the \nThis depends of course on how the relation above is defined, whether it is local or \nglobal. In a local definition, where direction is given with reference to a part of the \nsystem, S might remain internally consistent. \n \n \n \n \nj \n\n156 \nChapter 5: Developing relations \nparts themselves and their mutual relationships are important. \nThe parts themselves are, of course, often systems in another interpretation or \ncontext. In the conceptual design of a vessel, like in lay-out of general \narrangement (GA), the 'engine’ is normally treated as a part. As the design \nprocess evolves, the ‘same’ engine may change status to become a set of \nparts combined into the system, engine. It is questionable whether it is possible \nto find ‘parts' that cannot be considered systems in other contexts - the search \nfor truly elementary particles will probably never end. To denote 'intermediate’ \nsystems - systems that assume the role of ‘parts’ in some contexts - the \nterms sub-system and assembly are introduced. There is little to say about these \nexcept that the terminology implies that there is a collection of parts that \nconstitute a coherent whole - the sub-system or assembly has some \ndistinguishable characteristics that differ from the sum of the characteristics of \nthe individual parts. \nClassification and abstraction \nA class is a term that designates that the concept in question refers to a \ncollection of other concepts, their only necessary (mutual) relationship being \nthat they share some characteristics outlined through the class definition. A \nclass is traditionally not considered a concept existing in the 'real' world - it \nis rather an abstraction of a set of such concepts. However, it is an often-\noverlooked fact that a class may be defined so as to include only one \nparticular concept. In this conception, an instance may then be seen as a \nclass containing only one member, where the class definition is such that it \nidentifies a concept by either (l) a unique characteristic, such as an identifier, \nor (2) having a class description that is identical to the description of the \nconcept it is to include. Situation (l) would be commonly referred to as \ninstantiation, whereas situation (2) would be referred to as class reduction. \nFor the most parts the concepts used in a D-object description are similar to \nclass-descriptions. It is rare to identify an instance by a unique identity - it is \nmore frequent to identify a concept by some particular characteristics that may \nsignificantly reduce the members of the class. Identifying a particular kind (by \nname and type) of gas turbine to use in a ship is often seen as instantiating that \n \n\nChapter 5: Developing relations \n157 \ngas turbine, but strictly speaking it is rather a (dramatic as it may be) \nrestricting class description that reduces its membership to include only one \ngas turbine. For example, while \"Volvo 640\" may seem like an instantiation on \nthe class \"Cars to buy\" it is instead a class membership criterion by name-kind- \ntype identity. A truly instantiated class would be a class whose description \nidentified a member identical to one, and only one, entity. Strictly speaking, if \nit were possible to identify more than one 'real' entity that fitted the description, \nthe class would not be instantiated and there would exist multiple possible \nsolutions. \nIn this view it is not entirely correct to say that the designer has chosen one \nunique instance to use further in the design process. She has either chosen a \nclass description with which to work or chosen a concept description that \nmeets the requirements of the class description. \nIt is possible to establish an infinity of classes that contains a particular concept. \nThe requirement is that the description of the class must subsume that of the \nconcept - the concept must satisfy the classification criteria. The ·taxonomy' may \nhave different characteristics. It may be hierarchical, in that the classes are \ndivided such that one concept belongs to only one 'branch ·. This is a dichotomous \nclassification - \neither a car is a vehicle or not. The taxonomy may be \nheterarchical, such that one concept belongs to two classes that themselves are \nnot contained in each other. For instance, a car may be a concept contained in \nthe class of killing_devices as well as in vehicles. This is the problematic issue \nof ‘multiple inheritance', as was discussed in Chapter 3. \nAs was intimated in the discussion of the preposition relation as, it may be more \nproper to inherit properties from a 'class' concept through viewing the (A) \n\"Vessel as a transport device\" or (B) \"Vessel as a structure.\" The important \npoint is not necessarily to know the class-membership of the vessel - it is more \nto know the characteristics that are focused when the vessel is viewed as \nbelonging to one class or the other. In practice, this would make the designer \nable to \"Analyze vessel as a structure\" and \"Analyze vessel as a transport \ndevice.\" In designing that vessel, one might refer through as to find what \nattributes were to be assigned values. In (A) one might find that an unvalued \nattribute were 'capacity' while in (B) one might filter out parts of the \nunderlying description, such as 'loading conditions' and a decomposition into \n \n\n158 \nChapter 5: Developing relations \nstructural components and values assigned to the attributes of these \ncomponents. The description residing in memory is the same and no classes \nneed to be defined. The relation as signals what kind of class concept \n(structure or transport device) should be used as a ‘query’ condition. \nAttribution \nHitherto the term attribute has been frequently used. Lexically, an attribute is \ndefined as \"the quality or characteristic of a ... thing.\" (American Heritage \nDictionary) A concept that falls into this category describes a particular \ncharacteristic of another concept. A ‘rule of thumb· could be to say that if \nsomething can be assigned a particular value, it is an attribute of another \nconcept, like in 'length', 'weight’, 'color', and so forth. \nIt is always possible to assign a value to an attribute. Sets of attributes and values \nare commonly referred to as properties. For instance, \"Vessel has length\" (where \n'length’ is an attribute), \"Length (of vessel) is 140 meters\" (where ‘140 meters ' is \na value) and \"Vessel has length of 140 meters\" (where \"length of 140 meters\" \nis a property). \nIn most situations it is easy to see whether something Is an attribute without \nputting that specific label on it. There are, however, situations where the \ndistinction between an attribute and Its value is diffuse. Consider \"The plate \nhas material\" and \"Material (of the plate) is steel.\" Here, ‘steel' seems to be \na value, but the problem is that ‘steel ' itself has properties, like \"Steel has density\" \nand \"Density (of steel) is 7.2 g/cm3.\" This is as opposed to \"Thickness (of plate) \nequals 2.5 cm\" which is clearly a particular characteristic of the plate where \n'2.5 cm' is a ‘true' value. Coyne et. al. handle this issue by saying that \"we \ncan treat properties (attribute and value pairs) as objects (and) depict the \n'properties' of properties.\" (Coyne et. al., 1991, page 93) \nThe ambiguity of abstract concepts \n. As is seen, the terms frequently used to denote the knowledge that designers \ngenerate are relative to context - the ‘status’ of a particular concept may \nchange as the design process evolves. To view the design process as a \nconcept formation process alleviates this problem of relativity. Whether I \n \n\nChapter 5: Developing relations \n159 \npropose that \"This car is a Volvo\" (instantiation or concretization) or \"This car \nis a vehicle\" (abstraction) the semantics is the same - 'Volvo’ and ‘vehicle’, \nrespectively, are concepts serving to define the particular concept of 'this car', \nWhether I refer to a super-class (‘vehicle’) or a subclass ('Volvo’) is immaterial as \nlong as both concepts are described such that they provide to the formation \nof the primary concept 'this car'. If I, in addition, said that \"This car is a \nkilling_device\" it wouldn't matter whether 'killing_device' were defined as a \nclass or not - my purpose would be to relate 'this car' to another concept \nthat could clarify what I meant to say about 'this car'. \nIt is possible to make- a similar argument with respect to the system/part \ndistinction. Whether some concept is termed a ‘system' or not is rather \nimmaterial - it is the description of the characteristics and composition of that \nconcept which is the primary focus. If sufficient relationships are established to \nrelate the ‘system’ to its components and characteristics, it is possible to treat \nthe concept as any other concept, whether 'part' or not. If the concept \ndescription is not such that it satisfies the expectations, the description must be \nrevised. Most probably, one would then get into the issue of revising the \ndescription of 'parts' in an equivalent manner as one would revise a description \nof a property, such as 'length'. Indeed, as was seen in the discussion of the \npreposition relation of, the reference to a part and to an attribute follow along \nthe same lines; \"The hull (a part) of the vessel\" and \"The length (an attribute) \nof the vessel\" are grammatically identical, as are \"The vessel has a hull\" and \n\"The vessel has a length.\". \nIt follows from the above that the abstract concepts do not offer much 'content' \nwith respect to describing a particular concept. Their primary roles are to \n‘assist' in describing still other concepts. In the end, a D-object is thus a \ncollection of relationships where the distinctions into attribute, value, system, \npart, class, and member become less important than the actual descriptions \nof the particular concepts going into the description of the D-object. \nChapter summary \nIn this chapter the framework of the Design Process Language has been laid \nout. Requirements to be put to the DPL were presented in the beginning and \nthe categories of relations in the language were developed from this angle. \n \n\n160 \nChapter 5: Developing relations \nCategory of \nrelation \nDescription \n{may} appear with \nMaterial (MR) \nIntensive (INT) \nPossessive (POS) \nCircumstance \n(CC) \nDescribes activities and processes \nDescribes what a concept is \nDescribes what a concept has \nDescribes a concept in relation to other \nconcepts not related Intensively or \npossessively \nDescribes that a concept exists \nDescribes futurity, possibility, determination, \nand intention \nUsed with circumstance relations - used \nto express spatial, temporal, referential, \nand other circumstance relationships \nRelates sentences or concepts logically, \ncausally, inclusively, or exclusively. \nUsed predominantly with circumstance \nrelations - used to express comparisons \namong concepts. \nUsed to modify verb relations - only not is \npresently considered. \n{MOD, PR, CR, ADJ} \nAlone \nAlone \nEither PR or ADJ and \na verb relation \nExistential (ER) \nModal (MOD) \nAlone \nMR \nCC {ADJ} \nPreposition (PR) \nConjunctive (CR) \n{MR} \ncc \nAdjective \nmodifiers (ADJ) \nVerb relations \nAdverb modifiers \n(ADV) \nTable 5.3: \nRelations and modifiers in the Design Process Language. \nThese relations, that combine concepts in sentences, were developed from \nlinguistic categories, notably as various verb, preposition, and conjunctive \nrelations, as well as adjective and adverb modifiers. Each of the categories \nplay a particular role in describing different phenomena experienced in, and \ncharacteristics of, the design process. The categories, their main characteristics, \nand the relations with which they interact, are summarized in Table 5.3. \nTowards the end of the chapter I argued that several of the terms that are \ncommonly applied in describing objects, such as classes, systems, attributes, \nand others, are usefully viewed in the concept-formation framework. Such \nconcepts are like any other concepts - they are defined by and serve to \ndefine other concepts. A class Is more a concept being related to other \nconcepts constituting class membership criteria, i.e., a specification, than a set \nof concepts 'belonging to' that class. \n \n \n \n \n \n \n \n \n \n\nChapter 5: Developing relations \n161 \nSome examples of the usefulness of using a language as the DPL were given \ntowards the end. For instance, to treat a 'class' as an individual concept there \nmust be ways to reference that concept properly - I argued that this is closely \nrelated to the use of language. For instance, in DPL the sentence \"The ship as \na structure\" is not a message classifying ‘ship' as a structure, as is commonly \nseen in several representational systems (has-member and has-subclass \nrelationships, for instance). It is rather a sentence stating that attributes from \n'ship' should be extracted that are relevant for viewing it as a ‘structure' \nconcept. Such a sentence could imply that relationships between the 'ship’ \nand its ‘paint' and 'rudder' were irrelevant, whereas the relationships between \nthe 'ship' and the 'plates'', 'beams', and ‘columns' of the 'hull' would be \nfocussed. In other words, a 'class membership' can be viewed to filter \nknowledge from a larger, underlying description of the world. In plain terms, \nthe vessel is conceptualized as a structure - not classified as a structure. \n \n \n \n \n \n\n162 \nChapter 6: Drawing lines \nChapter 6: Drawing lines \nThe previous two chapters had two different purposes; Chapter 4 developed \na particular view of design, chiefly as a concept formation process, while \nChapter 5 developed the framework of the Design Process Language with \nrespect to the requirements resulting from viewing design as in Chapter 4. In \nthe present chapter I will try to show, by means of some basic examples, how \nthe language developed in Chapter 5 can be applied in a computer-assisted \ndesign situation, where the design process is one similar to that described in \nChapter 4. \nIt may be appropriate first to briefly repeat the main conclusions. Chapter 4 \nintroduced design as a concept formation process, or as a process of building \nrelationships in a language. The DPL arose from the fact that a language to \ndescribe all the relationships potentially found in design, had to be more broad \nthan existing programming or other formal languages. In fact, it had to be almost \nas powerful as the natural languages. \nlanguages. \nThe proposed framework will support describing most of the relationships that \ncan be identified, or at least understood, in the design process. Whether \nintelligent behavior is something that can be described propositionally by using \ndefinite relations is not to be debated here - it suffices to say that language \nis an essential ingredient in explaining intelligent behavior, as we know it. \nTherefore, the expressiveness of the language will Increase the ableness to \nsupport intelligent behavior as displayed by the designer. \nIn the following is assumed that there exists a machine with a processing unit, an \ninterface for communication, a short- t e r m  memory and a long- term memory. \nThe imaginary system has encoded grammatical rules that makes possible \noperations on a set of relations and that checks for consistency in sentences. \nSeveral of the sentences (Design memory) represent or are intermediate results \nfrom internal processes, so the examples look more involved than they will be \nexperienced by someone using this imaginary machine. In addition, there will \n(like in any ordinary computer program) be operations that are not described \nor that can not be \"seen\". \n \n\nChapter 6: Drawing lines \n163 \nFor the sake of this illustration, the following conventions are introduced: \n[DPL System] \n''Prompt from the system for information input, or response from the \nsystem as information output\" \n[Operator] \n''Information given to the system from the operator\" \n[LT Storage] \nSentences that are stored permanently in long term memory - gathered in the \nsystem through earlier experiences. At this point, assume that sentences stored in \nshort term memory are transferred into long term memory only if the (human) \noperator commands the system to do so. That is, the illustrations presented here \ndo not describe anything close to autonomous machine learning. \n[Design memory] \nSentences that are stored temporarily in short term (alternatively design) memory. \nThese sentences are established during the course of this particular design \nprocess, as a result from any internal operation or any input to the system. \nSentences stored in short-term memory may or may not be retained in long-term \nmemory after completion. \nThe design object \nAs stated in Chapter 4, the design object (D-object) is viewed as a concept \nthat is defined, or specified, in the course of the design process. If the term (or \ntoken) denoting the concept of the D-object is viewed as a 'core ', there are \nin the end numerous sentences, formed in the DPL that connect this term to other, \nknown, concepts. The D-object has parts or sub-systems, which again has parts, \nand both the D-object, its related sub-systems, and their parts have properties \nwhich may be of shape, functionality, color, weight, capacity, and so forth. The \nproperties themselves may even have other properties, such that the steel of a \nhull skin will have its own properties 'isolated from' the hull skin itself. These \nproperties may be yield strength, density, E-modulus, brittleness, and so forth. It \nis possible to trace all properties and parts back to the D- object, however. For \ninstance, the below concept definitions are sufficient to construct the sentence \n\"Yield strength of steel of hull skin of hull of D-object equals 27 MPA\". Here, hull is \nsub-system of D-object, hull-skin is part of hull, steel is attribute/property of hull \n \n \n\n164 \nChapter 6: Drawing lines \nskin, yield strength is attribute of steel, and 27 MPA is value of yield strength.\n0\n \n### The example starts with the designer (operator) constructing a sentence, starting the \nspecification of the design object: ### \n[Operator] \n''D-object has hull\" \n### The sentence is then stored into short term memory by the system: ### \n[Design memory] \nD-object has hull \n### The concept of hull (which is not yet \"known\" to the system since it is not yet \nlocated in memory) may already have been formed at an earlier point. I.e., it may reside \nin long term memory. Thus, in LT storage it extracts a general (parts and properties that \nany hull will have) and partial definition: ### \nHULL: \n{ \nHull has hull skin \n[LT Storage] \n} \n### The new concepts introduced by 'hull', here 'hull skin’, are then found also to \nbe partly defined in LT storage: ### \nHULL SKIN: \n{ \nHull skin has thickness \nHull skin has material \n[LT Storage] \n} \n### Traversing further down into the concepts, it may be that 'thickness' and \n'material’ are partly defined concepts, and subsequently found in LT storage. Assume \nhere that the new concepts introduced below, 'dimension’, 'numeric value' and \na \nThis is just one interpretation. Hull skin may be a sub-system in others. In addition, it is \ndifficult to say whether it is most correct to view steel as a part, an attribute, or a value. \nHowever, this is of no relevance as goes the possibility to map and construct sentences \nin DPL. \n \n \n\nChapter 6: Drawing lines \n165 \n'type' (not their values, though), are defined in the system (as 'semantic' \nconcepts): ### \nTHICKNESS: \n{ \nThickness has dimension \nThickness has numeric value \n} \n[LT Storage] \nMATERIAL: \n{ \nMaterial has type \n} \n[LT Storage] \n### The 'missing' definition of the different concepts are prompted by the system. In \nthis case, the system asks for the value of dimension (it is assumed that the system \nknows what kinds of dimensions are allowable): ### \n[DPL System] \n\"What is dimension of thickness (of hull skin of hull of D-object)?\" \n### The designer responds to the question from the system: ### \n[Operator] \n''mm\" \n### The new information then is registered as a sentence in short term storage: ### \n[Design memory] \nThickness has dimension mm \n### Similarly to the above situation, the human designer is prompted by the system for \nmissing information: ### \n[DPL System] \n[Operator] \n[Design memory} \n\"What is value of thickness (of hull skin of hull of D-object)?\" \n\"16\" \nThickness has value 16 \n[DPL System] \n[Operator] \n[Design memory] \n''What is type of material (of hull skin of hull of D-object)?\" \n\"A36 steel\" \nMaterial has type A36 steel \n\nChapter 6: Drawing lines \n166 \n### Here, the designer responded with A36 steel. This is now found to be defined \nearlier as a concept in long term memory: ### \n[LT Storage] \nA36 STEEL: \n{ \nA36 steel has density \nDimension (of density) is tons/m3 \nValue (of density) is 8.0 \nA36 steel has yield strength \nDimension (of yield strength) is MN/m2 \nValue (of yield strength) is 27 \n} \n### The 'new' concepts introduced by the concept 'A36 Steel' are then also found \nto be defined in LT storage:### \n[LT Storage] \nDENSITY: \n{ \nDensity has metric dimension \nDensity has numeric value \n} \nYIEW STRENGTH: \n{ \nYield strength has metric dimension \nYield strength has numeric value \n[LT Storage] \n} \nAs is seen here, the design process becomes a sort of \"fill in the blanks\" \nprocess. Information that is added to the description of the D-object is used by \nthe system to identify what information is missing. Some concepts, such as A36 \nsteel, are completely defined (in this context). Others are incompletely defined, \nsuch as D-object. Between these two extremes, the concepts introduced are \ndefined to a varying degree. \n \n\nChapter 6: Drawing lines \n167 \nThe only statements entered in the system about the object are the four \nsentences listed below. The remaining definitions were present in LT storage. \nThus, only the information that can not be found as part of the contained \nconcept definitions must be entered as part of the D-object description. The \nrole of the designer thus was to introduce the following information into design \nmemory: \n(l) D-object has hull \n(2) Dimension (of thickness of ... ) is mm \n(3) Value (of thickness of ... ) is 16 \n(4) Type (of material of ... ) is A36 steel \n[Design memory] \n[Design memory] \n[Design memory] \n[Design memory] \nIf the sentence \"D-object has hull\" were replaced with \"D-object is a ship\" the \nsystem would conceivably identify the general concept of 'ship’ as 'having’ a \n'hull ', assuming the system had encountered this concept earlier and \nretained its definition in long term memory. Sentence (1) would then be \nunnecessary. If it were replaced with the sentence \"D-object is 'Berge \nViking\"', a perfectly defined concept assuming that \"Berge Viking\" has \nalready been built and defined in memory, all sentences would be \nunnecessary since the information could be extracted from the concept \n'Berge Viking ·. Sentence (2) is an example of knowledge that can be learnt \nby, or taught to, the system (\"Dimension of thickness of hull plates is mm\") as \na general rule. \nThis illustrates the use of the DPL in describing objects in a design process. Note \nthat the only DPL relations used here are has (possessive verb relation), is \n(intensive verb relation) and of (referential preposition relation). \nIt is important to recall from earlier discussions (Chapter 5) that the DPL does not \ndistinguish whether some concept 'has· a property, a part, a sub-system, or \nanything else. The concept being 'had· is defined partly isolated from its \npossessor, and the relationship between the possessor and the possessed is \nidentical whether it is a dimension or a hull that is 'possessed ·. The identification \nof a hull as a part comes into the picture only if there is something in the \ndefinition of 'hull ' that distinguishes it as a part (for instance, it having dimension \nor weight). Tangible versus intangible concepts is of no importance in a \nsystem operating with the DPL. \n \n\n168 \nChapter 6: Drawing lines \nThe D-object and the \"World\" \nAbove was illustrated how an object could be described by means of DPL. In this \nsection, an illustration is given to indicate how the D-object may be 'mapped’ to \nits requirements and to concepts describing the external environment \n(e.g., \"sea water') of the object. \n### The process starts with a requirement that is added to memory: ### \n[Operator] \n[Design memory] \n''D-object should float\" \nD-object should float \n### The system finds a useful relationship in long term memory. In this case, the term \n'something’ is a place-keeper, equivalent to a universally quantified sentence in \npredicate calculus. The following sentences will probably not be generated until the \nsystem is asked a question as the one below, but are shown here for the sake of \nclarity: ### \nSomething floats if maximum of buoyancy is larger than maximum of weight \n[LT Storage] \n### Then the system instantiates D-object for 'something': ### \nD-object floats if maximum of buoyancy is larger than maximum of weight \n[Design memory] \n### The system instantiates 'float': ### \n[Design memory] \nD-object should have maximum of buoyancy larger than maximum of weight \n### Now, the designer asks a question (which is then added to short term, or design, \nmemory): ### \n[Operator] \n[Design memory] \n\"What is maximum of weight of D-object?\" \nWhat is maximum of weight of D-object? \n### The system then finds some general and usable relationships in long term memory. \nSignificant shortcuts are made with respect to the interpretation and processing of the \nmodifier 'maximum': ### \n[T,T Storage] \nMaximum of buoyancy equals maximum of weight of displaced liquid \n \n\nChapter 6: Drawing lines \n169 \n[LT Storage] \nMaximum of weight of displaced liquid equals maximum of suppressed volume \ntimes density of liquid \nMaximum of suppressed volume equals Cb times L times B times T \n[LT Storage] \n### The system then will prompt for missing information, the designer respond, and the \nnew relationships are added to short term memory. If the system could find relationships \nthat made it able to resolve the unknown concepts, the designer would not need to be \ninvolved in this process: ### \n[DPL System] \n[Operator] \n[Design memory] \n\"What is Cb? \" \n\"0.62\" \nCb is 0.62 \n[DPL System] \n[Operator] \n[Design memory] \n\"What is L? \" \n\"120 m\" \nL is 120 m \n[DPL System] \n[Operator] \n[Design memory] \n\"What is B? \" \n\"20 m\" \nB is 20 m \n[DPL System] \n[Operator] \n[Design memory] \n\"What is T? \" \n\"7 m\" \nT is 7 m \n### After accessing all required concept definitions, the system will calculate (or \nresolve) the relationship that was detected in long term memory. (This is after \ninstantiating values for the symbol). The first sentence has been found earlier (above), \nthe second is an instantiation, and the third results from a transaction (resolution): ### \nMaximum of suppressed volume equals Cb times L times B times T \nMaximum of suppressed volume equals 0.62 times 120 m times 20 m times 7 m \nMaximum of suppressed volume is 10416 m3 \n[LT Storage] \n[Design memory] \n[Design memory] \n### The system now must resolve the concept \"Density of liquid\", after having detected \n'liquid' as being a concept 'having' a density, and must get specific information \nfrom the designer: ### \n[DPL System] \n[Operator] \n\"What is type of liquid? \" \n\"Sea water\" \n \n\n170 \n[Design memory] \nChapter 6: Drawing lines \nType of liquid is sea water \n### 'Sea water' is then detected in long term memory. Had the response above been \n''Type of liquid is x\" the system might have prompted something like \"What is density \nof x?\" since x is undefined in memory, and since it necessarily must have a density.### \nDensity of sea water is 1.025 tons/m3 \n[LT Storage] \n### The system calculates (or resolves a relationship): ### \n[Design memory] \nMaximum of weight of displaced liquid equals 10676 tons \n### The system replaces 'weight of displaced liquid' with 'buoyancy' in the \nrelationship found earlier: ### \n[Design memory] \nMaximum of buoyancy equals 10676 tons \n### Instantiating: ### \n[Design memory] \nD-object floats if 10676 is larger than maximum of weight \n### The system performs a grammatical operation, 'reversing' the relationship \nabove:### \n[Design memory] \nD-object has maximum of weight less than 10676 tons \n### The system is now capable of \"answering\" the question stated in the beginning: ### \n[DPL System] \n''D-object has maximum of weight less than 10676 tons\" \n### The designer now asks a new question: ### \n[Operator] \n[Design memory] \n\"What is maximum of deadweight?\" \nWhat is maximum of deadweight? \n### The system finds a relationship stored in long term storage: ### \n[LT Storage] \nWeight equals deadweight (of D-object) plus weight of lightship (of D-object) \n \n\nChapter 6: Drawing lines \n171 \n### The system performs a grammatical operation (reverses the relationship) and \ninstantiates 'deadweight': ### \nMaximum of deadweight equals maximum of weight (of D-object) minus \nmaximµm of weight of lightship (of D-object) \n[Design memory] \n### Now, the system has found no usable relationship to calculate weight of lightship, \nand the designer is asked. If the designer wanted to, she could at this point enter a \nrelationship, such as a formula including, e.g., L, B, D, Cm, and Cb. The system would \nthen search for definition of parameters (concepts) and prompt for the missing \ninformation if no method existed to find them, as in \"What is Cm?\" and \"What is Cm of \nD-object?\" Upon learning the new relationship (new formula), this might be added to \nlong term memory. However, the designer responds with a fixed value: ### \n''What is weight of lightship (of D-object)? \" \n\"3500 tons\" \n[DPL System] \n[Operator] \n[Design memoryJ \nWeight of lightship is 6500 tons \n### The system instantiates (maximum weight is known from earlier): ### \n10676 equals maximum of deadweight (of D-object) plus 6500 tons \n[Design memory] \n### The system performs a grammatical operation (reversal): ### \nMaximum of deadweight (of D-object) equals 10676 tons minus 6500 tons \n[Design memory] \n### The system performs a calculation (through a subtraction relation, which is a \npreposition relation): ### \n[Design memory] \nMaximum of deadweight (of D-object) equals 4167 tons \n### The system performs a translation. Equal to is, in this case: ### \nMaximum of deadweight is 4167 tons \n[Design memory] \n### It is now possible for the system to answer the question asked earlier by the \ndesigner: ### \n\"Maximum of deadweight is 4167 tons\" \n[DPL System] \n \n\n172 \nChapter 6: Drawing lines \nDesign process \nThe process description that follows introduces some material relations (see \nChapter 5) that are used in solving the design problem. It is impossible here to \nlist all possible transactions that take place - assume that the relations have \nan underlying definition that enables the system to chose appropriate lower-\nlevel transactions. The concept definitions are not given here, and some other \nshortcuts are also made in the course of the illustration. \n### The question asks a question that is registered into short term memory: ### \n[Operator] \n[Design memory] \n''What is weight of hull skin?\" \nWhat is weight of hull skin? \n### The system commands itself to attempt a resolution of the concepts introduced in \nthe sentence: ### \nResolve concepts! \n[Design memory] \n### The system then cannot find any value of weight in short-term memory. Here is \nassumed that the system interprets this question as one asking for value - not for other \npossible parts of the definition of the concept \"weight of hull skin\". Furthermore, it is \nassumed that 'hull skin' refers to the last referred 'hull skin’, namely that of the hull \nof the D-object: ### \n[Design memory] \nWeight of hull skin is unknown \n### Since the concept is unknown, the system constructs a command to itself aiming \nto find the missing information (define the unknown concept): \nFind weight of hull skin! \n[Design memory] \n### \n### New internal command to detect a transaction that can make the system able to \nsolve the problem (find, or define, the concept): ### \n[Design memoryJ \nLocate method! \n \n\nChapter 6: Drawing lines \n173 \n### One relationship that may be used is found. Assume here that the system has used \nsome decision rules, for instance If . .. then ... : ### \n[LT Storage} \nWeight equals density times volume \n### The relationship above is instantiated: ### \n[Design memory] \nWeight of hull skin equals density of hull skin times volume of hull skin \n### The system commands itself to attempt a resolution of the concepts introduced in \nthe sentence: ### \nResolve concepts! \n[Design memory} \n### The system finds that the .concept has been defined earlier. ### \n[Design memory} \nHull skin has material A36 steel \n### The system finds necessary relationship through searching memory and.interpreting \nrelationships found there: .### \nA36 steel has density 8.0 tons/m3 \nDensity of hull skin is 8.0 tons/m3 \n[LT Storage] \n[Design memory} \n### The system could not find volume (concept introduced above) to be defined in \nrelation to this problem. It commands itself to find a means to do this.: ### \n[Design memory] \n[Design memory] \n[Design memory] \nVolume is unknown \nFind volume of hull skin! \nLocate method! \n### A possible relationship is found and instantiated. ### \n[LT Storage] \n[Design memory} \nVolume equals surface area times thickness \nVolume of hull skin equals surface area of hull skin times thickness of hull skin \n### New concepts (in this case, parameters in a formula) are introduced with the chosen \nrelationship, and a new internal command is constructed: ### \n[Design memory] \nResolve concepts! \n \n\n174 \nChapter 6: Drawing lines \n### The system detects a definition of one of the concepts from earlier: ### \n[Design memory] \n[Design memory] \nHull skin has thickness 16 mm \nThickness of hull skin is 16 mm \n### Here is assumed that the system finds a rule that determines that dimensions need \nto be consistent. \nConvert dimension to m \n[Design memory] \n### The system finds a conversion (mapping) in long term memory: ### \n[LT Storage] \n1 mm equals 0.001 m \n### And performs a transaction to convert: ### \n16 mm equals 0.016 m \nThickness of hull skin is 0.016 m \n[Design memory] \n[Design memory] \n### The system finds no trace of the remaining parameter: ### \n[Design memory] \nSurface area of hull skin is unknown \n### Searches and fails to find a useable relationship: ### \n[Design memory] \n[Design memoryJ \n[Design memory] \nFind surface area of hull skin! \nLocate method! \nNo method found! \n### The system is left blank - no useful relationship has been found in memory: ### \n[DPL System] \n[Operator] \n\"No method found. Define method, give value or identify range?\" \n\"Identify range\" \nThe example is further developed in the appendix. \n \n\nChapter 6: Drawing lines \n175 \nChapter summary \nThe chapter has given some illustrations of how the DPL may be conceived \napplied in a design situation. It is beyond the scope of this thesis to state any \nproofs that the DPL will work, but the illustrations presented in this chapter should \nindicate that the language itself may be used in a machine assisted design \nprocess. \nThe examples have shown that it is possible to use the DPL for both object and \nprocess descriptions as a tool in the design process. The main requirement is \nan operating system that can handle it. Nothing has been said as to how to \nrepresent the various abilities that are used in such a design process, and how. \nthe system detects the actual processes used to calculate, find, plan, and so forth. \nNeither has anything been shown as to how the grammatical rules used to \ninterpret sentences are constructed, refined, or operated. Most of these problems \nhave been discussed at some point throughout. A brief discussion of limitations \nand possibilities is presented in Chapter 7. \n \n\n176 \nChapter 7: Concluding remarks \nChapter 7: Concluding remarks \nIn the thesis I have developed some different ideas of how design may be \nviewed and, towards the end, tried to develop the framework of a language - \nthe Design Process Language - with which it may be expressed, The \nfundamental hypothesis underlying the entire work is that design may \nessentially be viewed as a process of using and producing relationships. This \nidea was used and developed further until the point where the framework of \nthe DPL was suggested. I will here propose a critique and draw some \nconclusions from the work. \nCritique \nThe (few) 'invariants' in design that I have discussed and argued for, \nparticularly through comparing theories regarding intelligent behavior and \ndesign research in Chapter 2, treated high level processes and were only \nindicative. Little was said on how designers actually perform in design activities. \nThe reason for this is that the works within design research show little \nconvergence as to what indeed are invariants at the lower levels of operation. \nI suggest in the introduction that this might be so because the ways individual \nhumans design in individual tasks differ so much that it is impossible to establish \nall but very general theories. Presumably, design researchers must focus on \ncoherent theories that have chances of being consented to. But the high-level \nprocesses involved in intelligent activity are not what the DPL are to describe \n- DPL is to represent knowledge used in actually planning and performing \ntasks specified by an external (intelligent) agent or some other authority. \nThis does, however, cause problems in verifying that the DPL is of virtue - if little \nis known about what a language is to express there is little chance of proving that \nthe language is expressive! The DPL has then, so far, become a framework \nwhere quite general categories are identified but where few concrete relations \nor concepts are defined. \n_ \nAn obvious problem in using the Design Process Language framework is that \nthe structure it presupposes is propositional, where relationships are embedded \n \n \n \n\nChapter 7: Concluding remarks \n177 \nin sentences. It is not oriented towards databases and file structures as all of \nus have increasingly fallen victim to - indeed, the knowledge represented must \nprobably be directly accessible in the DPL format. As with all new approaches, \nthis causes compatibility problems in case of implementation of the DPL - it \nmakes difficult any communication with today's program-specific data storage. \nIt may, of course, be possible to create artificial linkers and to let concept like \n'data model’ define another format, such as \"Data drawing has format\" and \n\"Format of data model is DXF.\" The content of a file may then treated as the \ndefinition of a concept - somewhat like a semantic concept. \nNothing has been mentioned regarding how to encode semantic concepts \n(those that are understood through their signification in the real world) in a DPL \nimplementation in a computer. This may be a large problem if the purpose is \nto create intelligent programs. However, the part of the design system residing \nin the computer may here be dumb, or closed. In other words, it may be purely \nsymbolic. The designer is viewed as both the 'intelligent authority' that uses a \ncomputer as an assistant, and is viewed as the interface with the world. \nThere are obvious problems of spatial and temporal efficiency in using DPL in \nan automated environment. However, this is probably an increasingly inferior \nproblem to that of enabling representational, or epistemological, adequacy in \nthe languages used to describe what is known about the world. \nLittle has been said regarding how to represent 'knowledge about knowledge'. \nSuch information may be at what point a particular relationship is established, \nwhich may be of importance for purposes of mapping design history. Other \nsuch information may be issues regarding internal storage of information, for \ninstance location of sentences in memory. These are serious problems that \nremain to be addressed. \nThe frequently cited concept of control knowledge is not discussed. Obviously, \nthere must be knowledge embedded in a human mind or in a computer such \nthat the application of (grammatical) rules is controlled to find what actions to \ntake upon learning a new relationship. It may be expected that some of this \ncontrol may be captured through a kind of hegemony that can be described \nthrough transitivity in the grammar, as in \"A controls B\" and \"B controls C\" \n \n \n \n \n \n \n \n \n\n178 \nChapter 7: Concluding remarks \nimplies that \"A controls C.\"\n0 Related to this is that, in the bottom line, some \nknowledge must be behavioral, like the interpretation of fundamental \n(material) relations and grammatical rules operating upon relations. This \nknowledge can obviously not be described in terms of concepts and relations \nin propositional or semantic memory although composite relations (those \npropositionally defined by means of other, more fundamental, relations) can \nbe. The encoding of the grammatical rules that interpret the meaning of \nsentences is a different issue, but does in principle not differ that much from \nthe technology of encoding operating systems in today's computers. \nThe DPL is based on representing and manipulating symbolic knowledge, \nwhereas a lot of information relevant in a design process may be figural, in \nparticular graphical. This limitation is similar to that experienced in any language, \nand is thus not particular to DPL - there probably does not exist enough words \nin the world to describe all relationships that may be found in an image of a \nhuman face. \nConclusion \nI will propose that the contributions from this work can be categorized in two \nmain categories; those related to the development of the view of design as \na concept-formation process and those related to the DPL itself. I will conclude \nthe thesis by summing up the main points in these two categories. \nOn design \nIt has become apparent that there is no single way to look at design. It is a \nmulti-faceted phenomenon - sometimes a multi-headed monster. With each \nnew angle that we take as observers, with each new light-setting, with each \nnew pair of glasses we put on, different aspects of the design process surface. \nI have come to land on three views of design; as a concept-formation process, \nas a hypothesis-proving process; and as a hypothesis-generating process. Each \na \nIt is not shown here under what conditions this issue of control is relevant. During the \ncourse of my research, however, it became clear that this is a possible approach to \nmaking the grammar controlled. \n \n \n \n \n \n\nChapter 7: Concluding remarks \n179 \nof these views discloses different characteristics of design that I will summarize \nhere. \nDesign as concept formation \nIt is widely recognized that the design process is a process of which the aim is \nto discover some knowledge about a non-existing object that, when \nmaterialized, is to have a purpose. In other words, the process has as an \nultimate goal to describe a product that is not yet known. The way to describe \nthis unknown object is to conceptualize it in terms of known things, or known \nconcepts. The designer relates the unknown concept to other concepts that \nultimately carry meaning to the initially abstract and unknown and ultimately \nconcrete and known concept of the design object. \nThis sheds light on some more fundamental characteristics. In order for the \ndesign object to have the slightest chance of filling the purpose that it is set to \nfill, it must be possible to design it with a view to (understand it in terms of) that \npurpose. Or, said in another way, it must be possible to understand concepts \ndescribing the purpose in terms of concepts describing the design object. If \none concept describing purpose is 'transport', then the design object must \nnecessarily have a structure that in some way enables it to 'transport'. In other \nwords, there must exist a way to relate the 'transport' concept to the design \nobject. \nThe argument above can be extended. In order to describe the role of a \ndesign object, or how it will behave when materialized and put to work, it is \nalso generally recognized that there must exist means of relating this object to \nthe environment in which it is to exist in the future. The design object must be \nunderstood in terms of how it will perform in that environment. In other words, \nit must be possible to create relationships between concepts describing the \nenvironment and those describing the design object. The 'artifact', as \nproposed by Simon, is then a set of relationships serving to connect concepts \nfrom the two 'worlds’, respectively. Phrased in parametric terms; to model how \na product will function in a given environment, the variables used to model the \nproduct and those used to model the environment must both be accessible to \nthe program that is used to evaluate their interaction. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\n180 \nChapter 7: Concluding remarks \nAs a matter of fact, it must be possible to merge all knowledge that is relevant \nfor assessing to what degree an object performs satisfactorily through \nrelationships that connects all this knowledge into a whole - in some sense, it \nmust be possible to construct a 'network' of concepts. This network may also \ninclude knowledge of constraints, of evaluation criteria, of procedures, and so \nforth. \nThe last enlightenment to achieve from the concept-formation view of design \nis that in order for anyone else to understand what the designer describes, \nthere must in the description of the design object, be concepts that are \nunderstood by others. While nobody would know very much about the design \nobject through simple knowing the phrase \"this is an x,\" a lot more \nunderstanding ould be gained by others if this sentence were followed by \"x is \na ship.\" It should not be very controversial to claim that this arises from the fact \nthat the more share the same understanding of the concept \"ship ' than they \ndo of the concept 'x '. However, \"this is an x\" might make perfect sense to the \ndesigner, assuming that the designer were accustomed to the substitute 'x ‘ for \n\"ship·. This leads to the conclusion that at least some of the concepts used in \ndescribing the design object must be known by the one that is to materialize \nthis object. Further, all (relevant) concepts (that may initially be unknown) \nused in describing the design object must somehow be  understandable in \nterms of other, known, concepts. \nThus, the key to understanding a design object description is to understand the \nconcepts used to describe it. In this conception, ‘understand’ implies that the \ndesigner and the constructor ‘understand’ in a similar manner - if there is a \ndivergence in understanding there is an opening for a materialized design \nobject to be different from that which was intended from the designer's head \nand hand. The designer must find those generally known concepts that can \nbe used as ‘vehicles of meaning’. This also goes further - it may be necessary \nto specify standards so as to provide a sufficient set of carriers of meaning for \na successful communication between the designer and the constructor to take \nplace. \n \n \n \n \n \n \n\nChapter 7: Concluding remarks \n181 \nDesign as proving hypotheses \nIt is shown that the design process is in some sense similar to the process of \nproving hypotheses. The knowledge that the designer initially has access to is \na set of statements about what the design object is to achieve in the future. \nThese statements are in nature similar to hypotheses. The design object thus \nbecomes a specification of an object that appears to prove correct hypotheses \nabout the future. When designers test whether their design will meet \nexpectations, they might easily cast this test as something like \"the design \nobject satisfies requirements.\" If this proves wrong, the hypotheses are not \nproven and the design process is not finished. \nThis brings up some additional points. The 'facts' that the designer 'learns' \nabout the design object all have an overall purpose - to support the claim that \nthe hypotheses are correct. If a fact does not contribute, directly or indirectly, \ntowards proving a hypothesis, it may be an irrelevant or redundant fact. In \nsome sense, this is like saying that all aspects of the design object must have a \nreason for existing, and that this reason in some way should be possible to trace \nback to the initial expectations - the hypotheses. \nAnother conclusion to draw in the hypothesis-proving view of design is that the \ntest - the performance modelling - must be made such that the results from \nthese tests are understood in the same terms as those used in stating the \nhypotheses. This actually is mapping between the hypotheses and the \nconcepts that describe the design object. \nDesign as generating hypotheses \nIt is also shown that design may be viewed as a process of generating \nhypotheses. The specification that the designer produces is only a hypothetical \nconstruct - the result is still an abstract concept that becomes concrete only if \nits description is such that its materialization is ensured. The designer must \nconsider how to ensure a correct materialization - possibly through also \nincluding in the description procedures and instructions of how to implement \n \n \n \n \n \n\n182 \nChapter 7: Concluding remarks \nthe result.b She must design hypotheses that are easily understood and easily \ntested. Arguably, it is easier to test an hypothesis that states structural \nconfiguration than one that states functional behavior. At least it is easier to a \npriori ensure that the finished result corresponds to the hypotheses if they state \nrequirements \nto \nphysically observable phenomena and \nnot simply \nfunctional behavior. \nIt seems probable that this is part of the reason why there is a need for a \ndesigner to mediate between the one who states the initial expectations (the \ncustomer) and the one who materializes the result (the constructor). The \ndesigner is an expert in translating hypotheses of a functional (intangible) \nnature to hypotheses of a structural (tangible) nature, while the constructor is \nan expert in translating hypotheses of a structural (tangible) nature to a \nphysical construct (extremely tangible). As a product evolves from idea to \nmaterial fact, the hypotheses describing it evolve along the scale of \n‘tangibility' - the ratio of hard to soft knowledge increases. (See Mistree et. \nal., 1990 and Smith, 1992) \nFurthermore, this view stresses the point that the designer cannot assume her \nspecification to be an exact picture of the materialized result. This depends on \nto what degree the constructor is able to prove her hypotheses (specification) \nright. The role of the designer then becomes to ensure that the hypotheses are \nstated such that the chance of the constructor being able to prove them is \nhigh. In other words, if the constructor produces a product that 'proves' the \ndesigner right in her description, the constructor has 'proved ' the hypotheses \nsuggested by the designer. But this chance then depends on how these \nhypotheses are formulated. It is probably easier for a constructor to construct \na block of wood described as dimensions of length, breadth, and height than \none that is simply described as a volume. The design object should then be \nhypothesized as a construct in terms of those three dimensions. As seen from \nthe perspective of the designer, assuming that all that is needed is a certain \nvolume regardless ot how it is achieved, both approaches are sound, since \nboth satisfy requirements. However, the  designer will  probably specify \nb \nThis is also said by others, for instance Goel and Pirolli as discussed in Chapter 2. \nHowever, they define this as part of an artifact (design obiect) description. I claim it to \nbe a consequence of the design object as being hypothetical in nature! \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nChapter 7: Concluding remarks \n183 \ndimensions to increase the probability of the constructor making a product \nthat satisfies the requirements to volume. \nOn the Design Process Language \nAs a natural consequence of viewing design as a concept-formation process, \nas relating concepts, it is quite near in thought to presume that design could \nfruitfully be viewed as a process of using and producing sentences in some \nlanguage. I have termed this language the Design Process Language and \nchosen to use a natural language - English - as a platform. \nProcess \nOne of the obvious requirements to place on the Design Process Language is \nthat it shall be possible to represent process with it. Thus appeared the material \nverbal relations, usefully viewed as a subset of the transitive verbs in natural \nlanguages. In this category are those relations that normally describe what an \nagent (a subject) 'does' to an object when they are used in a description. \nAnother category was less obvious in describing process. This was the category \nof modal verbal relations. The design process implies a planning of activities, and \nthe existence of activities imply that there exist abilities to perform activities. The \nmodal relations include exactly such verbs that have to do with, for instance, \nrepresenting abilities (can (do)), future required and necessary activities (must \n(do), will (do)), and future desired activities (should (do)). \nSome other relations also turned out to be necessary for the purpose of \ndescribing processes; the ‘composite' category (including a verbal relation) of \ncircumstance relations, a subset of which \"operate· with prepositional relations \nor adjective modifiers. For instance, the (verbs) prepositions (executes) before \nand (executes) after, and the (verbs) adjectives (prepositions) (is) faster (than) \nand (is) slower (than). \nOther requirements in the process view were even less obvious. Commonly, \nprocesses are treated in a similar manner as the objects in that they are \ndecomposable into sub-processes just as a structure is decomposable into \nparts. The possessive relations then turned out  to be relevant. One  need not \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\n184 \nChapter 7: Concluding remarks \ngo far to see this decomposability and the use of possessive relationships - \nmost \"programs have subroutines.\" \nObviously, processes need to exist, something represented through the \ncategory existential relations. (\"There is a program\") Obviously, processes are \nsomething as well, creating the need for the intensive.relations in the DPL. \n(\"The program is a C-program\"). \nIn going even further into the process aspects of design, it became apparent \nalso that historical information could be relevant, whether for re-design \npurposes, for purposes of learning, or for purposes of documentation. This was \nmade possible by the category of conjunctive relations (\"The attempt failed \nbecause ...\") and the (grammatical) rules in the language enabling a \ndistinction between past, present, and future (\"The program will calculate ...,\" \n\"The program calculates ...,\" and \"The program calculated ...\"). The \nconjunctive relations also are important in representing, for instance, rules for \nchoosing activities; \"If( ...) and (...) then (...) or (...).\" \nIn short, the relations that could be found in the language of English proved \nto be efficient, at least in supplying terminology, for a DPL to handle a general \ndesign process description. \nObject \nI will here use the term object to refer to the general class of non-process \nknowledge. It should be quite clear what is meant with this term; non-process \nknowledge gathered, used or produced in the course of the process, like \"The \nlength of the vessel is 140 meters.\" \nThe categories of relations differ not as much as might be expected from those \nneeded to represent process. However, the importance of the various \ncategories is different. The existential relations were needed to state the \npresence of an object (\"There is a design object\") and the intensive relations \nto state what the object actually is. (\"The design object is a ship\" and \"The \nlength is 140 meters\"). The possessive relations were probably more important \nhere than in describing processes. It is a frequent activity in design to \n \n \n \n \n \n \n \n \n \n\nChapter 7: Concluding remarks \n185 \nconcepts; \"The ship has \ndecompose into less general or less encompassing \nmachinery\" and \"The ship has length.\" \nThe prepositional relations most relevant for describing object were somewhat \ndifferent from those relevant for describing process. Whereas the most relevant \n(circumstantial - prepositional) relationships among otherwise 'independent’ \nprocesses are temporal in nature, the most relevant such relationships among \notherwise independent objects are of a more spatial nature; \"The machinery \nis on deck l\" and \"Deck l is below deck 2.\" Others are relevant to both process \nand object; \"The program writes to a file\" and \"The propeller is connected to \nthe shaft,\" and \"The program executes at (time)\" and \"Crane is located at \n(position).\" The way the prepositions are interpreted depends on relations they \ncooperate with, in this case the verb relation. If the verb relation is material, the \nprepositional relation is temporal. \nThe same difference applies partly to the adjective modifiers as well. Those of \ntemporal nature apply less to objects than those of spatial nature, such as in \n\"Beam A is longer than Beam B.\" However, some are not process or object \nspecific, such as in \"Program A is better than Program B\" and \"Alternative A  \nis better than Alternative B.\" \nThe conjunctive relations may, of course, be applied to object as well as to \nprocess; \"The machinery is either a steam turbine or a gas turbine\" and \"If the \nmachinery is a gas turbine then the RPM is high.\" \nRequirements and expectations and hypotheses \nThe modal relations have an important role in describing the initial statements \nof expectations and requirements, what was earlier referred to as hypotheses. \nThese relations are all in some way or another used for expressing \nconditionality, futurity, expectations, hypotheses, possibility, and so forth. They \nthus seem well suited to describe that which is to become, like in \"The length \nmust be less than 140 meters,\" \"The ship should cost less than 20 million dollars, \nand \"The ship ought to be safe.\" To state it simply, a designer using DPL would \nneed to resolve all such modal relations - \nprove \nthem \n'right’ \nbefore \nending the work. These relations are some of the more powerful ones, and \nprobably the more 'design specific' ones. in the DPL. \n \n \n \n \n \n\n186 \nChapter 7: Concluding remarks \nFurther work \nTheoretical \nFrom the theoretical point of view, several angles could be taken to increase \nunderstanding of design, as viewed in the context of this thesis. In this section \nare discussed some of the more important works to be performed in the future. \nInvestigate whether design activity is usefully explained in terms \nof Sternberg's seven components. \nIn Chapter 2 several indications were presented to the extent that design is closely \nrelated to the view of intelligence by Sternberg. This particular aspect of \nInformation Processing Theory may thus be a useful basis for undertaking \nresearch into abilities that make humans able, and well able, to design. By using \nthe seven components presented by Sternberg as categories in which to 'place' \ndifferent observations it might be expected that new light is shed on what is \ndesign, \nInvestigate what kinds of relations among concepts are most \nimportant in a language used for describing the design process \nand the knowledge it uses and produces. \nThe categories of relations presented in Chapter 5 were all shown to be of \nsome relevance to describing the design process and the knowledge used \nand produced in the process. It may be useful to both perform theoretical and \nempirical research to find what role the various kinds of relations play in \nbuilding a model in design. \nInvestigate what kinds of material relations are most important \nin design. \nThe material relations are the most crucial in describing the process aspects of \ndesign. They are grossly transitive verbs. It may be of use to study the design \n \n\nChapter 7: Concluding remarks \n187 \nprocess to find what kinds of material relations could most frequently be used \nto describe it. \nEither (a) describe the relations in terms of other, more \nfundamental, relations, or (b) trying to classify them further \n· through identifying common properties among sets of relations. \nSome material relations will probably be more important than others. In \naddition, it may be fruitful to view individual relations, such as analyze, to \nconstitute classes of other relations, like calculate, decompose, and so on. In \naddition, there may be the case that some relations are decomposable into \ngradually more elementary material relations (processes), like Newell and \nSimon argue. \nInvestigate whether the set of modal relations is an \n'epistemologically adequate ' set of such relations. \nThe modal relations were shown to be of ultimate importance in planning for \nthe future and treating potential or possible events or facts. I would expect \nthat the set of modal relations could be extended to be a sufficient set in \npractice - I haven't made the effort to prove sufficiency, if such a proof is \nindeed possible. \nClassify phenomena detected in design behavior in terms of \nthe relations used to describe these phenomena as defined in \nthe Design Process Language framework. \nIt may be an interesting experience to find whether indeed design behavior \ncan be expressed through the categories of relations suggested here. It was \nbeyond the scope of this thesis to test the DPL against design theories and \nobserved behavior to investigate the expressiveness, although I have tried to \nshow, by means of examples, some of the expected expressiveness of the DPL. \nPractical \nSome further tasks are of a more practical nature, seeking primarily to give \nevidence for some of the theoretical findings in this Thesis and paving way for a \npossible implementation of them. \n \n \n\nChapter 7: Concluding remarks \n188 \nInvestigate in what way the relations interact, and what \ngrammatical (interpretational) rules are specific to each \ncategory of relations. \nSeveral of the relations suggested in Chapter 5 display different behaviors \nwhen joined to form ‘composite· relations. Consider the relation is alone, is \nabove, is close to, and is closer than. It is a task not only to find rules that \nresolve a relation when it is functioning alone to relate concepts, as in \"The car \nis red,\" but a!so when it functions with other kinds of relations, like \"The engine is \nabove the keel.\" For instance, some of the circumstance relations \n(attributive) always presuppose that a verbal relations is cooperating with \nanother (prepositional relation or adjective modifier). So, pairs of relations from \ndifferent categories may display characteristics that differ from that of both \ncategories viewed in isolation. \nFind invariant features among relations in the various \ncategories. \nThere are probably also some characteristics of the relations that are constant \nwithin each category - that is, rules that are category specific. It will be useful \nif these characteristics could be identified. \nInvestigate how to treat data in a computer environment using \nthe DPL particularly with respect to storage and search. \nAn obvious area of research is to find what demands to put on hardware and \nsoftware, particularly memory and operating system, to facilitate storage of \nsentences and search to find concept and relations occurring in these \nsentences. For instance, while conventional data management systems are \nbased on pointers to locations in the database, it is more likely that when DPL \nis used the words are treated as they are - not as symbolizing some 'deeper' \nknowledge. An exception are the semantic concepts - those that Indeed do \nhave some deeper meaning for the interpreting system. Presumably, these \nneed to point to other entities that ‘carry meaning' to the system. (Like, for \n \n\nChapter 7: Concluding remarks \n189 \ninstance, the mapping in digital computers between the number 9 and the \nbinary representation 00001001.) \nInvestigate rule structures and procedures inherent to the \nsystem (behavioral knowledge). \nThis is a field where extensive research has already been undertaken. However, \nthe aim with such research in terms of the DPL would be to find how the \ngeneral rules and procedures that are needed to understand the meaning \nembedded in sentences should be stored, structured, and operated. In other \nwords, how the language is controlled. \n \n\n190 \nReferences \nReferences \nAllen, J. F. \"Towards a General Theory of Action and Time,\" Artificial \nIntelligence 23, 1984, pp. 123-154. \nThe American Heritage Dictionary, Second College Edition, Houghton Mifflin \nCompany, Boston, 1982. \nAsimow, Morris Introduction to Design, Prentice-Hall Inc., New Jersey, 1962. \nBaron, Jonathan Thinking and Deciding, Cambridge University Press, \nCambridge, Massachusetts, 1988. \nBlumenthal, Arthur L. The Process of Cognition, Prentice-Hall Inc., New Jersey, \n1973. \nBras, B.; Smith, W. F.; and Mistree, F. \"The Development of a Design Guidance \nSystem for the Early Phases of Design,\" unknown origin, 1990. \nBraute, Leif K. Datakraft i prosjekteringen (Computing in the design process), \nTerm report for the course: Marine Design Project Norwegian Institute of \nTechnology, Trondheim, Norway, 1987. \nButler, Christopher S. \"Politeness and Semantics of Modalised Directives,\" in \nLinguistics in a Systemic Perspective (edited by Benson, Cummings, and \nGreaves, W. S.), John Benjamins Publishing Company, Amsterdam, 1988. \nChi, M. and Glaser, R. \"Problem-Solving Ability,\" Human Abilities: an Information \nProcessing Approach (Sternberg ed.), W. H. Freeman and Company, \nNew York, 1985. \nChristiaans, H. and Venselaar, K. \"Knowledge as a basis for creativity in \ndesign,\" International Conference on Engineering Design, Dubrovnik, \nYugoslavia, 1987, pp. 68-75. \n \n \n \n \n \n \n \n \n \n \n\nReferences \n191 \nCoyne, R. D. and Gero, J. S. \"Semantics and the Organization of Knowledge \nin Design,” Design Computing, Vol. 1, 1986, pp. 68-89. \nCoyne, R.D.; Rosenman, M.A.; Radford, AD.; Balachandran, M.; and Gero, J.S. \nKnowledge-based Design Systems, Addison-Wesley Publishing Company, \nReading, Massachusetts, 1991. \nDale, Stein I. Object-Oriented Product Modeling for Structural Design, Ph. D. \nDissertation, Norwegian Institute of Technology, Trondheim, 1991. \nDavis, R. \"Meta-Rules: Reasoning about control,” Artificial Intelligence 15, 1980, \n179-222. \nDillon, E. Scott \"Basic Design,” Ship Design and Construction, Society of Naval \nArchitects and Marine Engineers, New York, 1969. \nDodd A H. and White, R. M. Jr. Cognition. Mental Structures and Processes, \nAllan and Bacon Inc., Boston, 1980. \nErichsen, Stian Design of Marine Transport, course publication, Norwegian \nInstitute of Technology, Trondheim, 1989. \nFitzhorn, Patrick \"Formal Graph Languages of Shape,” Al EDAM, 1990, no. 4, \n151-163. \nGenesereth, M. R. and \nNilsson, N. J. Logical Foundations of Artificial \nIntelligence, Morgan Kaufmann Publishers Inc,, Palo Alto, California, 1988. \nGero, J. S. and Rosenman, M. A \"A conceptual framework for knowledge- \nbased design research,” Artificial Intelligence in Engineering, 1990, Vol. \n5, No. 2, pp. 65-77, \nGlynn, Simon \"Science and Perception in Design,” Design Studies, Vol. 6, No. \n3, July, 1985, pp. 122-126. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\n192 \nReferences \nGoel, V. and Pirolli, P. \"Motivating the Notion of Generic Design within \nInformation-Processing Theory: The Design Problem Space,\" Design \nStudies, spring 1989, 18-36. \nGuilford, J.P. The Nature of Human Intelligence, McGraw-HIii Book Company, \nNew York, 1967. \nHagen, Arnulf A Computer Program for Assessing the Economics of Hierarchical \nSystems: An Application in Engineering Project Evaiuation, M. Sc. Thesis, \nMassachusetts Institute of Technology, Cambridge, Massachusetts, 1990. \nHagen A and Samarasan, D. K. Negotiating a Seabed Mining Joint Venture: \nUsing Computer Models as Aids in the Process, working paper WP 3074- \n89-BPS, MIT, Cambridge, MA, 1990. \nHalliday, M. A K. \"On the Ineffability of Grammatical Structures,\" In Linguistics \nin a Systemic Perspective (edited by Benson, Cummings, and Greaves, \nW. S.), John Benjamins Publishing Company, Amsterdam, 1988. \nHalliday, M. A K. An Introduction to Functional Grammar, Edward Arnold, \nLondon, 1989 (first published in 1985). \nHayes-Roth, B. and Hayes-Roth, F. \"A cognitive model of planning,\" Cognitive \nScience 3, 1979, 375-310. \nHayes-Roth, Barbara \"A Blackboard Architecture for Control,\" Artificial \nIntelligence 26, 1985, 251-321. \nHolland, J. H.; Holyoak, K. J.; Nisbett, R. E.; and Thagard, P. R. Induction. \nProcesses of Inference, Learning, and \nDiscovery, The MIT Press, \nCambridge, MA, 1989. \nHopper, P. J. and Thompson, S. A \"Transitivity in Grammar and Discourse,\" \nLanguage, Volume 56, number 2, 1980, 251-299. \nHubka, V. \"Design tactics= methods+working principles for design engineers,\" \nDesign Studies, Vol.4, No. 3, 1983, pp. 188-195. \n \n \n \n \n \n \n \n\nReferences \n193 \nIverson, Kenneth I. \"Notation as a Tool of Thought (1979 Turing Award \nLecture),\" ACM Turing Award Lectures. The First Twenty Years, 7966-7985 \n(ed.: R. Ashenhurst), ACM Press, New York, 1987. \nJohnson-Laird, P. N. Mental Models. Towards a Cognitive Science of Language, \n  \nInference, and Consciousness, Cambridge University Press, Cambridge, \n United Kingdom, 1983. \nKimbler, D. L.; Watford, B. A.; and Davis, R. P. \"Symbollic modelling and design \nmethodology,\" Design Studies, October 1988, 208-213. \nKlatzky, Roberta L. Human Memory. Structures and Processes, W. H. Freeman \nand Company, New York, 1975 (1980 ed.). \nLangley, P.; Simon, H. A.; Bradshaw, G. L.; and \nZytkow, J.· M. Scientific \nDiscovery. Computational Explorations of the Creative Processes, The MIT \nPress, Cambridge, MA, 1987. \nMaccallum, K. J. \"Does intelligent CAD exist?,\" Artificial Intelligence in \nEngineering, 1990, Vol. 5, No. 2, pp. 55-64. \nMcCarthy, J. and Hayes, P. J. \"Some philosophical problems from the standpoint \nof artificial intelligence,\" Readings in non-monotonic reasoning (Matthew L. \nGinsberg (ed.)) Morgan Kaufmann Publishers, Palo Alto, California, 1987, \npp. 463-502. (First published in: Machine Intelligence 4 (Bernhard Meltzer \n(ed.)), University Press, Edinburgh, United Kingdom, 1973, pp. 463-502.) \nMcCarthy \"Generality in Artificial Intelligence (1986 postscript to a 1971 Turing \nAward Lecture),\" ACM Turing Award Lectures. The First Twenty Years, \n7966-1985 (ed.: R. Ashenhurst), ACM Press, New York, 1987. \nMcDermott, Drew \"Critique of pure reason,\" Computer Intelligence, Vol. 3, \n1987, 151-160. \nMinsky, Marvin The Society of Mind, Simon and Schuster, New York, 1986. \n \n \n \n \n \n \n \n \n \n \n\n194 \nReferences \nMinsky, Marvin \"Logical versus Analogical or Symbolic versus Connectionist or \nNeat versus Scruffy,\" Al magazine, Summer 1991, pp. 34-51. \nMistree, F.; Kamal, S. Z.; and Allen, R. H. \"Discussion,\" Artificial Intelligence in \nEngineering, 1988, Vol. 3, No. l, pp. 44-45. \nMistree, F.; Smith, W. F.; Bras, B. A; Allen, J. K.; and Muster, D. \"Decision-Based \nDesign: A Contemporary Paradigm for Ship Design,\" SNAME Transactions, \nVol. 98, l 990, pp. 565-597. \nM'Pherson, P. K. \"Systems Engineering: an approach to whole-system design,\" \nThe Radio and Electronic Engineer, Vol. 50, No. 11/12, 1980, 545-558. \nNeisser, U. Cognition and Reality, W. H. Freeman and Company, New York, \n1976. \nNewell, A and Simon, H. A Human Problem Solving, Prentice-Hall Inc., New \nJersey, United States, 1972. \nNewell, A and Simon, H. A \"Computer Science as Empirical Enquiry: Symbols \nand Search (1975 Turing Award Lecture),\" in ACM Turing Award Lectures. \nThe First Twenty Years, 7966-7985 (ed.: R. Ashenhurst), ACM Press, New \nYork, 1987. \nRawson, Kenneth J. \"Maritime Systems Design Methodology,\" in Advances in \nMarine Technology. Proceedings, Norwegian Institute of Technology, \nTrondheim, 1979. \nRaaheim, K. Opplevelse og erfaring, Sigma Forlag, Bergen, 1983. \nRubinstein, Moshe F. Tools for Thinking and Problem Solving, Prentice-Hall Inc., \nEnglewood Cliffs, New Jersey, 1986. \nShahin, M. M. A \"Application of a systematic design methodology: an \nengineering case study,\" Design Studies, October 1988, 203-207. \n \n \n \n \n \n \n \n \n \n \n \n \n\nReferences \n195 \nShoham, Yoav \"Temporal Logics and \nAl: Semantical and Ontological \nConsiderations,\" Artificial Intelligence 33, 1986, pp. 89-104. \nSimon, Herbert A. \"The Structure of Ill Structured Problems,\" Artificial Intelligence \n4, 1973, 181-201. \nSimon, Herbert A. The Science of the Artificial, The MIT Press, Cambridge, MA \n1981 (1988 ed.). \nSmith, Warren F. The Modeling and Exploration of Ship Systems in the Early \nStages of Decision-Based Design, Ph. D. Thesis, University of Houston, \n1992. \nSmithers, T.; Conkie, A.; Doheny, J.; Logan, B.; Millington, K.; and Tang, M. X. \n\"Design as intelligent behaviour: an Al research programme,\" Artificial \nIntelligence in Engineering, 1990, Vol. 5, No. 2, pp. 78-109. \nSowa, John F. Conceptual Structures: Information Processing in Mind and \nMachine, Addison-Wesley Publishing Company, Reading, Massachusetts, \n1984. \nSternberg, Robert J. Intelligence, Information Processing, and Analogical \nReasoning. The Componential Analysis of Human Abilities, Lawrence \nErlbaum Associates, New Jersey, 1977. \nSternberg, Robert J. Beyond IQ - \na triarchic theory of human intelligence, \nCambridge University Press, Cambridge, 1985a. \nSternberg, Robert J. \"General Intellectual Ability,\" Human Abilities: an \nInformation Processing Approach (ed.: R. J. Sternberg), W. H. Freeman \nand Company, New York, 1985b. \nSternberg, Robert J. \"Inside Intelligence,\" American Scientist, 1986, March-April, \npp. 137-143. \nTsichritzis, D. C. and Lochovsky, F. H. Data models, Prentice Hall Inc., New \nJersey, 1982. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\n196 \nReferences \nTomiyama, T. and ten Hagen, P. J. W. \"Representing knowledge in two distinct \ndescriptions: \nextensional vs. intensional,\" \nArtificial Intelligence in \nEngineering, 1990, Vol. 5, No. l, pp. 23-32. \nVendler, Zeno Linguistics in Philosophy, Cornell University Press, Ithaca, New \nYork, 1967. \nWesterberg, A.; Grossman, I.; Talukdar, S.; Fridriech, P.; Fenves, S.; and Maher, \nL. M. \"Application of Al in design research at Carnegie Mellon UniveiSity's \nEDRC,\" Artificial Intelligence in Engineering, 1990, Vol. 5, No. 2, pp. l l 0- \n124. \nWikstrøm, Kim Analys av projekteringen for ett offshore projekt, Ph. D. \ndissertation, Norwegian Institute of Technology, Trondheim, 1990. \nWillem, Raymond \"On Knowing Design,\" Design Studies, October 1988, 223-228. \nYoshikawa, Hiroyuki \"General design theory and \nits application \nto \ncategorization of ship design,\" International symposium on Advances in \nMarine Technology, June 7979, Trondheim, Norway, pp. 69-89. \nYoshikawa, Hiroyuki \"A theory of computer aided design,\" International \nConference on Engineering Design, 1980  \nYoshikawa, Hiroyuki \"Set-theoretical design theory - \n          design,\" unknown origin. \nuniversal theory of \nZeuthen, Steffen SEAMAID. A computational model of the design process in a \nconstraint-based logic programming environment. An example from the \noffshore domain, Ph.D. dissertation, Norwegian Institute of Technology, \nTrondheim, Norway, 1990. \nZeuthen, Steffen A note on the paper: \"Knowledge Engineering and CAD\" by \nH. Yoshikawa & T. Koyama. Term report for the course: Theory of Marine \nSystems Design, Norwegian Institute of Technology, Trondheim, Norway, \n1986. \n \n \n \n \n \n \n \n \n \n \n \n \n\nReferences \n197 \nZiman, John An introduction to science studies - the philosophical and aocial \naspects of science and technology, Cambridge University Press, \nCambridge, MA; 1984. \nAamodt, Agnar A Knowledge-Intensive Integrated Approach to Problem \nSolving and Sustained Learning, Ph. D. dissertation, NTH, 1991. \n \n \n\n198 \nAppendix \nAppendix: Example from Chapter 6 \nThe appendix contains a complete listing of the example started towards the \nend of Chapter 6. \n### The designer asks a question that is registered into short term memory: ### \n''What is weight of hull skin?\" \nWhat is weight of hull skin? \n[Operator] \n[Design memory] \n### The system commands itself to attempt a resolution of the concepts introduced in \nthe sentence: ### \nResolve concepts! \n[Design memory] \n### The system then cannot find any value of weight in short term memory. Here is \nassumed that the system interprets this as a question for value - not for other possible \nparts of the definition of the concept \"weight of hull skin\". Furthermore, it is assumed \nthat 'hull skin’ refers to the last referred 'hull skin’. namely that of the hull of the \nD-object: ### \n[Design memory] \nWeight of hull skin is unknown \n### Since the concept is unknown, the system constructs a command to itself aiming \nto find the missing information (define the unknown concept.:### \nFind weight of hull skin! \n{Design memory] \n### New internal command to detect a transaction that can make the system able to \nsolve the problem (find, or define, the concept): ### \nLocate method! \n{Design memory] \n### One relationship that may be used is found. Assume here that the system has used \nsome decision rules, for instance If ... then ...: ### \nWeight equals density times volume \n{LT Storage] \n \n\nAppendix \n199 \n### The relationship above is instantiated: ### \n{Design memory] \nWeight of hull skin equals density of hull skin times volume of hull skin \n### The system commands itself to attempt a resolution of the concepts introduced in \nthe sentence: ### \n{Design memory] \nResolve concepts! \n### The system finds that the concept has been defined earlier. ### \nHull skin has material A36 steel \n[Design memory] \n### The system finds necessary relationship through searching memory and interpreting \nrelationships found there: ###- \nA36 steel has density 8.0 tons/m3 \nDensity of hull skin is 8.0 tonslm3 \n{LT Storage] \n[Design memory] \n### The system could not find volume (concept introduced above) to be defined in \nrelation to this problem. It commands itself to find a means to do this: ### \n[Design memory] \n{Design memory] \n{Design memory] \nVolume is unknown \nFind volume of hull skin! \nLocate method! \n### A possible relationship is found and instantiated. ### \n[LT Storage] \n[Design memory] \nVolume equals surface area times thickness \nVolume of hull skin equals surface area of hull skin times thickness of hull skin \n### New concepts (in this case, parameters in a formula) are introduced with the chosen \nrelationship, and a new internal command is constructed: ### \n[Design memory] \nResolve concepts! \n### The system detects a definition of one of the concepts from earlier: ### \n[Design memory] \n[Design memory] \nHull skin has thickness 16 mm \nThickness of hull skin is 16 mm \n \n\n200 \nAppendix \n### Here is assumed that the system finds a rule that determines that dimensions need \nto be consistent. \nConvert dimension to m \n[Design memory] \n### \n### The system finds a conversion (mapping) in long term memory: ### \n[LT Storage] \n1 mm equals 0.001 m \n### And performs a transact10n to convert: ### \n[Design memory] \n[Design memory] \n16 mm equals 0.016 m \nThickness of hull skin is 0.016 m \n### The system finds no trace. of the remaining parameter: ### \n[Design memory] \nSurface area of hull skin is unknown \n### Searches and fails to find a useable relationship: ### \n[Design memory] \n[Design memory] \n[Design memory] \nFind surface area of hull skin! \nLocate method! \nNo method found! \n### The system is left blank - no useful relationship has been found in memory: ### \n[DPL System] \n[Operator] \n''No method found. Define method, give value or identify range?\" \n''Identify range\" \n### The system finds and instantiates the relationship describing range. 'Instantiation’ \nis performed by !!Sing the referential preposition relation of ### \n[LT Storage] \n[Design memory] \nRange is less than maximum and larger than minimum \nRange of weight is less than maximum of weight and larger than minimum of \nweight \nRange of weight of hull skin is less than maximum of weight of hull skin and \nlarger than minimum of weight of hull skin. \n[Design memory] \n### The system can not find the necessary concept in memory: ### \n \n\nAppendix \n201 \n[Design memory] \n[Design memory] \n[Design memory] \n[Design memory] \nResolve concepts! \nMaximum of weight of hull skin is unknown \nFind maximum of weight of hull skin! \nLocate method! \n### One useful relationship was found earlier in the process: ### \n[Design memory] \nWeight of hull skin equals volume of hull skin times density of hull skin \n[Design memory] \nMaximum of weight of hull skin equals maximum of volume of hull skin times \ndensity of hull skin \n[Design memory] \nResolve concepts! \n[Design memory] \n[Design memory] \nVolume of hull skin equals surface area of hull skin times thickness of hull skin \nMaximum of volume of hull skin equals maximum of surface area of hull skin \ntimes thickness of hull skin \n[Design memory] \nResolve concepts! \n### The value of 'thickness' is given earlier, but the system can not find the \nmaximum of surface area: ### \nMaximum of surface area is unknown \nFind maximum of surface area of hull skin! \nLocate method! \n[Design memory] \n[Design memory] \n[Design memory] \n### Here the system 'knows' that the maximum surface area is that which is enclosed \nin a box bounded in the three dimensions. Presumably, several other transactions are \nundertaken before this is deduced: ### \n[LT Storage] \nMaximum of surface area equals L times B times D \n[Design memory] \nResolve concepts! \n[Design memory] \n[Design memory] \nL is 120 m \nB is 20 m \n[Design memory} \nD is unknown \n \n\n202 \nAppendix \n[Design memory] \n[Design memory] \nFind D! \nLocate method! \n[LT Storage] \nD equals T plus F \n[Design memory] \nResolve concepts! \n[Design memory] \nT is 7 \nm \n[Design memory] \n[Design memory] \n[Design memory] \nF is unknown \nFind F! \nLocate method! \n### At this point the system has traversed through a series of relationships until it \nstopped upon finding no useful relationship: ### \nNo method found \n[Design memory] \n### The system resigns and resorts to the designer. Note that 'F' does not have to be \ndefined further - it is of no importance to the system what 'F' actually signifies, \nsince it is only used as a 'temporary’ concept in this case: ### \n[DPL System] \n[Operator] \n''What is F?\" \n\"4 m\" \n[Design memory] \nF is 4 \nm \n### The system instantiates the relationship it trued to resolve: ### \n[Design memory] \nD is 7 m plus 4 m \n[Design memory] \nD is 11 \nm \n### The system calculates some of the required information based on relationships found \nearlier: ### \nMaximum of surface area of hull skin equals 26400 m2 \nMaximum of volume of hull skin equals 422 m3 \nMaximum of weight of hull skin equals 3379 tons \n[Design memory] \n[Design memory] \n[Design memory] \n \n\nAppendix \n203 \n[Design memory] \n[Design memory] \nMinimum of weight of hull skin is unknown \nFind minimum of weight of hull skin! \n### The system tries to resolve the second concept in the relationship describing the \nrange of the weight: ### \n[Design memory] \nLocate method! \n[LT Storage] \nMinimum weight of hull skin equals minimum surface area of hull skin times \ndensity of hull skin \nResolve concepts! \nMinimum of surface area of hull skin is unknown \nFind minimum of surface area! \nLocate method! \n[Design memory] \n[Design memory] \n[Design memory] \n[Design memory] \n### The system 'knows' that the shape with least surface area with respect to volume \nis a sphere and uses this relation (in lack of better methods): ### \n[LT Storage] \nMinimum of surface area equals surface area of sphere \n### Retracting from long term memory necessary relationships (formulas). ### \nSurface area of sphere equals 4 times pi times radius2 \nVolume of sphere equals 1.33 times pi times radius3 \n[LT Storage] \n[LT Storage] \n### Deduced by some transactions and relationships not described here: ### \n[Design memory] \nVolume of sphere equals volume of displaced water \n### This is found earlier in the process: ### \nVolume of displaced water is 10416 m3 \n[Design memory] \n### Instantiating: ### \n[Design memoryJ \nVolume of sphere equals 10416 m3 \n \n\n204 \nAppendix \n### Assume now that the system chooses a new strategy - it plans how to attain the \nnecessary information: ### \n[Design memory] \nFind plan! \n### The plan might be constructed based one experiences in the process of finding the \nmaximum weight: ### \n[Design memory] \nThe plan is should find radius of sphere then should find surface area of sphere \nthen should find volume of skin of sphere then should find weight of skin of \nsphere \n### The first step of the plan is then initialized. The system will know the sequence \nfrom interpreting the then-relationship describing the plan: ### \n[Design memory] \nShould find radius of sphere \n### Satisfying the requirement established in the sentence above. A mobilization of an \nability: ### \n[Design memory] \nFind radius of sphere! \n### The system simply calculates relationships found earlier: ### \n10416 equals 1.33 times 3.14 times radius3 \n10416 equals 4.18 times radius3 of sphere \nRadius3 of sphere equals 10416 divided by 4.18 \nRadius of sphere equals 2494°333 \nRadius of sphere equals 13.56 \nRadius of sphere is 13.56 \n[Design memory] \n[Design memory] \n[Design memory] \n[Design memory] \n[Design memory] \n[Design memory] \n### The second step in the plan is initialized: ### \n[Design memory] \nShould find surface area of sphere \n### And mobilized: ### \n[Design memory] \nFind surface area of sphere! \nSurface area of sphere equals 4 times 3.14 times 13.562 \n[Design memory] \n \n\nAppendix \n205 \n[Design memory] \n{Design memory] \nSurface area of sphere equals 2309 m2 \nSurface area of sphere is 2309 m2 \n### The third step in the plan is initialized and mobilized: ### \n{Design memory] \n[Design memory] \nShould find volume of skin of sphere \nFind volume of skin of sphere! \n[Design memory] \n[Design memory] \nVolume of skin of sphere equals 2309 m2 times 0.016 m \nVolume of skin of sphere equals 37.0 m3 \n### The fourth and last step in the plan is initialized and mobilized: ### \n[Design memory] \n[Design memory] \nShould find weight of skin of sphere \nFind weight of skin of sphere! \n[Design memory] \nWeight of skin of sphere equals 296 tons \n### The plan is finished. Now remains resolution of the initial relationships: ### \n{Design memory] \nMinimum of weight of skin equals weight of skin of sphere \n### Instantiating the relationship: ### \n[Design memory] \nMinimum of weight of skin equals 296 tons \n### The system then instantiates and reports the 'range' relationship. The process is \nfinished - all relevant concepts are sufficiently defined for this task! ### \n[Design memory] \n[DPL System] \nRange of weight of skin is larger than 296 tons and less than 3379 tons \n\"Range of weight of skin is larger than 296 tons and less than 3379 tons\" \nJ",
    "pdf_filename": "The Framework of a Design Process Language.pdf"
}